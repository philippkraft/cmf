#pragma warning(push) 
#pragma warning (disable : 4244) 
#ifndef _CONSOLE 
/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.40
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGPYTHON
#define SWIG_PYTHON_NO_BUILD_NONE
#define SWIG_CASTRANK_MODE
#define SWIG_PYTHON_CAST_MODE


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



/* Python.h has to appear first */
#include <Python.h>

/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.
  
  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/* 
   Flags/methods for returning states.
   
   The SWIG conversion methods, as ConvertPtr, return and integer 
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).
   
   Use the following macros/flags to set or process the returning
   states.
   
   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }
    
   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {         
        if (<obj is ok>) {			       
          if (<need new object>) {		       
            *ptr = <ptr to new allocated object>; 
            return SWIG_NEWOBJ;		       
          } else {				       
            *ptr = <ptr to old object>;	       
            return SWIG_OLDOBJ;		       
          } 				       
        } else {				       
          return SWIG_BADOBJ;		       
        }					       
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call
 
      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0) 
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)  

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) { 
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) { 
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0; 
}
#else /* no cast-rank mode */
#  define SWIG_AddCast
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/* 
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCompare(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}


/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/* 
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/* 
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/* 
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;
  
  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }    
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}
  
/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start, 
                            swig_module_info *end, 
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      register size_t l = 0;
      register size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	register size_t i = (l + r) >> 1; 
	const char *iname = iter->types[i]->name;
	if (iname) {
	  register int compare = strcmp(name, iname);
	  if (compare == 0) {	    
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start, 
                     swig_module_info *end, 
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      register size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }
  
  /* neither found a match */
  return 0;
}

/* 
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  register const unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    register unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/* 
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  register unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    register char d = *(c++);
    register unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    else 
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    else 
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/* 
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1 
#define  SWIG_IOError        	   -2 
#define  SWIG_RuntimeError   	   -3 
#define  SWIG_IndexError     	   -4 
#define  SWIG_TypeError      	   -5 
#define  SWIG_DivisionByZero 	   -6 
#define  SWIG_OverflowError  	   -7 
#define  SWIG_SyntaxError    	   -8 
#define  SWIG_ValueError     	   -9 
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12 
#define  SWIG_NullReferenceError   -13



/* Compatibility macros for Python 3 */
#if PY_VERSION_HEX >= 0x03000000

#define PyClass_Check(obj) PyObject_IsInstance(obj, (PyObject *)&PyType_Type)
#define PyInt_Check(x) PyLong_Check(x)
#define PyInt_AsLong(x) PyLong_AsLong(x)
#define PyInt_FromLong(x) PyLong_FromLong(x)
#define PyString_Format(fmt, args)  PyUnicode_Format(fmt, args)

#endif

#ifndef Py_TYPE
#  define Py_TYPE(op) ((op)->ob_type)
#endif

/* SWIG APIs for compatibility of both Python 2 & 3 */

#if PY_VERSION_HEX >= 0x03000000
#  define SWIG_Python_str_FromFormat PyUnicode_FromFormat
#else
#  define SWIG_Python_str_FromFormat PyString_FromFormat
#endif


/* Warning: This function will allocate a new string in Python 3,
 * so please call SWIG_Python_str_DelForPy3(x) to free the space.
 */
SWIGINTERN char*
SWIG_Python_str_AsChar(PyObject *str)
{
#if PY_VERSION_HEX >= 0x03000000
  char *cstr;
  char *newstr;
  Py_ssize_t len;
  str = PyUnicode_AsUTF8String(str);
  PyBytes_AsStringAndSize(str, &cstr, &len);
  newstr = (char *) malloc(len+1);
  memcpy(newstr, cstr, len+1);
  Py_XDECREF(str);
  return newstr;
#else
  return PyString_AsString(str);
#endif
}

#if PY_VERSION_HEX >= 0x03000000
#  define SWIG_Python_str_DelForPy3(x) free( (void*) (x) )
#else
#  define SWIG_Python_str_DelForPy3(x) 
#endif


SWIGINTERN PyObject*
SWIG_Python_str_FromChar(const char *c)
{
#if PY_VERSION_HEX >= 0x03000000
  return PyUnicode_FromString(c); 
#else
  return PyString_FromString(c);
#endif
}

/* Add PyOS_snprintf for old Pythons */
#if PY_VERSION_HEX < 0x02020000
# if defined(_MSC_VER) || defined(__BORLANDC__) || defined(_WATCOM)
#  define PyOS_snprintf _snprintf
# else
#  define PyOS_snprintf snprintf
# endif
#endif

/* A crude PyString_FromFormat implementation for old Pythons */
#if PY_VERSION_HEX < 0x02020000

#ifndef SWIG_PYBUFFER_SIZE
# define SWIG_PYBUFFER_SIZE 1024
#endif

static PyObject *
PyString_FromFormat(const char *fmt, ...) {
  va_list ap;
  char buf[SWIG_PYBUFFER_SIZE * 2];
  int res;
  va_start(ap, fmt);
  res = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return (res < 0 || res >= (int)sizeof(buf)) ? 0 : PyString_FromString(buf);
}
#endif

/* Add PyObject_Del for old Pythons */
#if PY_VERSION_HEX < 0x01060000
# define PyObject_Del(op) PyMem_DEL((op))
#endif
#ifndef PyObject_DEL
# define PyObject_DEL PyObject_Del
#endif

/* A crude PyExc_StopIteration exception for old Pythons */
#if PY_VERSION_HEX < 0x02020000
# ifndef PyExc_StopIteration
#  define PyExc_StopIteration PyExc_RuntimeError
# endif
# ifndef PyObject_GenericGetAttr
#  define PyObject_GenericGetAttr 0
# endif
#endif

/* Py_NotImplemented is defined in 2.1 and up. */
#if PY_VERSION_HEX < 0x02010000
# ifndef Py_NotImplemented
#  define Py_NotImplemented PyExc_RuntimeError
# endif
#endif

/* A crude PyString_AsStringAndSize implementation for old Pythons */
#if PY_VERSION_HEX < 0x02010000
# ifndef PyString_AsStringAndSize
#  define PyString_AsStringAndSize(obj, s, len) {*s = PyString_AsString(obj); *len = *s ? strlen(*s) : 0;}
# endif
#endif

/* PySequence_Size for old Pythons */
#if PY_VERSION_HEX < 0x02000000
# ifndef PySequence_Size
#  define PySequence_Size PySequence_Length
# endif
#endif

/* PyBool_FromLong for old Pythons */
#if PY_VERSION_HEX < 0x02030000
static
PyObject *PyBool_FromLong(long ok)
{
  PyObject *result = ok ? Py_True : Py_False;
  Py_INCREF(result);
  return result;
}
#endif

/* Py_ssize_t for old Pythons */
/* This code is as recommended by: */
/* http://www.python.org/dev/peps/pep-0353/#conversion-guidelines */
#if PY_VERSION_HEX < 0x02050000 && !defined(PY_SSIZE_T_MIN)
typedef int Py_ssize_t;
# define PY_SSIZE_T_MAX INT_MAX
# define PY_SSIZE_T_MIN INT_MIN
#endif

/* -----------------------------------------------------------------------------
 * error manipulation
 * ----------------------------------------------------------------------------- */

SWIGRUNTIME PyObject*
SWIG_Python_ErrorType(int code) {
  PyObject* type = 0;
  switch(code) {
  case SWIG_MemoryError:
    type = PyExc_MemoryError;
    break;
  case SWIG_IOError:
    type = PyExc_IOError;
    break;
  case SWIG_RuntimeError:
    type = PyExc_RuntimeError;
    break;
  case SWIG_IndexError:
    type = PyExc_IndexError;
    break;
  case SWIG_TypeError:
    type = PyExc_TypeError;
    break;
  case SWIG_DivisionByZero:
    type = PyExc_ZeroDivisionError;
    break;
  case SWIG_OverflowError:
    type = PyExc_OverflowError;
    break;
  case SWIG_SyntaxError:
    type = PyExc_SyntaxError;
    break;
  case SWIG_ValueError:
    type = PyExc_ValueError;
    break;
  case SWIG_SystemError:
    type = PyExc_SystemError;
    break;
  case SWIG_AttributeError:
    type = PyExc_AttributeError;
    break;
  default:
    type = PyExc_RuntimeError;
  }
  return type;
}


SWIGRUNTIME void
SWIG_Python_AddErrorMsg(const char* mesg)
{
  PyObject *type = 0;
  PyObject *value = 0;
  PyObject *traceback = 0;

  if (PyErr_Occurred()) PyErr_Fetch(&type, &value, &traceback);
  if (value) {
    char *tmp;
    PyObject *old_str = PyObject_Str(value);
    PyErr_Clear();
    Py_XINCREF(type);

    PyErr_Format(type, "%s %s", tmp = SWIG_Python_str_AsChar(old_str), mesg);
    SWIG_Python_str_DelForPy3(tmp);
    Py_DECREF(old_str);
    Py_DECREF(value);
  } else {
    PyErr_SetString(PyExc_RuntimeError, mesg);
  }
}

#if defined(SWIG_PYTHON_NO_THREADS)
#  if defined(SWIG_PYTHON_THREADS)
#    undef SWIG_PYTHON_THREADS
#  endif
#endif
#if defined(SWIG_PYTHON_THREADS) /* Threading support is enabled */
#  if !defined(SWIG_PYTHON_USE_GIL) && !defined(SWIG_PYTHON_NO_USE_GIL)
#    if (PY_VERSION_HEX >= 0x02030000) /* For 2.3 or later, use the PyGILState calls */
#      define SWIG_PYTHON_USE_GIL
#    endif
#  endif
#  if defined(SWIG_PYTHON_USE_GIL) /* Use PyGILState threads calls */
#    ifndef SWIG_PYTHON_INITIALIZE_THREADS
#     define SWIG_PYTHON_INITIALIZE_THREADS  PyEval_InitThreads() 
#    endif
#    ifdef __cplusplus /* C++ code */
       class SWIG_Python_Thread_Block {
         bool status;
         PyGILState_STATE state;
       public:
         void end() { if (status) { PyGILState_Release(state); status = false;} }
         SWIG_Python_Thread_Block() : status(true), state(PyGILState_Ensure()) {}
         ~SWIG_Python_Thread_Block() { end(); }
       };
       class SWIG_Python_Thread_Allow {
         bool status;
         PyThreadState *save;
       public:
         void end() { if (status) { PyEval_RestoreThread(save); status = false; }}
         SWIG_Python_Thread_Allow() : status(true), save(PyEval_SaveThread()) {}
         ~SWIG_Python_Thread_Allow() { end(); }
       };
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK   SWIG_Python_Thread_Block _swig_thread_block
#      define SWIG_PYTHON_THREAD_END_BLOCK     _swig_thread_block.end()
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW   SWIG_Python_Thread_Allow _swig_thread_allow
#      define SWIG_PYTHON_THREAD_END_ALLOW     _swig_thread_allow.end()
#    else /* C code */
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK   PyGILState_STATE _swig_thread_block = PyGILState_Ensure()
#      define SWIG_PYTHON_THREAD_END_BLOCK     PyGILState_Release(_swig_thread_block)
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW   PyThreadState *_swig_thread_allow = PyEval_SaveThread()
#      define SWIG_PYTHON_THREAD_END_ALLOW     PyEval_RestoreThread(_swig_thread_allow)
#    endif
#  else /* Old thread way, not implemented, user must provide it */
#    if !defined(SWIG_PYTHON_INITIALIZE_THREADS)
#      define SWIG_PYTHON_INITIALIZE_THREADS
#    endif
#    if !defined(SWIG_PYTHON_THREAD_BEGIN_BLOCK)
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK
#    endif
#    if !defined(SWIG_PYTHON_THREAD_END_BLOCK)
#      define SWIG_PYTHON_THREAD_END_BLOCK
#    endif
#    if !defined(SWIG_PYTHON_THREAD_BEGIN_ALLOW)
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW
#    endif
#    if !defined(SWIG_PYTHON_THREAD_END_ALLOW)
#      define SWIG_PYTHON_THREAD_END_ALLOW
#    endif
#  endif
#else /* No thread support */
#  define SWIG_PYTHON_INITIALIZE_THREADS
#  define SWIG_PYTHON_THREAD_BEGIN_BLOCK
#  define SWIG_PYTHON_THREAD_END_BLOCK
#  define SWIG_PYTHON_THREAD_BEGIN_ALLOW
#  define SWIG_PYTHON_THREAD_END_ALLOW
#endif

/* -----------------------------------------------------------------------------
 * Python API portion that goes into the runtime
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* cc-mode */
#endif
#endif

/* -----------------------------------------------------------------------------
 * Constant declarations
 * ----------------------------------------------------------------------------- */

/* Constant Types */
#define SWIG_PY_POINTER 4
#define SWIG_PY_BINARY  5

/* Constant information structure */
typedef struct swig_const_info {
  int type;
  char *name;
  long lvalue;
  double dvalue;
  void   *pvalue;
  swig_type_info **ptype;
} swig_const_info;


/* -----------------------------------------------------------------------------
 * Wrapper of PyInstanceMethod_New() used in Python 3
 * It is exported to the generated module, used for -fastproxy
 * ----------------------------------------------------------------------------- */
SWIGRUNTIME PyObject* SWIG_PyInstanceMethod_New(PyObject *self, PyObject *func)
{
#if PY_VERSION_HEX >= 0x03000000
  return PyInstanceMethod_New(func);
#else
  return NULL;
#endif
}

#ifdef __cplusplus
#if 0
{ /* cc-mode */
#endif
}
#endif


/* -----------------------------------------------------------------------------
 * See the LICENSE file for information on copyright, usage and redistribution
 * of SWIG, and the README file for authors - http://www.swig.org/release.html.
 *
 * pyrun.swg
 *
 * This file contains the runtime support for Python modules
 * and includes code for managing global variables and pointer
 * type checking.
 *
 * ----------------------------------------------------------------------------- */

/* Common SWIG API */

/* for raw pointers */
#define SWIG_Python_ConvertPtr(obj, pptr, type, flags)  SWIG_Python_ConvertPtrAndOwn(obj, pptr, type, flags, 0)
#define SWIG_ConvertPtr(obj, pptr, type, flags)         SWIG_Python_ConvertPtr(obj, pptr, type, flags)
#define SWIG_ConvertPtrAndOwn(obj,pptr,type,flags,own)  SWIG_Python_ConvertPtrAndOwn(obj, pptr, type, flags, own)
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Python_NewPointerObj(ptr, type, flags)
#define SWIG_CheckImplicit(ty)                          SWIG_Python_CheckImplicit(ty) 
#define SWIG_AcquirePtr(ptr, src)                       SWIG_Python_AcquirePtr(ptr, src)
#define swig_owntype                                    int

/* for raw packed data */
#define SWIG_ConvertPacked(obj, ptr, sz, ty)            SWIG_Python_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewPackedObj(ptr, sz, type)                SWIG_Python_NewPackedObj(ptr, sz, type)

/* for class or struct pointers */
#define SWIG_ConvertInstance(obj, pptr, type, flags)    SWIG_ConvertPtr(obj, pptr, type, flags)
#define SWIG_NewInstanceObj(ptr, type, flags)           SWIG_NewPointerObj(ptr, type, flags)

/* for C or C++ function pointers */
#define SWIG_ConvertFunctionPtr(obj, pptr, type)        SWIG_Python_ConvertFunctionPtr(obj, pptr, type)
#define SWIG_NewFunctionPtrObj(ptr, type)               SWIG_Python_NewPointerObj(ptr, type, 0)

/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(obj, ptr, sz, ty)            SWIG_Python_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewMemberObj(ptr, sz, type)                SWIG_Python_NewPackedObj(ptr, sz, type)


/* Runtime API */

#define SWIG_GetModule(clientdata)                      SWIG_Python_GetModule()
#define SWIG_SetModule(clientdata, pointer)             SWIG_Python_SetModule(pointer)
#define SWIG_NewClientData(obj)                         SwigPyClientData_New(obj)

#define SWIG_SetErrorObj                                SWIG_Python_SetErrorObj                            
#define SWIG_SetErrorMsg                        	SWIG_Python_SetErrorMsg				   
#define SWIG_ErrorType(code)                    	SWIG_Python_ErrorType(code)                        
#define SWIG_Error(code, msg)            		SWIG_Python_SetErrorMsg(SWIG_ErrorType(code), msg) 
#define SWIG_fail                        		goto fail					   


/* Runtime API implementation */

/* Error manipulation */

SWIGINTERN void 
SWIG_Python_SetErrorObj(PyObject *errtype, PyObject *obj) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK; 
  PyErr_SetObject(errtype, obj);
  Py_DECREF(obj);
  SWIG_PYTHON_THREAD_END_BLOCK;
}

SWIGINTERN void 
SWIG_Python_SetErrorMsg(PyObject *errtype, const char *msg) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  PyErr_SetString(errtype, (char *) msg);
  SWIG_PYTHON_THREAD_END_BLOCK;
}

#define SWIG_Python_Raise(obj, type, desc)  SWIG_Python_SetErrorObj(SWIG_Python_ExceptionType(desc), obj)

/* Set a constant value */

SWIGINTERN void
SWIG_Python_SetConstant(PyObject *d, const char *name, PyObject *obj) {   
  PyDict_SetItemString(d, (char*) name, obj);
  Py_DECREF(obj);                            
}

/* Append a value to the result obj */

SWIGINTERN PyObject*
SWIG_Python_AppendOutput(PyObject* result, PyObject* obj) {
#if !defined(SWIG_PYTHON_OUTPUT_TUPLE)
  if (!result) {
    result = obj;
  } else if (result == Py_None) {
    Py_DECREF(result);
    result = obj;
  } else {
    if (!PyList_Check(result)) {
      PyObject *o2 = result;
      result = PyList_New(1);
      PyList_SetItem(result, 0, o2);
    }
    PyList_Append(result,obj);
    Py_DECREF(obj);
  }
  return result;
#else
  PyObject*   o2;
  PyObject*   o3;
  if (!result) {
    result = obj;
  } else if (result == Py_None) {
    Py_DECREF(result);
    result = obj;
  } else {
    if (!PyTuple_Check(result)) {
      o2 = result;
      result = PyTuple_New(1);
      PyTuple_SET_ITEM(result, 0, o2);
    }
    o3 = PyTuple_New(1);
    PyTuple_SET_ITEM(o3, 0, obj);
    o2 = result;
    result = PySequence_Concat(o2, o3);
    Py_DECREF(o2);
    Py_DECREF(o3);
  }
  return result;
#endif
}

/* Unpack the argument tuple */

SWIGINTERN int
SWIG_Python_UnpackTuple(PyObject *args, const char *name, Py_ssize_t min, Py_ssize_t max, PyObject **objs)
{
  if (!args) {
    if (!min && !max) {
      return 1;
    } else {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got none", 
		   name, (min == max ? "" : "at least "), (int)min);
      return 0;
    }
  }  
  if (!PyTuple_Check(args)) {
    PyErr_SetString(PyExc_SystemError, "UnpackTuple() argument list is not a tuple");
    return 0;
  } else {
    register Py_ssize_t l = PyTuple_GET_SIZE(args);
    if (l < min) {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got %d", 
		   name, (min == max ? "" : "at least "), (int)min, (int)l);
      return 0;
    } else if (l > max) {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got %d", 
		   name, (min == max ? "" : "at most "), (int)max, (int)l);
      return 0;
    } else {
      register int i;
      for (i = 0; i < l; ++i) {
	objs[i] = PyTuple_GET_ITEM(args, i);
      }
      for (; l < max; ++l) {
	objs[l] = 0;
      }
      return i + 1;
    }    
  }
}

/* A functor is a function object with one single object argument */
#if PY_VERSION_HEX >= 0x02020000
#define SWIG_Python_CallFunctor(functor, obj)	        PyObject_CallFunctionObjArgs(functor, obj, NULL);
#else
#define SWIG_Python_CallFunctor(functor, obj)	        PyObject_CallFunction(functor, "O", obj);
#endif

/*
  Helper for static pointer initialization for both C and C++ code, for example
  static PyObject *SWIG_STATIC_POINTER(MyVar) = NewSomething(...);
*/
#ifdef __cplusplus
#define SWIG_STATIC_POINTER(var)  var
#else
#define SWIG_STATIC_POINTER(var)  var = 0; if (!var) var
#endif

/* -----------------------------------------------------------------------------
 * Pointer declarations
 * ----------------------------------------------------------------------------- */

/* Flags for new pointer objects */
#define SWIG_POINTER_NOSHADOW       (SWIG_POINTER_OWN      << 1)
#define SWIG_POINTER_NEW            (SWIG_POINTER_NOSHADOW | SWIG_POINTER_OWN)

#define SWIG_POINTER_IMPLICIT_CONV  (SWIG_POINTER_DISOWN   << 1)

#ifdef __cplusplus
extern "C" {
#if 0
} /* cc-mode */
#endif
#endif

/*  How to access Py_None */
#if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#  ifndef SWIG_PYTHON_NO_BUILD_NONE
#    ifndef SWIG_PYTHON_BUILD_NONE
#      define SWIG_PYTHON_BUILD_NONE
#    endif
#  endif
#endif

#ifdef SWIG_PYTHON_BUILD_NONE
#  ifdef Py_None
#   undef Py_None
#   define Py_None SWIG_Py_None()
#  endif
SWIGRUNTIMEINLINE PyObject * 
_SWIG_Py_None(void)
{
  PyObject *none = Py_BuildValue((char*)"");
  Py_DECREF(none);
  return none;
}
SWIGRUNTIME PyObject * 
SWIG_Py_None(void)
{
  static PyObject *SWIG_STATIC_POINTER(none) = _SWIG_Py_None();
  return none;
}
#endif

/* The python void return value */

SWIGRUNTIMEINLINE PyObject * 
SWIG_Py_Void(void)
{
  PyObject *none = Py_None;
  Py_INCREF(none);
  return none;
}

/* SwigPyClientData */

typedef struct {
  PyObject *klass;
  PyObject *newraw;
  PyObject *newargs;
  PyObject *destroy;
  int delargs;
  int implicitconv;
} SwigPyClientData;

SWIGRUNTIMEINLINE int 
SWIG_Python_CheckImplicit(swig_type_info *ty)
{
  SwigPyClientData *data = (SwigPyClientData *)ty->clientdata;
  return data ? data->implicitconv : 0;
}

SWIGRUNTIMEINLINE PyObject *
SWIG_Python_ExceptionType(swig_type_info *desc) {
  SwigPyClientData *data = desc ? (SwigPyClientData *) desc->clientdata : 0;
  PyObject *klass = data ? data->klass : 0;
  return (klass ? klass : PyExc_RuntimeError);
}


SWIGRUNTIME SwigPyClientData * 
SwigPyClientData_New(PyObject* obj)
{
  if (!obj) {
    return 0;
  } else {
    SwigPyClientData *data = (SwigPyClientData *)malloc(sizeof(SwigPyClientData));
    /* the klass element */
    data->klass = obj;
    Py_INCREF(data->klass);
    /* the newraw method and newargs arguments used to create a new raw instance */
    if (PyClass_Check(obj)) {
      data->newraw = 0;
      data->newargs = obj;
      Py_INCREF(obj);
    } else {
#if (PY_VERSION_HEX < 0x02020000)
      data->newraw = 0;
#else
      data->newraw = PyObject_GetAttrString(data->klass, (char *)"__new__");
#endif
      if (data->newraw) {
	Py_INCREF(data->newraw);
	data->newargs = PyTuple_New(1);
	PyTuple_SetItem(data->newargs, 0, obj);
      } else {
	data->newargs = obj;
      }
      Py_INCREF(data->newargs);
    }
    /* the destroy method, aka as the C++ delete method */
    data->destroy = PyObject_GetAttrString(data->klass, (char *)"__swig_destroy__");
    if (PyErr_Occurred()) {
      PyErr_Clear();
      data->destroy = 0;
    }
    if (data->destroy) {
      int flags;
      Py_INCREF(data->destroy);
      flags = PyCFunction_GET_FLAGS(data->destroy);
#ifdef METH_O
      data->delargs = !(flags & (METH_O));
#else
      data->delargs = 0;
#endif
    } else {
      data->delargs = 0;
    }
    data->implicitconv = 0;
    return data;
  }
}

SWIGRUNTIME void 
SwigPyClientData_Del(SwigPyClientData* data)
{
  Py_XDECREF(data->newraw);
  Py_XDECREF(data->newargs);
  Py_XDECREF(data->destroy);
}

/* =============== SwigPyObject =====================*/

typedef struct {
  PyObject_HEAD
  void *ptr;
  swig_type_info *ty;
  int own;
  PyObject *next;
} SwigPyObject;

SWIGRUNTIME PyObject *
SwigPyObject_long(SwigPyObject *v)
{
  return PyLong_FromVoidPtr(v->ptr);
}

SWIGRUNTIME PyObject *
SwigPyObject_format(const char* fmt, SwigPyObject *v)
{
  PyObject *res = NULL;
  PyObject *args = PyTuple_New(1);
  if (args) {
    if (PyTuple_SetItem(args, 0, SwigPyObject_long(v)) == 0) {
      PyObject *ofmt = SWIG_Python_str_FromChar(fmt);
      if (ofmt) {
#if PY_VERSION_HEX >= 0x03000000
	res = PyUnicode_Format(ofmt,args);
#else
	res = PyString_Format(ofmt,args);
#endif
	Py_DECREF(ofmt);
      }
      Py_DECREF(args);
    }
  }
  return res;
}

SWIGRUNTIME PyObject *
SwigPyObject_oct(SwigPyObject *v)
{
  return SwigPyObject_format("%o",v);
}

SWIGRUNTIME PyObject *
SwigPyObject_hex(SwigPyObject *v)
{
  return SwigPyObject_format("%x",v);
}

SWIGRUNTIME PyObject *
#ifdef METH_NOARGS
SwigPyObject_repr(SwigPyObject *v)
#else
SwigPyObject_repr(SwigPyObject *v, PyObject *args)
#endif
{
  const char *name = SWIG_TypePrettyName(v->ty);
  PyObject *repr = SWIG_Python_str_FromFormat("<Swig Object of type '%s' at %p>", name, v);
  if (v->next) {
#ifdef METH_NOARGS
    PyObject *nrep = SwigPyObject_repr((SwigPyObject *)v->next);
#else
    PyObject *nrep = SwigPyObject_repr((SwigPyObject *)v->next, args);
#endif
#if PY_VERSION_HEX >= 0x03000000
    PyObject *joined = PyUnicode_Concat(repr, nrep);
    Py_DecRef(repr);
    Py_DecRef(nrep);
    repr = joined;
#else
    PyString_ConcatAndDel(&repr,nrep);
#endif
  }
  return repr;  
}

SWIGRUNTIME int
SwigPyObject_print(SwigPyObject *v, FILE *fp, int SWIGUNUSEDPARM(flags))
{
  char *str;
#ifdef METH_NOARGS
  PyObject *repr = SwigPyObject_repr(v);
#else
  PyObject *repr = SwigPyObject_repr(v, NULL);
#endif
  if (repr) {
    str = SWIG_Python_str_AsChar(repr); 
    fputs(str, fp);
    SWIG_Python_str_DelForPy3(str);
    Py_DECREF(repr);
    return 0; 
  } else {
    return 1; 
  }
}

SWIGRUNTIME PyObject *
SwigPyObject_str(SwigPyObject *v)
{
  char result[SWIG_BUFFER_SIZE];
  return SWIG_PackVoidPtr(result, v->ptr, v->ty->name, sizeof(result)) ?
    SWIG_Python_str_FromChar(result) : 0;
}

SWIGRUNTIME int
SwigPyObject_compare(SwigPyObject *v, SwigPyObject *w)
{
  void *i = v->ptr;
  void *j = w->ptr;
  return (i < j) ? -1 : ((i > j) ? 1 : 0);
}

/* Added for Python 3.x, would it also be useful for Python 2.x? */
SWIGRUNTIME PyObject*
SwigPyObject_richcompare(SwigPyObject *v, SwigPyObject *w, int op)
{
  PyObject* res;
  if( op != Py_EQ && op != Py_NE ) {
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
  }
  if( (SwigPyObject_compare(v, w)==0) == (op == Py_EQ) )
    res = Py_True;
  else
    res = Py_False;
  Py_INCREF(res);
  return res;  
}


SWIGRUNTIME PyTypeObject* _PySwigObject_type(void);

SWIGRUNTIME PyTypeObject*
SwigPyObject_type(void) {
  static PyTypeObject *SWIG_STATIC_POINTER(type) = _PySwigObject_type();
  return type;
}

SWIGRUNTIMEINLINE int
SwigPyObject_Check(PyObject *op) {
  return (Py_TYPE(op) == SwigPyObject_type())
    || (strcmp(Py_TYPE(op)->tp_name,"SwigPyObject") == 0);
}

SWIGRUNTIME PyObject *
SwigPyObject_New(void *ptr, swig_type_info *ty, int own);

SWIGRUNTIME void
SwigPyObject_dealloc(PyObject *v)
{
  SwigPyObject *sobj = (SwigPyObject *) v;
  PyObject *next = sobj->next;
  if (sobj->own == SWIG_POINTER_OWN) {
    swig_type_info *ty = sobj->ty;
    SwigPyClientData *data = ty ? (SwigPyClientData *) ty->clientdata : 0;
    PyObject *destroy = data ? data->destroy : 0;
    if (destroy) {
      /* destroy is always a VARARGS method */
      PyObject *res;
      if (data->delargs) {
	/* we need to create a temporary object to carry the destroy operation */
	PyObject *tmp = SwigPyObject_New(sobj->ptr, ty, 0);
	res = SWIG_Python_CallFunctor(destroy, tmp);
	Py_DECREF(tmp);
      } else {
	PyCFunction meth = PyCFunction_GET_FUNCTION(destroy);
	PyObject *mself = PyCFunction_GET_SELF(destroy);
	res = ((*meth)(mself, v));
      }
      Py_XDECREF(res);
    } 
#if !defined(SWIG_PYTHON_SILENT_MEMLEAK)
    else {
      const char *name = SWIG_TypePrettyName(ty);
      printf("swig/python detected a memory leak of type '%s', no destructor found.\n", (name ? name : "unknown"));
    }
#endif
  } 
  Py_XDECREF(next);
  PyObject_DEL(v);
}

SWIGRUNTIME PyObject* 
SwigPyObject_append(PyObject* v, PyObject* next)
{
  SwigPyObject *sobj = (SwigPyObject *) v;
#ifndef METH_O
  PyObject *tmp = 0;
  if (!PyArg_ParseTuple(next,(char *)"O:append", &tmp)) return NULL;
  next = tmp;
#endif
  if (!SwigPyObject_Check(next)) {
    return NULL;
  }
  sobj->next = next;
  Py_INCREF(next);
  return SWIG_Py_Void();
}

SWIGRUNTIME PyObject* 
#ifdef METH_NOARGS
SwigPyObject_next(PyObject* v)
#else
SwigPyObject_next(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
#endif
{
  SwigPyObject *sobj = (SwigPyObject *) v;
  if (sobj->next) {    
    Py_INCREF(sobj->next);
    return sobj->next;
  } else {
    return SWIG_Py_Void();
  }
}

SWIGINTERN PyObject*
#ifdef METH_NOARGS
SwigPyObject_disown(PyObject *v)
#else
SwigPyObject_disown(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
#endif
{
  SwigPyObject *sobj = (SwigPyObject *)v;
  sobj->own = 0;
  return SWIG_Py_Void();
}

SWIGINTERN PyObject*
#ifdef METH_NOARGS
SwigPyObject_acquire(PyObject *v)
#else
SwigPyObject_acquire(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
#endif
{
  SwigPyObject *sobj = (SwigPyObject *)v;
  sobj->own = SWIG_POINTER_OWN;
  return SWIG_Py_Void();
}

SWIGINTERN PyObject*
SwigPyObject_own(PyObject *v, PyObject *args)
{
  PyObject *val = 0;
#if (PY_VERSION_HEX < 0x02020000)
  if (!PyArg_ParseTuple(args,(char *)"|O:own",&val))
#else
  if (!PyArg_UnpackTuple(args, (char *)"own", 0, 1, &val)) 
#endif
    {
      return NULL;
    } 
  else
    {
      SwigPyObject *sobj = (SwigPyObject *)v;
      PyObject *obj = PyBool_FromLong(sobj->own);
      if (val) {
#ifdef METH_NOARGS
	if (PyObject_IsTrue(val)) {
	  SwigPyObject_acquire(v);
	} else {
	  SwigPyObject_disown(v);
	}
#else
	if (PyObject_IsTrue(val)) {
	  SwigPyObject_acquire(v,args);
	} else {
	  SwigPyObject_disown(v,args);
	}
#endif
      } 
      return obj;
    }
}

#ifdef METH_O
static PyMethodDef
swigobject_methods[] = {
  {(char *)"disown",  (PyCFunction)SwigPyObject_disown,  METH_NOARGS,  (char *)"releases ownership of the pointer"},
  {(char *)"acquire", (PyCFunction)SwigPyObject_acquire, METH_NOARGS,  (char *)"aquires ownership of the pointer"},
  {(char *)"own",     (PyCFunction)SwigPyObject_own,     METH_VARARGS, (char *)"returns/sets ownership of the pointer"},
  {(char *)"append",  (PyCFunction)SwigPyObject_append,  METH_O,       (char *)"appends another 'this' object"},
  {(char *)"next",    (PyCFunction)SwigPyObject_next,    METH_NOARGS,  (char *)"returns the next 'this' object"},
  {(char *)"__repr__",(PyCFunction)SwigPyObject_repr,    METH_NOARGS,  (char *)"returns object representation"},
  {0, 0, 0, 0}  
};
#else
static PyMethodDef
swigobject_methods[] = {
  {(char *)"disown",  (PyCFunction)SwigPyObject_disown,  METH_VARARGS,  (char *)"releases ownership of the pointer"},
  {(char *)"acquire", (PyCFunction)SwigPyObject_acquire, METH_VARARGS,  (char *)"aquires ownership of the pointer"},
  {(char *)"own",     (PyCFunction)SwigPyObject_own,     METH_VARARGS,  (char *)"returns/sets ownership of the pointer"},
  {(char *)"append",  (PyCFunction)SwigPyObject_append,  METH_VARARGS,  (char *)"appends another 'this' object"},
  {(char *)"next",    (PyCFunction)SwigPyObject_next,    METH_VARARGS,  (char *)"returns the next 'this' object"},
  {(char *)"__repr__",(PyCFunction)SwigPyObject_repr,   METH_VARARGS,  (char *)"returns object representation"},
  {0, 0, 0, 0}  
};
#endif

#if PY_VERSION_HEX < 0x02020000
SWIGINTERN PyObject *
SwigPyObject_getattr(SwigPyObject *sobj,char *name)
{
  return Py_FindMethod(swigobject_methods, (PyObject *)sobj, name);
}
#endif

SWIGRUNTIME PyTypeObject*
_PySwigObject_type(void) {
  static char swigobject_doc[] = "Swig object carries a C/C++ instance pointer";
  
  static PyNumberMethods SwigPyObject_as_number = {
    (binaryfunc)0, /*nb_add*/
    (binaryfunc)0, /*nb_subtract*/
    (binaryfunc)0, /*nb_multiply*/
    /* nb_divide removed in Python 3 */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc)0, /*nb_divide*/
#endif
    (binaryfunc)0, /*nb_remainder*/
    (binaryfunc)0, /*nb_divmod*/
    (ternaryfunc)0,/*nb_power*/
    (unaryfunc)0,  /*nb_negative*/
    (unaryfunc)0,  /*nb_positive*/
    (unaryfunc)0,  /*nb_absolute*/
    (inquiry)0,    /*nb_nonzero*/
    0,		   /*nb_invert*/
    0,		   /*nb_lshift*/
    0,		   /*nb_rshift*/
    0,		   /*nb_and*/
    0,		   /*nb_xor*/
    0,		   /*nb_or*/
#if PY_VERSION_HEX < 0x03000000
    0,   /*nb_coerce*/
#endif
    (unaryfunc)SwigPyObject_long, /*nb_int*/
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc)SwigPyObject_long, /*nb_long*/
#else
    0, /*nb_reserved*/
#endif
    (unaryfunc)0,                 /*nb_float*/
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc)SwigPyObject_oct,  /*nb_oct*/
    (unaryfunc)SwigPyObject_hex,  /*nb_hex*/
#endif
#if PY_VERSION_HEX >= 0x03000000 /* 3.0 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_index, nb_inplace_divide removed */
#elif PY_VERSION_HEX >= 0x02050000 /* 2.5.0 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_index */
#elif PY_VERSION_HEX >= 0x02020000 /* 2.2.0 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_inplace_true_divide */
#elif PY_VERSION_HEX >= 0x02000000 /* 2.0.0 */
    0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_inplace_or */
#endif
  };

  static PyTypeObject swigpyobject_type;  
  static int type_init = 0;
  if (!type_init) {
    const PyTypeObject tmp
      = {
	/* PyObject header changed in Python 3 */
#if PY_VERSION_HEX >= 0x03000000
	PyVarObject_HEAD_INIT(&PyType_Type, 0)
#else    
	PyObject_HEAD_INIT(NULL)
	0,				    /* ob_size */
#endif
	(char *)"SwigPyObject",		    /* tp_name */
	sizeof(SwigPyObject),		    /* tp_basicsize */
	0,			            /* tp_itemsize */
	(destructor)SwigPyObject_dealloc,   /* tp_dealloc */
	(printfunc)SwigPyObject_print,	    /* tp_print */
#if PY_VERSION_HEX < 0x02020000
	(getattrfunc)SwigPyObject_getattr,  /* tp_getattr */ 
#else
	(getattrfunc)0,			    /* tp_getattr */ 
#endif
	(setattrfunc)0,			    /* tp_setattr */ 
#if PY_VERSION_HEX >= 0x03000000
    0, /* tp_reserved in 3.0.1, tp_compare in 3.0.0 but not used */
#else
	(cmpfunc)SwigPyObject_compare,	    /* tp_compare */
#endif
	(reprfunc)SwigPyObject_repr,	    /* tp_repr */    
	&SwigPyObject_as_number,	    /* tp_as_number */
	0,				    /* tp_as_sequence */
	0,				    /* tp_as_mapping */
	(hashfunc)0,			    /* tp_hash */
	(ternaryfunc)0,			    /* tp_call */
	(reprfunc)SwigPyObject_str,	    /* tp_str */
	PyObject_GenericGetAttr,            /* tp_getattro */
	0,				    /* tp_setattro */
	0,		                    /* tp_as_buffer */
	Py_TPFLAGS_DEFAULT,	            /* tp_flags */
	swigobject_doc, 	            /* tp_doc */        
	0,                                  /* tp_traverse */
	0,                                  /* tp_clear */
	(richcmpfunc)SwigPyObject_richcompare,           /* tp_richcompare */
	0,                                  /* tp_weaklistoffset */
#if PY_VERSION_HEX >= 0x02020000
	0,                                  /* tp_iter */
	0,                                  /* tp_iternext */
	swigobject_methods,		    /* tp_methods */ 
	0,			            /* tp_members */
	0,				    /* tp_getset */	    	
	0,			            /* tp_base */	        
	0,				    /* tp_dict */	    	
	0,				    /* tp_descr_get */  	
	0,				    /* tp_descr_set */  	
	0,				    /* tp_dictoffset */ 	
	0,				    /* tp_init */	    	
	0,				    /* tp_alloc */	    	
	0,			            /* tp_new */	    	
	0,	                            /* tp_free */	   
	0,                                  /* tp_is_gc */  
	0,				    /* tp_bases */   
	0,				    /* tp_mro */
	0,				    /* tp_cache */   
	0,				    /* tp_subclasses */
	0,				    /* tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
	0,                                  /* tp_del */
#endif
#ifdef COUNT_ALLOCS
	0,0,0,0                             /* tp_alloc -> tp_next */
#endif
      };
    swigpyobject_type = tmp;
    /* for Python 3 we already assigned ob_type in PyVarObject_HEAD_INIT() */
#if PY_VERSION_HEX < 0x03000000
    swigpyobject_type.ob_type = &PyType_Type;
#endif
    type_init = 1;
  }
  return &swigpyobject_type;
}

SWIGRUNTIME PyObject *
SwigPyObject_New(void *ptr, swig_type_info *ty, int own)
{
  SwigPyObject *sobj = PyObject_NEW(SwigPyObject, SwigPyObject_type());
  if (sobj) {
    sobj->ptr  = ptr;
    sobj->ty   = ty;
    sobj->own  = own;
    sobj->next = 0;
  }
  return (PyObject *)sobj;
}

/* -----------------------------------------------------------------------------
 * Implements a simple Swig Packed type, and use it instead of string
 * ----------------------------------------------------------------------------- */

typedef struct {
  PyObject_HEAD
  void *pack;
  swig_type_info *ty;
  size_t size;
} SwigPyPacked;

SWIGRUNTIME int
SwigPyPacked_print(SwigPyPacked *v, FILE *fp, int SWIGUNUSEDPARM(flags))
{
  char result[SWIG_BUFFER_SIZE];
  fputs("<Swig Packed ", fp); 
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))) {
    fputs("at ", fp); 
    fputs(result, fp); 
  }
  fputs(v->ty->name,fp); 
  fputs(">", fp);
  return 0; 
}
  
SWIGRUNTIME PyObject *
SwigPyPacked_repr(SwigPyPacked *v)
{
  char result[SWIG_BUFFER_SIZE];
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))) {
    return SWIG_Python_str_FromFormat("<Swig Packed at %s%s>", result, v->ty->name);
  } else {
    return SWIG_Python_str_FromFormat("<Swig Packed %s>", v->ty->name);
  }  
}

SWIGRUNTIME PyObject *
SwigPyPacked_str(SwigPyPacked *v)
{
  char result[SWIG_BUFFER_SIZE];
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))){
    return SWIG_Python_str_FromFormat("%s%s", result, v->ty->name);
  } else {
    return SWIG_Python_str_FromChar(v->ty->name);
  }  
}

SWIGRUNTIME int
SwigPyPacked_compare(SwigPyPacked *v, SwigPyPacked *w)
{
  size_t i = v->size;
  size_t j = w->size;
  int s = (i < j) ? -1 : ((i > j) ? 1 : 0);
  return s ? s : strncmp((char *)v->pack, (char *)w->pack, 2*v->size);
}

SWIGRUNTIME PyTypeObject* _PySwigPacked_type(void);

SWIGRUNTIME PyTypeObject*
SwigPyPacked_type(void) {
  static PyTypeObject *SWIG_STATIC_POINTER(type) = _PySwigPacked_type();
  return type;
}

SWIGRUNTIMEINLINE int
SwigPyPacked_Check(PyObject *op) {
  return ((op)->ob_type == _PySwigPacked_type()) 
    || (strcmp((op)->ob_type->tp_name,"SwigPyPacked") == 0);
}

SWIGRUNTIME void
SwigPyPacked_dealloc(PyObject *v)
{
  if (SwigPyPacked_Check(v)) {
    SwigPyPacked *sobj = (SwigPyPacked *) v;
    free(sobj->pack);
  }
  PyObject_DEL(v);
}

SWIGRUNTIME PyTypeObject*
_PySwigPacked_type(void) {
  static char swigpacked_doc[] = "Swig object carries a C/C++ instance pointer";
  static PyTypeObject swigpypacked_type;
  static int type_init = 0;  
  if (!type_init) {
    const PyTypeObject tmp
      = {
    /* PyObject header changed in Python 3 */
#if PY_VERSION_HEX>=0x03000000
    PyVarObject_HEAD_INIT(&PyType_Type, 0)
#else
	PyObject_HEAD_INIT(NULL)
    0,				    /* ob_size */	
#endif
	(char *)"SwigPyPacked",		    /* tp_name */	
	sizeof(SwigPyPacked),		    /* tp_basicsize */	
	0,				    /* tp_itemsize */	
	(destructor)SwigPyPacked_dealloc,   /* tp_dealloc */	
	(printfunc)SwigPyPacked_print,	    /* tp_print */   	
	(getattrfunc)0,			    /* tp_getattr */ 	
	(setattrfunc)0,			    /* tp_setattr */ 	
#if PY_VERSION_HEX>=0x03000000
    0, /* tp_reserved in 3.0.1 */
#else
    (cmpfunc)SwigPyPacked_compare,	    /* tp_compare */
#endif
	(reprfunc)SwigPyPacked_repr,	    /* tp_repr */
	0,	                            /* tp_as_number */
	0,				    /* tp_as_sequence */
	0,				    /* tp_as_mapping */
	(hashfunc)0,			    /* tp_hash */
	(ternaryfunc)0,			    /* tp_call */
	(reprfunc)SwigPyPacked_str,	    /* tp_str */
	PyObject_GenericGetAttr,            /* tp_getattro */
	0,				    /* tp_setattro */
	0,		                    /* tp_as_buffer */
	Py_TPFLAGS_DEFAULT,	            /* tp_flags */
	swigpacked_doc, 	            /* tp_doc */
	0,                                  /* tp_traverse */
	0,                                  /* tp_clear */
	0,                                  /* tp_richcompare */
	0,                                  /* tp_weaklistoffset */
#if PY_VERSION_HEX >= 0x02020000
	0,                                  /* tp_iter */
	0,                                  /* tp_iternext */
	0,		                    /* tp_methods */ 
	0,			            /* tp_members */
	0,				    /* tp_getset */	    	
	0,			            /* tp_base */	        
	0,				    /* tp_dict */	    	
	0,				    /* tp_descr_get */  	
	0,				    /* tp_descr_set */  	
	0,				    /* tp_dictoffset */ 	
	0,				    /* tp_init */	    	
	0,				    /* tp_alloc */	    	
	0,			            /* tp_new */	    	
	0, 	                            /* tp_free */	   
        0,                                  /* tp_is_gc */  
	0,				    /* tp_bases */   
	0,				    /* tp_mro */
	0,				    /* tp_cache */   
 	0,				    /* tp_subclasses */
	0,				    /* tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
	0,                                  /* tp_del */
#endif
#ifdef COUNT_ALLOCS
	0,0,0,0                             /* tp_alloc -> tp_next */
#endif
      };
    swigpypacked_type = tmp;
    /* for Python 3 the ob_type already assigned in PyVarObject_HEAD_INIT() */
#if PY_VERSION_HEX < 0x03000000
    swigpypacked_type.ob_type = &PyType_Type;
#endif
    type_init = 1;
  }
  return &swigpypacked_type;
}

SWIGRUNTIME PyObject *
SwigPyPacked_New(void *ptr, size_t size, swig_type_info *ty)
{
  SwigPyPacked *sobj = PyObject_NEW(SwigPyPacked, SwigPyPacked_type());
  if (sobj) {
    void *pack = malloc(size);
    if (pack) {
      memcpy(pack, ptr, size);
      sobj->pack = pack;
      sobj->ty   = ty;
      sobj->size = size;
    } else {
      PyObject_DEL((PyObject *) sobj);
      sobj = 0;
    }
  }
  return (PyObject *) sobj;
}

SWIGRUNTIME swig_type_info *
SwigPyPacked_UnpackData(PyObject *obj, void *ptr, size_t size)
{
  if (SwigPyPacked_Check(obj)) {
    SwigPyPacked *sobj = (SwigPyPacked *)obj;
    if (sobj->size != size) return 0;
    memcpy(ptr, sobj->pack, size);
    return sobj->ty;
  } else {
    return 0;
  }
}

/* -----------------------------------------------------------------------------
 * pointers/data manipulation
 * ----------------------------------------------------------------------------- */

SWIGRUNTIMEINLINE PyObject *
_SWIG_This(void)
{
    return SWIG_Python_str_FromChar("this");
}

SWIGRUNTIME PyObject *
SWIG_This(void)
{
  static PyObject *SWIG_STATIC_POINTER(swig_this) = _SWIG_This();
  return swig_this;
}

/* #define SWIG_PYTHON_SLOW_GETSET_THIS */

/* TODO: I don't know how to implement the fast getset in Python 3 right now */
#if PY_VERSION_HEX>=0x03000000
#define SWIG_PYTHON_SLOW_GETSET_THIS 
#endif

SWIGRUNTIME SwigPyObject *
SWIG_Python_GetSwigThis(PyObject *pyobj) 
{
  if (SwigPyObject_Check(pyobj)) {
    return (SwigPyObject *) pyobj;
  } else {
    PyObject *obj = 0;
#if (!defined(SWIG_PYTHON_SLOW_GETSET_THIS) && (PY_VERSION_HEX >= 0x02030000))
    if (PyInstance_Check(pyobj)) {
      obj = _PyInstance_Lookup(pyobj, SWIG_This());      
    } else {
      PyObject **dictptr = _PyObject_GetDictPtr(pyobj);
      if (dictptr != NULL) {
	PyObject *dict = *dictptr;
	obj = dict ? PyDict_GetItem(dict, SWIG_This()) : 0;
      } else {
#ifdef PyWeakref_CheckProxy
	if (PyWeakref_CheckProxy(pyobj)) {
	  PyObject *wobj = PyWeakref_GET_OBJECT(pyobj);
	  return wobj ? SWIG_Python_GetSwigThis(wobj) : 0;
	}
#endif
	obj = PyObject_GetAttr(pyobj,SWIG_This());
	if (obj) {
	  Py_DECREF(obj);
	} else {
	  if (PyErr_Occurred()) PyErr_Clear();
	  return 0;
	}
      }
    }
#else
    obj = PyObject_GetAttr(pyobj,SWIG_This());
    if (obj) {
      Py_DECREF(obj);
    } else {
      if (PyErr_Occurred()) PyErr_Clear();
      return 0;
    }
#endif
    if (obj && !SwigPyObject_Check(obj)) {
      /* a PyObject is called 'this', try to get the 'real this'
	 SwigPyObject from it */ 
      return SWIG_Python_GetSwigThis(obj);
    }
    return (SwigPyObject *)obj;
  }
}

/* Acquire a pointer value */

SWIGRUNTIME int
SWIG_Python_AcquirePtr(PyObject *obj, int own) {
  if (own == SWIG_POINTER_OWN) {
    SwigPyObject *sobj = SWIG_Python_GetSwigThis(obj);
    if (sobj) {
      int oldown = sobj->own;
      sobj->own = own;
      return oldown;
    }
  }
  return 0;
}

/* Convert a pointer value */

SWIGRUNTIME int
SWIG_Python_ConvertPtrAndOwn(PyObject *obj, void **ptr, swig_type_info *ty, int flags, int *own) {
  if (!obj) return SWIG_ERROR;
  if (obj == Py_None) {
    if (ptr) *ptr = 0;
    return SWIG_OK;
  } else {
    SwigPyObject *sobj = SWIG_Python_GetSwigThis(obj);
    if (own)
      *own = 0;
    while (sobj) {
      void *vptr = sobj->ptr;
      if (ty) {
	swig_type_info *to = sobj->ty;
	if (to == ty) {
	  /* no type cast needed */
	  if (ptr) *ptr = vptr;
	  break;
	} else {
	  swig_cast_info *tc = SWIG_TypeCheck(to->name,ty);
	  if (!tc) {
	    sobj = (SwigPyObject *)sobj->next;
	  } else {
	    if (ptr) {
              int newmemory = 0;
              *ptr = SWIG_TypeCast(tc,vptr,&newmemory);
              if (newmemory == SWIG_CAST_NEW_MEMORY) {
                assert(own);
                if (own)
                  *own = *own | SWIG_CAST_NEW_MEMORY;
              }
            }
	    break;
	  }
	}
      } else {
	if (ptr) *ptr = vptr;
	break;
      }
    }
    if (sobj) {
      if (own)
        *own = *own | sobj->own;
      if (flags & SWIG_POINTER_DISOWN) {
	sobj->own = 0;
      }
      return SWIG_OK;
    } else {
      int res = SWIG_ERROR;
      if (flags & SWIG_POINTER_IMPLICIT_CONV) {
	SwigPyClientData *data = ty ? (SwigPyClientData *) ty->clientdata : 0;
	if (data && !data->implicitconv) {
	  PyObject *klass = data->klass;
	  if (klass) {
	    PyObject *impconv;
	    data->implicitconv = 1; /* avoid recursion and call 'explicit' constructors*/
	    impconv = SWIG_Python_CallFunctor(klass, obj);
	    data->implicitconv = 0;
	    if (PyErr_Occurred()) {
	      PyErr_Clear();
	      impconv = 0;
	    }
	    if (impconv) {
	      SwigPyObject *iobj = SWIG_Python_GetSwigThis(impconv);
	      if (iobj) {
		void *vptr;
		res = SWIG_Python_ConvertPtrAndOwn((PyObject*)iobj, &vptr, ty, 0, 0);
		if (SWIG_IsOK(res)) {
		  if (ptr) {
		    *ptr = vptr;
		    /* transfer the ownership to 'ptr' */
		    iobj->own = 0;
		    res = SWIG_AddCast(res);
		    res = SWIG_AddNewMask(res);
		  } else {
		    res = SWIG_AddCast(res);		    
		  }
		}
	      }
	      Py_DECREF(impconv);
	    }
	  }
	}
      }
      return res;
    }
  }
}

/* Convert a function ptr value */

SWIGRUNTIME int
SWIG_Python_ConvertFunctionPtr(PyObject *obj, void **ptr, swig_type_info *ty) {
  if (!PyCFunction_Check(obj)) {
    return SWIG_ConvertPtr(obj, ptr, ty, 0);
  } else {
    void *vptr = 0;
    
    /* here we get the method pointer for callbacks */
    const char *doc = (((PyCFunctionObject *)obj) -> m_ml -> ml_doc);
    const char *desc = doc ? strstr(doc, "swig_ptr: ") : 0;
    if (desc)
      desc = ty ? SWIG_UnpackVoidPtr(desc + 10, &vptr, ty->name) : 0;
    if (!desc) 
      return SWIG_ERROR;
    if (ty) {
      swig_cast_info *tc = SWIG_TypeCheck(desc,ty);
      if (tc) {
        int newmemory = 0;
        *ptr = SWIG_TypeCast(tc,vptr,&newmemory);
        assert(!newmemory); /* newmemory handling not yet implemented */
      } else {
        return SWIG_ERROR;
      }
    } else {
      *ptr = vptr;
    }
    return SWIG_OK;
  }
}

/* Convert a packed value value */

SWIGRUNTIME int
SWIG_Python_ConvertPacked(PyObject *obj, void *ptr, size_t sz, swig_type_info *ty) {
  swig_type_info *to = SwigPyPacked_UnpackData(obj, ptr, sz);
  if (!to) return SWIG_ERROR;
  if (ty) {
    if (to != ty) {
      /* check type cast? */
      swig_cast_info *tc = SWIG_TypeCheck(to->name,ty);
      if (!tc) return SWIG_ERROR;
    }
  }
  return SWIG_OK;
}  

/* -----------------------------------------------------------------------------
 * Create a new pointer object
 * ----------------------------------------------------------------------------- */

/*
  Create a new instance object, without calling __init__, and set the
  'this' attribute.
*/

SWIGRUNTIME PyObject* 
SWIG_Python_NewShadowInstance(SwigPyClientData *data, PyObject *swig_this)
{
#if (PY_VERSION_HEX >= 0x02020000)
  PyObject *inst = 0;
  PyObject *newraw = data->newraw;
  if (newraw) {
    inst = PyObject_Call(newraw, data->newargs, NULL);
    if (inst) {
#if !defined(SWIG_PYTHON_SLOW_GETSET_THIS)
      PyObject **dictptr = _PyObject_GetDictPtr(inst);
      if (dictptr != NULL) {
	PyObject *dict = *dictptr;
	if (dict == NULL) {
	  dict = PyDict_New();
	  *dictptr = dict;
	  PyDict_SetItem(dict, SWIG_This(), swig_this);
	}
      }
#else
      PyObject *key = SWIG_This();
      PyObject_SetAttr(inst, key, swig_this);
#endif
    }
  } else {
#if PY_VERSION_HEX >= 0x03000000
    inst = PyBaseObject_Type.tp_new((PyTypeObject*) data->newargs, Py_None, Py_None);
    PyObject_SetAttr(inst, SWIG_This(), swig_this);
    Py_TYPE(inst)->tp_flags &= ~Py_TPFLAGS_VALID_VERSION_TAG;
#else
    PyObject *dict = PyDict_New();
    PyDict_SetItem(dict, SWIG_This(), swig_this);
    inst = PyInstance_NewRaw(data->newargs, dict);
    Py_DECREF(dict);
#endif
  }
  return inst;
#else
#if (PY_VERSION_HEX >= 0x02010000)
  PyObject *inst;
  PyObject *dict = PyDict_New();
  PyDict_SetItem(dict, SWIG_This(), swig_this);
  inst = PyInstance_NewRaw(data->newargs, dict);
  Py_DECREF(dict);
  return (PyObject *) inst;
#else
  PyInstanceObject *inst = PyObject_NEW(PyInstanceObject, &PyInstance_Type);
  if (inst == NULL) {
    return NULL;
  }
  inst->in_class = (PyClassObject *)data->newargs;
  Py_INCREF(inst->in_class);
  inst->in_dict = PyDict_New();
  if (inst->in_dict == NULL) {
    Py_DECREF(inst);
    return NULL;
  }
#ifdef Py_TPFLAGS_HAVE_WEAKREFS
  inst->in_weakreflist = NULL;
#endif
#ifdef Py_TPFLAGS_GC
  PyObject_GC_Init(inst);
#endif
  PyDict_SetItem(inst->in_dict, SWIG_This(), swig_this);
  return (PyObject *) inst;
#endif
#endif
}

SWIGRUNTIME void
SWIG_Python_SetSwigThis(PyObject *inst, PyObject *swig_this)
{
 PyObject *dict;
#if (PY_VERSION_HEX >= 0x02020000) && !defined(SWIG_PYTHON_SLOW_GETSET_THIS)
 PyObject **dictptr = _PyObject_GetDictPtr(inst);
 if (dictptr != NULL) {
   dict = *dictptr;
   if (dict == NULL) {
     dict = PyDict_New();
     *dictptr = dict;
   }
   PyDict_SetItem(dict, SWIG_This(), swig_this);
   return;
 }
#endif
 dict = PyObject_GetAttrString(inst, (char*)"__dict__");
 PyDict_SetItem(dict, SWIG_This(), swig_this);
 Py_DECREF(dict);
} 


SWIGINTERN PyObject *
SWIG_Python_InitShadowInstance(PyObject *args) {
  PyObject *obj[2];
  if (!SWIG_Python_UnpackTuple(args,(char*)"swiginit", 2, 2, obj)) {
    return NULL;
  } else {
    SwigPyObject *sthis = SWIG_Python_GetSwigThis(obj[0]);
    if (sthis) {
      SwigPyObject_append((PyObject*) sthis, obj[1]);
    } else {
      SWIG_Python_SetSwigThis(obj[0], obj[1]);
    }
    return SWIG_Py_Void();
  }
}

/* Create a new pointer object */

SWIGRUNTIME PyObject *
SWIG_Python_NewPointerObj(void *ptr, swig_type_info *type, int flags) {
  if (!ptr) {
    return SWIG_Py_Void();
  } else {
    int own = (flags & SWIG_POINTER_OWN) ? SWIG_POINTER_OWN : 0;
    PyObject *robj = SwigPyObject_New(ptr, type, own);
    SwigPyClientData *clientdata = type ? (SwigPyClientData *)(type->clientdata) : 0;
    if (clientdata && !(flags & SWIG_POINTER_NOSHADOW)) {
      PyObject *inst = SWIG_Python_NewShadowInstance(clientdata, robj);
      if (inst) {
	Py_DECREF(robj);
	robj = inst;
      }
    }
    return robj;
  }
}

/* Create a new packed object */

SWIGRUNTIMEINLINE PyObject *
SWIG_Python_NewPackedObj(void *ptr, size_t sz, swig_type_info *type) {
  return ptr ? SwigPyPacked_New((void *) ptr, sz, type) : SWIG_Py_Void();
}

/* -----------------------------------------------------------------------------*
 *  Get type list 
 * -----------------------------------------------------------------------------*/

#ifdef SWIG_LINK_RUNTIME
void *SWIG_ReturnGlobalTypeList(void *);
#endif

SWIGRUNTIME swig_module_info *
SWIG_Python_GetModule(void) {
  static void *type_pointer = (void *)0;
  /* first check if module already created */
  if (!type_pointer) {
#ifdef SWIG_LINK_RUNTIME
    type_pointer = SWIG_ReturnGlobalTypeList((void *)0);
#else
    type_pointer = PyCObject_Import((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION,
				    (char*)"type_pointer" SWIG_TYPE_TABLE_NAME);
    if (PyErr_Occurred()) {
      PyErr_Clear();
      type_pointer = (void *)0;
    }
#endif
  }
  return (swig_module_info *) type_pointer;
}

#if PY_MAJOR_VERSION < 2
/* PyModule_AddObject function was introduced in Python 2.0.  The following function
   is copied out of Python/modsupport.c in python version 2.3.4 */
SWIGINTERN int
PyModule_AddObject(PyObject *m, char *name, PyObject *o)
{
  PyObject *dict;
  if (!PyModule_Check(m)) {
    PyErr_SetString(PyExc_TypeError,
		    "PyModule_AddObject() needs module as first arg");
    return SWIG_ERROR;
  }
  if (!o) {
    PyErr_SetString(PyExc_TypeError,
		    "PyModule_AddObject() needs non-NULL value");
    return SWIG_ERROR;
  }
  
  dict = PyModule_GetDict(m);
  if (dict == NULL) {
    /* Internal error -- modules must have a dict! */
    PyErr_Format(PyExc_SystemError, "module '%s' has no __dict__",
		 PyModule_GetName(m));
    return SWIG_ERROR;
  }
  if (PyDict_SetItemString(dict, name, o))
    return SWIG_ERROR;
  Py_DECREF(o);
  return SWIG_OK;
}
#endif

SWIGRUNTIME void
SWIG_Python_DestroyModule(void *vptr)
{
  swig_module_info *swig_module = (swig_module_info *) vptr;
  swig_type_info **types = swig_module->types;
  size_t i;
  for (i =0; i < swig_module->size; ++i) {
    swig_type_info *ty = types[i];
    if (ty->owndata) {
      SwigPyClientData *data = (SwigPyClientData *) ty->clientdata;
      if (data) SwigPyClientData_Del(data);
    }
  }
  Py_DECREF(SWIG_This());
}

SWIGRUNTIME void
SWIG_Python_SetModule(swig_module_info *swig_module) {
  static PyMethodDef swig_empty_runtime_method_table[] = { {NULL, NULL, 0, NULL} };/* Sentinel */

#if PY_VERSION_HEX >= 0x03000000
 /* Add a dummy module object into sys.modules */
  PyObject *module = PyImport_AddModule((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION);
#else
  PyObject *module = Py_InitModule((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION,
				   swig_empty_runtime_method_table);
#endif
  PyObject *pointer = PyCObject_FromVoidPtr((void *) swig_module, SWIG_Python_DestroyModule);
  if (pointer && module) {
    PyModule_AddObject(module, (char*)"type_pointer" SWIG_TYPE_TABLE_NAME, pointer);
  } else {
    Py_XDECREF(pointer);
  }
}

/* The python cached type query */
SWIGRUNTIME PyObject *
SWIG_Python_TypeCache(void) {
  static PyObject *SWIG_STATIC_POINTER(cache) = PyDict_New();
  return cache;
}

SWIGRUNTIME swig_type_info *
SWIG_Python_TypeQuery(const char *type)
{
  PyObject *cache = SWIG_Python_TypeCache();
  PyObject *key = SWIG_Python_str_FromChar(type); 
  PyObject *obj = PyDict_GetItem(cache, key);
  swig_type_info *descriptor;
  if (obj) {
    descriptor = (swig_type_info *) PyCObject_AsVoidPtr(obj);
  } else {
    swig_module_info *swig_module = SWIG_Python_GetModule();
    descriptor = SWIG_TypeQueryModule(swig_module, swig_module, type);
    if (descriptor) {
      obj = PyCObject_FromVoidPtr(descriptor, NULL);
      PyDict_SetItem(cache, key, obj);
      Py_DECREF(obj);
    }
  }
  Py_DECREF(key);
  return descriptor;
}

/* 
   For backward compatibility only
*/
#define SWIG_POINTER_EXCEPTION  0
#define SWIG_arg_fail(arg)      SWIG_Python_ArgFail(arg)
#define SWIG_MustGetPtr(p, type, argnum, flags)  SWIG_Python_MustGetPtr(p, type, argnum, flags)

SWIGRUNTIME int
SWIG_Python_AddErrMesg(const char* mesg, int infront)
{  
  if (PyErr_Occurred()) {
    PyObject *type = 0;
    PyObject *value = 0;
    PyObject *traceback = 0;
    PyErr_Fetch(&type, &value, &traceback);
    if (value) {
      char *tmp;
      PyObject *old_str = PyObject_Str(value);
      Py_XINCREF(type);
      PyErr_Clear();
      if (infront) {
	PyErr_Format(type, "%s %s", mesg, tmp = SWIG_Python_str_AsChar(old_str));
      } else {
	PyErr_Format(type, "%s %s", tmp = SWIG_Python_str_AsChar(old_str), mesg);
      }
      SWIG_Python_str_DelForPy3(tmp);
      Py_DECREF(old_str);
    }
    return 1;
  } else {
    return 0;
  }
}
  
SWIGRUNTIME int
SWIG_Python_ArgFail(int argnum)
{
  if (PyErr_Occurred()) {
    /* add information about failing argument */
    char mesg[256];
    PyOS_snprintf(mesg, sizeof(mesg), "argument number %d:", argnum);
    return SWIG_Python_AddErrMesg(mesg, 1);
  } else {
    return 0;
  }
}

SWIGRUNTIMEINLINE const char *
SwigPyObject_GetDesc(PyObject *self)
{
  SwigPyObject *v = (SwigPyObject *)self;
  swig_type_info *ty = v ? v->ty : 0;
  return ty ? ty->str : (char*)"";
}

SWIGRUNTIME void
SWIG_Python_TypeError(const char *type, PyObject *obj)
{
  if (type) {
#if defined(SWIG_COBJECT_TYPES)
    if (obj && SwigPyObject_Check(obj)) {
      const char *otype = (const char *) SwigPyObject_GetDesc(obj);
      if (otype) {
	PyErr_Format(PyExc_TypeError, "a '%s' is expected, 'SwigPyObject(%s)' is received",
		     type, otype);
	return;
      }
    } else 
#endif      
    {
      const char *otype = (obj ? obj->ob_type->tp_name : 0); 
      if (otype) {
	PyObject *str = PyObject_Str(obj);
	const char *cstr = str ? SWIG_Python_str_AsChar(str) : 0;
	if (cstr) {
	  PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s(%s)' is received",
		       type, otype, cstr);
          SWIG_Python_str_DelForPy3(cstr);
	} else {
	  PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s' is received",
		       type, otype);
	}
	Py_XDECREF(str);
	return;
      }
    }   
    PyErr_Format(PyExc_TypeError, "a '%s' is expected", type);
  } else {
    PyErr_Format(PyExc_TypeError, "unexpected type is received");
  }
}


/* Convert a pointer value, signal an exception on a type mismatch */
SWIGRUNTIME void *
SWIG_Python_MustGetPtr(PyObject *obj, swig_type_info *ty, int argnum, int flags) {
  void *result;
  if (SWIG_Python_ConvertPtr(obj, &result, ty, flags) == -1) {
    PyErr_Clear();
#if SWIG_POINTER_EXCEPTION
    if (flags) {
      SWIG_Python_TypeError(SWIG_TypePrettyName(ty), obj);
      SWIG_Python_ArgFail(argnum);
    }
#endif
  }
  return result;
}


#ifdef __cplusplus
#if 0
{ /* cc-mode */
#endif
}
#endif



#define SWIG_exception_fail(code, msg) do { SWIG_Error(code, msg); SWIG_fail; } while(0) 

#define SWIG_contract_assert(expr, msg) if (!(expr)) { SWIG_Error(SWIG_RuntimeError, msg); SWIG_fail; } else 



  #define SWIG_exception(code, msg) do { SWIG_Error(code, msg); SWIG_fail;; } while(0) 


/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_allocator_type swig_types[0]
#define SWIGTYPE_p_char swig_types[1]
#define SWIGTYPE_p_cmf__atmosphere__ConstantMeteorology swig_types[2]
#define SWIGTYPE_p_cmf__atmosphere__MeteoStation swig_types[3]
#define SWIGTYPE_p_cmf__atmosphere__MeteoStationList swig_types[4]
#define SWIGTYPE_p_cmf__atmosphere__MeteoStationReference swig_types[5]
#define SWIGTYPE_p_cmf__atmosphere__Meteorology swig_types[6]
#define SWIGTYPE_p_cmf__atmosphere__RainCloud swig_types[7]
#define SWIGTYPE_p_cmf__atmosphere__Weather swig_types[8]
#define SWIGTYPE_p_cmf__geometry__Locatable swig_types[9]
#define SWIGTYPE_p_cmf__geometry__Location swig_types[10]
#define SWIGTYPE_p_cmf__geometry__point swig_types[11]
#define SWIGTYPE_p_cmf__geometry__point_vector swig_types[12]
#define SWIGTYPE_p_cmf__math__BDF2 swig_types[13]
#define SWIGTYPE_p_cmf__math__CVodeIntegrator swig_types[14]
#define SWIGTYPE_p_cmf__math__Date swig_types[15]
#define SWIGTYPE_p_cmf__math__ExplicitEuler_fixed swig_types[16]
#define SWIGTYPE_p_cmf__math__ImplicitEuler swig_types[17]
#define SWIGTYPE_p_cmf__math__Integrator swig_types[18]
#define SWIGTYPE_p_cmf__math__MultiIntegrator swig_types[19]
#define SWIGTYPE_p_cmf__math__PredictCorrectSimple swig_types[20]
#define SWIGTYPE_p_cmf__math__RKFIntegrator swig_types[21]
#define SWIGTYPE_p_cmf__math__SoluteWaterIntegrator swig_types[22]
#define SWIGTYPE_p_cmf__math__StateVariable swig_types[23]
#define SWIGTYPE_p_cmf__math__StateVariableOwner swig_types[24]
#define SWIGTYPE_p_cmf__math__StateVariableVector swig_types[25]
#define SWIGTYPE_p_cmf__math__Time swig_types[26]
#define SWIGTYPE_p_cmf__math__num_array swig_types[27]
#define SWIGTYPE_p_cmf__math__timeseries swig_types[28]
#define SWIGTYPE_p_cmf__project swig_types[29]
#define SWIGTYPE_p_cmf__river__Channel swig_types[30]
#define SWIGTYPE_p_cmf__river__IChannel swig_types[31]
#define SWIGTYPE_p_cmf__river__IVolumeHeightFunction swig_types[32]
#define SWIGTYPE_p_cmf__river__Manning swig_types[33]
#define SWIGTYPE_p_cmf__river__Manning_Diffusive swig_types[34]
#define SWIGTYPE_p_cmf__river__Manning_Kinematic swig_types[35]
#define SWIGTYPE_p_cmf__river__MeanChannel swig_types[36]
#define SWIGTYPE_p_cmf__river__OpenWaterStorage swig_types[37]
#define SWIGTYPE_p_cmf__river__PipeReach swig_types[38]
#define SWIGTYPE_p_cmf__river__Prism swig_types[39]
#define SWIGTYPE_p_cmf__river__Reach swig_types[40]
#define SWIGTYPE_p_cmf__river__ReachIterator swig_types[41]
#define SWIGTYPE_p_cmf__river__RectangularReach swig_types[42]
#define SWIGTYPE_p_cmf__river__SWATReachType swig_types[43]
#define SWIGTYPE_p_cmf__river__TriangularReach swig_types[44]
#define SWIGTYPE_p_cmf__river__volume_height_function swig_types[45]
#define SWIGTYPE_p_cmf__upslope__BrooksCoreyRetentionCurve swig_types[46]
#define SWIGTYPE_p_cmf__upslope__Cell swig_types[47]
#define SWIGTYPE_p_cmf__upslope__CellConnector swig_types[48]
#define SWIGTYPE_p_cmf__upslope__ET__CanopyStorageEvaporation swig_types[49]
#define SWIGTYPE_p_cmf__upslope__ET__HargreaveET swig_types[50]
#define SWIGTYPE_p_cmf__upslope__ET__PenmanEvaporation swig_types[51]
#define SWIGTYPE_p_cmf__upslope__ET__PenmanMonteithET swig_types[52]
#define SWIGTYPE_p_cmf__upslope__ET__ShuttleworthWallaceET swig_types[53]
#define SWIGTYPE_p_cmf__upslope__ET__constantETpot swig_types[54]
#define SWIGTYPE_p_cmf__upslope__LinearRetention swig_types[55]
#define SWIGTYPE_p_cmf__upslope__NeighborIterator swig_types[56]
#define SWIGTYPE_p_cmf__upslope__RetentionCurve swig_types[57]
#define SWIGTYPE_p_cmf__upslope__SoilLayer swig_types[58]
#define SWIGTYPE_p_cmf__upslope__Topology swig_types[59]
#define SWIGTYPE_p_cmf__upslope__VanGenuchtenMualem swig_types[60]
#define SWIGTYPE_p_cmf__upslope__connections__CanopyOverflow swig_types[61]
#define SWIGTYPE_p_cmf__upslope__connections__CompleteInfiltration swig_types[62]
#define SWIGTYPE_p_cmf__upslope__connections__Darcy swig_types[63]
#define SWIGTYPE_p_cmf__upslope__connections__HBVlateral swig_types[64]
#define SWIGTYPE_p_cmf__upslope__connections__HBVparameters swig_types[65]
#define SWIGTYPE_p_cmf__upslope__connections__HBVpercolation swig_types[66]
#define SWIGTYPE_p_cmf__upslope__connections__MatrixInfiltration swig_types[67]
#define SWIGTYPE_p_cmf__upslope__connections__OHDISflow swig_types[68]
#define SWIGTYPE_p_cmf__upslope__connections__Rainfall swig_types[69]
#define SWIGTYPE_p_cmf__upslope__connections__Richards swig_types[70]
#define SWIGTYPE_p_cmf__upslope__connections__Richards_lateral swig_types[71]
#define SWIGTYPE_p_cmf__upslope__connections__SWATPercolation swig_types[72]
#define SWIGTYPE_p_cmf__upslope__connections__SimpleTindexSnowMelt swig_types[73]
#define SWIGTYPE_p_cmf__upslope__connections__Snowfall swig_types[74]
#define SWIGTYPE_p_cmf__upslope__connections__TopographicGradientDarcy swig_types[75]
#define SWIGTYPE_p_cmf__upslope__connections__lateral_sub_surface_flux swig_types[76]
#define SWIGTYPE_p_cmf__upslope__vegetation__Vegetation swig_types[77]
#define SWIGTYPE_p_cmf__water__DricheletBoundary swig_types[78]
#define SWIGTYPE_p_cmf__water__NeumannBoundary swig_types[79]
#define SWIGTYPE_p_cmf__water__NeumannBoundary_list swig_types[80]
#define SWIGTYPE_p_cmf__water__NeumannFlux swig_types[81]
#define SWIGTYPE_p_cmf__water__SoluteStorage swig_types[82]
#define SWIGTYPE_p_cmf__water__SoluteTimeseries swig_types[83]
#define SWIGTYPE_p_cmf__water__TechnicalFlux swig_types[84]
#define SWIGTYPE_p_cmf__water__WaterStorage swig_types[85]
#define SWIGTYPE_p_cmf__water__flux_connection swig_types[86]
#define SWIGTYPE_p_cmf__water__flux_node swig_types[87]
#define SWIGTYPE_p_cmf__water__linear_scale swig_types[88]
#define SWIGTYPE_p_cmf__water__node_list swig_types[89]
#define SWIGTYPE_p_cmf__water__solute swig_types[90]
#define SWIGTYPE_p_cmf__water__solute_vector swig_types[91]
#define SWIGTYPE_p_cmf__water__waterbalance_connection swig_types[92]
#define SWIGTYPE_p_const_reference swig_types[93]
#define SWIGTYPE_p_difference_type swig_types[94]
#define SWIGTYPE_p_double swig_types[95]
#define SWIGTYPE_p_f_double__double swig_types[96]
#define SWIGTYPE_p_key_type swig_types[97]
#define SWIGTYPE_p_p_PyObject swig_types[98]
#define SWIGTYPE_p_p_cmf__river__Manning swig_types[99]
#define SWIGTYPE_p_p_cmf__river__Manning_Diffusive swig_types[100]
#define SWIGTYPE_p_p_cmf__river__Manning_Kinematic swig_types[101]
#define SWIGTYPE_p_p_cmf__upslope__ET__CanopyStorageEvaporation swig_types[102]
#define SWIGTYPE_p_p_cmf__upslope__ET__HargreaveET swig_types[103]
#define SWIGTYPE_p_p_cmf__upslope__ET__PenmanEvaporation swig_types[104]
#define SWIGTYPE_p_p_cmf__upslope__ET__PenmanMonteithET swig_types[105]
#define SWIGTYPE_p_p_cmf__upslope__ET__ShuttleworthWallaceET swig_types[106]
#define SWIGTYPE_p_p_cmf__upslope__ET__constantETpot swig_types[107]
#define SWIGTYPE_p_p_cmf__upslope__connections__CanopyOverflow swig_types[108]
#define SWIGTYPE_p_p_cmf__upslope__connections__CompleteInfiltration swig_types[109]
#define SWIGTYPE_p_p_cmf__upslope__connections__Darcy swig_types[110]
#define SWIGTYPE_p_p_cmf__upslope__connections__HBVlateral swig_types[111]
#define SWIGTYPE_p_p_cmf__upslope__connections__HBVpercolation swig_types[112]
#define SWIGTYPE_p_p_cmf__upslope__connections__MatrixInfiltration swig_types[113]
#define SWIGTYPE_p_p_cmf__upslope__connections__OHDISflow swig_types[114]
#define SWIGTYPE_p_p_cmf__upslope__connections__Rainfall swig_types[115]
#define SWIGTYPE_p_p_cmf__upslope__connections__Richards swig_types[116]
#define SWIGTYPE_p_p_cmf__upslope__connections__Richards_lateral swig_types[117]
#define SWIGTYPE_p_p_cmf__upslope__connections__SWATPercolation swig_types[118]
#define SWIGTYPE_p_p_cmf__upslope__connections__SimpleTindexSnowMelt swig_types[119]
#define SWIGTYPE_p_p_cmf__upslope__connections__Snowfall swig_types[120]
#define SWIGTYPE_p_p_cmf__upslope__connections__TopographicGradientDarcy swig_types[121]
#define SWIGTYPE_p_p_cmf__upslope__connections__lateral_sub_surface_flux swig_types[122]
#define SWIGTYPE_p_p_cmf__water__NeumannFlux swig_types[123]
#define SWIGTYPE_p_p_cmf__water__TechnicalFlux swig_types[124]
#define SWIGTYPE_p_p_cmf__water__waterbalance_connection swig_types[125]
#define SWIGTYPE_p_ptr swig_types[126]
#define SWIGTYPE_p_reference swig_types[127]
#define SWIGTYPE_p_size_type swig_types[128]
#define SWIGTYPE_p_std__invalid_argument swig_types[129]
#define SWIGTYPE_p_std__lessT_cmf__water__flux_connection_p_t swig_types[130]
#define SWIGTYPE_p_std__setT_cmf__upslope__Cell_p_std__lessT_cmf__upslope__Cell_p_t_std__allocatorT_cmf__upslope__Cell_p_t_t swig_types[131]
#define SWIGTYPE_p_std__setT_cmf__water__flux_connection_p_std__lessT_cmf__water__flux_connection_p_t_std__allocatorT_cmf__water__flux_connection_p_t_t swig_types[132]
#define SWIGTYPE_p_std__setT_cmf__water__flux_connection_p_std__lessT_cmf__water__flux_connection_p_t_std__allocatorT_cmf__water__flux_connection_p_t_t__key_type swig_types[133]
#define SWIGTYPE_p_std__setT_cmf__water__flux_connection_p_std__lessT_cmf__water__flux_connection_p_t_std__allocatorT_cmf__water__flux_connection_p_t_t__value_type swig_types[134]
#define SWIGTYPE_p_std__tr1__shared_ptrT_cmf__atmosphere__MeteoStation_t swig_types[135]
#define SWIGTYPE_p_std__tr1__shared_ptrT_cmf__atmosphere__RainCloud_t swig_types[136]
#define SWIGTYPE_p_std__tr1__shared_ptrT_cmf__geometry__Locatable_t swig_types[137]
#define SWIGTYPE_p_std__tr1__shared_ptrT_cmf__math__StateVariable_t swig_types[138]
#define SWIGTYPE_p_std__tr1__shared_ptrT_cmf__river__OpenWaterStorage_t swig_types[139]
#define SWIGTYPE_p_std__tr1__shared_ptrT_cmf__river__Reach_t swig_types[140]
#define SWIGTYPE_p_std__tr1__shared_ptrT_cmf__upslope__SoilLayer_t swig_types[141]
#define SWIGTYPE_p_std__tr1__shared_ptrT_cmf__water__DricheletBoundary_t swig_types[142]
#define SWIGTYPE_p_std__tr1__shared_ptrT_cmf__water__NeumannBoundary_t swig_types[143]
#define SWIGTYPE_p_std__tr1__shared_ptrT_cmf__water__SoluteStorage_t swig_types[144]
#define SWIGTYPE_p_std__tr1__shared_ptrT_cmf__water__WaterStorage_t swig_types[145]
#define SWIGTYPE_p_std__tr1__shared_ptrT_cmf__water__flux_node_t swig_types[146]
#define SWIGTYPE_p_std__vectorT_cmf__geometry__point_std__allocatorT_cmf__geometry__point_t_t swig_types[147]
#define SWIGTYPE_p_std__vectorT_cmf__math__StateVariable_p_std__allocatorT_cmf__math__StateVariable_p_t_t swig_types[148]
#define SWIGTYPE_p_std__vectorT_cmf__math__StateVariable_p_std__allocatorT_cmf__math__StateVariable_p_t_t__allocator_type swig_types[149]
#define SWIGTYPE_p_std__vectorT_cmf__upslope__Cell_p_std__allocatorT_cmf__upslope__Cell_p_t_t swig_types[150]
#define SWIGTYPE_p_std__vectorT_cmf__upslope__Cell_p_std__allocatorT_cmf__upslope__Cell_p_t_t__allocator_type swig_types[151]
#define SWIGTYPE_p_std__vectorT_cmf__water__flux_connection_p_std__allocatorT_cmf__water__flux_connection_p_t_t swig_types[152]
#define SWIGTYPE_p_std__vectorT_cmf__water__flux_connection_p_std__allocatorT_cmf__water__flux_connection_p_t_t__allocator_type swig_types[153]
#define SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_cmf__water__WaterStorage_t_std__allocatorT_std__tr1__shared_ptrT_cmf__water__WaterStorage_t_t_t swig_types[154]
#define SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_cmf__water__WaterStorage_t_std__allocatorT_std__tr1__shared_ptrT_cmf__water__WaterStorage_t_t_t__allocator_type swig_types[155]
#define SWIGTYPE_p_swig__SwigPyIterator swig_types[156]
#define SWIGTYPE_p_value_type swig_types[157]
#define SWIGTYPE_std__setT_cmf__water__flux_connection_p_std__lessT_cmf__water__flux_connection_p_t_std__allocatorT_cmf__water__flux_connection_p_t_t__key_type swig_types[158]
#define SWIGTYPE_std__setT_cmf__water__flux_connection_p_std__lessT_cmf__water__flux_connection_p_t_std__allocatorT_cmf__water__flux_connection_p_t_t__value_type swig_types[159]
#define SWIGTYPE_std__vectorT_cmf__upslope__Cell_p_std__allocatorT_cmf__upslope__Cell_p_t_t__value_type swig_types[160]
#define SWIGTYPE_std__vectorT_cmf__water__flux_connection_p_std__allocatorT_cmf__water__flux_connection_p_t_t__value_type swig_types[161]
static swig_type_info *swig_types[163];
static swig_module_info swig_module = {swig_types, 162, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#if (PY_VERSION_HEX <= 0x02000000)
# if !defined(SWIG_PYTHON_CLASSIC)
#  error "This python version requires swig to be run with the '-classic' option"
# endif
#endif
#if (PY_VERSION_HEX <= 0x02020000)
# error "This python version requires swig to be run with the '-nomodern' option"
#endif
#if (PY_VERSION_HEX <= 0x02020000)
# error "This python version requires swig to be run with the '-nomodernargs' option"
#endif
#ifndef METH_O
# error "This python version requires swig to be run with the '-nofastunpack' option"
#endif
#ifdef SWIG_TypeQuery
# undef SWIG_TypeQuery
#endif
#define SWIG_TypeQuery SWIG_Python_TypeQuery

/*-----------------------------------------------
              @(target):= _cmf_core.so
  ------------------------------------------------*/
#if PY_VERSION_HEX >= 0x03000000
#  define SWIG_init    PyInit__cmf_core

#else
#  define SWIG_init    init_cmf_core

#endif
#define SWIG_name    "_cmf_core"

#define SWIGVERSION 0x010340 
#define SWIG_VERSION SWIGVERSION


#define SWIG_as_voidptr(a) const_cast< void * >(static_cast< const void * >(a)) 
#define SWIG_as_voidptrptr(a) ((void)SWIG_as_voidptr(*a),reinterpret_cast< void** >(a)) 


#include <stdexcept>


namespace swig {
  class SwigPtr_PyObject {
  protected:
    PyObject *_obj;

  public:
    SwigPtr_PyObject() :_obj(0)
    {
    }

    SwigPtr_PyObject(const SwigPtr_PyObject& item) : _obj(item._obj)
    {
      Py_XINCREF(_obj);      
    }
    
    SwigPtr_PyObject(PyObject *obj, bool initial_ref = true) :_obj(obj)
    {
      if (initial_ref) {
        Py_XINCREF(_obj);
      }
    }
    
    SwigPtr_PyObject & operator=(const SwigPtr_PyObject& item) 
    {
      Py_XINCREF(item._obj);
      Py_XDECREF(_obj);
      _obj = item._obj;
      return *this;      
    }
    
    ~SwigPtr_PyObject() 
    {
      Py_XDECREF(_obj);
    }
    
    operator PyObject *() const
    {
      return _obj;
    }

    PyObject *operator->() const
    {
      return _obj;
    }
  };
}


namespace swig {
  struct SwigVar_PyObject : SwigPtr_PyObject {
    SwigVar_PyObject(PyObject* obj = 0) : SwigPtr_PyObject(obj, false) { }
    
    SwigVar_PyObject & operator = (PyObject* obj)
    {
      Py_XDECREF(_obj);
      _obj = obj;
      return *this;      
    }
  };
}


#include <stdexcept>


#if defined(__GNUC__)
#  if __GNUC__ == 2 && __GNUC_MINOR <= 96
#     define SWIG_STD_NOMODERN_STL
#  endif
#endif


#include <string>
#include <stdexcept>


#include <string>


#include <iostream>

  
namespace swig {
  struct stop_iteration {
  };

  struct SwigPyIterator {
  private:
    SwigPtr_PyObject _seq;

  protected:
    SwigPyIterator(PyObject *seq) : _seq(seq)
    {
    }
      
  public:
    virtual ~SwigPyIterator() {}

    // Access iterator method, required by Python
    virtual PyObject *value() const = 0;

    // Forward iterator method, required by Python
    virtual SwigPyIterator *incr(size_t n = 1) = 0;
    
    // Backward iterator method, very common in C++, but not required in Python
    virtual SwigPyIterator *decr(size_t /*n*/ = 1)
    {
      throw stop_iteration();
    }

    // Random access iterator methods, but not required in Python
    virtual ptrdiff_t distance(const SwigPyIterator &/*x*/) const
    {
      throw std::invalid_argument("operation not supported");
    }

    virtual bool equal (const SwigPyIterator &/*x*/) const
    {
      throw std::invalid_argument("operation not supported");
    }
    
    // C++ common/needed methods
    virtual SwigPyIterator *copy() const = 0;

    PyObject *next()     
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK; // disable threads       
      PyObject *obj = value();
      incr();       
      SWIG_PYTHON_THREAD_END_BLOCK; // re-enable threads
      return obj;     
    }

    /* Make an alias for Python 3.x */
    PyObject *__next__()
    {
      return next();
    }

    PyObject *previous()
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK; // disable threads       
      decr();
      PyObject *obj = value();
      SWIG_PYTHON_THREAD_END_BLOCK; // re-enable threads       
      return obj;
    }

    SwigPyIterator *advance(ptrdiff_t n)
    {
      return  (n > 0) ?  incr(n) : decr(-n);
    }
      
    bool operator == (const SwigPyIterator& x)  const
    {
      return equal(x);
    }
      
    bool operator != (const SwigPyIterator& x) const
    {
      return ! operator==(x);
    }
      
    SwigPyIterator& operator += (ptrdiff_t n)
    {
      return *advance(n);
    }

    SwigPyIterator& operator -= (ptrdiff_t n)
    {
      return *advance(-n);
    }
      
    SwigPyIterator* operator + (ptrdiff_t n) const
    {
      return copy()->advance(n);
    }

    SwigPyIterator* operator - (ptrdiff_t n) const
    {
      return copy()->advance(-n);
    }
      
    ptrdiff_t operator - (const SwigPyIterator& x) const
    {
      return x.distance(*this);
    }
      
    static swig_type_info* descriptor() {
      static int init = 0;
      static swig_type_info* desc = 0;
      if (!init) {
	desc = SWIG_TypeQuery("swig::SwigPyIterator *");
	init = 1;
      }	
      return desc;
    }    
  };
}


SWIGINTERN int
SWIG_AsVal_double (PyObject *obj, double *val)
{
  int res = SWIG_TypeError;
  if (PyFloat_Check(obj)) {
    if (val) *val = PyFloat_AsDouble(obj);
    return SWIG_OK;
  } else if (PyInt_Check(obj)) {
    if (val) *val = PyInt_AsLong(obj);
    return SWIG_OK;
  } else if (PyLong_Check(obj)) {
    double v = PyLong_AsDouble(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    double d = PyFloat_AsDouble(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = d;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      long v = PyLong_AsLong(obj);
      if (!PyErr_Occurred()) {
	if (val) *val = v;
	return SWIG_AddCast(SWIG_AddCast(SWIG_OK));
      } else {
	PyErr_Clear();
      }
    }
  }
#endif
  return res;
}


#include <float.h>


#include <math.h>


SWIGINTERNINLINE int
SWIG_CanCastAsInteger(double *d, double min, double max) {
  double x = *d;
  if ((min <= x && x <= max)) {
   double fx = floor(x);
   double cx = ceil(x);
   double rd =  ((x - fx) < 0.5) ? fx : cx; /* simple rint */
   if ((errno == EDOM) || (errno == ERANGE)) {
     errno = 0;
   } else {
     double summ, reps, diff;
     if (rd < x) {
       diff = x - rd;
     } else if (rd > x) {
       diff = rd - x;
     } else {
       return 1;
     }
     summ = rd + x;
     reps = diff/summ;
     if (reps < 8*DBL_EPSILON) {
       *d = rd;
       return 1;
     }
   }
  }
  return 0;
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_long (PyObject *obj, unsigned long *val) 
{
  if (PyInt_Check(obj)) {
    long v = PyInt_AsLong(obj);
    if (v >= 0) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      return SWIG_OverflowError;
    }
  } else if (PyLong_Check(obj)) {
    unsigned long v = PyLong_AsUnsignedLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    unsigned long v = PyLong_AsUnsignedLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      double d;
      int res = SWIG_AddCast(SWIG_AsVal_double (obj,&d));
      if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, 0, ULONG_MAX)) {
	if (val) *val = (unsigned long)(d);
	return res;
      }
    }
  }
#endif
  return SWIG_TypeError;
}


SWIGINTERNINLINE int
SWIG_AsVal_size_t (PyObject * obj, size_t *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long (obj, val ? &v : 0);
  if (SWIG_IsOK(res) && val) *val = static_cast< size_t >(v);
  return res;
}


  #define SWIG_From_long   PyInt_FromLong 


SWIGINTERNINLINE PyObject *
SWIG_From_ptrdiff_t  (ptrdiff_t value)
{    
  return SWIG_From_long  (static_cast< long >(value));
}


SWIGINTERNINLINE PyObject*
  SWIG_From_bool  (bool value)
{
  return PyBool_FromLong(value ? 1 : 0);
}


SWIGINTERN int
SWIG_AsVal_long (PyObject *obj, long* val)
{
  if (PyInt_Check(obj)) {
    if (val) *val = PyInt_AsLong(obj);
    return SWIG_OK;
  } else if (PyLong_Check(obj)) {
    long v = PyLong_AsLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    long v = PyInt_AsLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      double d;
      int res = SWIG_AddCast(SWIG_AsVal_double (obj,&d));
      if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, LONG_MIN, LONG_MAX)) {
	if (val) *val = (long)(d);
	return res;
      }
    }
  }
#endif
  return SWIG_TypeError;
}


SWIGINTERNINLINE int
SWIG_AsVal_ptrdiff_t (PyObject * obj, ptrdiff_t *val)
{
  long v;
  int res = SWIG_AsVal_long (obj, val ? &v : 0);
  if (SWIG_IsOK(res) && val) *val = static_cast< ptrdiff_t >(v);
  return res;
}


#include <stdexcept>


#include <algorithm>


#include <vector>


#include <utility>


#include <map>
#include <algorithm>
#include <stdexcept>


#include <set>


SWIGINTERNINLINE PyObject *
SWIG_From_int  (int value)
{    
  return SWIG_From_long  (value);
}


// Include geometry
#include "geometry/geometry.h"


  #define SWIG_From_double   PyFloat_FromDouble 

SWIGINTERN int cmf_geometry_point___len__(cmf::geometry::point const *self){ return 3; }
SWIGINTERN cmf::geometry::point cmf_geometry_point___rmul__(cmf::geometry::point *self,double val){
        return val*(*self);
    }
SWIGINTERN cmf::geometry::point cmf_geometry_point___rdiv__(cmf::geometry::point *self,double val){
        return val/(*self);
    }

#include <limits.h>
#if !defined(SWIG_NO_LLONG_MAX)
# if !defined(LLONG_MAX) && defined(__GNUC__) && defined (__LONG_LONG_MAX__)
#   define LLONG_MAX __LONG_LONG_MAX__
#   define LLONG_MIN (-LLONG_MAX - 1LL)
#   define ULLONG_MAX (LLONG_MAX * 2ULL + 1ULL)
# endif
#endif


SWIGINTERN int
SWIG_AsVal_int (PyObject * obj, int *val)
{
  long v;
  int res = SWIG_AsVal_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < INT_MIN || v > INT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< int >(v);
    }
  }  
  return res;
}


// Helper function to convert a sequence to a point (with check)
static int convert_seq_to_point(PyObject* input,cmf::geometry::point& p)
{
	double temp[3];
	if (!PySequence_Check(input)) 
	{
		return 0;
	}
	int len=PyObject_Length(input);
	if (len<2 || len>3)
	{
		return 0;
	}
	for (int i=0;i<len;++i)
	{
		PyObject *o = PySequence_GetItem(input,i);
		if (!PyNumber_Check(o)) 
		{
			Py_XDECREF(o);
			return 0;
		}
		temp[i] = PyFloat_AsDouble(o);
		Py_DECREF(o);
	}
	p.x = temp[0];
	p.y = temp[1];
	p.z = len==3 ? temp[2] : 0.0;
	return 1;
}
static int convert_xyz_to_point(PyObject* input,cmf::geometry::point& p)
// Helper function to convert any class with an x,y,z (z optional) attribute to a point (with check)
{
    PyObject
        *x= PyObject_HasAttrString(input, "x") ? PyObject_GetAttrString(input, "x") : 0,
        *y= PyObject_HasAttrString(input, "y") ? PyObject_GetAttrString(input, "y") : 0,
        *z= PyObject_HasAttrString(input, "z") ? PyObject_GetAttrString(input, "z") : 0;
    if (x && y)
    {
        if (PyNumber_Check(x) && PyNumber_Check(y))
        {
            p.x=PyFloat_AsDouble(x);
            p.y=PyFloat_AsDouble(y);
            p.z=0.0;
        }
        else
        {
            Py_XDECREF(x);Py_XDECREF(y);Py_XDECREF(z);
            return 0;
        }
        if (z && PyNumber_Check(z)) 
            p.z=PyFloat_AsDouble(z);
        Py_DECREF(x);Py_DECREF(z);Py_XDECREF(z);
        return 1;
    }
    else
    {
        Py_XDECREF(x);Py_XDECREF(y);Py_XDECREF(z);
        PyErr_SetString(PyExc_ValueError,"x or y attribute are missing, can't convert to point");
        return 0;
    }
    
}


#include "datetime.h"
#include "math/real.h"
#include "math/Time.h"
#include "math/timeseries.h"


static cmf::math::Time convert_datetime_to_cmftime(PyObject* dt)
{
    void * pt; 
    int res=SWIG_ConvertPtr(dt,&pt,SWIGTYPE_p_cmf__math__Time,0);
    if (SWIG_IsOK(res))
    {
        cmf::math::Time * temp = reinterpret_cast< cmf::math::Time * >(pt);
        return *temp;
    }
    else if (PyDateTime_Check(dt))
       return cmf::math::Time(PyDateTime_GET_DAY(dt),
                              PyDateTime_GET_MONTH(dt),
                              PyDateTime_GET_YEAR(dt),
                              PyDateTime_TIME_GET_HOUR(dt),
                              PyDateTime_TIME_GET_MINUTE(dt),
                              PyDateTime_TIME_GET_SECOND(dt),
                              PyDateTime_TIME_GET_MICROSECOND(dt)/1000);
   else if (PyDate_Check(dt))
       return cmf::math::Time(PyDateTime_GET_DAY(dt),
                              PyDateTime_GET_MONTH(dt),
                              PyDateTime_GET_YEAR(dt));
   else if (PyDelta_Check(dt))
   {
     PyDateTime_Delta* delta=(PyDateTime_Delta*)(dt);
     long long ms=24 * 3600;
     ms*=delta->days;
     ms+=delta->seconds;
     ms*=1000;
     ms+=delta->microseconds/1000;
     return cmf::math::Time::Milliseconds(ms);
   }
   else 
   {
     PyErr_SetString(PyExc_ValueError,"Type is neither a cmf.Time nor a Python datetime object");
     return cmf::math::Time();
   } 
}


SWIGINTERN swig_type_info*
SWIG_pchar_descriptor(void)
{
  static int init = 0;
  static swig_type_info* info = 0;
  if (!init) {
    info = SWIG_TypeQuery("_p_char");
    init = 1;
  }
  return info;
}


SWIGINTERNINLINE PyObject *
SWIG_FromCharPtrAndSize(const char* carray, size_t size)
{
  if (carray) {
    if (size > INT_MAX) {
      swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
      return pchar_descriptor ? 
	SWIG_NewPointerObj(const_cast< char * >(carray), pchar_descriptor, 0) : SWIG_Py_Void();
    } else {
#if PY_VERSION_HEX >= 0x03000000
      return PyUnicode_FromStringAndSize(carray, static_cast< int >(size));
#else
      return PyString_FromStringAndSize(carray, static_cast< int >(size));
#endif
    }
  } else {
    return SWIG_Py_Void();
  }
}


SWIGINTERNINLINE PyObject *
SWIG_From_std_string  (const std::string& s)
{
  if (s.size()) {
    return SWIG_FromCharPtrAndSize(s.data(), s.size());
  } else {
    return SWIG_FromCharPtrAndSize(s.c_str(), 0);
  }
}


SWIGINTERNINLINE PyObject* 
SWIG_From_long_SS_long  (long long value)
{
  return ((value < LONG_MIN) || (value > LONG_MAX)) ?
    PyLong_FromLongLong(value) : PyInt_FromLong(static_cast< long >(value)); 
}


SWIGINTERN int
SWIG_AsCharPtrAndSize(PyObject *obj, char** cptr, size_t* psize, int *alloc)
{
#if PY_VERSION_HEX>=0x03000000
  if (PyUnicode_Check(obj))
#else  
  if (PyString_Check(obj))
#endif
  {
    char *cstr; Py_ssize_t len;
#if PY_VERSION_HEX>=0x03000000
    if (!alloc && cptr) {
        /* We can't allow converting without allocation, since the internal
           representation of string in Python 3 is UCS-2/UCS-4 but we require
           a UTF-8 representation.
           TODO(bhy) More detailed explanation */
        return SWIG_RuntimeError;
    }
    obj = PyUnicode_AsUTF8String(obj);
    PyBytes_AsStringAndSize(obj, &cstr, &len);
    if(alloc) *alloc = SWIG_NEWOBJ;
#else
    PyString_AsStringAndSize(obj, &cstr, &len);
#endif
    if (cptr) {
      if (alloc) {
	/* 
	   In python the user should not be able to modify the inner
	   string representation. To warranty that, if you define
	   SWIG_PYTHON_SAFE_CSTRINGS, a new/copy of the python string
	   buffer is always returned.

	   The default behavior is just to return the pointer value,
	   so, be careful.
	*/ 
#if defined(SWIG_PYTHON_SAFE_CSTRINGS)
	if (*alloc != SWIG_OLDOBJ) 
#else
	if (*alloc == SWIG_NEWOBJ) 
#endif
	  {
	    *cptr = reinterpret_cast< char* >(memcpy((new char[len + 1]), cstr, sizeof(char)*(len + 1)));
	    *alloc = SWIG_NEWOBJ;
	  }
	else {
	  *cptr = cstr;
	  *alloc = SWIG_OLDOBJ;
	}
      } else {
        #if PY_VERSION_HEX>=0x03000000
        assert(0); /* Should never reach here in Python 3 */
        #endif
	*cptr = SWIG_Python_str_AsChar(obj);
      }
    }
    if (psize) *psize = len + 1;
#if PY_VERSION_HEX>=0x03000000
    Py_XDECREF(obj);
#endif
    return SWIG_OK;
  } else {
    swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
    if (pchar_descriptor) {
      void* vptr = 0;
      if (SWIG_ConvertPtr(obj, &vptr, pchar_descriptor, 0) == SWIG_OK) {
	if (cptr) *cptr = (char *) vptr;
	if (psize) *psize = vptr ? (strlen((char *)vptr) + 1) : 0;
	if (alloc) *alloc = SWIG_OLDOBJ;
	return SWIG_OK;
      }
    }
  }
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsCharArray(PyObject * obj, char *val, size_t size)
{ 
  char* cptr = 0; size_t csize = 0; int alloc = SWIG_OLDOBJ;
  int res = SWIG_AsCharPtrAndSize(obj, &cptr, &csize, &alloc);
  if (SWIG_IsOK(res)) {
    if ((csize == size + 1) && cptr && !(cptr[csize-1])) --csize;
    if (csize <= size) {
      if (val) {
	if (csize) memcpy(val, cptr, csize*sizeof(char));
	if (csize < size) memset(val + csize, 0, (size - csize)*sizeof(char));
      }
      if (alloc == SWIG_NEWOBJ) {
	delete[] cptr;
	res = SWIG_DelNewMask(res);
      }      
      return res;
    }
    if (alloc == SWIG_NEWOBJ) delete[] cptr;
  }
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsVal_char (PyObject * obj, char *val)
{    
  int res = SWIG_AsCharArray(obj, val, 1);
  if (!SWIG_IsOK(res)) {
    long v;
    res = SWIG_AddCast(SWIG_AsVal_long (obj, &v));
    if (SWIG_IsOK(res)) {
      if ((CHAR_MIN <= v) && (v <= CHAR_MAX)) {
	if (val) *val = static_cast< char >(v);
      } else {
	res = SWIG_OverflowError;
      }
    }
  }
  return res;
}


SWIGINTERN int
SWIG_AsVal_long_SS_long (PyObject *obj, long long *val)
{
  int res = SWIG_TypeError;
  if (PyLong_Check(obj)) {
    long long v = PyLong_AsLongLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
    }
  } else {
    long v;
    res = SWIG_AsVal_long (obj,&v);
    if (SWIG_IsOK(res)) {
      if (val) *val = v;
      return res;
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    const double mant_max = 1LL << DBL_MANT_DIG;
    const double mant_min = -mant_max;
    double d;
    res = SWIG_AsVal_double (obj,&d);
    if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, mant_min, mant_max)) {
      if (val) *val = (long long)(d);
      return SWIG_AddCast(res);
    }
    res = SWIG_TypeError;
  }
#endif
  return res;
}


#define cmf_math_timeseries_begin_get(self_) new cmf::math::Time(self_->begin())
  

#define cmf_math_timeseries_step_get(self_) new cmf::math::Time(self_->step())
  

#define cmf_math_timeseries_end_get(self_) new cmf::math::Time(self_->end())
  

SWIGINTERNINLINE PyObject* 
SWIG_From_unsigned_SS_long  (unsigned long value)
{
  return (value > LONG_MAX) ?
    PyLong_FromUnsignedLong(value) : PyInt_FromLong(static_cast< long >(value)); 
}


SWIGINTERNINLINE PyObject *
SWIG_From_size_t  (size_t value)
{    
  return SWIG_From_unsigned_SS_long  (static_cast< unsigned long >(value));
}

SWIGINTERN double cmf_math_timeseries___len__(cmf::math::timeseries *self){
		return self->size();
	}

#include "math/num_array.h"

SWIGINTERN double cmf_math_num_array___getitem__(cmf::math::num_array *self,int index){
        int ndx = index < 0 ? self->size() + index : index;
        if (ndx < 0 || ndx>=self->size())
        {
            throw std::out_of_range("Index out of range");
        }
        return (*self)[ndx];
    }
SWIGINTERN void cmf_math_num_array___setitem__(cmf::math::num_array *self,int index,double value){
        int ndx = index < 0 ? self->size() - index : index;
        if (ndx < 0 || ndx>=self->size())
        {
            throw std::out_of_range("Index out of range");
        }
        (*self)[ndx]=value;
    }
SWIGINTERN int cmf_math_num_array___len__(cmf::math::num_array *self){return self->size();}
SWIGINTERN cmf::math::num_array cmf_math_num_array___radd__(cmf::math::num_array *self,real other){  return other+(*self);	}
SWIGINTERN cmf::math::num_array cmf_math_num_array___rsub__(cmf::math::num_array *self,real other){  return other-(*self);	}
SWIGINTERN cmf::math::num_array cmf_math_num_array___rmul__(cmf::math::num_array *self,real other){  return other*(*self);	}
SWIGINTERN cmf::math::num_array cmf_math_num_array___rdiv__(cmf::math::num_array *self,real other){  return other/(*self);	}

#include "math/StateVariable.h"
#include "math/Integrators/Integrator.h"
#include "math/Integrators/BDF2.h"
#include "math/Integrators/ExplicitEuler_fixed.h"
#include "math/Integrators/FixpointImplicitEuler.h"
#include "math/Integrators/RKFIntegrator.h"
#include "math/Integrators/cvodeIntegrator.h"
#include "math/Integrators/MultiIntegrator.h"


namespace swig {  
  template <class Type>
  struct noconst_traits {
    typedef Type noconst_type;
  };

  template <class Type>
  struct noconst_traits<const Type> {
    typedef Type noconst_type;
  };

  /*
    type categories
  */
  struct pointer_category { };  
  struct value_category { };

  /*
    General traits that provides type_name and type_info
  */
  template <class Type> struct traits { };

  template <class Type>
  inline const char* type_name() {
    return traits<typename noconst_traits<Type >::noconst_type >::type_name();
  }

  template <class Type> 
  struct traits_info {
    static swig_type_info *type_query(std::string name) {
      name += " *";
      return SWIG_TypeQuery(name.c_str());
    }    
    static swig_type_info *type_info() {
      static swig_type_info *info = type_query(type_name<Type>());
      return info;
    }
  };

  template <class Type>
  inline swig_type_info *type_info() {
    return traits_info<Type>::type_info();
  }

  /*
    Partial specialization for pointers
  */
  template <class Type> struct traits <Type *> {
    typedef pointer_category category;
    static std::string make_ptr_name(const char* name) {
      std::string ptrname = name;
      ptrname += " *";
      return ptrname;
    }    
    static const char* type_name() {
      static std::string name = make_ptr_name(swig::type_name<Type>());
      return name.c_str();
    }
  };

  template <class Type, class Category> 
  struct traits_as { };
 
  template <class Type, class Category> 
  struct traits_check { };

}


namespace swig {  
  /*
    Traits that provides the from method
  */
  template <class Type> struct traits_from_ptr {
    static PyObject *from(Type *val, int owner = 0) {
      return SWIG_NewPointerObj(val, type_info<Type>(), owner);
    }
  };

  template <class Type> struct traits_from {
    static PyObject *from(const Type& val) {
      return traits_from_ptr<Type>::from(new Type(val), 1);
    }
  };

  template <class Type> struct traits_from<Type *> {
    static PyObject *from(Type* val) {
      return traits_from_ptr<Type>::from(val, 0);
    }
  };

  template <class Type> struct traits_from<const Type *> {
    static PyObject *from(const Type* val) {
      return traits_from_ptr<Type>::from(const_cast<Type*>(val), 0);
    }
  };


  template <class Type>
  inline PyObject *from(const Type& val) {
    return traits_from<Type>::from(val);
  }

  template <class Type>
  inline PyObject *from_ptr(Type* val, int owner) {
    return traits_from_ptr<Type>::from(val, owner);
  }

  /*
    Traits that provides the asval/as/check method
  */
  template <class Type>
  struct traits_asptr {   
    static int asptr(PyObject *obj, Type **val) {
      Type *p;
      int res = SWIG_ConvertPtr(obj, (void**)&p, type_info<Type>(), 0);
      if (SWIG_IsOK(res)) {
	if (val) *val = p;
      }
      return res;
    }
  }; 

  template <class Type>
  inline int asptr(PyObject *obj, Type **vptr) {
    return traits_asptr<Type>::asptr(obj, vptr);
  }

  template <class Type> 
  struct traits_asval {
    static int asval(PyObject *obj, Type *val) {
      if (val) {
	Type *p = 0;
	int res = traits_asptr<Type>::asptr(obj, &p);
	if (!SWIG_IsOK(res)) return res;	
	if (p) {
	  typedef typename noconst_traits<Type>::noconst_type noconst_type;
	  *(const_cast<noconst_type*>(val)) = *p;
	  if (SWIG_IsNewObj(res)){
	    delete p;
	    res = SWIG_DelNewMask(res);
	  }
	  return res;
	} else {
	  return SWIG_ERROR;
	}
      } else {
	return traits_asptr<Type>::asptr(obj, (Type **)(0));
      }
    }
  };

  template <class Type> struct traits_asval<Type*> {
    static int asval(PyObject *obj, Type **val) {
      if (val) {
        typedef typename noconst_traits<Type>::noconst_type noconst_type;
        noconst_type *p = 0;
        int res = traits_asptr<noconst_type>::asptr(obj,  &p);
        if (SWIG_IsOK(res)) {
          *(const_cast<noconst_type**>(val)) = p;
	}
	return res;
      } else {
	return traits_asptr<Type>::asptr(obj, (Type **)(0));
      }
    }
  };
  
  template <class Type>
  inline int asval(PyObject *obj, Type *val) {
    return traits_asval<Type>::asval(obj, val);
  }

  template <class Type> 
  struct traits_as<Type, value_category> {
    static Type as(PyObject *obj, bool throw_error) {
      Type v;
      int res = asval(obj, &v);
      if (!obj || !SWIG_IsOK(res)) {
	if (!PyErr_Occurred()) {
	  ::SWIG_Error(SWIG_TypeError,  swig::type_name<Type>());
	}
	if (throw_error) throw std::invalid_argument("bad type");
      }
      return v;
    }
  };

  template <class Type> 
  struct traits_as<Type, pointer_category> {
    static Type as(PyObject *obj, bool throw_error) {
      Type *v = 0;      
      int res = (obj ? traits_asptr<Type>::asptr(obj, &v) : SWIG_ERROR);
      if (SWIG_IsOK(res) && v) {
	if (SWIG_IsNewObj(res)) {
	  Type r(*v);
	  delete v;
	  return r;
	} else {
	  return *v;
	}
      } else {
	// Uninitialized return value, no Type() constructor required.
	static Type *v_def = (Type*) malloc(sizeof(Type));
	if (!PyErr_Occurred()) {
	  SWIG_Error(SWIG_TypeError,  swig::type_name<Type>());
	}
	if (throw_error) throw std::invalid_argument("bad type");
	memset(v_def,0,sizeof(Type));
	return *v_def;
      }
    }
  };

  template <class Type> 
  struct traits_as<Type*, pointer_category> {
    static Type* as(PyObject *obj, bool throw_error) {
      Type *v = 0;      
      int res = (obj ? traits_asptr<Type>::asptr(obj, &v) : SWIG_ERROR);
      if (SWIG_IsOK(res)) {
	return v;
      } else {
	if (!PyErr_Occurred()) {
	  SWIG_Error(SWIG_TypeError,  swig::type_name<Type>());
	}
	if (throw_error) throw std::invalid_argument("bad type");
	return 0;
      }
    }
  };
    
  template <class Type>
  inline Type as(PyObject *obj, bool te = false) {
    return traits_as<Type, typename traits<Type>::category>::as(obj, te);
  }

  template <class Type> 
  struct traits_check<Type, value_category> {
    static bool check(PyObject *obj) {
      int res = obj ? asval(obj, (Type *)(0)) : SWIG_ERROR;
      return SWIG_IsOK(res) ? true : false;
    }
  };

  template <class Type> 
  struct traits_check<Type, pointer_category> {
    static bool check(PyObject *obj) {
      int res = obj ? asptr(obj, (Type **)(0)) : SWIG_ERROR;
      return SWIG_IsOK(res) ? true : false;
    }
  };

  template <class Type>
  inline bool check(PyObject *obj) {
    return traits_check<Type, typename traits<Type>::category>::check(obj);
  }
}


#include <functional>

namespace std {
  template <>
  struct less <PyObject *>: public binary_function<PyObject *, PyObject *, bool>
  {
    bool
    operator()(PyObject * v, PyObject *w) const
    { 
      bool res;
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      res = PyObject_RichCompareBool(v, w, Py_LT) ? true : false;
      /* This may fall into a case of inconsistent
               eg. ObjA > ObjX > ObjB
               but ObjA < ObjB
      */
      if( PyErr_Occurred() && PyErr_ExceptionMatches(PyExc_TypeError) )
      {
        /* Objects can't be compared, this mostly occurred in Python 3.0 */
        /* Compare their ptr directly for a workaround */
        res = (v < w);
        PyErr_Clear();
      }
      SWIG_PYTHON_THREAD_END_BLOCK;
      return res;
    }
  };

  template <>
  struct less <swig::SwigPtr_PyObject>: public binary_function<swig::SwigPtr_PyObject, swig::SwigPtr_PyObject, bool>
  {
    bool
    operator()(const swig::SwigPtr_PyObject& v, const swig::SwigPtr_PyObject& w) const
    {
      return std::less<PyObject *>()(v, w);
    }
  };

  template <>
  struct less <swig::SwigVar_PyObject>: public binary_function<swig::SwigVar_PyObject, swig::SwigVar_PyObject, bool>
  {
    bool
    operator()(const swig::SwigVar_PyObject& v, const swig::SwigVar_PyObject& w) const
    {
      return std::less<PyObject *>()(v, w);
    }
  };

}

namespace swig {
  template <> struct traits<PyObject *> {
    typedef value_category category;
    static const char* type_name() { return "PyObject *"; }
  };  

  template <>  struct traits_asval<PyObject * > {   
    typedef PyObject * value_type;
    static int asval(PyObject *obj, value_type *val) {
      if (val) *val = obj;
      return SWIG_OK;
    }
  };

  template <> 
  struct traits_check<PyObject *, value_category> {
    static bool check(PyObject *) {
      return true;
    }
  };

  template <>  struct traits_from<PyObject *> {
    typedef PyObject * value_type;
    static PyObject *from(const value_type& val) {
      Py_XINCREF(val);
      return val;
    }
  };
  
}

namespace swig {
  inline size_t
  check_index(ptrdiff_t i, size_t size, bool insert = false) {
    if ( i < 0 ) {
      if ((size_t) (-i) <= size)
	return (size_t) (i + size);
    } else if ( (size_t) i < size ) {
      return (size_t) i;
    } else if (insert && ((size_t) i == size)) {
      return size;
    }
    
    throw std::out_of_range("index out of range");
  }

  inline size_t
  slice_index(ptrdiff_t i, size_t size) {
    if ( i < 0 ) {
      if ((size_t) (-i) <= size) {
	return (size_t) (i + size);
      } else {
	throw std::out_of_range("index out of range");
      }
    } else {
      return ( (size_t) i < size ) ? ((size_t) i) : size;
    }
  }

  template <class Sequence, class Difference>
  inline typename Sequence::iterator
  getpos(Sequence* self, Difference i)  {
    typename Sequence::iterator pos = self->begin();
    std::advance(pos, check_index(i,self->size()));
    return pos;
  }

  template <class Sequence, class Difference>
  inline typename Sequence::const_iterator
  cgetpos(const Sequence* self, Difference i)  {
    typename Sequence::const_iterator pos = self->begin();
    std::advance(pos, check_index(i,self->size()));
    return pos;
  }

  template <class Sequence, class Difference>
  inline Sequence*
  getslice(const Sequence* self, Difference i, Difference j) {
    typename Sequence::size_type size = self->size();
    typename Sequence::size_type ii = swig::check_index(i, size);
    typename Sequence::size_type jj = swig::slice_index(j, size);

    if (jj > ii) {
      typename Sequence::const_iterator vb = self->begin();
      typename Sequence::const_iterator ve = self->begin();
      std::advance(vb,ii);
      std::advance(ve,jj);
      return new Sequence(vb, ve);
    } else {
      return new Sequence();
    }
  }

  template <class Sequence, class Difference, class InputSeq>
  inline void
  setslice(Sequence* self, Difference i, Difference j, const InputSeq& v) {
    typename Sequence::size_type size = self->size();
    typename Sequence::size_type ii = swig::check_index(i, size, true);
    typename Sequence::size_type jj = swig::slice_index(j, size);
    if (jj < ii) jj = ii;
    size_t ssize = jj - ii;
    if (ssize <= v.size()) {
      typename Sequence::iterator sb = self->begin();
      typename InputSeq::const_iterator vmid = v.begin();
      std::advance(sb,ii);
      std::advance(vmid, jj - ii);
      self->insert(std::copy(v.begin(), vmid, sb), vmid, v.end());
    } else {
      typename Sequence::iterator sb = self->begin();
      typename Sequence::iterator se = self->begin();
      std::advance(sb,ii);
      std::advance(se,jj);
      self->erase(sb,se);
      self->insert(sb, v.begin(), v.end());
    }
  }

  template <class Sequence, class Difference>
  inline void
  delslice(Sequence* self, Difference i, Difference j) {
    typename Sequence::size_type size = self->size();
    typename Sequence::size_type ii = swig::check_index(i, size, true);
    typename Sequence::size_type jj = swig::slice_index(j, size);
    if (jj > ii) {
      typename Sequence::iterator sb = self->begin();
      typename Sequence::iterator se = self->begin();
      std::advance(sb,ii);
      std::advance(se,jj);
      self->erase(sb,se);
    }
  }
}


#if defined(__SUNPRO_CC) && defined(_RWSTD_VER)
#  if !defined(SWIG_NO_STD_NOITERATOR_TRAITS_STL)
#    define SWIG_STD_NOITERATOR_TRAITS_STL
#  endif
#endif

#if !defined(SWIG_STD_NOITERATOR_TRAITS_STL)
#include <iterator>
#else
namespace std {
  template <class Iterator>
  struct iterator_traits {
    typedef ptrdiff_t difference_type;
    typedef typename Iterator::value_type value_type;
  };

  template <class Iterator, class Category,class T, class Reference, class Pointer, class Distance>
  struct iterator_traits<__reverse_bi_iterator<Iterator,Category,T,Reference,Pointer,Distance> > {
    typedef Distance difference_type;
    typedef T value_type;
  };

  template <class T>
  struct iterator_traits<T*> {
    typedef T value_type;
    typedef ptrdiff_t difference_type;
  };

  template<typename _InputIterator>
  inline typename iterator_traits<_InputIterator>::difference_type
  distance(_InputIterator __first, _InputIterator __last)
  {
    typename iterator_traits<_InputIterator>::difference_type __n = 0;
    while (__first != __last) {
      ++__first; ++__n;
    }
    return __n;
  }
}
#endif


namespace swig {
  template<typename OutIterator>
  class SwigPyIterator_T :  public SwigPyIterator
  {
  public:
    typedef OutIterator out_iterator;
    typedef typename std::iterator_traits<out_iterator>::value_type value_type;    
    typedef SwigPyIterator_T<out_iterator> self_type;

    SwigPyIterator_T(out_iterator curr, PyObject *seq)
      : SwigPyIterator(seq), current(curr)
    {
    }

    const out_iterator& get_current() const
    {
      return current;
    }

    
    bool equal (const SwigPyIterator &iter) const
    {
      const self_type *iters = dynamic_cast<const self_type *>(&iter);
      if (iters) {
	return (current == iters->get_current());
      } else {
	throw std::invalid_argument("bad iterator type");
      }
    }
    
    ptrdiff_t distance(const SwigPyIterator &iter) const
    {
      const self_type *iters = dynamic_cast<const self_type *>(&iter);
      if (iters) {
	return std::distance(current, iters->get_current());
      } else {
	throw std::invalid_argument("bad iterator type");
      }
    }    
    
  protected:
    out_iterator current;
  };
  
  template <class ValueType>
  struct from_oper 
  {
    typedef const ValueType& argument_type;
    typedef PyObject *result_type;
    result_type operator()(argument_type v) const
    {
      return swig::from(v);
    }
  };

  template<typename OutIterator, 
	   typename ValueType = typename std::iterator_traits<OutIterator>::value_type,
	   typename FromOper = from_oper<ValueType> >
  class SwigPyIteratorOpen_T :  public SwigPyIterator_T<OutIterator>
  {
  public:
    FromOper from;
    typedef OutIterator out_iterator;
    typedef ValueType value_type;
    typedef SwigPyIterator_T<out_iterator>  base;
    typedef SwigPyIteratorOpen_T<OutIterator, ValueType, FromOper> self_type;
    
    SwigPyIteratorOpen_T(out_iterator curr, PyObject *seq)
      : SwigPyIterator_T<OutIterator>(curr, seq)
    {
    }
    
    PyObject *value() const {
      return from(static_cast<const value_type&>(*(base::current)));
    }
    
    SwigPyIterator *copy() const
    {
      return new self_type(*this);
    }

    SwigPyIterator *incr(size_t n = 1)
    {
      while (n--) {
	++base::current;
      }
      return this;
    }

    SwigPyIterator *decr(size_t n = 1)
    {
      while (n--) {
	--base::current;
      }
      return this;
    }
  };

  template<typename OutIterator, 
	   typename ValueType = typename std::iterator_traits<OutIterator>::value_type,
	   typename FromOper = from_oper<ValueType> >
  class SwigPyIteratorClosed_T :  public SwigPyIterator_T<OutIterator>
  {
  public:
    FromOper from;
    typedef OutIterator out_iterator;
    typedef ValueType value_type;
    typedef SwigPyIterator_T<out_iterator>  base;    
    typedef SwigPyIteratorClosed_T<OutIterator, ValueType, FromOper> self_type;
    
    SwigPyIteratorClosed_T(out_iterator curr, out_iterator first, out_iterator last, PyObject *seq)
      : SwigPyIterator_T<OutIterator>(curr, seq), begin(first), end(last)
    {
    }
    
    PyObject *value() const {
      if (base::current == end) {
	throw stop_iteration();
      } else {
	return from(static_cast<const value_type&>(*(base::current)));
      }
    }
    
    SwigPyIterator *copy() const
    {
      return new self_type(*this);
    }

    SwigPyIterator *incr(size_t n = 1)
    {
      while (n--) {
	if (base::current == end) {
	  throw stop_iteration();
	} else {
	  ++base::current;
	}
      }
      return this;
    }

    SwigPyIterator *decr(size_t n = 1)
    {
      while (n--) {
	if (base::current == begin) {
	  throw stop_iteration();
	} else {
	  --base::current;
	}
      }
      return this;
    }

  private:
    out_iterator begin;
    out_iterator end;
  };

  template<typename OutIter>
  inline SwigPyIterator*
  make_output_iterator(const OutIter& current, const OutIter& begin,const OutIter& end, PyObject *seq = 0)
  {
    return new SwigPyIteratorClosed_T<OutIter>(current, begin, end, seq);
  }

  template<typename OutIter>
  inline SwigPyIterator*
  make_output_iterator(const OutIter& current, PyObject *seq = 0)
  {
    return new SwigPyIteratorOpen_T<OutIter>(current, seq);
  }
}


namespace swig
{
  template <class T>
  struct SwigPySequence_Ref
  {
    SwigPySequence_Ref(PyObject* seq, int index)
      : _seq(seq), _index(index)
    {
    }
    
    operator T () const
    {
      swig::SwigVar_PyObject item = PySequence_GetItem(_seq, _index);
      try {
	return swig::as<T>(item, true);
      } catch (std::exception& e) {
	char msg[1024];
	sprintf(msg, "in sequence element %d ", _index);
	if (!PyErr_Occurred()) {
	  ::SWIG_Error(SWIG_TypeError,  swig::type_name<T>());
	}
	SWIG_Python_AddErrorMsg(msg);
	SWIG_Python_AddErrorMsg(e.what());
	throw;
      }
    }

    SwigPySequence_Ref& operator=(const T& v)
    {
      PySequence_SetItem(_seq, _index, swig::from<T>(v));
      return *this;
    }

  private:
    PyObject* _seq;
    int _index;
  };

  template <class T>
  struct SwigPySequence_ArrowProxy
  {
    SwigPySequence_ArrowProxy(const T& x): m_value(x) {}
    const T* operator->() const { return &m_value; }
    operator const T*() const { return &m_value; }
    T m_value;
  };

  template <class T, class Reference >
  struct SwigPySequence_InputIterator
  {
    typedef SwigPySequence_InputIterator<T, Reference > self;

    typedef std::random_access_iterator_tag iterator_category;
    typedef Reference reference;
    typedef T value_type;
    typedef T* pointer;
    typedef int difference_type;

    SwigPySequence_InputIterator()
    {
    }

    SwigPySequence_InputIterator(PyObject* seq, int index)
      : _seq(seq), _index(index)
    {
    }

    reference operator*() const
    {
      return reference(_seq, _index);
    }

    SwigPySequence_ArrowProxy<T>
    operator->() const {
      return SwigPySequence_ArrowProxy<T>(operator*());
    }

    bool operator==(const self& ri) const
    {
      return (_index == ri._index) && (_seq == ri._seq);
    }

    bool operator!=(const self& ri) const
    {
      return !(operator==(ri));
    }

    self& operator ++ ()
    {
      ++_index;
      return *this;
    }

    self& operator -- ()
    {
      --_index;
      return *this;
    }

    self& operator += (difference_type n)
    {
      _index += n;
      return *this;
    }

    self operator +(difference_type n) const
    {
      return self(_seq, _index + n);
    }

    self& operator -= (difference_type n)
    {
      _index -= n;
      return *this;
    }

    self operator -(difference_type n) const
    {
      return self(_seq, _index - n);
    }

    difference_type operator - (const self& ri) const
    {
      return _index - ri._index;
    }

    bool operator < (const self& ri) const
    {
      return _index < ri._index;
    }

    reference
    operator[](difference_type n) const
    {
      return reference(_seq, _index + n);
    }

  private:
    PyObject* _seq;
    difference_type _index;
  };

  template <class T>
  struct SwigPySequence_Cont
  {
    typedef SwigPySequence_Ref<T> reference;
    typedef const SwigPySequence_Ref<T> const_reference;
    typedef T value_type;
    typedef T* pointer;
    typedef int difference_type;
    typedef int size_type;
    typedef const pointer const_pointer;
    typedef SwigPySequence_InputIterator<T, reference> iterator;
    typedef SwigPySequence_InputIterator<T, const_reference> const_iterator;

    SwigPySequence_Cont(PyObject* seq) : _seq(0)
    {
      if (!PySequence_Check(seq)) {
	throw std::invalid_argument("a sequence is expected");
      }
      _seq = seq;
      Py_INCREF(_seq);
    }

    ~SwigPySequence_Cont()
    {
      Py_XDECREF(_seq);
    }

    size_type size() const
    {
      return static_cast<size_type>(PySequence_Size(_seq));
    }

    bool empty() const
    {
      return size() == 0;
    }

    iterator begin()
    {
      return iterator(_seq, 0);
    }

    const_iterator begin() const
    {
      return const_iterator(_seq, 0);
    }

    iterator end()
    {
      return iterator(_seq, size());
    }

    const_iterator end() const
    {
      return const_iterator(_seq, size());
    }

    reference operator[](difference_type n)
    {
      return reference(_seq, n);
    }

    const_reference operator[](difference_type n)  const
    {
      return const_reference(_seq, n);
    }

    bool check(bool set_err = true) const
    {
      int s = size();
      for (int i = 0; i < s; ++i) {
	swig::SwigVar_PyObject item = PySequence_GetItem(_seq, i);
	if (!swig::check<value_type>(item)) {
	  if (set_err) {
	    char msg[1024];
	    sprintf(msg, "in sequence element %d", i);
	    SWIG_Error(SWIG_RuntimeError, msg);
	  }
	  return false;
	}
      }
      return true;
    }

  private:
    PyObject* _seq;
  };

}


  namespace swig {
    template <>  struct traits<cmf::math::StateVariable > {
      typedef pointer_category category;
      static const char* type_name() { return"cmf::math::StateVariable"; }
    };
  }


namespace swig {
  template <class SwigPySeq, class Seq>
  inline void
  assign(const SwigPySeq& swigpyseq, Seq* seq) {
    // seq->assign(swigpyseq.begin(), swigpyseq.end()); // not used as not always implemented
    typedef typename SwigPySeq::value_type value_type;
    typename SwigPySeq::const_iterator it = swigpyseq.begin();
    for (;it != swigpyseq.end(); ++it) {
      seq->insert(seq->end(),(value_type)(*it));
    }
  }

  template <class Seq, class T = typename Seq::value_type >
  struct traits_asptr_stdseq {
    typedef Seq sequence;
    typedef T value_type;

    static int asptr(PyObject *obj, sequence **seq) {
      if (obj == Py_None || SWIG_Python_GetSwigThis(obj)) {
	sequence *p;
	if (::SWIG_ConvertPtr(obj,(void**)&p,
			      swig::type_info<sequence>(),0) == SWIG_OK) {
	  if (seq) *seq = p;
	  return SWIG_OLDOBJ;
	}
      } else if (PySequence_Check(obj)) {
	try {
	  SwigPySequence_Cont<value_type> swigpyseq(obj);
	  if (seq) {
	    sequence *pseq = new sequence();
	    assign(swigpyseq, pseq);
	    *seq = pseq;
	    return SWIG_NEWOBJ;
	  } else {
	    return swigpyseq.check() ? SWIG_OK : SWIG_ERROR;
	  }
	} catch (std::exception& e) {
	  if (seq) {
	    if (!PyErr_Occurred()) {
	      PyErr_SetString(PyExc_TypeError, e.what());
	    }
	  }
	  return SWIG_ERROR;
	}
      }
      return SWIG_ERROR;
    }
  };

  template <class Seq, class T = typename Seq::value_type >
  struct traits_from_stdseq {
    typedef Seq sequence;
    typedef T value_type;
    typedef typename Seq::size_type size_type;
    typedef typename sequence::const_iterator const_iterator;

    static PyObject *from(const sequence& seq) {
#ifdef SWIG_PYTHON_EXTRA_NATIVE_CONTAINERS
      swig_type_info *desc = swig::type_info<sequence>();
      if (desc && desc->clientdata) {
	return SWIG_NewPointerObj(new sequence(seq), desc, SWIG_POINTER_OWN);
      }
#endif
      size_type size = seq.size();
      if (size <= (size_type)INT_MAX) {
	PyObject *obj = PyTuple_New((int)size);
	int i = 0;
	for (const_iterator it = seq.begin();
	     it != seq.end(); ++it, ++i) {
	  PyTuple_SetItem(obj,i,swig::from<value_type>(*it));
	}
	return obj;
      } else {
	PyErr_SetString(PyExc_OverflowError,"sequence size not valid in python");
	return NULL;
      }
    }
  };
}


  namespace swig {
    template <class T>
    struct traits_asptr<std::vector<T> >  {
      static int asptr(PyObject *obj, std::vector<T> **vec) {
	return traits_asptr_stdseq<std::vector<T> >::asptr(obj, vec);
      }
    };
    
    template <class T>
    struct traits_from<std::vector<T> > {
      static PyObject *from(const std::vector<T>& vec) {
	return traits_from_stdseq<std::vector<T> >::from(vec);
      }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector<cmf::math::StateVariable*, std::allocator< cmf::math::StateVariable * > > > {
	  typedef value_category category;
	  static const char* type_name() {
	    return "std::vector<" "cmf::math::StateVariable" " *," "std::allocator< cmf::math::StateVariable * >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_vector_Sl_cmf_math_StateVariable_Sm__Sg__iterator(std::vector< cmf::math::StateVariable * > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_cmf_math_StateVariable_Sm__Sg____nonzero__(std::vector< cmf::math::StateVariable * > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_vector_Sl_cmf_math_StateVariable_Sm__Sg____bool__(std::vector< cmf::math::StateVariable * > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< cmf::math::StateVariable * >::size_type std_vector_Sl_cmf_math_StateVariable_Sm__Sg____len__(std::vector< cmf::math::StateVariable * > const *self){
      return self->size();
    }
SWIGINTERN std::vector< cmf::math::StateVariable * >::value_type std_vector_Sl_cmf_math_StateVariable_Sm__Sg__pop(std::vector< cmf::math::StateVariable * > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector<cmf::math::StateVariable*,std::allocator< cmf::math::StateVariable * > >::value_type x = self->back();
      self->pop_back();
      return x;
    }

struct SWIG_null_deleter {
  void operator() (void const *) const {
  }
};
#define SWIG_NO_NULL_DELETER_0 , SWIG_null_deleter()
#define SWIG_NO_NULL_DELETER_1
#define SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW
#define SWIG_NO_NULL_DELETER_SWIG_POINTER_OWN

SWIGINTERN std::vector< cmf::math::StateVariable *,std::allocator< cmf::math::StateVariable * > > *std_vector_Sl_cmf_math_StateVariable_Sm__Sg____getslice__(std::vector< cmf::math::StateVariable * > *self,std::vector< cmf::math::StateVariable * >::difference_type i,std::vector< cmf::math::StateVariable * >::difference_type j){
      return swig::getslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_cmf_math_StateVariable_Sm__Sg____setslice__(std::vector< cmf::math::StateVariable * > *self,std::vector< cmf::math::StateVariable * >::difference_type i,std::vector< cmf::math::StateVariable * >::difference_type j,std::vector< cmf::math::StateVariable *,std::allocator< cmf::math::StateVariable * > > const &v){
      swig::setslice(self, i, j, v);
    }
SWIGINTERN void std_vector_Sl_cmf_math_StateVariable_Sm__Sg____delslice__(std::vector< cmf::math::StateVariable * > *self,std::vector< cmf::math::StateVariable * >::difference_type i,std::vector< cmf::math::StateVariable * >::difference_type j){
      swig::delslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_cmf_math_StateVariable_Sm__Sg____delitem____SWIG_0(std::vector< cmf::math::StateVariable * > *self,std::vector< cmf::math::StateVariable * >::difference_type i){
      self->erase(swig::getpos(self,i));
    }
SWIGINTERN std::vector< cmf::math::StateVariable *,std::allocator< cmf::math::StateVariable * > > *std_vector_Sl_cmf_math_StateVariable_Sm__Sg____getitem____SWIG_0(std::vector< cmf::math::StateVariable * > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(slice, self->size(), &i, &j, &step);
      return swig::getslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_cmf_math_StateVariable_Sm__Sg____setitem____SWIG_0(std::vector< cmf::math::StateVariable * > *self,PySliceObject *slice,std::vector< cmf::math::StateVariable *,std::allocator< cmf::math::StateVariable * > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(slice, self->size(), &i, &j, &step);
      swig::setslice(self, i, j, v);
    }
SWIGINTERN void std_vector_Sl_cmf_math_StateVariable_Sm__Sg____delitem____SWIG_1(std::vector< cmf::math::StateVariable * > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(slice, self->size(), &i, &j, &step);
      swig::delslice(self, i,j);
    }
SWIGINTERN std::vector< cmf::math::StateVariable * >::value_type std_vector_Sl_cmf_math_StateVariable_Sm__Sg____getitem____SWIG_1(std::vector< cmf::math::StateVariable * > *self,std::vector< cmf::math::StateVariable * >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_cmf_math_StateVariable_Sm__Sg____setitem____SWIG_1(std::vector< cmf::math::StateVariable * > *self,std::vector< cmf::math::StateVariable * >::difference_type i,std::vector< cmf::math::StateVariable * >::value_type x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN void std_vector_Sl_cmf_math_StateVariable_Sm__Sg__append(std::vector< cmf::math::StateVariable * > *self,std::vector< cmf::math::StateVariable * >::value_type x){
      self->push_back(x);
    }

#define cmf_math_StateVariable_state_get(self_) self_->get_state()
#define cmf_math_StateVariable_state_set(self_, val_) self_->set_state(val_)
  

SWIGINTERN int
SWIG_AsVal_bool (PyObject *obj, bool *val)
{
  int r = PyObject_IsTrue(obj);
  if (r == -1)
    return SWIG_ERROR;
  if (val) *val = r ? true : false;
  return SWIG_OK;
}


SWIGINTERNINLINE PyObject *
SWIG_From_char  (char c) 
{ 
  return SWIG_FromCharPtrAndSize(&c,1);
}


	// Include Water
	#include "water/Solute.h"
	#include "water/SoluteStorage.h"
	#include "water/WaterStorage.h"
	#include "water/flux_connection.h"
    #include "water/boundary_condition.h"


SWIGINTERN int
SWIG_AsPtr_std_string (PyObject * obj, std::string **val) 
{
  char* buf = 0 ; size_t size = 0; int alloc = SWIG_OLDOBJ;
  if (SWIG_IsOK((SWIG_AsCharPtrAndSize(obj, &buf, &size, &alloc)))) {
    if (buf) {
      if (val) *val = new std::string(buf, size - 1);
      if (alloc == SWIG_NEWOBJ) delete[] buf;
      return SWIG_NEWOBJ;
    } else {
      if (val) *val = 0;
      return SWIG_OLDOBJ;
    }
  } else {
    static int init = 0;
    static swig_type_info* descriptor = 0;
    if (!init) {
      descriptor = SWIG_TypeQuery("std::string" " *");
      init = 1;
    }
    if (descriptor) {
      std::string *vptr;
      int res = SWIG_ConvertPtr(obj, (void**)&vptr, descriptor, 0);
      if (SWIG_IsOK(res) && val) *val = vptr;
      return res;
    }
  }
  return SWIG_ERROR;
}

SWIGINTERN std::string cmf_water_solute___repr__(cmf::water::solute *self){ return "[" + self->Name + "]"; }
SWIGINTERN cmf::water::solute *cmf_water_solute_vector___getitem__(cmf::water::solute_vector *self,int i){
		return self->get_solute(i);
	}
SWIGINTERN size_t cmf_water_solute_vector___len__(cmf::water::solute_vector *self){ return self->size();}
SWIGINTERN cmf::math::timeseries &cmf_water_SoluteTimeseries___getitem__(cmf::water::SoluteTimeseries *self,cmf::water::solute const &solute){
		return (*self)[solute];
	}
SWIGINTERN void cmf_water_SoluteTimeseries___setitem__(cmf::water::SoluteTimeseries *self,cmf::water::solute const &solute,cmf::math::timeseries concentration){
		(*self)[solute]=concentration;
	}
SWIGINTERN size_t cmf_water_SoluteTimeseries___len__(cmf::water::SoluteTimeseries const *self){
		return self->size();
	}
SWIGINTERN std::tr1::shared_ptr< cmf::math::StateVariable > cmf_water_SoluteStorage_SWIGSharedPtrUpcast(std::tr1::shared_ptr< cmf::water::SoluteStorage > swigSharedPtrUpcast){
    return swigSharedPtrUpcast;
  }

  namespace swig {
    template <>  struct traits<cmf::water::flux_connection > {
      typedef pointer_category category;
      static const char* type_name() { return"cmf::water::flux_connection"; }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector<cmf::water::flux_connection*, std::allocator< cmf::water::flux_connection * > > > {
	  typedef value_category category;
	  static const char* type_name() {
	    return "std::vector<" "cmf::water::flux_connection" " *," "std::allocator< cmf::water::flux_connection * >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_vector_Sl_cmf_water_flux_connection_Sm__Sg__iterator(std::vector< cmf::water::flux_connection * > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_cmf_water_flux_connection_Sm__Sg____nonzero__(std::vector< cmf::water::flux_connection * > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_vector_Sl_cmf_water_flux_connection_Sm__Sg____bool__(std::vector< cmf::water::flux_connection * > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< cmf::water::flux_connection * >::size_type std_vector_Sl_cmf_water_flux_connection_Sm__Sg____len__(std::vector< cmf::water::flux_connection * > const *self){
      return self->size();
    }
SWIGINTERN std::vector< cmf::water::flux_connection * >::value_type std_vector_Sl_cmf_water_flux_connection_Sm__Sg__pop(std::vector< cmf::water::flux_connection * > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector<cmf::water::flux_connection*,std::allocator< cmf::water::flux_connection * > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN std::vector< cmf::water::flux_connection *,std::allocator< cmf::water::flux_connection * > > *std_vector_Sl_cmf_water_flux_connection_Sm__Sg____getslice__(std::vector< cmf::water::flux_connection * > *self,std::vector< cmf::water::flux_connection * >::difference_type i,std::vector< cmf::water::flux_connection * >::difference_type j){
      return swig::getslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_cmf_water_flux_connection_Sm__Sg____setslice__(std::vector< cmf::water::flux_connection * > *self,std::vector< cmf::water::flux_connection * >::difference_type i,std::vector< cmf::water::flux_connection * >::difference_type j,std::vector< cmf::water::flux_connection *,std::allocator< cmf::water::flux_connection * > > const &v){
      swig::setslice(self, i, j, v);
    }
SWIGINTERN void std_vector_Sl_cmf_water_flux_connection_Sm__Sg____delslice__(std::vector< cmf::water::flux_connection * > *self,std::vector< cmf::water::flux_connection * >::difference_type i,std::vector< cmf::water::flux_connection * >::difference_type j){
      swig::delslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_cmf_water_flux_connection_Sm__Sg____delitem____SWIG_0(std::vector< cmf::water::flux_connection * > *self,std::vector< cmf::water::flux_connection * >::difference_type i){
      self->erase(swig::getpos(self,i));
    }
SWIGINTERN std::vector< cmf::water::flux_connection *,std::allocator< cmf::water::flux_connection * > > *std_vector_Sl_cmf_water_flux_connection_Sm__Sg____getitem____SWIG_0(std::vector< cmf::water::flux_connection * > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(slice, self->size(), &i, &j, &step);
      return swig::getslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_cmf_water_flux_connection_Sm__Sg____setitem____SWIG_0(std::vector< cmf::water::flux_connection * > *self,PySliceObject *slice,std::vector< cmf::water::flux_connection *,std::allocator< cmf::water::flux_connection * > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(slice, self->size(), &i, &j, &step);
      swig::setslice(self, i, j, v);
    }
SWIGINTERN void std_vector_Sl_cmf_water_flux_connection_Sm__Sg____delitem____SWIG_1(std::vector< cmf::water::flux_connection * > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(slice, self->size(), &i, &j, &step);
      swig::delslice(self, i,j);
    }
SWIGINTERN std::vector< cmf::water::flux_connection * >::value_type std_vector_Sl_cmf_water_flux_connection_Sm__Sg____getitem____SWIG_1(std::vector< cmf::water::flux_connection * > *self,std::vector< cmf::water::flux_connection * >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_cmf_water_flux_connection_Sm__Sg____setitem____SWIG_1(std::vector< cmf::water::flux_connection * > *self,std::vector< cmf::water::flux_connection * >::difference_type i,std::vector< cmf::water::flux_connection * >::value_type x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN void std_vector_Sl_cmf_water_flux_connection_Sm__Sg__append(std::vector< cmf::water::flux_connection * > *self,std::vector< cmf::water::flux_connection * >::value_type x){
      self->push_back(x);
    }

  namespace swig {
    template <>  struct traits<cmf::water::flux_connection * > {
      typedef pointer_category category;
      static const char* type_name() { return"cmf::water::flux_connection *"; }
    };
  }


  namespace swig {
    template <class SwigPySeq, class T> 
    inline void 
    assign(const SwigPySeq& swigpyseq, std::set<T>* seq) {
      // seq->insert(swigpyseq.begin(), swigpyseq.end()); // not used as not always implemented
      typedef typename SwigPySeq::value_type value_type;
      typename SwigPySeq::const_iterator it = swigpyseq.begin();
      for (;it != swigpyseq.end(); ++it) {
	seq->insert(seq->end(),(value_type)(*it));
      }
    }

    template <class T>
    struct traits_asptr<std::set<T> >  {
      static int asptr(PyObject *obj, std::set<T> **s) {
	return traits_asptr_stdseq<std::set<T> >::asptr(obj, s);
      }
    };

    template <class T>
    struct traits_from<std::set<T> > {
      static PyObject *from(const std::set<T>& vec) {
	return traits_from_stdseq<std::set<T> >::from(vec);
      }
    };
  }


      namespace swig {
	template <>  struct traits<std::set<cmf::water::flux_connection *, std::less< cmf::water::flux_connection * >, std::allocator< cmf::water::flux_connection * > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::set<" "cmf::water::flux_connection *" "," "std::less< cmf::water::flux_connection * >" "," "std::allocator< cmf::water::flux_connection * >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_set_Sl_cmf_water_flux_connection_Sm__Sg__iterator(std::set< cmf::water::flux_connection * > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_set_Sl_cmf_water_flux_connection_Sm__Sg____nonzero__(std::set< cmf::water::flux_connection * > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_set_Sl_cmf_water_flux_connection_Sm__Sg____bool__(std::set< cmf::water::flux_connection * > const *self){
      return !(self->empty());
    }
SWIGINTERN std::set< cmf::water::flux_connection * >::size_type std_set_Sl_cmf_water_flux_connection_Sm__Sg____len__(std::set< cmf::water::flux_connection * > const *self){
      return self->size();
    }
SWIGINTERN void std_set_Sl_cmf_water_flux_connection_Sm__Sg__append(std::set< cmf::water::flux_connection * > *self,std::set< cmf::water::flux_connection * >::value_type x){
       self->insert(x);
     }
SWIGINTERN bool std_set_Sl_cmf_water_flux_connection_Sm__Sg____contains__(std::set< cmf::water::flux_connection * > *self,std::set< cmf::water::flux_connection * >::value_type x){
       return self->find(x) != self->end();
     }
SWIGINTERN std::set< cmf::water::flux_connection * >::value_type std_set_Sl_cmf_water_flux_connection_Sm__Sg____getitem__(std::set< cmf::water::flux_connection * > const *self,std::set< cmf::water::flux_connection * >::difference_type i){
       return *(swig::cgetpos(self, i));
     }


#define cmf_water_flux_node_potential_get(self_) self_->get_potential()
#define cmf_water_flux_node_potential_set(self_, val_) self_->set_potential(val_)
  

#define cmf_water_flux_node_connections_get(self_) new cmf::water::connection_vector(self_->get_connections())
  

#define cmf_water_flux_connection_tracer_filter_get(self_) self_->get_tracer_filter()
#define cmf_water_flux_connection_tracer_filter_set(self_, val_) self_->set_tracer_filter(val_)
  
SWIGINTERN std::tr1::shared_ptr< cmf::geometry::Locatable > cmf_water_flux_node_SWIGSharedPtrUpcast(std::tr1::shared_ptr< cmf::water::flux_node > swigSharedPtrUpcast){
    return swigSharedPtrUpcast;
  }
SWIGINTERN std::tr1::shared_ptr< cmf::water::flux_node > cmf_water_DricheletBoundary_SWIGSharedPtrUpcast(std::tr1::shared_ptr< cmf::water::DricheletBoundary > swigSharedPtrUpcast){
    return swigSharedPtrUpcast;
  }
SWIGINTERN std::tr1::shared_ptr< cmf::water::flux_node > cmf_water_NeumannBoundary_SWIGSharedPtrUpcast(std::tr1::shared_ptr< cmf::water::NeumannBoundary > swigSharedPtrUpcast){
    return swigSharedPtrUpcast;
  }

#define cmf_water_WaterStorage_volume_get(self_) self_->get_volume()
#define cmf_water_WaterStorage_volume_set(self_, val_) self_->set_volume(val_)
  
SWIGINTERN std::tr1::shared_ptr< cmf::water::flux_node > cmf_water_WaterStorage_SWIGSharedPtrUpcast(std::tr1::shared_ptr< cmf::water::WaterStorage > swigSharedPtrUpcast){
    return swigSharedPtrUpcast;
  }

  namespace swig {
    template <>  struct traits<std::tr1::shared_ptr< cmf::water::WaterStorage > > {
      typedef pointer_category category;
      static const char* type_name() { return"std::tr1::shared_ptr< cmf::water::WaterStorage >"; }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector<std::tr1::shared_ptr< cmf::water::WaterStorage >, std::allocator< std::tr1::shared_ptr< cmf::water::WaterStorage > > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "std::tr1::shared_ptr< cmf::water::WaterStorage >" "," "std::allocator< std::tr1::shared_ptr< cmf::water::WaterStorage > >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_vector_Sl_cmf_water_WaterStorage_ptr_Sg__iterator(std::vector< cmf::water::WaterStorage::ptr > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_cmf_water_WaterStorage_ptr_Sg____nonzero__(std::vector< cmf::water::WaterStorage::ptr > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_vector_Sl_cmf_water_WaterStorage_ptr_Sg____bool__(std::vector< cmf::water::WaterStorage::ptr > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< std::tr1::shared_ptr< cmf::water::WaterStorage > >::size_type std_vector_Sl_cmf_water_WaterStorage_ptr_Sg____len__(std::vector< cmf::water::WaterStorage::ptr > const *self){
      return self->size();
    }
SWIGINTERN std::vector< std::tr1::shared_ptr< cmf::water::WaterStorage > >::value_type std_vector_Sl_cmf_water_WaterStorage_ptr_Sg__pop(std::vector< cmf::water::WaterStorage::ptr > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector<std::tr1::shared_ptr< cmf::water::WaterStorage >,std::allocator< std::tr1::shared_ptr< cmf::water::WaterStorage > > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN std::vector< std::tr1::shared_ptr< cmf::water::WaterStorage >,std::allocator< std::tr1::shared_ptr< cmf::water::WaterStorage > > > *std_vector_Sl_cmf_water_WaterStorage_ptr_Sg____getslice__(std::vector< cmf::water::WaterStorage::ptr > *self,std::vector< std::tr1::shared_ptr< cmf::water::WaterStorage > >::difference_type i,std::vector< std::tr1::shared_ptr< cmf::water::WaterStorage > >::difference_type j){
      return swig::getslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_cmf_water_WaterStorage_ptr_Sg____setslice__(std::vector< cmf::water::WaterStorage::ptr > *self,std::vector< std::tr1::shared_ptr< cmf::water::WaterStorage > >::difference_type i,std::vector< std::tr1::shared_ptr< cmf::water::WaterStorage > >::difference_type j,std::vector< std::tr1::shared_ptr< cmf::water::WaterStorage >,std::allocator< std::tr1::shared_ptr< cmf::water::WaterStorage > > > const &v){
      swig::setslice(self, i, j, v);
    }
SWIGINTERN void std_vector_Sl_cmf_water_WaterStorage_ptr_Sg____delslice__(std::vector< cmf::water::WaterStorage::ptr > *self,std::vector< std::tr1::shared_ptr< cmf::water::WaterStorage > >::difference_type i,std::vector< std::tr1::shared_ptr< cmf::water::WaterStorage > >::difference_type j){
      swig::delslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_cmf_water_WaterStorage_ptr_Sg____delitem____SWIG_0(std::vector< cmf::water::WaterStorage::ptr > *self,std::vector< std::tr1::shared_ptr< cmf::water::WaterStorage > >::difference_type i){
      self->erase(swig::getpos(self,i));
    }
SWIGINTERN std::vector< std::tr1::shared_ptr< cmf::water::WaterStorage >,std::allocator< std::tr1::shared_ptr< cmf::water::WaterStorage > > > *std_vector_Sl_cmf_water_WaterStorage_ptr_Sg____getitem____SWIG_0(std::vector< cmf::water::WaterStorage::ptr > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(slice, self->size(), &i, &j, &step);
      return swig::getslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_cmf_water_WaterStorage_ptr_Sg____setitem____SWIG_0(std::vector< cmf::water::WaterStorage::ptr > *self,PySliceObject *slice,std::vector< std::tr1::shared_ptr< cmf::water::WaterStorage >,std::allocator< std::tr1::shared_ptr< cmf::water::WaterStorage > > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(slice, self->size(), &i, &j, &step);
      swig::setslice(self, i, j, v);
    }
SWIGINTERN void std_vector_Sl_cmf_water_WaterStorage_ptr_Sg____delitem____SWIG_1(std::vector< cmf::water::WaterStorage::ptr > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(slice, self->size(), &i, &j, &step);
      swig::delslice(self, i,j);
    }
SWIGINTERN std::vector< std::tr1::shared_ptr< cmf::water::WaterStorage > >::value_type const &std_vector_Sl_cmf_water_WaterStorage_ptr_Sg____getitem____SWIG_1(std::vector< cmf::water::WaterStorage::ptr > const *self,std::vector< std::tr1::shared_ptr< cmf::water::WaterStorage > >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_cmf_water_WaterStorage_ptr_Sg____setitem____SWIG_1(std::vector< cmf::water::WaterStorage::ptr > *self,std::vector< std::tr1::shared_ptr< cmf::water::WaterStorage > >::difference_type i,std::vector< std::tr1::shared_ptr< cmf::water::WaterStorage > >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN void std_vector_Sl_cmf_water_WaterStorage_ptr_Sg__append(std::vector< cmf::water::WaterStorage::ptr > *self,std::vector< std::tr1::shared_ptr< cmf::water::WaterStorage > >::value_type const &x){
      self->push_back(x);
    }

#include "water/collections.h"


#define cmf_water_node_list_potentials_get(self_) new cmf::math::num_array(self_->get_potentials())
  

#define cmf_water_node_list_potentials_set(self_, val_) self_->set_potentials(*val_)
    

#define cmf_water_NeumannBoundary_list_fluxes_get(self_) new cmf::math::num_array(self_->get_fluxes())
  

#define cmf_water_NeumannBoundary_list_fluxes_set(self_, val_) self_->set_fluxes(*val_)
    

	#include "Atmosphere/Meteorology.h"
	#include "Atmosphere/Precipitation.h"

SWIGINTERN std::tr1::shared_ptr< cmf::water::NeumannBoundary > cmf_atmosphere_RainCloud_SWIGSharedPtrUpcast(std::tr1::shared_ptr< cmf::atmosphere::RainCloud > swigSharedPtrUpcast){
    return swigSharedPtrUpcast;
  }

	#include "upslope/Vegetation/StructVegetation.h"
	#include "upslope/cell.h"
	#include "upslope/topology.h"
	#include "upslope/algorithm.h"


#define cmf_upslope_Cell_topology_get(self_) &self_->get_topology()
  

#define cmf_upslope_Cell_evaporation_get(self_) self_->get_evaporation()
  

#define cmf_upslope_Cell_transpiration_get(self_) self_->get_transpiration()
  

#define cmf_upslope_Cell_meteorology_get(self_) &self_->get_meteorology()
#define cmf_upslope_Cell_meteorology_set(self_, val_) self_->set_meteorology(*val_)
  

#define cmf_upslope_Cell_rain_get(self_) self_->get_rainfall()
  
SWIGINTERN bool cmf_upslope_NeighborIterator___eq__(cmf::upslope::NeighborIterator *self,cmf::upslope::NeighborIterator const &cmp){return (*self)==cmp;}
SWIGINTERN bool cmf_upslope_NeighborIterator___neq__(cmf::upslope::NeighborIterator *self,cmf::upslope::NeighborIterator const &cmp){return (*self)!=cmp;}

  namespace swig {
    template <>  struct traits<cmf::upslope::Cell > {
      typedef pointer_category category;
      static const char* type_name() { return"cmf::upslope::Cell"; }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector<cmf::upslope::Cell*, std::allocator< cmf::upslope::Cell * > > > {
	  typedef value_category category;
	  static const char* type_name() {
	    return "std::vector<" "cmf::upslope::Cell" " *," "std::allocator< cmf::upslope::Cell * >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_vector_Sl_cmf_upslope_Cell_Sm__Sg__iterator(std::vector< cmf::upslope::Cell * > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_cmf_upslope_Cell_Sm__Sg____nonzero__(std::vector< cmf::upslope::Cell * > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_vector_Sl_cmf_upslope_Cell_Sm__Sg____bool__(std::vector< cmf::upslope::Cell * > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< cmf::upslope::Cell * >::size_type std_vector_Sl_cmf_upslope_Cell_Sm__Sg____len__(std::vector< cmf::upslope::Cell * > const *self){
      return self->size();
    }
SWIGINTERN std::vector< cmf::upslope::Cell * >::value_type std_vector_Sl_cmf_upslope_Cell_Sm__Sg__pop(std::vector< cmf::upslope::Cell * > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector<cmf::upslope::Cell*,std::allocator< cmf::upslope::Cell * > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN std::vector< cmf::upslope::Cell *,std::allocator< cmf::upslope::Cell * > > *std_vector_Sl_cmf_upslope_Cell_Sm__Sg____getslice__(std::vector< cmf::upslope::Cell * > *self,std::vector< cmf::upslope::Cell * >::difference_type i,std::vector< cmf::upslope::Cell * >::difference_type j){
      return swig::getslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_cmf_upslope_Cell_Sm__Sg____setslice__(std::vector< cmf::upslope::Cell * > *self,std::vector< cmf::upslope::Cell * >::difference_type i,std::vector< cmf::upslope::Cell * >::difference_type j,std::vector< cmf::upslope::Cell *,std::allocator< cmf::upslope::Cell * > > const &v){
      swig::setslice(self, i, j, v);
    }
SWIGINTERN void std_vector_Sl_cmf_upslope_Cell_Sm__Sg____delslice__(std::vector< cmf::upslope::Cell * > *self,std::vector< cmf::upslope::Cell * >::difference_type i,std::vector< cmf::upslope::Cell * >::difference_type j){
      swig::delslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_cmf_upslope_Cell_Sm__Sg____delitem____SWIG_0(std::vector< cmf::upslope::Cell * > *self,std::vector< cmf::upslope::Cell * >::difference_type i){
      self->erase(swig::getpos(self,i));
    }
SWIGINTERN std::vector< cmf::upslope::Cell *,std::allocator< cmf::upslope::Cell * > > *std_vector_Sl_cmf_upslope_Cell_Sm__Sg____getitem____SWIG_0(std::vector< cmf::upslope::Cell * > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(slice, self->size(), &i, &j, &step);
      return swig::getslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_cmf_upslope_Cell_Sm__Sg____setitem____SWIG_0(std::vector< cmf::upslope::Cell * > *self,PySliceObject *slice,std::vector< cmf::upslope::Cell *,std::allocator< cmf::upslope::Cell * > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(slice, self->size(), &i, &j, &step);
      swig::setslice(self, i, j, v);
    }
SWIGINTERN void std_vector_Sl_cmf_upslope_Cell_Sm__Sg____delitem____SWIG_1(std::vector< cmf::upslope::Cell * > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(slice, self->size(), &i, &j, &step);
      swig::delslice(self, i,j);
    }
SWIGINTERN std::vector< cmf::upslope::Cell * >::value_type std_vector_Sl_cmf_upslope_Cell_Sm__Sg____getitem____SWIG_1(std::vector< cmf::upslope::Cell * > *self,std::vector< cmf::upslope::Cell * >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_cmf_upslope_Cell_Sm__Sg____setitem____SWIG_1(std::vector< cmf::upslope::Cell * > *self,std::vector< cmf::upslope::Cell * >::difference_type i,std::vector< cmf::upslope::Cell * >::value_type x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN void std_vector_Sl_cmf_upslope_Cell_Sm__Sg__append(std::vector< cmf::upslope::Cell * > *self,std::vector< cmf::upslope::Cell * >::value_type x){
      self->push_back(x);
    }

	// Include Upslope
	#include "upslope/Soil/RetentionCurve.h"
	#include "upslope/SoilLayer.h"


#define cmf_upslope_SoilLayer_gravitational_potential_get(self_) self_->get_gravitational_potential()
  

#define cmf_upslope_SoilLayer_matrix_potential_get(self_) self_->get_matrix_potential()
  

#define cmf_upslope_SoilLayer_wetness_get(self_) self_->get_wetness()
#define cmf_upslope_SoilLayer_wetness_set(self_, val_) self_->set_wetness(val_)
  

#define cmf_upslope_SoilLayer_K_get(self_) self_->get_K()
  

#define cmf_upslope_SoilLayer_Ksat_get(self_) self_->get_Ksat()
  

#define cmf_upslope_SoilLayer_thickness_get(self_) self_->get_thickness()
  

#define cmf_upslope_SoilLayer_lower_boundary_get(self_) self_->get_lower_boundary()
  

#define cmf_upslope_SoilLayer_upper_boundary_get(self_) self_->get_upper_boundary()
  

#define cmf_upslope_SoilLayer_porosity_get(self_) self_->get_porosity()
  
SWIGINTERN std::tr1::shared_ptr< cmf::water::WaterStorage > cmf_upslope_SoilLayer_SWIGSharedPtrUpcast(std::tr1::shared_ptr< cmf::upslope::SoilLayer > swigSharedPtrUpcast){
    return swigSharedPtrUpcast;
  }

	#include "Reach/ReachType.h"
	#include "Reach/OpenWaterStorage.h"
	#include "Reach/reach.h"


#define cmf_river_OpenWaterStorage_depth_get(self_) self_->get_depth()
#define cmf_river_OpenWaterStorage_depth_set(self_, val_) self_->set_depth(val_)
  
SWIGINTERN std::tr1::shared_ptr< cmf::water::WaterStorage > cmf_river_OpenWaterStorage_SWIGSharedPtrUpcast(std::tr1::shared_ptr< cmf::river::OpenWaterStorage > swigSharedPtrUpcast){
    return swigSharedPtrUpcast;
  }

#define cmf_river_Reach_cells_get(self_) new cmf::upslope::cell_vector(self_->get_cells())
  

#define cmf_river_Reach_downstream_get(self_) self_->get_downstream()
  

#define cmf_river_Reach_root_get(self_) self_->get_root()
  

#define cmf_river_Reach_upstream_count_get(self_) self_->upstream_count()
  

#define cmf_river_ReachIterator_reach_get(self_) self_->reach()
  

#define cmf_river_ReachIterator_position_get(self_) self_->position()
  
SWIGINTERN std::tr1::shared_ptr< cmf::river::OpenWaterStorage > cmf_river_Reach_SWIGSharedPtrUpcast(std::tr1::shared_ptr< cmf::river::Reach > swigSharedPtrUpcast){
    return swigSharedPtrUpcast;
  }

	#include "upslope/connections/subsurfacefluxes.h"
	#include "upslope/connections/surfacefluxes.h"
	#include "upslope/connections/atmosphericfluxes.h"
	#include "upslope/connections/infiltration.h"
	#include "upslope/connections/Percolation.h"
	#include "upslope/vegetation/ET.h"
    #include "upslope/connections/HBVflow.h"
	// Include river model
	#include "Reach/ManningConnection.h"
	// Include the combined solver
	#include "math/Integrators/WaterSoluteIntegrator.h"


	#include "project.h"


#define cmf_project_cells_get(self_) &self_->get_cells()
  

#define cmf_math_SoluteWaterIntegrator_solute_integrator_get(self_) self_->get_solute_integrator()
#define cmf_math_SoluteWaterIntegrator_solute_integrator_set(self_, val_) self_->set_solute_integrator(val_)
  

#define cmf_math_SoluteWaterIntegrator_water_integrator_get(self_) self_->get_water_integrator()
#define cmf_math_SoluteWaterIntegrator_water_integrator_set(self_, val_) self_->set_water_integrator(val_)
  
#ifdef __cplusplus
extern "C" {
#endif
SWIGINTERN PyObject *_wrap_delete_SwigPyIterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SwigPyIterator" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_value(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  PyObject *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_value" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (PyObject *)((swig::SwigPyIterator const *)arg1)->value();
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_incr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  size_t arg2 = (size_t) 1 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args,"SwigPyIterator_incr",1,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_incr" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  if (swig_obj[1]) {
    ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator_incr" "', argument " "2"" of type '" "size_t""'");
    } 
    arg2 = static_cast< size_t >(val2);
  }
  try {
    result = (swig::SwigPyIterator *)(arg1)->incr(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_decr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  size_t arg2 = (size_t) 1 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args,"SwigPyIterator_decr",1,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_decr" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  if (swig_obj[1]) {
    ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator_decr" "', argument " "2"" of type '" "size_t""'");
    } 
    arg2 = static_cast< size_t >(val2);
  }
  try {
    result = (swig::SwigPyIterator *)(arg1)->decr(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_distance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  ptrdiff_t result;
  
  if (!SWIG_Python_UnpackTuple(args,"SwigPyIterator_distance",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_distance" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator_distance" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator_distance" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  try {
    result = ((swig::SwigPyIterator const *)arg1)->distance((swig::SwigPyIterator const &)*arg2);
  }
  catch(std::invalid_argument &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new std::invalid_argument(static_cast< const std::invalid_argument& >(_e))),SWIGTYPE_p_std__invalid_argument,SWIG_POINTER_OWN), "std::invalid_argument", SWIGTYPE_p_std__invalid_argument); SWIG_fail;
  }
  
  resultobj = SWIG_From_ptrdiff_t(static_cast< ptrdiff_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_equal(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args,"SwigPyIterator_equal",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_equal" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator_equal" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator_equal" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  try {
    result = (bool)((swig::SwigPyIterator const *)arg1)->equal((swig::SwigPyIterator const &)*arg2);
  }
  catch(std::invalid_argument &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new std::invalid_argument(static_cast< const std::invalid_argument& >(_e))),SWIGTYPE_p_std__invalid_argument,SWIG_POINTER_OWN), "std::invalid_argument", SWIGTYPE_p_std__invalid_argument); SWIG_fail;
  }
  
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_copy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_copy" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  result = (swig::SwigPyIterator *)((swig::SwigPyIterator const *)arg1)->copy();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_next(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  PyObject *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_next" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (PyObject *)(arg1)->next();
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___next__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  PyObject *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___next__" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (PyObject *)(arg1)->__next__();
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_previous(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  PyObject *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_previous" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (PyObject *)(arg1)->previous();
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_advance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args,"SwigPyIterator_advance",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_advance" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator_advance" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::SwigPyIterator *)(arg1)->advance(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args,"SwigPyIterator___eq__",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___eq__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator___eq__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator___eq__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  result = (bool)((swig::SwigPyIterator const *)arg1)->operator ==((swig::SwigPyIterator const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args,"SwigPyIterator___ne__",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___ne__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator___ne__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator___ne__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  result = (bool)((swig::SwigPyIterator const *)arg1)->operator !=((swig::SwigPyIterator const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___iadd__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args,"SwigPyIterator___iadd__",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___iadd__" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator___iadd__" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::SwigPyIterator *) &(arg1)->operator +=(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___isub__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args,"SwigPyIterator___isub__",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___isub__" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator___isub__" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::SwigPyIterator *) &(arg1)->operator -=(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___add__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args,"SwigPyIterator___add__",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___add__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator___add__" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::SwigPyIterator *)((swig::SwigPyIterator const *)arg1)->operator +(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___sub____SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___sub__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator___sub__" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::SwigPyIterator *)((swig::SwigPyIterator const *)arg1)->operator -(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___sub____SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  ptrdiff_t result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___sub__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator___sub__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator___sub__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  result = ((swig::SwigPyIterator const *)arg1)->operator -((swig::SwigPyIterator const &)*arg2);
  resultobj = SWIG_From_ptrdiff_t(static_cast< ptrdiff_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___sub__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"SwigPyIterator___sub__",0,2,argv))) SWIG_fail;
  --argc;
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (argc == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_swig__SwigPyIterator, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (argc == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      return _wrap_SwigPyIterator___sub____SWIG_1(self, argc, argv);
    case 2:
      return _wrap_SwigPyIterator___sub____SWIG_0(self, argc, argv);
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *SwigPyIterator_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_swig__SwigPyIterator, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN int Swig_var_PI_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable PI is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_PI_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_double(static_cast< double >(cmf::geometry::PI));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_point_x_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::geometry::point *arg1 = (cmf::geometry::point *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"point_x_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__geometry__point, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "point_x_set" "', argument " "1"" of type '" "cmf::geometry::point *""'"); 
  }
  arg1 = reinterpret_cast< cmf::geometry::point * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "point_x_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->x = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_point_x_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::geometry::point *arg1 = (cmf::geometry::point *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__geometry__point, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "point_x_get" "', argument " "1"" of type '" "cmf::geometry::point *""'"); 
  }
  arg1 = reinterpret_cast< cmf::geometry::point * >(argp1);
  result = (double) ((arg1)->x);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_point_y_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::geometry::point *arg1 = (cmf::geometry::point *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"point_y_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__geometry__point, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "point_y_set" "', argument " "1"" of type '" "cmf::geometry::point *""'"); 
  }
  arg1 = reinterpret_cast< cmf::geometry::point * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "point_y_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->y = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_point_y_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::geometry::point *arg1 = (cmf::geometry::point *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__geometry__point, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "point_y_get" "', argument " "1"" of type '" "cmf::geometry::point *""'"); 
  }
  arg1 = reinterpret_cast< cmf::geometry::point * >(argp1);
  result = (double) ((arg1)->y);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_point_z_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::geometry::point *arg1 = (cmf::geometry::point *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"point_z_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__geometry__point, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "point_z_set" "', argument " "1"" of type '" "cmf::geometry::point *""'"); 
  }
  arg1 = reinterpret_cast< cmf::geometry::point * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "point_z_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->z = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_point_z_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::geometry::point *arg1 = (cmf::geometry::point *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__geometry__point, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "point_z_get" "', argument " "1"" of type '" "cmf::geometry::point *""'"); 
  }
  arg1 = reinterpret_cast< cmf::geometry::point * >(argp1);
  result = (double) ((arg1)->z);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_point_Center(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::geometry::point *arg1 = (cmf::geometry::point *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  cmf::geometry::point result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__geometry__point, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "point_Center" "', argument " "1"" of type '" "cmf::geometry::point const *""'"); 
  }
  arg1 = reinterpret_cast< cmf::geometry::point * >(argp1);
  {
    try {
      result = ((cmf::geometry::point const *)arg1)->Center();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj((new cmf::geometry::point(static_cast< const cmf::geometry::point& >(result))), SWIGTYPE_p_cmf__geometry__point, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_point__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  cmf::geometry::point *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  {
    try {
      result = (cmf::geometry::point *)new cmf::geometry::point();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmf__geometry__point, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_point__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  cmf::geometry::point *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cmf::geometry::point *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cmf__geometry__point,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_point" "', argument " "1"" of type '" "cmf::geometry::point const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_point" "', argument " "1"" of type '" "cmf::geometry::point const &""'"); 
  }
  arg1 = reinterpret_cast< cmf::geometry::point * >(argp1);
  {
    try {
      result = (cmf::geometry::point *)new cmf::geometry::point((cmf::geometry::point const &)*arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmf__geometry__point, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_point__SWIG_2(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 = (double) 0.0 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  cmf::geometry::point *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 3)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_point" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_point" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (swig_obj[2]) {
    ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_point" "', argument " "3"" of type '" "double""'");
    } 
    arg3 = static_cast< double >(val3);
  }
  {
    try {
      result = (cmf::geometry::point *)new cmf::geometry::point(arg1,arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmf__geometry__point, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_point(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"new_point",0,3,argv))) SWIG_fail;
  --argc;
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (argc == 0) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
    if (argc == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_cmf__geometry__point, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
    if ((argc >= 2) && (argc <= 3)) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          int res = SWIG_AsVal_double(argv[0], NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_double(argv[1], NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (argc > 2) {
        {
          {
            int res = SWIG_AsVal_double(argv[2], NULL);
            _v = SWIG_CheckState(res);
          }
        }
        if (!_v) goto check_3;
        _ranki += _v*_pi;
        _rankm += _pi;
        _pi *= SWIG_MAXCASTRANK;
      }
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 3;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_3:
    
  dispatch:
    switch(_index) {
    case 1:
      return _wrap_new_point__SWIG_0(self, argc, argv);
    case 2:
      return _wrap_new_point__SWIG_1(self, argc, argv);
    case 3:
      return _wrap_new_point__SWIG_2(self, argc, argv);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_point'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    cmf::geometry::point()\n"
    "    cmf::geometry::point(cmf::geometry::point const &)\n"
    "    cmf::geometry::point(double,double,double)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_point_distanceTo(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::geometry::point *arg1 = (cmf::geometry::point *) 0 ;
  cmf::geometry::point arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  double result;
  
  if (!SWIG_Python_UnpackTuple(args,"point_distanceTo",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__geometry__point, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "point_distanceTo" "', argument " "1"" of type '" "cmf::geometry::point const *""'"); 
  }
  arg1 = reinterpret_cast< cmf::geometry::point * >(argp1);
  {
    res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cmf__geometry__point,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "point_distanceTo" "', argument " "2"" of type '" "cmf::geometry::point""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "point_distanceTo" "', argument " "2"" of type '" "cmf::geometry::point""'");
    } else {
      cmf::geometry::point * temp = reinterpret_cast< cmf::geometry::point * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      result = (double)((cmf::geometry::point const *)arg1)->distanceTo(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_point_distance3DTo(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::geometry::point *arg1 = (cmf::geometry::point *) 0 ;
  cmf::geometry::point arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  double result;
  
  if (!SWIG_Python_UnpackTuple(args,"point_distance3DTo",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__geometry__point, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "point_distance3DTo" "', argument " "1"" of type '" "cmf::geometry::point const *""'"); 
  }
  arg1 = reinterpret_cast< cmf::geometry::point * >(argp1);
  {
    res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cmf__geometry__point,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "point_distance3DTo" "', argument " "2"" of type '" "cmf::geometry::point""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "point_distance3DTo" "', argument " "2"" of type '" "cmf::geometry::point""'");
    } else {
      cmf::geometry::point * temp = reinterpret_cast< cmf::geometry::point * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      result = (double)((cmf::geometry::point const *)arg1)->distance3DTo(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_point_distance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::geometry::point arg1 ;
  cmf::geometry::point arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  double result;
  
  if (!SWIG_Python_UnpackTuple(args,"point_distance",2,2,swig_obj)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cmf__geometry__point,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "point_distance" "', argument " "1"" of type '" "cmf::geometry::point""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "point_distance" "', argument " "1"" of type '" "cmf::geometry::point""'");
    } else {
      cmf::geometry::point * temp = reinterpret_cast< cmf::geometry::point * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cmf__geometry__point,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "point_distance" "', argument " "2"" of type '" "cmf::geometry::point""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "point_distance" "', argument " "2"" of type '" "cmf::geometry::point""'");
    } else {
      cmf::geometry::point * temp = reinterpret_cast< cmf::geometry::point * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      result = (double)cmf::geometry::point::distance(arg1,arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_point_distance_max(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::geometry::point *arg1 = (cmf::geometry::point *) 0 ;
  cmf::geometry::point arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  double result;
  
  if (!SWIG_Python_UnpackTuple(args,"point_distance_max",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__geometry__point, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "point_distance_max" "', argument " "1"" of type '" "cmf::geometry::point const *""'"); 
  }
  arg1 = reinterpret_cast< cmf::geometry::point * >(argp1);
  {
    res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cmf__geometry__point,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "point_distance_max" "', argument " "2"" of type '" "cmf::geometry::point""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "point_distance_max" "', argument " "2"" of type '" "cmf::geometry::point""'");
    } else {
      cmf::geometry::point * temp = reinterpret_cast< cmf::geometry::point * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      result = (double)((cmf::geometry::point const *)arg1)->distance_max(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_point_azimuth(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::geometry::point *arg1 = (cmf::geometry::point *) 0 ;
  cmf::geometry::point arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  double result;
  
  if (!SWIG_Python_UnpackTuple(args,"point_azimuth",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__geometry__point, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "point_azimuth" "', argument " "1"" of type '" "cmf::geometry::point const *""'"); 
  }
  arg1 = reinterpret_cast< cmf::geometry::point * >(argp1);
  {
    res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cmf__geometry__point,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "point_azimuth" "', argument " "2"" of type '" "cmf::geometry::point""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "point_azimuth" "', argument " "2"" of type '" "cmf::geometry::point""'");
    } else {
      cmf::geometry::point * temp = reinterpret_cast< cmf::geometry::point * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      result = (double)((cmf::geometry::point const *)arg1)->azimuth(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_point_angleToXAxis(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::geometry::point *arg1 = (cmf::geometry::point *) 0 ;
  cmf::geometry::point arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  double result;
  
  if (!SWIG_Python_UnpackTuple(args,"point_angleToXAxis",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__geometry__point, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "point_angleToXAxis" "', argument " "1"" of type '" "cmf::geometry::point const *""'"); 
  }
  arg1 = reinterpret_cast< cmf::geometry::point * >(argp1);
  {
    res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cmf__geometry__point,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "point_angleToXAxis" "', argument " "2"" of type '" "cmf::geometry::point""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "point_angleToXAxis" "', argument " "2"" of type '" "cmf::geometry::point""'");
    } else {
      cmf::geometry::point * temp = reinterpret_cast< cmf::geometry::point * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      result = (double)((cmf::geometry::point const *)arg1)->angleToXAxis(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_point___add__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::geometry::point *arg1 = (cmf::geometry::point *) 0 ;
  cmf::geometry::point *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  cmf::geometry::point result;
  
  if (!SWIG_Python_UnpackTuple(args,"point___add__",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__geometry__point, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "point___add__" "', argument " "1"" of type '" "cmf::geometry::point const *""'"); 
  }
  arg1 = reinterpret_cast< cmf::geometry::point * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cmf__geometry__point,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "point___add__" "', argument " "2"" of type '" "cmf::geometry::point const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "point___add__" "', argument " "2"" of type '" "cmf::geometry::point const &""'"); 
  }
  arg2 = reinterpret_cast< cmf::geometry::point * >(argp2);
  {
    try {
      result = ((cmf::geometry::point const *)arg1)->operator +((cmf::geometry::point const &)*arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj((new cmf::geometry::point(static_cast< const cmf::geometry::point& >(result))), SWIGTYPE_p_cmf__geometry__point, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_point___sub__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::geometry::point *arg1 = (cmf::geometry::point *) 0 ;
  cmf::geometry::point *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  cmf::geometry::point result;
  
  if (!SWIG_Python_UnpackTuple(args,"point___sub__",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__geometry__point, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "point___sub__" "', argument " "1"" of type '" "cmf::geometry::point const *""'"); 
  }
  arg1 = reinterpret_cast< cmf::geometry::point * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cmf__geometry__point,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "point___sub__" "', argument " "2"" of type '" "cmf::geometry::point const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "point___sub__" "', argument " "2"" of type '" "cmf::geometry::point const &""'"); 
  }
  arg2 = reinterpret_cast< cmf::geometry::point * >(argp2);
  {
    try {
      result = ((cmf::geometry::point const *)arg1)->operator -((cmf::geometry::point const &)*arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj((new cmf::geometry::point(static_cast< const cmf::geometry::point& >(result))), SWIGTYPE_p_cmf__geometry__point, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_point___mul____SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  cmf::geometry::point *arg1 = (cmf::geometry::point *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  cmf::geometry::point result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__geometry__point, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "point___mul__" "', argument " "1"" of type '" "cmf::geometry::point const *""'"); 
  }
  arg1 = reinterpret_cast< cmf::geometry::point * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "point___mul__" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = ((cmf::geometry::point const *)arg1)->operator *(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj((new cmf::geometry::point(static_cast< const cmf::geometry::point& >(result))), SWIGTYPE_p_cmf__geometry__point, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_point___div____SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  cmf::geometry::point *arg1 = (cmf::geometry::point *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  cmf::geometry::point result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__geometry__point, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "point___div__" "', argument " "1"" of type '" "cmf::geometry::point const *""'"); 
  }
  arg1 = reinterpret_cast< cmf::geometry::point * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "point___div__" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = ((cmf::geometry::point const *)arg1)->operator /(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj((new cmf::geometry::point(static_cast< const cmf::geometry::point& >(result))), SWIGTYPE_p_cmf__geometry__point, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_point___mul____SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  cmf::geometry::point *arg1 = (cmf::geometry::point *) 0 ;
  cmf::geometry::point *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  cmf::geometry::point result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__geometry__point, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "point___mul__" "', argument " "1"" of type '" "cmf::geometry::point const *""'"); 
  }
  arg1 = reinterpret_cast< cmf::geometry::point * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cmf__geometry__point,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "point___mul__" "', argument " "2"" of type '" "cmf::geometry::point const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "point___mul__" "', argument " "2"" of type '" "cmf::geometry::point const &""'"); 
  }
  arg2 = reinterpret_cast< cmf::geometry::point * >(argp2);
  {
    try {
      result = ((cmf::geometry::point const *)arg1)->operator *((cmf::geometry::point const &)*arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj((new cmf::geometry::point(static_cast< const cmf::geometry::point& >(result))), SWIGTYPE_p_cmf__geometry__point, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_point___mul__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"point___mul__",0,2,argv))) SWIG_fail;
  --argc;
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (argc == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_cmf__geometry__point, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_cmf__geometry__point, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (argc == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_cmf__geometry__point, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_double(argv[1], NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      return _wrap_point___mul____SWIG_1(self, argc, argv);
    case 2:
      return _wrap_point___mul____SWIG_0(self, argc, argv);
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_point___div____SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  cmf::geometry::point *arg1 = (cmf::geometry::point *) 0 ;
  cmf::geometry::point *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  cmf::geometry::point result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__geometry__point, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "point___div__" "', argument " "1"" of type '" "cmf::geometry::point const *""'"); 
  }
  arg1 = reinterpret_cast< cmf::geometry::point * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cmf__geometry__point,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "point___div__" "', argument " "2"" of type '" "cmf::geometry::point const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "point___div__" "', argument " "2"" of type '" "cmf::geometry::point const &""'"); 
  }
  arg2 = reinterpret_cast< cmf::geometry::point * >(argp2);
  {
    try {
      result = ((cmf::geometry::point const *)arg1)->operator /((cmf::geometry::point const &)*arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj((new cmf::geometry::point(static_cast< const cmf::geometry::point& >(result))), SWIGTYPE_p_cmf__geometry__point, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_point___div__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"point___div__",0,2,argv))) SWIG_fail;
  --argc;
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (argc == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_cmf__geometry__point, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_cmf__geometry__point, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (argc == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_cmf__geometry__point, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_double(argv[1], NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      return _wrap_point___div____SWIG_1(self, argc, argv);
    case 2:
      return _wrap_point___div____SWIG_0(self, argc, argv);
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_point___iadd__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::geometry::point *arg1 = (cmf::geometry::point *) 0 ;
  cmf::geometry::point *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  cmf::geometry::point result;
  
  if (!SWIG_Python_UnpackTuple(args,"point___iadd__",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__geometry__point, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "point___iadd__" "', argument " "1"" of type '" "cmf::geometry::point *""'"); 
  }
  arg1 = reinterpret_cast< cmf::geometry::point * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cmf__geometry__point,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "point___iadd__" "', argument " "2"" of type '" "cmf::geometry::point const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "point___iadd__" "', argument " "2"" of type '" "cmf::geometry::point const &""'"); 
  }
  arg2 = reinterpret_cast< cmf::geometry::point * >(argp2);
  {
    try {
      result = (arg1)->operator +=((cmf::geometry::point const &)*arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj((new cmf::geometry::point(static_cast< const cmf::geometry::point& >(result))), SWIGTYPE_p_cmf__geometry__point, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_point___isub__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::geometry::point *arg1 = (cmf::geometry::point *) 0 ;
  cmf::geometry::point *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  cmf::geometry::point result;
  
  if (!SWIG_Python_UnpackTuple(args,"point___isub__",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__geometry__point, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "point___isub__" "', argument " "1"" of type '" "cmf::geometry::point *""'"); 
  }
  arg1 = reinterpret_cast< cmf::geometry::point * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cmf__geometry__point,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "point___isub__" "', argument " "2"" of type '" "cmf::geometry::point const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "point___isub__" "', argument " "2"" of type '" "cmf::geometry::point const &""'"); 
  }
  arg2 = reinterpret_cast< cmf::geometry::point * >(argp2);
  {
    try {
      result = (arg1)->operator -=((cmf::geometry::point const &)*arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj((new cmf::geometry::point(static_cast< const cmf::geometry::point& >(result))), SWIGTYPE_p_cmf__geometry__point, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_point___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::geometry::point *arg1 = (cmf::geometry::point *) 0 ;
  cmf::geometry::point *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args,"point___eq__",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__geometry__point, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "point___eq__" "', argument " "1"" of type '" "cmf::geometry::point const *""'"); 
  }
  arg1 = reinterpret_cast< cmf::geometry::point * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cmf__geometry__point,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "point___eq__" "', argument " "2"" of type '" "cmf::geometry::point const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "point___eq__" "', argument " "2"" of type '" "cmf::geometry::point const &""'"); 
  }
  arg2 = reinterpret_cast< cmf::geometry::point * >(argp2);
  {
    try {
      result = (bool)((cmf::geometry::point const *)arg1)->operator ==((cmf::geometry::point const &)*arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_point___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::geometry::point *arg1 = (cmf::geometry::point *) 0 ;
  cmf::geometry::point *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args,"point___ne__",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__geometry__point, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "point___ne__" "', argument " "1"" of type '" "cmf::geometry::point const *""'"); 
  }
  arg1 = reinterpret_cast< cmf::geometry::point * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cmf__geometry__point,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "point___ne__" "', argument " "2"" of type '" "cmf::geometry::point const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "point___ne__" "', argument " "2"" of type '" "cmf::geometry::point const &""'"); 
  }
  arg2 = reinterpret_cast< cmf::geometry::point * >(argp2);
  {
    try {
      result = (bool)((cmf::geometry::point const *)arg1)->operator !=((cmf::geometry::point const &)*arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_point___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::geometry::point *arg1 = (cmf::geometry::point *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__geometry__point, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "point___len__" "', argument " "1"" of type '" "cmf::geometry::point const *""'"); 
  }
  arg1 = reinterpret_cast< cmf::geometry::point * >(argp1);
  {
    try {
      result = (int)cmf_geometry_point___len__((cmf::geometry::point const *)arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_point___rmul__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::geometry::point *arg1 = (cmf::geometry::point *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  cmf::geometry::point result;
  
  if (!SWIG_Python_UnpackTuple(args,"point___rmul__",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__geometry__point, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "point___rmul__" "', argument " "1"" of type '" "cmf::geometry::point *""'"); 
  }
  arg1 = reinterpret_cast< cmf::geometry::point * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "point___rmul__" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = cmf_geometry_point___rmul__(arg1,arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj((new cmf::geometry::point(static_cast< const cmf::geometry::point& >(result))), SWIGTYPE_p_cmf__geometry__point, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_point___rdiv__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::geometry::point *arg1 = (cmf::geometry::point *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  cmf::geometry::point result;
  
  if (!SWIG_Python_UnpackTuple(args,"point___rdiv__",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__geometry__point, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "point___rdiv__" "', argument " "1"" of type '" "cmf::geometry::point *""'"); 
  }
  arg1 = reinterpret_cast< cmf::geometry::point * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "point___rdiv__" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = cmf_geometry_point___rdiv__(arg1,arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj((new cmf::geometry::point(static_cast< const cmf::geometry::point& >(result))), SWIGTYPE_p_cmf__geometry__point, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_point(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::geometry::point *arg1 = (cmf::geometry::point *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__geometry__point, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_point" "', argument " "1"" of type '" "cmf::geometry::point *""'"); 
  }
  arg1 = reinterpret_cast< cmf::geometry::point * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *point_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_cmf__geometry__point, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *point_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_Locatable_get_position(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::geometry::Locatable *arg1 = (cmf::geometry::Locatable *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  cmf::geometry::point result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__geometry__Locatable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Locatable_get_position" "', argument " "1"" of type '" "cmf::geometry::Locatable const *""'"); 
  }
  arg1 = reinterpret_cast< cmf::geometry::Locatable * >(argp1);
  {
    try {
      result = ((cmf::geometry::Locatable const *)arg1)->get_position();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj((new cmf::geometry::point(static_cast< const cmf::geometry::point& >(result))), SWIGTYPE_p_cmf__geometry__point, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Locatable_set_position(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::geometry::Locatable *arg1 = (cmf::geometry::Locatable *) 0 ;
  cmf::geometry::point arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"Locatable_set_position",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__geometry__Locatable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Locatable_set_position" "', argument " "1"" of type '" "cmf::geometry::Locatable *""'"); 
  }
  arg1 = reinterpret_cast< cmf::geometry::Locatable * >(argp1);
  {
    res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cmf__geometry__point,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Locatable_set_position" "', argument " "2"" of type '" "cmf::geometry::point""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Locatable_set_position" "', argument " "2"" of type '" "cmf::geometry::point""'");
    } else {
      cmf::geometry::point * temp = reinterpret_cast< cmf::geometry::point * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      (arg1)->set_position(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Locatable_get_distance_to(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::geometry::Locatable *arg1 = (cmf::geometry::Locatable *) 0 ;
  cmf::geometry::Locatable *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  double result;
  
  if (!SWIG_Python_UnpackTuple(args,"Locatable_get_distance_to",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__geometry__Locatable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Locatable_get_distance_to" "', argument " "1"" of type '" "cmf::geometry::Locatable *""'"); 
  }
  arg1 = reinterpret_cast< cmf::geometry::Locatable * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cmf__geometry__Locatable,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Locatable_get_distance_to" "', argument " "2"" of type '" "cmf::geometry::Locatable const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Locatable_get_distance_to" "', argument " "2"" of type '" "cmf::geometry::Locatable const &""'"); 
  }
  arg2 = reinterpret_cast< cmf::geometry::Locatable * >(argp2);
  {
    try {
      result = (double)(arg1)->get_distance_to((cmf::geometry::Locatable const &)*arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Locatable_get_direction_to(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::geometry::Locatable *arg1 = (cmf::geometry::Locatable *) 0 ;
  cmf::geometry::Locatable *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  cmf::geometry::point result;
  
  if (!SWIG_Python_UnpackTuple(args,"Locatable_get_direction_to",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__geometry__Locatable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Locatable_get_direction_to" "', argument " "1"" of type '" "cmf::geometry::Locatable *""'"); 
  }
  arg1 = reinterpret_cast< cmf::geometry::Locatable * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cmf__geometry__Locatable,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Locatable_get_direction_to" "', argument " "2"" of type '" "cmf::geometry::Locatable const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Locatable_get_direction_to" "', argument " "2"" of type '" "cmf::geometry::Locatable const &""'"); 
  }
  arg2 = reinterpret_cast< cmf::geometry::Locatable * >(argp2);
  {
    try {
      result = (arg1)->get_direction_to((cmf::geometry::Locatable const &)*arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj((new cmf::geometry::point(static_cast< const cmf::geometry::point& >(result))), SWIGTYPE_p_cmf__geometry__point, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Locatable(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::geometry::Locatable *arg1 = (cmf::geometry::Locatable *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__geometry__Locatable, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Locatable" "', argument " "1"" of type '" "cmf::geometry::Locatable *""'"); 
  }
  arg1 = reinterpret_cast< cmf::geometry::Locatable * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Locatable_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_cmf__geometry__Locatable, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_Location__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  cmf::geometry::point arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  cmf::geometry::Location *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cmf__geometry__point,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Location" "', argument " "1"" of type '" "cmf::geometry::point""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Location" "', argument " "1"" of type '" "cmf::geometry::point""'");
    } else {
      cmf::geometry::point * temp = reinterpret_cast< cmf::geometry::point * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    try {
      result = (cmf::geometry::Location *)new cmf::geometry::Location(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmf__geometry__Location, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Location__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  cmf::geometry::Location *result = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Location" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Location" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_Location" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (cmf::geometry::Location *)new cmf::geometry::Location(arg1,arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmf__geometry__Location, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Location(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"new_Location",0,3,argv))) SWIG_fail;
  --argc;
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (argc == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_cmf__geometry__point, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (argc == 3) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          int res = SWIG_AsVal_double(argv[0], NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_double(argv[1], NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      return _wrap_new_Location__SWIG_0(self, argc, argv);
    case 2:
      return _wrap_new_Location__SWIG_1(self, argc, argv);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_Location'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    cmf::geometry::Location(cmf::geometry::point)\n"
    "    cmf::geometry::Location(double,double,double)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Location(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::geometry::Location *arg1 = (cmf::geometry::Location *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__geometry__Location, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Location" "', argument " "1"" of type '" "cmf::geometry::Location *""'"); 
  }
  arg1 = reinterpret_cast< cmf::geometry::Location * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Location_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_cmf__geometry__Location, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *Location_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_point_vector_X_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::geometry::point_vector *arg1 = (cmf::geometry::point_vector *) 0 ;
  cmf::math::num_array *arg2 = (cmf::math::num_array *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"point_vector_X_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__geometry__point_vector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "point_vector_X_set" "', argument " "1"" of type '" "cmf::geometry::point_vector *""'"); 
  }
  arg1 = reinterpret_cast< cmf::geometry::point_vector * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cmf__math__num_array, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "point_vector_X_set" "', argument " "2"" of type '" "cmf::math::num_array *""'"); 
  }
  arg2 = reinterpret_cast< cmf::math::num_array * >(argp2);
  if (arg1) (arg1)->X = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_point_vector_X_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::geometry::point_vector *arg1 = (cmf::geometry::point_vector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  cmf::math::num_array *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__geometry__point_vector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "point_vector_X_get" "', argument " "1"" of type '" "cmf::geometry::point_vector *""'"); 
  }
  arg1 = reinterpret_cast< cmf::geometry::point_vector * >(argp1);
  result = (cmf::math::num_array *)& ((arg1)->X);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmf__math__num_array, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_point_vector_Y_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::geometry::point_vector *arg1 = (cmf::geometry::point_vector *) 0 ;
  cmf::math::num_array *arg2 = (cmf::math::num_array *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"point_vector_Y_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__geometry__point_vector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "point_vector_Y_set" "', argument " "1"" of type '" "cmf::geometry::point_vector *""'"); 
  }
  arg1 = reinterpret_cast< cmf::geometry::point_vector * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cmf__math__num_array, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "point_vector_Y_set" "', argument " "2"" of type '" "cmf::math::num_array *""'"); 
  }
  arg2 = reinterpret_cast< cmf::math::num_array * >(argp2);
  if (arg1) (arg1)->Y = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_point_vector_Y_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::geometry::point_vector *arg1 = (cmf::geometry::point_vector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  cmf::math::num_array *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__geometry__point_vector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "point_vector_Y_get" "', argument " "1"" of type '" "cmf::geometry::point_vector *""'"); 
  }
  arg1 = reinterpret_cast< cmf::geometry::point_vector * >(argp1);
  result = (cmf::math::num_array *)& ((arg1)->Y);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmf__math__num_array, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_point_vector_Z_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::geometry::point_vector *arg1 = (cmf::geometry::point_vector *) 0 ;
  cmf::math::num_array *arg2 = (cmf::math::num_array *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"point_vector_Z_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__geometry__point_vector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "point_vector_Z_set" "', argument " "1"" of type '" "cmf::geometry::point_vector *""'"); 
  }
  arg1 = reinterpret_cast< cmf::geometry::point_vector * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cmf__math__num_array, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "point_vector_Z_set" "', argument " "2"" of type '" "cmf::math::num_array *""'"); 
  }
  arg2 = reinterpret_cast< cmf::math::num_array * >(argp2);
  if (arg1) (arg1)->Z = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_point_vector_Z_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::geometry::point_vector *arg1 = (cmf::geometry::point_vector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  cmf::math::num_array *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__geometry__point_vector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "point_vector_Z_get" "', argument " "1"" of type '" "cmf::geometry::point_vector *""'"); 
  }
  arg1 = reinterpret_cast< cmf::geometry::point_vector * >(argp1);
  result = (cmf::math::num_array *)& ((arg1)->Z);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmf__math__num_array, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_point_vector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject *swig_obj[1] ;
  cmf::geometry::point_vector *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_point_vector" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    try {
      result = (cmf::geometry::point_vector *)new cmf::geometry::point_vector(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmf__geometry__point_vector, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_point_vector_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::geometry::point_vector *arg1 = (cmf::geometry::point_vector *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  cmf::geometry::point result;
  
  if (!SWIG_Python_UnpackTuple(args,"point_vector_get",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__geometry__point_vector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "point_vector_get" "', argument " "1"" of type '" "cmf::geometry::point_vector const *""'"); 
  }
  arg1 = reinterpret_cast< cmf::geometry::point_vector * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "point_vector_get" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = ((cmf::geometry::point_vector const *)arg1)->get(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj((new cmf::geometry::point(static_cast< const cmf::geometry::point& >(result))), SWIGTYPE_p_cmf__geometry__point, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_point_vector_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::geometry::point_vector *arg1 = (cmf::geometry::point_vector *) 0 ;
  int arg2 ;
  cmf::geometry::point arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  
  if (!SWIG_Python_UnpackTuple(args,"point_vector_set",3,3,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__geometry__point_vector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "point_vector_set" "', argument " "1"" of type '" "cmf::geometry::point_vector *""'"); 
  }
  arg1 = reinterpret_cast< cmf::geometry::point_vector * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "point_vector_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_cmf__geometry__point,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "point_vector_set" "', argument " "3"" of type '" "cmf::geometry::point""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "point_vector_set" "', argument " "3"" of type '" "cmf::geometry::point""'");
    } else {
      cmf::geometry::point * temp = reinterpret_cast< cmf::geometry::point * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    try {
      (arg1)->set(arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_point_vector_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::geometry::point_vector *arg1 = (cmf::geometry::point_vector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__geometry__point_vector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "point_vector_size" "', argument " "1"" of type '" "cmf::geometry::point_vector const *""'"); 
  }
  arg1 = reinterpret_cast< cmf::geometry::point_vector * >(argp1);
  {
    try {
      result = (int)((cmf::geometry::point_vector const *)arg1)->size();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_point_vector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::geometry::point_vector *arg1 = (cmf::geometry::point_vector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__geometry__point_vector, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_point_vector" "', argument " "1"" of type '" "cmf::geometry::point_vector *""'"); 
  }
  arg1 = reinterpret_cast< cmf::geometry::point_vector * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *point_vector_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_cmf__geometry__point_vector, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *point_vector_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN int Swig_var_Debug_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Debug is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Debug_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_bool(static_cast< bool >(Debug));
  return pyobj;
}


SWIGINTERN int Swig_var_VERSION_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable VERSION is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_VERSION_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_std_string(static_cast< std::string >(VERSION));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_minimum(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  real arg1 ;
  real arg2 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  real result;
  
  if (!SWIG_Python_UnpackTuple(args,"minimum",2,2,swig_obj)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "minimum" "', argument " "1"" of type '" "real""'");
  } 
  arg1 = static_cast< real >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "minimum" "', argument " "2"" of type '" "real""'");
  } 
  arg2 = static_cast< real >(val2);
  {
    try {
      result = (real)minimum(arg1,arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_maximum(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  real arg1 ;
  real arg2 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  real result;
  
  if (!SWIG_Python_UnpackTuple(args,"maximum",2,2,swig_obj)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "maximum" "', argument " "1"" of type '" "real""'");
  } 
  arg1 = static_cast< real >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "maximum" "', argument " "2"" of type '" "real""'");
  } 
  arg2 = static_cast< real >(val2);
  {
    try {
      result = (real)maximum(arg1,arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_minmax(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  real arg1 ;
  real arg2 ;
  real arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  real result;
  
  if (!SWIG_Python_UnpackTuple(args,"minmax",3,3,swig_obj)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "minmax" "', argument " "1"" of type '" "real""'");
  } 
  arg1 = static_cast< real >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "minmax" "', argument " "2"" of type '" "real""'");
  } 
  arg2 = static_cast< real >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "minmax" "', argument " "3"" of type '" "real""'");
  } 
  arg3 = static_cast< real >(val3);
  {
    try {
      result = (real)minmax(arg1,arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mean(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  real arg1 ;
  real arg2 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  real result;
  
  if (!SWIG_Python_UnpackTuple(args,"mean",2,2,swig_obj)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "mean" "', argument " "1"" of type '" "real""'");
  } 
  arg1 = static_cast< real >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "mean" "', argument " "2"" of type '" "real""'");
  } 
  arg2 = static_cast< real >(val2);
  {
    try {
      result = (real)mean(arg1,arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_geo_mean(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  real arg1 ;
  real arg2 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  real result;
  
  if (!SWIG_Python_UnpackTuple(args,"geo_mean",2,2,swig_obj)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "geo_mean" "', argument " "1"" of type '" "real""'");
  } 
  arg1 = static_cast< real >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "geo_mean" "', argument " "2"" of type '" "real""'");
  } 
  arg2 = static_cast< real >(val2);
  {
    try {
      result = (real)geo_mean(arg1,arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_harmonic_mean(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  real arg1 ;
  real arg2 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  real result;
  
  if (!SWIG_Python_UnpackTuple(args,"harmonic_mean",2,2,swig_obj)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "harmonic_mean" "', argument " "1"" of type '" "real""'");
  } 
  arg1 = static_cast< real >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "harmonic_mean" "', argument " "2"" of type '" "real""'");
  } 
  arg2 = static_cast< real >(val2);
  {
    try {
      result = (real)harmonic_mean(arg1,arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_piecewise_linear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  real arg1 ;
  real arg2 ;
  real arg3 ;
  real arg4 = (real) 0 ;
  real arg5 = (real) 1 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  PyObject *swig_obj[5] ;
  real result;
  
  if (!SWIG_Python_UnpackTuple(args,"piecewise_linear",3,5,swig_obj)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "piecewise_linear" "', argument " "1"" of type '" "real""'");
  } 
  arg1 = static_cast< real >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "piecewise_linear" "', argument " "2"" of type '" "real""'");
  } 
  arg2 = static_cast< real >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "piecewise_linear" "', argument " "3"" of type '" "real""'");
  } 
  arg3 = static_cast< real >(val3);
  if (swig_obj[3]) {
    ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "piecewise_linear" "', argument " "4"" of type '" "real""'");
    } 
    arg4 = static_cast< real >(val4);
  }
  if (swig_obj[4]) {
    ecode5 = SWIG_AsVal_double(swig_obj[4], &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "piecewise_linear" "', argument " "5"" of type '" "real""'");
    } 
    arg5 = static_cast< real >(val5);
  }
  {
    try {
      result = (real)piecewise_linear(arg1,arg2,arg3,arg4,arg5);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_boltzmann(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  real arg1 ;
  real arg2 ;
  real arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  real result;
  
  if (!SWIG_Python_UnpackTuple(args,"boltzmann",3,3,swig_obj)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "boltzmann" "', argument " "1"" of type '" "real""'");
  } 
  arg1 = static_cast< real >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "boltzmann" "', argument " "2"" of type '" "real""'");
  } 
  arg2 = static_cast< real >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "boltzmann" "', argument " "3"" of type '" "real""'");
  } 
  arg3 = static_cast< real >(val3);
  {
    try {
      result = (real)boltzmann(arg1,arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sign(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  real arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject *swig_obj[1] ;
  real result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "sign" "', argument " "1"" of type '" "real""'");
  } 
  arg1 = static_cast< real >(val1);
  {
    try {
      result = (real)sign(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_square(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  real arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject *swig_obj[1] ;
  real result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "square" "', argument " "1"" of type '" "real""'");
  } 
  arg1 = static_cast< real >(val1);
  {
    try {
      result = (real)square(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int Swig_var_Pi_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Pi is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Pi_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_double(static_cast< double >(Pi));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_new_Time__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  cmf::math::Time *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Time" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  {
    try {
      result = (cmf::math::Time *)new cmf::math::Time(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmf__math__Time, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Time__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  int arg3 = (int) 2001 ;
  int arg4 = (int) 0 ;
  int arg5 = (int) 0 ;
  int arg6 = (int) 0 ;
  int arg7 = (int) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  int val7 ;
  int ecode7 = 0 ;
  cmf::math::Time *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 7)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Time" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Time" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (swig_obj[2]) {
    ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_Time" "', argument " "3"" of type '" "int""'");
    } 
    arg3 = static_cast< int >(val3);
  }
  if (swig_obj[3]) {
    ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_Time" "', argument " "4"" of type '" "int""'");
    } 
    arg4 = static_cast< int >(val4);
  }
  if (swig_obj[4]) {
    ecode5 = SWIG_AsVal_int(swig_obj[4], &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_Time" "', argument " "5"" of type '" "int""'");
    } 
    arg5 = static_cast< int >(val5);
  }
  if (swig_obj[5]) {
    ecode6 = SWIG_AsVal_int(swig_obj[5], &val6);
    if (!SWIG_IsOK(ecode6)) {
      SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "new_Time" "', argument " "6"" of type '" "int""'");
    } 
    arg6 = static_cast< int >(val6);
  }
  if (swig_obj[6]) {
    ecode7 = SWIG_AsVal_int(swig_obj[6], &val7);
    if (!SWIG_IsOK(ecode7)) {
      SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "new_Time" "', argument " "7"" of type '" "int""'");
    } 
    arg7 = static_cast< int >(val7);
  }
  {
    try {
      result = (cmf::math::Time *)new cmf::math::Time(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmf__math__Time, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Time__SWIG_2(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  SwigValueWrapper< cmf::math::Date > arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  cmf::math::Time *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cmf__math__Date,  0  | SWIG_POINTER_IMPLICIT_CONV);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Time" "', argument " "1"" of type '" "cmf::math::Date""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Time" "', argument " "1"" of type '" "cmf::math::Date""'");
    } else {
      cmf::math::Date * temp = reinterpret_cast< cmf::math::Date * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    try {
      result = (cmf::math::Time *)new cmf::math::Time(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmf__math__Time, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Time__SWIG_3(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  cmf::math::Time *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cmf::math::Time *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cmf__math__Time,  0  | SWIG_POINTER_IMPLICIT_CONV);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Time" "', argument " "1"" of type '" "cmf::math::Time const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Time" "', argument " "1"" of type '" "cmf::math::Time const &""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::Time * >(argp1);
  {
    try {
      result = (cmf::math::Time *)new cmf::math::Time((cmf::math::Time const &)*arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmf__math__Time, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Time__SWIG_4(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  cmf::math::Time *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  {
    try {
      result = (cmf::math::Time *)new cmf::math::Time();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmf__math__Time, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Time(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[8];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"new_Time",0,7,argv))) SWIG_fail;
  --argc;
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (argc == 0) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
    if (argc == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_cmf__math__Date, SWIG_POINTER_IMPLICIT_CONV);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
    if (argc == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_cmf__math__Time, SWIG_POINTER_IMPLICIT_CONV);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 3;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_3:
    
    if (argc == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          int res = SWIG_AsVal_double(argv[0], NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 4;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_4:
    
    if ((argc >= 2) && (argc <= 7)) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          int res = SWIG_AsVal_int(argv[0], NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_5;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int(argv[1], NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_5;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (argc > 2) {
        {
          {
            int res = SWIG_AsVal_int(argv[2], NULL);
            _v = SWIG_CheckState(res);
          }
        }
        if (!_v) goto check_5;
        _ranki += _v*_pi;
        _rankm += _pi;
        _pi *= SWIG_MAXCASTRANK;
        if (argc > 3) {
          {
            {
              int res = SWIG_AsVal_int(argv[3], NULL);
              _v = SWIG_CheckState(res);
            }
          }
          if (!_v) goto check_5;
          _ranki += _v*_pi;
          _rankm += _pi;
          _pi *= SWIG_MAXCASTRANK;
          if (argc > 4) {
            {
              {
                int res = SWIG_AsVal_int(argv[4], NULL);
                _v = SWIG_CheckState(res);
              }
            }
            if (!_v) goto check_5;
            _ranki += _v*_pi;
            _rankm += _pi;
            _pi *= SWIG_MAXCASTRANK;
            if (argc > 5) {
              {
                {
                  int res = SWIG_AsVal_int(argv[5], NULL);
                  _v = SWIG_CheckState(res);
                }
              }
              if (!_v) goto check_5;
              _ranki += _v*_pi;
              _rankm += _pi;
              _pi *= SWIG_MAXCASTRANK;
              if (argc > 6) {
                {
                  {
                    int res = SWIG_AsVal_int(argv[6], NULL);
                    _v = SWIG_CheckState(res);
                  }
                }
                if (!_v) goto check_5;
                _ranki += _v*_pi;
                _rankm += _pi;
                _pi *= SWIG_MAXCASTRANK;
              }
            }
          }
        }
      }
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 5;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_5:
    
  dispatch:
    switch(_index) {
    case 1:
      return _wrap_new_Time__SWIG_4(self, argc, argv);
    case 2:
      return _wrap_new_Time__SWIG_2(self, argc, argv);
    case 3:
      return _wrap_new_Time__SWIG_3(self, argc, argv);
    case 4:
      return _wrap_new_Time__SWIG_0(self, argc, argv);
    case 5:
      return _wrap_new_Time__SWIG_1(self, argc, argv);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_Time'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    cmf::math::Time(double)\n"
    "    cmf::math::Time(int,int,int,int,int,int,int)\n"
    "    cmf::math::Time(cmf::math::Date)\n"
    "    cmf::math::Time(cmf::math::Time const &)\n"
    "    cmf::math::Time()\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Time_AsDays(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::math::Time *arg1 = (cmf::math::Time *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__math__Time, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Time_AsDays" "', argument " "1"" of type '" "cmf::math::Time const *""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::Time * >(argp1);
  {
    try {
      result = (double)((cmf::math::Time const *)arg1)->AsDays();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Time_AsHours(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::math::Time *arg1 = (cmf::math::Time *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__math__Time, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Time_AsHours" "', argument " "1"" of type '" "cmf::math::Time const *""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::Time * >(argp1);
  {
    try {
      result = (double)((cmf::math::Time const *)arg1)->AsHours();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Time_AsMinutes(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::math::Time *arg1 = (cmf::math::Time *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__math__Time, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Time_AsMinutes" "', argument " "1"" of type '" "cmf::math::Time const *""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::Time * >(argp1);
  {
    try {
      result = (double)((cmf::math::Time const *)arg1)->AsMinutes();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Time_AsSeconds(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::math::Time *arg1 = (cmf::math::Time *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__math__Time, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Time_AsSeconds" "', argument " "1"" of type '" "cmf::math::Time const *""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::Time * >(argp1);
  {
    try {
      result = (double)((cmf::math::Time const *)arg1)->AsSeconds();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Time_AsMilliseconds(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::math::Time *arg1 = (cmf::math::Time *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  long long result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__math__Time, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Time_AsMilliseconds" "', argument " "1"" of type '" "cmf::math::Time const *""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::Time * >(argp1);
  {
    try {
      result = (long long)((cmf::math::Time const *)arg1)->AsMilliseconds();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_long_SS_long(static_cast< long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Time_AsDate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::math::Time *arg1 = (cmf::math::Time *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  SwigValueWrapper< cmf::math::Date > result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__math__Time, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Time_AsDate" "', argument " "1"" of type '" "cmf::math::Time const *""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::Time * >(argp1);
  {
    try {
      result = ((cmf::math::Time const *)arg1)->AsDate();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj((new cmf::math::Date(static_cast< const cmf::math::Date& >(result))), SWIGTYPE_p_cmf__math__Date, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Time_to_string(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::math::Time *arg1 = (cmf::math::Time *) 0 ;
  char arg2 = (char) ':' ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  std::string result;
  
  if (!SWIG_Python_UnpackTuple(args,"Time_to_string",1,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__math__Time, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Time_to_string" "', argument " "1"" of type '" "cmf::math::Time *""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::Time * >(argp1);
  if (swig_obj[1]) {
    ecode2 = SWIG_AsVal_char(swig_obj[1], &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Time_to_string" "', argument " "2"" of type '" "char""'");
    } 
    arg2 = static_cast< char >(val2);
  }
  {
    try {
      result = (arg1)->to_string(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Time_is_not_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::math::Time *arg1 = (cmf::math::Time *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__math__Time, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Time_is_not_0" "', argument " "1"" of type '" "cmf::math::Time const *""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::Time * >(argp1);
  {
    try {
      result = (bool)((cmf::math::Time const *)arg1)->is_not_0();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Time_DOY(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::math::Time *arg1 = (cmf::math::Time *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__math__Time, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Time_DOY" "', argument " "1"" of type '" "cmf::math::Time const *""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::Time * >(argp1);
  {
    try {
      result = (double)((cmf::math::Time const *)arg1)->DOY();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Time___add__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::math::Time *arg1 = (cmf::math::Time *) 0 ;
  cmf::math::Time *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  cmf::math::Time result;
  
  if (!SWIG_Python_UnpackTuple(args,"Time___add__",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__math__Time, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Time___add__" "', argument " "1"" of type '" "cmf::math::Time const *""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::Time * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cmf__math__Time,  0  | SWIG_POINTER_IMPLICIT_CONV);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Time___add__" "', argument " "2"" of type '" "cmf::math::Time const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Time___add__" "', argument " "2"" of type '" "cmf::math::Time const &""'"); 
  }
  arg2 = reinterpret_cast< cmf::math::Time * >(argp2);
  {
    try {
      result = ((cmf::math::Time const *)arg1)->operator +((cmf::math::Time const &)*arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj((new cmf::math::Time(static_cast< const cmf::math::Time& >(result))), SWIGTYPE_p_cmf__math__Time, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Time___sub__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::math::Time *arg1 = (cmf::math::Time *) 0 ;
  cmf::math::Time *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  cmf::math::Time result;
  
  if (!SWIG_Python_UnpackTuple(args,"Time___sub__",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__math__Time, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Time___sub__" "', argument " "1"" of type '" "cmf::math::Time const *""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::Time * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cmf__math__Time,  0  | SWIG_POINTER_IMPLICIT_CONV);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Time___sub__" "', argument " "2"" of type '" "cmf::math::Time const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Time___sub__" "', argument " "2"" of type '" "cmf::math::Time const &""'"); 
  }
  arg2 = reinterpret_cast< cmf::math::Time * >(argp2);
  {
    try {
      result = ((cmf::math::Time const *)arg1)->operator -((cmf::math::Time const &)*arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj((new cmf::math::Time(static_cast< const cmf::math::Time& >(result))), SWIGTYPE_p_cmf__math__Time, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Time___iadd__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::math::Time *arg1 = (cmf::math::Time *) 0 ;
  cmf::math::Time *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  cmf::math::Time result;
  
  if (!SWIG_Python_UnpackTuple(args,"Time___iadd__",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__math__Time, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Time___iadd__" "', argument " "1"" of type '" "cmf::math::Time *""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::Time * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cmf__math__Time,  0  | SWIG_POINTER_IMPLICIT_CONV);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Time___iadd__" "', argument " "2"" of type '" "cmf::math::Time const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Time___iadd__" "', argument " "2"" of type '" "cmf::math::Time const &""'"); 
  }
  arg2 = reinterpret_cast< cmf::math::Time * >(argp2);
  {
    try {
      result = (arg1)->operator +=((cmf::math::Time const &)*arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj((new cmf::math::Time(static_cast< const cmf::math::Time& >(result))), SWIGTYPE_p_cmf__math__Time, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Time___isub__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::math::Time *arg1 = (cmf::math::Time *) 0 ;
  cmf::math::Time *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  cmf::math::Time result;
  
  if (!SWIG_Python_UnpackTuple(args,"Time___isub__",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__math__Time, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Time___isub__" "', argument " "1"" of type '" "cmf::math::Time *""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::Time * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cmf__math__Time,  0  | SWIG_POINTER_IMPLICIT_CONV);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Time___isub__" "', argument " "2"" of type '" "cmf::math::Time const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Time___isub__" "', argument " "2"" of type '" "cmf::math::Time const &""'"); 
  }
  arg2 = reinterpret_cast< cmf::math::Time * >(argp2);
  {
    try {
      result = (arg1)->operator -=((cmf::math::Time const &)*arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj((new cmf::math::Time(static_cast< const cmf::math::Time& >(result))), SWIGTYPE_p_cmf__math__Time, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Time___mul____SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  cmf::math::Time *arg1 = (cmf::math::Time *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  cmf::math::Time result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__math__Time, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Time___mul__" "', argument " "1"" of type '" "cmf::math::Time const *""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::Time * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Time___mul__" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = ((cmf::math::Time const *)arg1)->operator *(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj((new cmf::math::Time(static_cast< const cmf::math::Time& >(result))), SWIGTYPE_p_cmf__math__Time, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Time___div____SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  cmf::math::Time *arg1 = (cmf::math::Time *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  cmf::math::Time result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__math__Time, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Time___div__" "', argument " "1"" of type '" "cmf::math::Time const *""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::Time * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Time___div__" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = ((cmf::math::Time const *)arg1)->operator /(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj((new cmf::math::Time(static_cast< const cmf::math::Time& >(result))), SWIGTYPE_p_cmf__math__Time, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Time___mod__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::math::Time *arg1 = (cmf::math::Time *) 0 ;
  cmf::math::Time *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  cmf::math::Time result;
  
  if (!SWIG_Python_UnpackTuple(args,"Time___mod__",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__math__Time, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Time___mod__" "', argument " "1"" of type '" "cmf::math::Time const *""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::Time * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cmf__math__Time,  0  | SWIG_POINTER_IMPLICIT_CONV);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Time___mod__" "', argument " "2"" of type '" "cmf::math::Time const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Time___mod__" "', argument " "2"" of type '" "cmf::math::Time const &""'"); 
  }
  arg2 = reinterpret_cast< cmf::math::Time * >(argp2);
  {
    try {
      result = ((cmf::math::Time const *)arg1)->operator %((cmf::math::Time const &)*arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj((new cmf::math::Time(static_cast< const cmf::math::Time& >(result))), SWIGTYPE_p_cmf__math__Time, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Time___imul____SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  cmf::math::Time *arg1 = (cmf::math::Time *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  cmf::math::Time *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__math__Time, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Time___imul__" "', argument " "1"" of type '" "cmf::math::Time *""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::Time * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Time___imul__" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (cmf::math::Time *) &(arg1)->operator *=(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmf__math__Time, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Time___idiv____SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  cmf::math::Time *arg1 = (cmf::math::Time *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  cmf::math::Time *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__math__Time, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Time___idiv__" "', argument " "1"" of type '" "cmf::math::Time *""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::Time * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Time___idiv__" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (cmf::math::Time *) &(arg1)->operator /=(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmf__math__Time, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Time___mul____SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  cmf::math::Time *arg1 = (cmf::math::Time *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  cmf::math::Time result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__math__Time, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Time___mul__" "', argument " "1"" of type '" "cmf::math::Time const *""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::Time * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Time___mul__" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = ((cmf::math::Time const *)arg1)->operator *(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj((new cmf::math::Time(static_cast< const cmf::math::Time& >(result))), SWIGTYPE_p_cmf__math__Time, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Time___mul__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Time___mul__",0,2,argv))) SWIG_fail;
  --argc;
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (argc == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_cmf__math__Time, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int(argv[1], NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (argc == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_cmf__math__Time, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_double(argv[1], NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      return _wrap_Time___mul____SWIG_1(self, argc, argv);
    case 2:
      return _wrap_Time___mul____SWIG_0(self, argc, argv);
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_Time___div____SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  cmf::math::Time *arg1 = (cmf::math::Time *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  cmf::math::Time result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__math__Time, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Time___div__" "', argument " "1"" of type '" "cmf::math::Time const *""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::Time * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Time___div__" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = ((cmf::math::Time const *)arg1)->operator /(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj((new cmf::math::Time(static_cast< const cmf::math::Time& >(result))), SWIGTYPE_p_cmf__math__Time, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Time___imul____SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  cmf::math::Time *arg1 = (cmf::math::Time *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  cmf::math::Time *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__math__Time, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Time___imul__" "', argument " "1"" of type '" "cmf::math::Time *""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::Time * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Time___imul__" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (cmf::math::Time *) &(arg1)->operator *=(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmf__math__Time, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Time___imul__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Time___imul__",0,2,argv))) SWIG_fail;
  --argc;
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (argc == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_cmf__math__Time, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int(argv[1], NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (argc == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_cmf__math__Time, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_double(argv[1], NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      return _wrap_Time___imul____SWIG_1(self, argc, argv);
    case 2:
      return _wrap_Time___imul____SWIG_0(self, argc, argv);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'Time___imul__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    operator *=(cmf::math::Time *,double)\n"
    "    operator *=(cmf::math::Time *,int)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Time___idiv____SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  cmf::math::Time *arg1 = (cmf::math::Time *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  cmf::math::Time *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__math__Time, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Time___idiv__" "', argument " "1"" of type '" "cmf::math::Time *""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::Time * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Time___idiv__" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (cmf::math::Time *) &(arg1)->operator /=(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmf__math__Time, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Time___idiv__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Time___idiv__",0,2,argv))) SWIG_fail;
  --argc;
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (argc == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_cmf__math__Time, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int(argv[1], NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (argc == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_cmf__math__Time, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_double(argv[1], NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      return _wrap_Time___idiv____SWIG_1(self, argc, argv);
    case 2:
      return _wrap_Time___idiv____SWIG_0(self, argc, argv);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'Time___idiv__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    operator /=(cmf::math::Time *,double)\n"
    "    operator /=(cmf::math::Time *,int)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Time___imod__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::math::Time *arg1 = (cmf::math::Time *) 0 ;
  cmf::math::Time *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  cmf::math::Time *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args,"Time___imod__",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__math__Time, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Time___imod__" "', argument " "1"" of type '" "cmf::math::Time *""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::Time * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cmf__math__Time,  0  | SWIG_POINTER_IMPLICIT_CONV);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Time___imod__" "', argument " "2"" of type '" "cmf::math::Time const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Time___imod__" "', argument " "2"" of type '" "cmf::math::Time const &""'"); 
  }
  arg2 = reinterpret_cast< cmf::math::Time * >(argp2);
  {
    try {
      result = (cmf::math::Time *) &(arg1)->operator %=((cmf::math::Time const &)*arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmf__math__Time, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Time___div____SWIG_2(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  cmf::math::Time *arg1 = (cmf::math::Time *) 0 ;
  cmf::math::Time *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__math__Time, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Time___div__" "', argument " "1"" of type '" "cmf::math::Time const *""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::Time * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cmf__math__Time,  0  | SWIG_POINTER_IMPLICIT_CONV);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Time___div__" "', argument " "2"" of type '" "cmf::math::Time const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Time___div__" "', argument " "2"" of type '" "cmf::math::Time const &""'"); 
  }
  arg2 = reinterpret_cast< cmf::math::Time * >(argp2);
  {
    try {
      result = (double)((cmf::math::Time const *)arg1)->operator /((cmf::math::Time const &)*arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Time___div__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Time___div__",0,2,argv))) SWIG_fail;
  --argc;
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (argc == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_cmf__math__Time, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_cmf__math__Time, SWIG_POINTER_IMPLICIT_CONV);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (argc == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_cmf__math__Time, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int(argv[1], NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
    if (argc == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_cmf__math__Time, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_double(argv[1], NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 3;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_3:
    
  dispatch:
    switch(_index) {
    case 1:
      return _wrap_Time___div____SWIG_2(self, argc, argv);
    case 2:
      return _wrap_Time___div____SWIG_1(self, argc, argv);
    case 3:
      return _wrap_Time___div____SWIG_0(self, argc, argv);
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_Time_times_in(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::math::Time *arg1 = (cmf::math::Time *) 0 ;
  cmf::math::Time *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  long long result;
  
  if (!SWIG_Python_UnpackTuple(args,"Time_times_in",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__math__Time, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Time_times_in" "', argument " "1"" of type '" "cmf::math::Time const *""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::Time * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cmf__math__Time,  0  | SWIG_POINTER_IMPLICIT_CONV);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Time_times_in" "', argument " "2"" of type '" "cmf::math::Time const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Time_times_in" "', argument " "2"" of type '" "cmf::math::Time const &""'"); 
  }
  arg2 = reinterpret_cast< cmf::math::Time * >(argp2);
  {
    try {
      result = (long long)((cmf::math::Time const *)arg1)->times_in((cmf::math::Time const &)*arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_long_SS_long(static_cast< long long >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Time___lt__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::math::Time *arg1 = (cmf::math::Time *) 0 ;
  cmf::math::Time *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args,"Time___lt__",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__math__Time, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Time___lt__" "', argument " "1"" of type '" "cmf::math::Time const *""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::Time * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cmf__math__Time,  0  | SWIG_POINTER_IMPLICIT_CONV);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Time___lt__" "', argument " "2"" of type '" "cmf::math::Time const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Time___lt__" "', argument " "2"" of type '" "cmf::math::Time const &""'"); 
  }
  arg2 = reinterpret_cast< cmf::math::Time * >(argp2);
  {
    try {
      result = (bool)((cmf::math::Time const *)arg1)->operator <((cmf::math::Time const &)*arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Time___gt__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::math::Time *arg1 = (cmf::math::Time *) 0 ;
  cmf::math::Time *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args,"Time___gt__",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__math__Time, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Time___gt__" "', argument " "1"" of type '" "cmf::math::Time const *""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::Time * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cmf__math__Time,  0  | SWIG_POINTER_IMPLICIT_CONV);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Time___gt__" "', argument " "2"" of type '" "cmf::math::Time const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Time___gt__" "', argument " "2"" of type '" "cmf::math::Time const &""'"); 
  }
  arg2 = reinterpret_cast< cmf::math::Time * >(argp2);
  {
    try {
      result = (bool)((cmf::math::Time const *)arg1)->operator >((cmf::math::Time const &)*arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Time___le__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::math::Time *arg1 = (cmf::math::Time *) 0 ;
  cmf::math::Time *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args,"Time___le__",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__math__Time, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Time___le__" "', argument " "1"" of type '" "cmf::math::Time const *""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::Time * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cmf__math__Time,  0  | SWIG_POINTER_IMPLICIT_CONV);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Time___le__" "', argument " "2"" of type '" "cmf::math::Time const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Time___le__" "', argument " "2"" of type '" "cmf::math::Time const &""'"); 
  }
  arg2 = reinterpret_cast< cmf::math::Time * >(argp2);
  {
    try {
      result = (bool)((cmf::math::Time const *)arg1)->operator <=((cmf::math::Time const &)*arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Time___ge__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::math::Time *arg1 = (cmf::math::Time *) 0 ;
  cmf::math::Time *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args,"Time___ge__",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__math__Time, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Time___ge__" "', argument " "1"" of type '" "cmf::math::Time const *""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::Time * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cmf__math__Time,  0  | SWIG_POINTER_IMPLICIT_CONV);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Time___ge__" "', argument " "2"" of type '" "cmf::math::Time const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Time___ge__" "', argument " "2"" of type '" "cmf::math::Time const &""'"); 
  }
  arg2 = reinterpret_cast< cmf::math::Time * >(argp2);
  {
    try {
      result = (bool)((cmf::math::Time const *)arg1)->operator >=((cmf::math::Time const &)*arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Time___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::math::Time *arg1 = (cmf::math::Time *) 0 ;
  cmf::math::Time *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args,"Time___eq__",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__math__Time, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Time___eq__" "', argument " "1"" of type '" "cmf::math::Time const *""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::Time * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cmf__math__Time,  0  | SWIG_POINTER_IMPLICIT_CONV);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Time___eq__" "', argument " "2"" of type '" "cmf::math::Time const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Time___eq__" "', argument " "2"" of type '" "cmf::math::Time const &""'"); 
  }
  arg2 = reinterpret_cast< cmf::math::Time * >(argp2);
  {
    try {
      result = (bool)((cmf::math::Time const *)arg1)->operator ==((cmf::math::Time const &)*arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Time___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::math::Time *arg1 = (cmf::math::Time *) 0 ;
  cmf::math::Time *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args,"Time___ne__",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__math__Time, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Time___ne__" "', argument " "1"" of type '" "cmf::math::Time const *""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::Time * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cmf__math__Time,  0  | SWIG_POINTER_IMPLICIT_CONV);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Time___ne__" "', argument " "2"" of type '" "cmf::math::Time const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Time___ne__" "', argument " "2"" of type '" "cmf::math::Time const &""'"); 
  }
  arg2 = reinterpret_cast< cmf::math::Time * >(argp2);
  {
    try {
      result = (bool)((cmf::math::Time const *)arg1)->operator !=((cmf::math::Time const &)*arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Time_Years(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 = (double) 1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject *swig_obj[1] ;
  cmf::math::Time result;
  
  if (!SWIG_Python_UnpackTuple(args,"Time_Years",0,1,swig_obj)) SWIG_fail;
  if (swig_obj[0]) {
    ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Time_Years" "', argument " "1"" of type '" "double""'");
    } 
    arg1 = static_cast< double >(val1);
  }
  {
    try {
      result = cmf::math::Time::Years(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj((new cmf::math::Time(static_cast< const cmf::math::Time& >(result))), SWIGTYPE_p_cmf__math__Time, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Time_Days(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 = (double) 1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject *swig_obj[1] ;
  cmf::math::Time result;
  
  if (!SWIG_Python_UnpackTuple(args,"Time_Days",0,1,swig_obj)) SWIG_fail;
  if (swig_obj[0]) {
    ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Time_Days" "', argument " "1"" of type '" "double""'");
    } 
    arg1 = static_cast< double >(val1);
  }
  {
    try {
      result = cmf::math::Time::Days(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj((new cmf::math::Time(static_cast< const cmf::math::Time& >(result))), SWIGTYPE_p_cmf__math__Time, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Time_Hours(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 = (double) 1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject *swig_obj[1] ;
  cmf::math::Time result;
  
  if (!SWIG_Python_UnpackTuple(args,"Time_Hours",0,1,swig_obj)) SWIG_fail;
  if (swig_obj[0]) {
    ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Time_Hours" "', argument " "1"" of type '" "double""'");
    } 
    arg1 = static_cast< double >(val1);
  }
  {
    try {
      result = cmf::math::Time::Hours(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj((new cmf::math::Time(static_cast< const cmf::math::Time& >(result))), SWIGTYPE_p_cmf__math__Time, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Time_Minutes(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 = (double) 1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject *swig_obj[1] ;
  cmf::math::Time result;
  
  if (!SWIG_Python_UnpackTuple(args,"Time_Minutes",0,1,swig_obj)) SWIG_fail;
  if (swig_obj[0]) {
    ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Time_Minutes" "', argument " "1"" of type '" "double""'");
    } 
    arg1 = static_cast< double >(val1);
  }
  {
    try {
      result = cmf::math::Time::Minutes(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj((new cmf::math::Time(static_cast< const cmf::math::Time& >(result))), SWIGTYPE_p_cmf__math__Time, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Time_Seconds(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 = (double) 1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject *swig_obj[1] ;
  cmf::math::Time result;
  
  if (!SWIG_Python_UnpackTuple(args,"Time_Seconds",0,1,swig_obj)) SWIG_fail;
  if (swig_obj[0]) {
    ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Time_Seconds" "', argument " "1"" of type '" "double""'");
    } 
    arg1 = static_cast< double >(val1);
  }
  {
    try {
      result = cmf::math::Time::Seconds(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj((new cmf::math::Time(static_cast< const cmf::math::Time& >(result))), SWIGTYPE_p_cmf__math__Time, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Time_Milliseconds(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  long long arg1 = (long long) 1 ;
  long long val1 ;
  int ecode1 = 0 ;
  PyObject *swig_obj[1] ;
  cmf::math::Time result;
  
  if (!SWIG_Python_UnpackTuple(args,"Time_Milliseconds",0,1,swig_obj)) SWIG_fail;
  if (swig_obj[0]) {
    ecode1 = SWIG_AsVal_long_SS_long(swig_obj[0], &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Time_Milliseconds" "', argument " "1"" of type '" "long long""'");
    } 
    arg1 = static_cast< long long >(val1);
  }
  {
    try {
      result = cmf::math::Time::Milliseconds(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj((new cmf::math::Time(static_cast< const cmf::math::Time& >(result))), SWIGTYPE_p_cmf__math__Time, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Time(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::math::Time *arg1 = (cmf::math::Time *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__math__Time, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Time" "', argument " "1"" of type '" "cmf::math::Time *""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::Time * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Time_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_cmf__math__Time, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *Time_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap___mul____SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  double arg1 ;
  cmf::math::Time arg2 ;
  double val1 ;
  int ecode1 = 0 ;
  cmf::math::Time result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "__mul__" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  {
    arg2 = convert_datetime_to_cmftime(swig_obj[1]);    
  }
  {
    try {
      result = cmf::math::operator *(arg1,arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj((new cmf::math::Time(static_cast< const cmf::math::Time& >(result))), SWIGTYPE_p_cmf__math__Time, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap___mul____SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  int arg1 ;
  cmf::math::Time arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  cmf::math::Time result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "__mul__" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    arg2 = convert_datetime_to_cmftime(swig_obj[1]);    
  }
  {
    try {
      result = cmf::math::operator *(arg1,arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj((new cmf::math::Time(static_cast< const cmf::math::Time& >(result))), SWIGTYPE_p_cmf__math__Time, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_minimum_t(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::math::Time arg1 ;
  cmf::math::Time arg2 ;
  PyObject *swig_obj[2] ;
  cmf::math::Time result;
  
  if (!SWIG_Python_UnpackTuple(args,"minimum_t",2,2,swig_obj)) SWIG_fail;
  {
    arg1 = convert_datetime_to_cmftime(swig_obj[0]);    
  }
  {
    arg2 = convert_datetime_to_cmftime(swig_obj[1]);    
  }
  {
    try {
      result = cmf::math::minimum_t(arg1,arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj((new cmf::math::Time(static_cast< const cmf::math::Time& >(result))), SWIGTYPE_p_cmf__math__Time, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_maximum_t(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::math::Time arg1 ;
  cmf::math::Time arg2 ;
  PyObject *swig_obj[2] ;
  cmf::math::Time result;
  
  if (!SWIG_Python_UnpackTuple(args,"maximum_t",2,2,swig_obj)) SWIG_fail;
  {
    arg1 = convert_datetime_to_cmftime(swig_obj[0]);    
  }
  {
    arg2 = convert_datetime_to_cmftime(swig_obj[1]);    
  }
  {
    try {
      result = cmf::math::maximum_t(arg1,arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj((new cmf::math::Time(static_cast< const cmf::math::Time& >(result))), SWIGTYPE_p_cmf__math__Time, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Date_year_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::math::Date *arg1 = (cmf::math::Date *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"Date_year_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__math__Date, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Date_year_set" "', argument " "1"" of type '" "cmf::math::Date *""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::Date * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Date_year_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->year = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Date_year_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::math::Date *arg1 = (cmf::math::Date *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__math__Date, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Date_year_get" "', argument " "1"" of type '" "cmf::math::Date *""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::Date * >(argp1);
  result = (int) ((arg1)->year);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Date_month_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::math::Date *arg1 = (cmf::math::Date *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"Date_month_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__math__Date, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Date_month_set" "', argument " "1"" of type '" "cmf::math::Date *""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::Date * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Date_month_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->month = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Date_month_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::math::Date *arg1 = (cmf::math::Date *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__math__Date, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Date_month_get" "', argument " "1"" of type '" "cmf::math::Date *""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::Date * >(argp1);
  result = (int) ((arg1)->month);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Date_day_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::math::Date *arg1 = (cmf::math::Date *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"Date_day_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__math__Date, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Date_day_set" "', argument " "1"" of type '" "cmf::math::Date *""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::Date * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Date_day_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->day = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Date_day_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::math::Date *arg1 = (cmf::math::Date *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__math__Date, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Date_day_get" "', argument " "1"" of type '" "cmf::math::Date *""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::Date * >(argp1);
  result = (int) ((arg1)->day);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Date_hour_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::math::Date *arg1 = (cmf::math::Date *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"Date_hour_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__math__Date, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Date_hour_set" "', argument " "1"" of type '" "cmf::math::Date *""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::Date * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Date_hour_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->hour = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Date_hour_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::math::Date *arg1 = (cmf::math::Date *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__math__Date, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Date_hour_get" "', argument " "1"" of type '" "cmf::math::Date *""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::Date * >(argp1);
  result = (int) ((arg1)->hour);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Date_minute_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::math::Date *arg1 = (cmf::math::Date *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"Date_minute_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__math__Date, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Date_minute_set" "', argument " "1"" of type '" "cmf::math::Date *""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::Date * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Date_minute_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->minute = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Date_minute_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::math::Date *arg1 = (cmf::math::Date *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__math__Date, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Date_minute_get" "', argument " "1"" of type '" "cmf::math::Date *""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::Date * >(argp1);
  result = (int) ((arg1)->minute);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Date_second_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::math::Date *arg1 = (cmf::math::Date *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"Date_second_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__math__Date, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Date_second_set" "', argument " "1"" of type '" "cmf::math::Date *""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::Date * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Date_second_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->second = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Date_second_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::math::Date *arg1 = (cmf::math::Date *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__math__Date, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Date_second_get" "', argument " "1"" of type '" "cmf::math::Date *""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::Date * >(argp1);
  result = (int) ((arg1)->second);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Date_ms_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::math::Date *arg1 = (cmf::math::Date *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"Date_ms_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__math__Date, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Date_ms_set" "', argument " "1"" of type '" "cmf::math::Date *""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::Date * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Date_ms_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->ms = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Date_ms_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::math::Date *arg1 = (cmf::math::Date *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__math__Date, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Date_ms_get" "', argument " "1"" of type '" "cmf::math::Date *""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::Date * >(argp1);
  result = (int) ((arg1)->ms);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Date__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  int arg3 = (int) 2001 ;
  int arg4 = (int) 0 ;
  int arg5 = (int) 0 ;
  int arg6 = (int) 0 ;
  int arg7 = (int) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  int val7 ;
  int ecode7 = 0 ;
  cmf::math::Date *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 7)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Date" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Date" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (swig_obj[2]) {
    ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_Date" "', argument " "3"" of type '" "int""'");
    } 
    arg3 = static_cast< int >(val3);
  }
  if (swig_obj[3]) {
    ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_Date" "', argument " "4"" of type '" "int""'");
    } 
    arg4 = static_cast< int >(val4);
  }
  if (swig_obj[4]) {
    ecode5 = SWIG_AsVal_int(swig_obj[4], &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_Date" "', argument " "5"" of type '" "int""'");
    } 
    arg5 = static_cast< int >(val5);
  }
  if (swig_obj[5]) {
    ecode6 = SWIG_AsVal_int(swig_obj[5], &val6);
    if (!SWIG_IsOK(ecode6)) {
      SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "new_Date" "', argument " "6"" of type '" "int""'");
    } 
    arg6 = static_cast< int >(val6);
  }
  if (swig_obj[6]) {
    ecode7 = SWIG_AsVal_int(swig_obj[6], &val7);
    if (!SWIG_IsOK(ecode7)) {
      SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "new_Date" "', argument " "7"" of type '" "int""'");
    } 
    arg7 = static_cast< int >(val7);
  }
  {
    try {
      result = (cmf::math::Date *)new cmf::math::Date(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmf__math__Date, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Date__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  cmf::math::Time *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cmf::math::Date *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cmf__math__Time,  0  | SWIG_POINTER_IMPLICIT_CONV);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Date" "', argument " "1"" of type '" "cmf::math::Time const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Date" "', argument " "1"" of type '" "cmf::math::Time const &""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::Time * >(argp1);
  {
    try {
      result = (cmf::math::Date *)new cmf::math::Date((cmf::math::Time const &)*arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmf__math__Date, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Date(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[8];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"new_Date",0,7,argv))) SWIG_fail;
  --argc;
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (argc == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_cmf__math__Time, SWIG_POINTER_IMPLICIT_CONV);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if ((argc >= 2) && (argc <= 7)) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          int res = SWIG_AsVal_int(argv[0], NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int(argv[1], NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (argc > 2) {
        {
          {
            int res = SWIG_AsVal_int(argv[2], NULL);
            _v = SWIG_CheckState(res);
          }
        }
        if (!_v) goto check_2;
        _ranki += _v*_pi;
        _rankm += _pi;
        _pi *= SWIG_MAXCASTRANK;
        if (argc > 3) {
          {
            {
              int res = SWIG_AsVal_int(argv[3], NULL);
              _v = SWIG_CheckState(res);
            }
          }
          if (!_v) goto check_2;
          _ranki += _v*_pi;
          _rankm += _pi;
          _pi *= SWIG_MAXCASTRANK;
          if (argc > 4) {
            {
              {
                int res = SWIG_AsVal_int(argv[4], NULL);
                _v = SWIG_CheckState(res);
              }
            }
            if (!_v) goto check_2;
            _ranki += _v*_pi;
            _rankm += _pi;
            _pi *= SWIG_MAXCASTRANK;
            if (argc > 5) {
              {
                {
                  int res = SWIG_AsVal_int(argv[5], NULL);
                  _v = SWIG_CheckState(res);
                }
              }
              if (!_v) goto check_2;
              _ranki += _v*_pi;
              _rankm += _pi;
              _pi *= SWIG_MAXCASTRANK;
              if (argc > 6) {
                {
                  {
                    int res = SWIG_AsVal_int(argv[6], NULL);
                    _v = SWIG_CheckState(res);
                  }
                }
                if (!_v) goto check_2;
                _ranki += _v*_pi;
                _rankm += _pi;
                _pi *= SWIG_MAXCASTRANK;
              }
            }
          }
        }
      }
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      return _wrap_new_Date__SWIG_1(self, argc, argv);
    case 2:
      return _wrap_new_Date__SWIG_0(self, argc, argv);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_Date'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    cmf::math::Date(int,int,int,int,int,int,int)\n"
    "    cmf::math::Date(cmf::math::Time const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Date_ToTime(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::math::Date *arg1 = (cmf::math::Date *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  cmf::math::Time result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__math__Date, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Date_ToTime" "', argument " "1"" of type '" "cmf::math::Date *""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::Date * >(argp1);
  {
    try {
      result = (arg1)->ToTime();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj((new cmf::math::Time(static_cast< const cmf::math::Time& >(result))), SWIGTYPE_p_cmf__math__Time, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Date_DOY(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::math::Date *arg1 = (cmf::math::Date *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__math__Date, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Date_DOY" "', argument " "1"" of type '" "cmf::math::Date *""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::Date * >(argp1);
  {
    try {
      result = (double)(arg1)->DOY();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Date_to_string(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::math::Date *arg1 = (cmf::math::Date *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__math__Date, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Date_to_string" "', argument " "1"" of type '" "cmf::math::Date *""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::Date * >(argp1);
  {
    try {
      result = (arg1)->to_string();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Date(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::math::Date *arg1 = (cmf::math::Date *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__math__Date, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Date" "', argument " "1"" of type '" "cmf::math::Date *""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::Date * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Date_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_cmf__math__Date, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *Date_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN int Swig_var_ms_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ms is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ms_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&cmf::math::ms), SWIGTYPE_p_cmf__math__Time,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_sec_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable sec is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_sec_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&cmf::math::sec), SWIGTYPE_p_cmf__math__Time,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_min_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable min is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_min_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&cmf::math::min), SWIGTYPE_p_cmf__math__Time,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_h_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable h is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_h_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&cmf::math::h), SWIGTYPE_p_cmf__math__Time,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_day_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable day is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_day_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&cmf::math::day), SWIGTYPE_p_cmf__math__Time,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_week_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable week is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_week_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&cmf::math::week), SWIGTYPE_p_cmf__math__Time,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_month_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable month is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_month_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&cmf::math::month), SWIGTYPE_p_cmf__math__Time,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_year_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable year is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_year_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&cmf::math::year), SWIGTYPE_p_cmf__math__Time,  0 );
  return pyobj;
}


SWIGINTERN PyObject *_wrap_timeseries_interpolationpower(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::math::timeseries *arg1 = (cmf::math::timeseries *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__math__timeseries, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "timeseries_interpolationpower" "', argument " "1"" of type '" "cmf::math::timeseries const *""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::timeseries * >(argp1);
  {
    try {
      result = (double)((cmf::math::timeseries const *)arg1)->interpolationpower();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_timeseries_add(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::math::timeseries *arg1 = (cmf::math::timeseries *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"timeseries_add",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__math__timeseries, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "timeseries_add" "', argument " "1"" of type '" "cmf::math::timeseries *""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::timeseries * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "timeseries_add" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->add(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_timeseries_is_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::math::timeseries *arg1 = (cmf::math::timeseries *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__math__timeseries, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "timeseries_is_empty" "', argument " "1"" of type '" "cmf::math::timeseries const *""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::timeseries * >(argp1);
  {
    try {
      result = (bool)((cmf::math::timeseries const *)arg1)->is_empty();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_timeseries_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::math::timeseries *arg1 = (cmf::math::timeseries *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__math__timeseries, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "timeseries_clear" "', argument " "1"" of type '" "cmf::math::timeseries *""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::timeseries * >(argp1);
  {
    try {
      (arg1)->clear();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_timeseries_adress(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::math::timeseries *arg1 = (cmf::math::timeseries *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  size_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__math__timeseries, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "timeseries_adress" "', argument " "1"" of type '" "cmf::math::timeseries const *""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::timeseries * >(argp1);
  {
    try {
      result = ((cmf::math::timeseries const *)arg1)->adress();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_timeseries_copy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::math::timeseries *arg1 = (cmf::math::timeseries *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  cmf::math::timeseries result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__math__timeseries, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "timeseries_copy" "', argument " "1"" of type '" "cmf::math::timeseries const *""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::timeseries * >(argp1);
  {
    try {
      result = ((cmf::math::timeseries const *)arg1)->copy();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj((new cmf::math::timeseries(static_cast< const cmf::math::timeseries& >(result))), SWIGTYPE_p_cmf__math__timeseries, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_timeseries_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::math::timeseries *arg1 = (cmf::math::timeseries *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__math__timeseries, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "timeseries_size" "', argument " "1"" of type '" "cmf::math::timeseries const *""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::timeseries * >(argp1);
  {
    try {
      result = (int)((cmf::math::timeseries const *)arg1)->size();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_timeseries__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  cmf::math::Time arg1 ;
  cmf::math::Time arg2 ;
  int arg3 = (int) 1 ;
  int val3 ;
  int ecode3 = 0 ;
  cmf::math::timeseries *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 3)) SWIG_fail;
  {
    arg1 = convert_datetime_to_cmftime(swig_obj[0]);    
  }
  {
    arg2 = convert_datetime_to_cmftime(swig_obj[1]);    
  }
  if (swig_obj[2]) {
    ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_timeseries" "', argument " "3"" of type '" "int""'");
    } 
    arg3 = static_cast< int >(val3);
  }
  {
    try {
      result = (cmf::math::timeseries *)new cmf::math::timeseries(arg1,arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmf__math__timeseries, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_timeseries__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  cmf::math::timeseries *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  {
    try {
      result = (cmf::math::timeseries *)new cmf::math::timeseries();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmf__math__timeseries, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_timeseries__SWIG_2(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  cmf::math::timeseries *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cmf::math::timeseries *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cmf__math__timeseries,  0  | SWIG_POINTER_IMPLICIT_CONV);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_timeseries" "', argument " "1"" of type '" "cmf::math::timeseries const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_timeseries" "', argument " "1"" of type '" "cmf::math::timeseries const &""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::timeseries * >(argp1);
  {
    try {
      result = (cmf::math::timeseries *)new cmf::math::timeseries((cmf::math::timeseries const &)*arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmf__math__timeseries, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_timeseries__SWIG_3(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  cmf::math::timeseries *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_timeseries" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  {
    try {
      result = (cmf::math::timeseries *)new cmf::math::timeseries(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmf__math__timeseries, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_timeseries(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"new_timeseries",0,3,argv))) SWIG_fail;
  --argc;
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (argc == 0) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
    if (argc == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_cmf__math__timeseries, SWIG_POINTER_IMPLICIT_CONV);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
    if (argc == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          int res = SWIG_AsVal_double(argv[0], NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 3;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_3:
    
    if ((argc >= 2) && (argc <= 3)) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          void * pt;    
          int res=SWIG_ConvertPtr(argv[0],&pt,SWIGTYPE_p_cmf__math__Time,0);
          _v=SWIG_IsOK(res) || PyDateTime_Check(argv[0]) || PyDelta_Check(argv[0]) || PyDate_Check(argv[0]);
        }
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          void * pt;    
          int res=SWIG_ConvertPtr(argv[1],&pt,SWIGTYPE_p_cmf__math__Time,0);
          _v=SWIG_IsOK(res) || PyDateTime_Check(argv[1]) || PyDelta_Check(argv[1]) || PyDate_Check(argv[1]);
        }
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (argc > 2) {
        {
          {
            int res = SWIG_AsVal_int(argv[2], NULL);
            _v = SWIG_CheckState(res);
          }
        }
        if (!_v) goto check_4;
        _ranki += _v*_pi;
        _rankm += _pi;
        _pi *= SWIG_MAXCASTRANK;
      }
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 4;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_4:
    
  dispatch:
    switch(_index) {
    case 1:
      return _wrap_new_timeseries__SWIG_1(self, argc, argv);
    case 2:
      return _wrap_new_timeseries__SWIG_2(self, argc, argv);
    case 3:
      return _wrap_new_timeseries__SWIG_3(self, argc, argv);
    case 4:
      return _wrap_new_timeseries__SWIG_0(self, argc, argv);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_timeseries'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    cmf::math::timeseries(cmf::math::Time,cmf::math::Time,int)\n"
    "    cmf::math::timeseries()\n"
    "    cmf::math::timeseries(cmf::math::timeseries const &)\n"
    "    cmf::math::timeseries(double)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_timeseries_get_t(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::math::timeseries *arg1 = (cmf::math::timeseries *) 0 ;
  cmf::math::Time arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  double result;
  
  if (!SWIG_Python_UnpackTuple(args,"timeseries_get_t",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__math__timeseries, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "timeseries_get_t" "', argument " "1"" of type '" "cmf::math::timeseries const *""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::timeseries * >(argp1);
  {
    arg2 = convert_datetime_to_cmftime(swig_obj[1]);    
  }
  {
    try {
      result = (double)((cmf::math::timeseries const *)arg1)->get_t(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_timeseries_get_i(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::math::timeseries *arg1 = (cmf::math::timeseries *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  double result;
  
  if (!SWIG_Python_UnpackTuple(args,"timeseries_get_i",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__math__timeseries, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "timeseries_get_i" "', argument " "1"" of type '" "cmf::math::timeseries const *""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::timeseries * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "timeseries_get_i" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (double)((cmf::math::timeseries const *)arg1)->get_i(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_timeseries_set_t(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::math::timeseries *arg1 = (cmf::math::timeseries *) 0 ;
  cmf::math::Time arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  
  if (!SWIG_Python_UnpackTuple(args,"timeseries_set_t",3,3,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__math__timeseries, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "timeseries_set_t" "', argument " "1"" of type '" "cmf::math::timeseries *""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::timeseries * >(argp1);
  {
    arg2 = convert_datetime_to_cmftime(swig_obj[1]);    
  }
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "timeseries_set_t" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      (arg1)->set_t(arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_timeseries_set_i(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::math::timeseries *arg1 = (cmf::math::timeseries *) 0 ;
  int arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  
  if (!SWIG_Python_UnpackTuple(args,"timeseries_set_i",3,3,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__math__timeseries, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "timeseries_set_i" "', argument " "1"" of type '" "cmf::math::timeseries *""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::timeseries * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "timeseries_set_i" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "timeseries_set_i" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      (arg1)->set_i(arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_timeseries_get_slice__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  cmf::math::timeseries *arg1 = (cmf::math::timeseries *) 0 ;
  cmf::math::Time arg2 ;
  cmf::math::Time arg3 ;
  cmf::math::Time arg4 = (cmf::math::Time) cmf::math::Time() ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cmf::math::timeseries result;
  
  if ((nobjs < 3) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__math__timeseries, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "timeseries_get_slice" "', argument " "1"" of type '" "cmf::math::timeseries *""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::timeseries * >(argp1);
  {
    arg2 = convert_datetime_to_cmftime(swig_obj[1]);    
  }
  {
    arg3 = convert_datetime_to_cmftime(swig_obj[2]);    
  }
  if (swig_obj[3]) {
    {
      arg4 = convert_datetime_to_cmftime(swig_obj[3]);    
    }
  }
  {
    try {
      result = (arg1)->get_slice(arg2,arg3,arg4);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj((new cmf::math::timeseries(static_cast< const cmf::math::timeseries& >(result))), SWIGTYPE_p_cmf__math__timeseries, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_timeseries_set_slice__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  cmf::math::timeseries *arg1 = (cmf::math::timeseries *) 0 ;
  cmf::math::Time arg2 ;
  cmf::math::Time arg3 ;
  cmf::math::timeseries arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__math__timeseries, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "timeseries_set_slice" "', argument " "1"" of type '" "cmf::math::timeseries *""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::timeseries * >(argp1);
  {
    arg2 = convert_datetime_to_cmftime(swig_obj[1]);    
  }
  {
    arg3 = convert_datetime_to_cmftime(swig_obj[2]);    
  }
  {
    res4 = SWIG_ConvertPtr(swig_obj[3], &argp4, SWIGTYPE_p_cmf__math__timeseries,  0  | SWIG_POINTER_IMPLICIT_CONV);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "timeseries_set_slice" "', argument " "4"" of type '" "cmf::math::timeseries""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "timeseries_set_slice" "', argument " "4"" of type '" "cmf::math::timeseries""'");
    } else {
      cmf::math::timeseries * temp = reinterpret_cast< cmf::math::timeseries * >(argp4);
      arg4 = *temp;
      if (SWIG_IsNewObj(res4)) delete temp;
    }
  }
  {
    try {
      (arg1)->set_slice(arg2,arg3,arg4);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_timeseries_get_slice__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  cmf::math::timeseries *arg1 = (cmf::math::timeseries *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 = (int) 1 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  cmf::math::timeseries result;
  
  if ((nobjs < 3) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__math__timeseries, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "timeseries_get_slice" "', argument " "1"" of type '" "cmf::math::timeseries *""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::timeseries * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "timeseries_get_slice" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "timeseries_get_slice" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  if (swig_obj[3]) {
    ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "timeseries_get_slice" "', argument " "4"" of type '" "int""'");
    } 
    arg4 = static_cast< int >(val4);
  }
  {
    try {
      result = (arg1)->get_slice(arg2,arg3,arg4);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj((new cmf::math::timeseries(static_cast< const cmf::math::timeseries& >(result))), SWIGTYPE_p_cmf__math__timeseries, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_timeseries_get_slice(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"timeseries_get_slice",0,4,argv))) SWIG_fail;
  --argc;
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if ((argc >= 3) && (argc <= 4)) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_cmf__math__timeseries, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          void * pt;    
          int res=SWIG_ConvertPtr(argv[1],&pt,SWIGTYPE_p_cmf__math__Time,0);
          _v=SWIG_IsOK(res) || PyDateTime_Check(argv[1]) || PyDelta_Check(argv[1]) || PyDate_Check(argv[1]);
        }
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          void * pt;    
          int res=SWIG_ConvertPtr(argv[2],&pt,SWIGTYPE_p_cmf__math__Time,0);
          _v=SWIG_IsOK(res) || PyDateTime_Check(argv[2]) || PyDelta_Check(argv[2]) || PyDate_Check(argv[2]);
        }
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (argc > 3) {
        {
          {
            void * pt;    
            int res=SWIG_ConvertPtr(argv[3],&pt,SWIGTYPE_p_cmf__math__Time,0);
            _v=SWIG_IsOK(res) || PyDateTime_Check(argv[3]) || PyDelta_Check(argv[3]) || PyDate_Check(argv[3]);
          }
        }
        if (!_v) goto check_1;
        _ranki += _v*_pi;
        _rankm += _pi;
        _pi *= SWIG_MAXCASTRANK;
      }
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if ((argc >= 3) && (argc <= 4)) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_cmf__math__timeseries, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int(argv[1], NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (argc > 3) {
        {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
        }
        if (!_v) goto check_2;
        _ranki += _v*_pi;
        _rankm += _pi;
        _pi *= SWIG_MAXCASTRANK;
      }
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      return _wrap_timeseries_get_slice__SWIG_0(self, argc, argv);
    case 2:
      return _wrap_timeseries_get_slice__SWIG_1(self, argc, argv);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'timeseries_get_slice'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    get_slice(cmf::math::timeseries *,cmf::math::Time,cmf::math::Time,cmf::math::Time)\n"
    "    get_slice(cmf::math::timeseries *,int,int,int)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_timeseries_set_slice__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  cmf::math::timeseries *arg1 = (cmf::math::timeseries *) 0 ;
  int arg2 ;
  int arg3 ;
  cmf::math::timeseries arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__math__timeseries, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "timeseries_set_slice" "', argument " "1"" of type '" "cmf::math::timeseries *""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::timeseries * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "timeseries_set_slice" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "timeseries_set_slice" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    res4 = SWIG_ConvertPtr(swig_obj[3], &argp4, SWIGTYPE_p_cmf__math__timeseries,  0  | SWIG_POINTER_IMPLICIT_CONV);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "timeseries_set_slice" "', argument " "4"" of type '" "cmf::math::timeseries""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "timeseries_set_slice" "', argument " "4"" of type '" "cmf::math::timeseries""'");
    } else {
      cmf::math::timeseries * temp = reinterpret_cast< cmf::math::timeseries * >(argp4);
      arg4 = *temp;
      if (SWIG_IsNewObj(res4)) delete temp;
    }
  }
  {
    try {
      (arg1)->set_slice(arg2,arg3,arg4);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_timeseries_set_slice(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"timeseries_set_slice",0,4,argv))) SWIG_fail;
  --argc;
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (argc == 4) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_cmf__math__timeseries, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          void * pt;    
          int res=SWIG_ConvertPtr(argv[1],&pt,SWIGTYPE_p_cmf__math__Time,0);
          _v=SWIG_IsOK(res) || PyDateTime_Check(argv[1]) || PyDelta_Check(argv[1]) || PyDate_Check(argv[1]);
        }
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          void * pt;    
          int res=SWIG_ConvertPtr(argv[2],&pt,SWIGTYPE_p_cmf__math__Time,0);
          _v=SWIG_IsOK(res) || PyDateTime_Check(argv[2]) || PyDelta_Check(argv[2]) || PyDate_Check(argv[2]);
        }
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_cmf__math__timeseries, SWIG_POINTER_IMPLICIT_CONV);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (argc == 4) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_cmf__math__timeseries, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int(argv[1], NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_cmf__math__timeseries, SWIG_POINTER_IMPLICIT_CONV);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      return _wrap_timeseries_set_slice__SWIG_0(self, argc, argv);
    case 2:
      return _wrap_timeseries_set_slice__SWIG_1(self, argc, argv);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'timeseries_set_slice'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    set_slice(cmf::math::timeseries *,cmf::math::Time,cmf::math::Time,cmf::math::timeseries)\n"
    "    set_slice(cmf::math::timeseries *,int,int,cmf::math::timeseries)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_timeseries___iadd____SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  cmf::math::timeseries *arg1 = (cmf::math::timeseries *) 0 ;
  cmf::math::timeseries arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  cmf::math::timeseries *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__math__timeseries, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "timeseries___iadd__" "', argument " "1"" of type '" "cmf::math::timeseries *""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::timeseries * >(argp1);
  {
    res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cmf__math__timeseries,  0  | SWIG_POINTER_IMPLICIT_CONV);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "timeseries___iadd__" "', argument " "2"" of type '" "cmf::math::timeseries""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "timeseries___iadd__" "', argument " "2"" of type '" "cmf::math::timeseries""'");
    } else {
      cmf::math::timeseries * temp = reinterpret_cast< cmf::math::timeseries * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      result = (cmf::math::timeseries *) &(arg1)->operator +=(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmf__math__timeseries, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_timeseries___iadd____SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  cmf::math::timeseries *arg1 = (cmf::math::timeseries *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  cmf::math::timeseries *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__math__timeseries, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "timeseries___iadd__" "', argument " "1"" of type '" "cmf::math::timeseries *""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::timeseries * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "timeseries___iadd__" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (cmf::math::timeseries *) &(arg1)->operator +=(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmf__math__timeseries, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_timeseries___iadd__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"timeseries___iadd__",0,2,argv))) SWIG_fail;
  --argc;
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (argc == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_cmf__math__timeseries, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_cmf__math__timeseries, SWIG_POINTER_IMPLICIT_CONV);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (argc == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_cmf__math__timeseries, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_double(argv[1], NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      return _wrap_timeseries___iadd____SWIG_0(self, argc, argv);
    case 2:
      return _wrap_timeseries___iadd____SWIG_1(self, argc, argv);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'timeseries___iadd__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    operator +=(cmf::math::timeseries *,cmf::math::timeseries)\n"
    "    operator +=(cmf::math::timeseries *,double)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_timeseries___isub____SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  cmf::math::timeseries *arg1 = (cmf::math::timeseries *) 0 ;
  cmf::math::timeseries arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  cmf::math::timeseries *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__math__timeseries, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "timeseries___isub__" "', argument " "1"" of type '" "cmf::math::timeseries *""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::timeseries * >(argp1);
  {
    res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cmf__math__timeseries,  0  | SWIG_POINTER_IMPLICIT_CONV);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "timeseries___isub__" "', argument " "2"" of type '" "cmf::math::timeseries""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "timeseries___isub__" "', argument " "2"" of type '" "cmf::math::timeseries""'");
    } else {
      cmf::math::timeseries * temp = reinterpret_cast< cmf::math::timeseries * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      result = (cmf::math::timeseries *) &(arg1)->operator -=(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmf__math__timeseries, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_timeseries___isub____SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  cmf::math::timeseries *arg1 = (cmf::math::timeseries *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  cmf::math::timeseries *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__math__timeseries, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "timeseries___isub__" "', argument " "1"" of type '" "cmf::math::timeseries *""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::timeseries * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "timeseries___isub__" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (cmf::math::timeseries *) &(arg1)->operator -=(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmf__math__timeseries, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_timeseries___isub__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"timeseries___isub__",0,2,argv))) SWIG_fail;
  --argc;
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (argc == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_cmf__math__timeseries, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_cmf__math__timeseries, SWIG_POINTER_IMPLICIT_CONV);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (argc == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_cmf__math__timeseries, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_double(argv[1], NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      return _wrap_timeseries___isub____SWIG_0(self, argc, argv);
    case 2:
      return _wrap_timeseries___isub____SWIG_1(self, argc, argv);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'timeseries___isub__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    operator -=(cmf::math::timeseries *,cmf::math::timeseries)\n"
    "    operator -=(cmf::math::timeseries *,double)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_timeseries___imul____SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  cmf::math::timeseries *arg1 = (cmf::math::timeseries *) 0 ;
  cmf::math::timeseries arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  cmf::math::timeseries *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__math__timeseries, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "timeseries___imul__" "', argument " "1"" of type '" "cmf::math::timeseries *""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::timeseries * >(argp1);
  {
    res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cmf__math__timeseries,  0  | SWIG_POINTER_IMPLICIT_CONV);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "timeseries___imul__" "', argument " "2"" of type '" "cmf::math::timeseries""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "timeseries___imul__" "', argument " "2"" of type '" "cmf::math::timeseries""'");
    } else {
      cmf::math::timeseries * temp = reinterpret_cast< cmf::math::timeseries * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      result = (cmf::math::timeseries *) &(arg1)->operator *=(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmf__math__timeseries, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_timeseries___imul____SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  cmf::math::timeseries *arg1 = (cmf::math::timeseries *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  cmf::math::timeseries *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__math__timeseries, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "timeseries___imul__" "', argument " "1"" of type '" "cmf::math::timeseries *""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::timeseries * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "timeseries___imul__" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (cmf::math::timeseries *) &(arg1)->operator *=(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmf__math__timeseries, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_timeseries___imul__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"timeseries___imul__",0,2,argv))) SWIG_fail;
  --argc;
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (argc == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_cmf__math__timeseries, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_cmf__math__timeseries, SWIG_POINTER_IMPLICIT_CONV);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (argc == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_cmf__math__timeseries, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_double(argv[1], NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      return _wrap_timeseries___imul____SWIG_0(self, argc, argv);
    case 2:
      return _wrap_timeseries___imul____SWIG_1(self, argc, argv);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'timeseries___imul__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    operator *=(cmf::math::timeseries *,cmf::math::timeseries)\n"
    "    operator *=(cmf::math::timeseries *,double)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_timeseries___idiv____SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  cmf::math::timeseries *arg1 = (cmf::math::timeseries *) 0 ;
  cmf::math::timeseries arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  cmf::math::timeseries *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__math__timeseries, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "timeseries___idiv__" "', argument " "1"" of type '" "cmf::math::timeseries *""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::timeseries * >(argp1);
  {
    res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cmf__math__timeseries,  0  | SWIG_POINTER_IMPLICIT_CONV);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "timeseries___idiv__" "', argument " "2"" of type '" "cmf::math::timeseries""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "timeseries___idiv__" "', argument " "2"" of type '" "cmf::math::timeseries""'");
    } else {
      cmf::math::timeseries * temp = reinterpret_cast< cmf::math::timeseries * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      result = (cmf::math::timeseries *) &(arg1)->operator /=(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmf__math__timeseries, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_timeseries___idiv____SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  cmf::math::timeseries *arg1 = (cmf::math::timeseries *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  cmf::math::timeseries *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__math__timeseries, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "timeseries___idiv__" "', argument " "1"" of type '" "cmf::math::timeseries *""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::timeseries * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "timeseries___idiv__" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (cmf::math::timeseries *) &(arg1)->operator /=(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmf__math__timeseries, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_timeseries___idiv__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"timeseries___idiv__",0,2,argv))) SWIG_fail;
  --argc;
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (argc == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_cmf__math__timeseries, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_cmf__math__timeseries, SWIG_POINTER_IMPLICIT_CONV);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (argc == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_cmf__math__timeseries, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_double(argv[1], NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      return _wrap_timeseries___idiv____SWIG_0(self, argc, argv);
    case 2:
      return _wrap_timeseries___idiv____SWIG_1(self, argc, argv);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'timeseries___idiv__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    operator /=(cmf::math::timeseries *,cmf::math::timeseries)\n"
    "    operator /=(cmf::math::timeseries *,double)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_timeseries___add____SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  cmf::math::timeseries *arg1 = (cmf::math::timeseries *) 0 ;
  cmf::math::timeseries arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  cmf::math::timeseries result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__math__timeseries, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "timeseries___add__" "', argument " "1"" of type '" "cmf::math::timeseries const *""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::timeseries * >(argp1);
  {
    res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cmf__math__timeseries,  0  | SWIG_POINTER_IMPLICIT_CONV);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "timeseries___add__" "', argument " "2"" of type '" "cmf::math::timeseries""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "timeseries___add__" "', argument " "2"" of type '" "cmf::math::timeseries""'");
    } else {
      cmf::math::timeseries * temp = reinterpret_cast< cmf::math::timeseries * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      result = ((cmf::math::timeseries const *)arg1)->operator +(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj((new cmf::math::timeseries(static_cast< const cmf::math::timeseries& >(result))), SWIGTYPE_p_cmf__math__timeseries, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_timeseries___sub____SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  cmf::math::timeseries *arg1 = (cmf::math::timeseries *) 0 ;
  cmf::math::timeseries arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  cmf::math::timeseries result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__math__timeseries, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "timeseries___sub__" "', argument " "1"" of type '" "cmf::math::timeseries const *""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::timeseries * >(argp1);
  {
    res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cmf__math__timeseries,  0  | SWIG_POINTER_IMPLICIT_CONV);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "timeseries___sub__" "', argument " "2"" of type '" "cmf::math::timeseries""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "timeseries___sub__" "', argument " "2"" of type '" "cmf::math::timeseries""'");
    } else {
      cmf::math::timeseries * temp = reinterpret_cast< cmf::math::timeseries * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      result = ((cmf::math::timeseries const *)arg1)->operator -(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj((new cmf::math::timeseries(static_cast< const cmf::math::timeseries& >(result))), SWIGTYPE_p_cmf__math__timeseries, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_timeseries___mul____SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  cmf::math::timeseries *arg1 = (cmf::math::timeseries *) 0 ;
  cmf::math::timeseries arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  cmf::math::timeseries result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__math__timeseries, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "timeseries___mul__" "', argument " "1"" of type '" "cmf::math::timeseries const *""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::timeseries * >(argp1);
  {
    res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cmf__math__timeseries,  0  | SWIG_POINTER_IMPLICIT_CONV);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "timeseries___mul__" "', argument " "2"" of type '" "cmf::math::timeseries""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "timeseries___mul__" "', argument " "2"" of type '" "cmf::math::timeseries""'");
    } else {
      cmf::math::timeseries * temp = reinterpret_cast< cmf::math::timeseries * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      result = ((cmf::math::timeseries const *)arg1)->operator *(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj((new cmf::math::timeseries(static_cast< const cmf::math::timeseries& >(result))), SWIGTYPE_p_cmf__math__timeseries, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_timeseries___div____SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  cmf::math::timeseries *arg1 = (cmf::math::timeseries *) 0 ;
  cmf::math::timeseries arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  cmf::math::timeseries result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__math__timeseries, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "timeseries___div__" "', argument " "1"" of type '" "cmf::math::timeseries const *""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::timeseries * >(argp1);
  {
    res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cmf__math__timeseries,  0  | SWIG_POINTER_IMPLICIT_CONV);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "timeseries___div__" "', argument " "2"" of type '" "cmf::math::timeseries""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "timeseries___div__" "', argument " "2"" of type '" "cmf::math::timeseries""'");
    } else {
      cmf::math::timeseries * temp = reinterpret_cast< cmf::math::timeseries * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      result = ((cmf::math::timeseries const *)arg1)->operator /(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj((new cmf::math::timeseries(static_cast< const cmf::math::timeseries& >(result))), SWIGTYPE_p_cmf__math__timeseries, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_timeseries___add____SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  cmf::math::timeseries *arg1 = (cmf::math::timeseries *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  cmf::math::timeseries result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__math__timeseries, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "timeseries___add__" "', argument " "1"" of type '" "cmf::math::timeseries const *""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::timeseries * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "timeseries___add__" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = ((cmf::math::timeseries const *)arg1)->operator +(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj((new cmf::math::timeseries(static_cast< const cmf::math::timeseries& >(result))), SWIGTYPE_p_cmf__math__timeseries, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_timeseries___add__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"timeseries___add__",0,2,argv))) SWIG_fail;
  --argc;
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (argc == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_cmf__math__timeseries, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_cmf__math__timeseries, SWIG_POINTER_IMPLICIT_CONV);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (argc == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_cmf__math__timeseries, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_double(argv[1], NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      return _wrap_timeseries___add____SWIG_0(self, argc, argv);
    case 2:
      return _wrap_timeseries___add____SWIG_1(self, argc, argv);
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_timeseries___sub____SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  cmf::math::timeseries *arg1 = (cmf::math::timeseries *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  cmf::math::timeseries result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__math__timeseries, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "timeseries___sub__" "', argument " "1"" of type '" "cmf::math::timeseries const *""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::timeseries * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "timeseries___sub__" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = ((cmf::math::timeseries const *)arg1)->operator -(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj((new cmf::math::timeseries(static_cast< const cmf::math::timeseries& >(result))), SWIGTYPE_p_cmf__math__timeseries, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_timeseries___sub__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"timeseries___sub__",0,2,argv))) SWIG_fail;
  --argc;
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (argc == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_cmf__math__timeseries, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_cmf__math__timeseries, SWIG_POINTER_IMPLICIT_CONV);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (argc == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_cmf__math__timeseries, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_double(argv[1], NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      return _wrap_timeseries___sub____SWIG_0(self, argc, argv);
    case 2:
      return _wrap_timeseries___sub____SWIG_1(self, argc, argv);
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_timeseries___mul____SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  cmf::math::timeseries *arg1 = (cmf::math::timeseries *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  cmf::math::timeseries result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__math__timeseries, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "timeseries___mul__" "', argument " "1"" of type '" "cmf::math::timeseries const *""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::timeseries * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "timeseries___mul__" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = ((cmf::math::timeseries const *)arg1)->operator *(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj((new cmf::math::timeseries(static_cast< const cmf::math::timeseries& >(result))), SWIGTYPE_p_cmf__math__timeseries, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_timeseries___mul__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"timeseries___mul__",0,2,argv))) SWIG_fail;
  --argc;
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (argc == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_cmf__math__timeseries, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_cmf__math__timeseries, SWIG_POINTER_IMPLICIT_CONV);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (argc == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_cmf__math__timeseries, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_double(argv[1], NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      return _wrap_timeseries___mul____SWIG_0(self, argc, argv);
    case 2:
      return _wrap_timeseries___mul____SWIG_1(self, argc, argv);
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_timeseries___div____SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  cmf::math::timeseries *arg1 = (cmf::math::timeseries *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  cmf::math::timeseries result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__math__timeseries, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "timeseries___div__" "', argument " "1"" of type '" "cmf::math::timeseries const *""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::timeseries * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "timeseries___div__" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = ((cmf::math::timeseries const *)arg1)->operator /(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj((new cmf::math::timeseries(static_cast< const cmf::math::timeseries& >(result))), SWIGTYPE_p_cmf__math__timeseries, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_timeseries___div__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"timeseries___div__",0,2,argv))) SWIG_fail;
  --argc;
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (argc == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_cmf__math__timeseries, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_cmf__math__timeseries, SWIG_POINTER_IMPLICIT_CONV);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (argc == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_cmf__math__timeseries, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_double(argv[1], NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      return _wrap_timeseries___div____SWIG_0(self, argc, argv);
    case 2:
      return _wrap_timeseries___div____SWIG_1(self, argc, argv);
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_timeseries___neg__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::math::timeseries *arg1 = (cmf::math::timeseries *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  cmf::math::timeseries result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__math__timeseries, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "timeseries___neg__" "', argument " "1"" of type '" "cmf::math::timeseries const *""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::timeseries * >(argp1);
  {
    try {
      result = ((cmf::math::timeseries const *)arg1)->operator -();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj((new cmf::math::timeseries(static_cast< const cmf::math::timeseries& >(result))), SWIGTYPE_p_cmf__math__timeseries, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_timeseries_inv(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::math::timeseries *arg1 = (cmf::math::timeseries *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  cmf::math::timeseries result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__math__timeseries, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "timeseries_inv" "', argument " "1"" of type '" "cmf::math::timeseries const *""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::timeseries * >(argp1);
  {
    try {
      result = ((cmf::math::timeseries const *)arg1)->inv();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj((new cmf::math::timeseries(static_cast< const cmf::math::timeseries& >(result))), SWIGTYPE_p_cmf__math__timeseries, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_timeseries_reduce_min(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::math::timeseries *arg1 = (cmf::math::timeseries *) 0 ;
  cmf::math::Time arg2 ;
  cmf::math::Time arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[3] ;
  cmf::math::timeseries result;
  
  if (!SWIG_Python_UnpackTuple(args,"timeseries_reduce_min",3,3,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__math__timeseries, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "timeseries_reduce_min" "', argument " "1"" of type '" "cmf::math::timeseries const *""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::timeseries * >(argp1);
  {
    arg2 = convert_datetime_to_cmftime(swig_obj[1]);    
  }
  {
    arg3 = convert_datetime_to_cmftime(swig_obj[2]);    
  }
  {
    try {
      result = ((cmf::math::timeseries const *)arg1)->reduce_min(arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj((new cmf::math::timeseries(static_cast< const cmf::math::timeseries& >(result))), SWIGTYPE_p_cmf__math__timeseries, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_timeseries_reduce_max(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::math::timeseries *arg1 = (cmf::math::timeseries *) 0 ;
  cmf::math::Time arg2 ;
  cmf::math::Time arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[3] ;
  cmf::math::timeseries result;
  
  if (!SWIG_Python_UnpackTuple(args,"timeseries_reduce_max",3,3,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__math__timeseries, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "timeseries_reduce_max" "', argument " "1"" of type '" "cmf::math::timeseries const *""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::timeseries * >(argp1);
  {
    arg2 = convert_datetime_to_cmftime(swig_obj[1]);    
  }
  {
    arg3 = convert_datetime_to_cmftime(swig_obj[2]);    
  }
  {
    try {
      result = ((cmf::math::timeseries const *)arg1)->reduce_max(arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj((new cmf::math::timeseries(static_cast< const cmf::math::timeseries& >(result))), SWIGTYPE_p_cmf__math__timeseries, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_timeseries_reduce_sum(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::math::timeseries *arg1 = (cmf::math::timeseries *) 0 ;
  cmf::math::Time arg2 ;
  cmf::math::Time arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[3] ;
  cmf::math::timeseries result;
  
  if (!SWIG_Python_UnpackTuple(args,"timeseries_reduce_sum",3,3,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__math__timeseries, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "timeseries_reduce_sum" "', argument " "1"" of type '" "cmf::math::timeseries const *""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::timeseries * >(argp1);
  {
    arg2 = convert_datetime_to_cmftime(swig_obj[1]);    
  }
  {
    arg3 = convert_datetime_to_cmftime(swig_obj[2]);    
  }
  {
    try {
      result = ((cmf::math::timeseries const *)arg1)->reduce_sum(arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj((new cmf::math::timeseries(static_cast< const cmf::math::timeseries& >(result))), SWIGTYPE_p_cmf__math__timeseries, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_timeseries_reduce_avg(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::math::timeseries *arg1 = (cmf::math::timeseries *) 0 ;
  cmf::math::Time arg2 ;
  cmf::math::Time arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[3] ;
  cmf::math::timeseries result;
  
  if (!SWIG_Python_UnpackTuple(args,"timeseries_reduce_avg",3,3,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__math__timeseries, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "timeseries_reduce_avg" "', argument " "1"" of type '" "cmf::math::timeseries const *""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::timeseries * >(argp1);
  {
    arg2 = convert_datetime_to_cmftime(swig_obj[1]);    
  }
  {
    arg3 = convert_datetime_to_cmftime(swig_obj[2]);    
  }
  {
    try {
      result = ((cmf::math::timeseries const *)arg1)->reduce_avg(arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj((new cmf::math::timeseries(static_cast< const cmf::math::timeseries& >(result))), SWIGTYPE_p_cmf__math__timeseries, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_timeseries_floating_avg(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::math::timeseries *arg1 = (cmf::math::timeseries *) 0 ;
  cmf::math::Time arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  cmf::math::timeseries result;
  
  if (!SWIG_Python_UnpackTuple(args,"timeseries_floating_avg",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__math__timeseries, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "timeseries_floating_avg" "', argument " "1"" of type '" "cmf::math::timeseries const *""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::timeseries * >(argp1);
  {
    arg2 = convert_datetime_to_cmftime(swig_obj[1]);    
  }
  {
    try {
      result = ((cmf::math::timeseries const *)arg1)->floating_avg(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj((new cmf::math::timeseries(static_cast< const cmf::math::timeseries& >(result))), SWIGTYPE_p_cmf__math__timeseries, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_timeseries_floating_max(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::math::timeseries *arg1 = (cmf::math::timeseries *) 0 ;
  cmf::math::Time arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  cmf::math::timeseries result;
  
  if (!SWIG_Python_UnpackTuple(args,"timeseries_floating_max",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__math__timeseries, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "timeseries_floating_max" "', argument " "1"" of type '" "cmf::math::timeseries const *""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::timeseries * >(argp1);
  {
    arg2 = convert_datetime_to_cmftime(swig_obj[1]);    
  }
  {
    try {
      result = ((cmf::math::timeseries const *)arg1)->floating_max(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj((new cmf::math::timeseries(static_cast< const cmf::math::timeseries& >(result))), SWIGTYPE_p_cmf__math__timeseries, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_timeseries_floating_min(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::math::timeseries *arg1 = (cmf::math::timeseries *) 0 ;
  cmf::math::Time arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  cmf::math::timeseries result;
  
  if (!SWIG_Python_UnpackTuple(args,"timeseries_floating_min",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__math__timeseries, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "timeseries_floating_min" "', argument " "1"" of type '" "cmf::math::timeseries const *""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::timeseries * >(argp1);
  {
    arg2 = convert_datetime_to_cmftime(swig_obj[1]);    
  }
  {
    try {
      result = ((cmf::math::timeseries const *)arg1)->floating_min(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj((new cmf::math::timeseries(static_cast< const cmf::math::timeseries& >(result))), SWIGTYPE_p_cmf__math__timeseries, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_timeseries_mean(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::math::timeseries *arg1 = (cmf::math::timeseries *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__math__timeseries, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "timeseries_mean" "', argument " "1"" of type '" "cmf::math::timeseries const *""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::timeseries * >(argp1);
  {
    try {
      result = (double)((cmf::math::timeseries const *)arg1)->mean();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_timeseries_min(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::math::timeseries *arg1 = (cmf::math::timeseries *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__math__timeseries, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "timeseries_min" "', argument " "1"" of type '" "cmf::math::timeseries const *""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::timeseries * >(argp1);
  {
    try {
      result = (double)((cmf::math::timeseries const *)arg1)->min();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_timeseries_max(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::math::timeseries *arg1 = (cmf::math::timeseries *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__math__timeseries, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "timeseries_max" "', argument " "1"" of type '" "cmf::math::timeseries const *""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::timeseries * >(argp1);
  {
    try {
      result = (double)((cmf::math::timeseries const *)arg1)->max();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_timeseries_log(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::math::timeseries *arg1 = (cmf::math::timeseries *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  cmf::math::timeseries result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__math__timeseries, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "timeseries_log" "', argument " "1"" of type '" "cmf::math::timeseries const *""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::timeseries * >(argp1);
  {
    try {
      result = ((cmf::math::timeseries const *)arg1)->log();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj((new cmf::math::timeseries(static_cast< const cmf::math::timeseries& >(result))), SWIGTYPE_p_cmf__math__timeseries, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_timeseries_log10(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::math::timeseries *arg1 = (cmf::math::timeseries *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  cmf::math::timeseries result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__math__timeseries, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "timeseries_log10" "', argument " "1"" of type '" "cmf::math::timeseries const *""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::timeseries * >(argp1);
  {
    try {
      result = ((cmf::math::timeseries const *)arg1)->log10();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj((new cmf::math::timeseries(static_cast< const cmf::math::timeseries& >(result))), SWIGTYPE_p_cmf__math__timeseries, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_timeseries_power(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::math::timeseries *arg1 = (cmf::math::timeseries *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  cmf::math::timeseries result;
  
  if (!SWIG_Python_UnpackTuple(args,"timeseries_power",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__math__timeseries, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "timeseries_power" "', argument " "1"" of type '" "cmf::math::timeseries const *""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::timeseries * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "timeseries_power" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = ((cmf::math::timeseries const *)arg1)->power(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj((new cmf::math::timeseries(static_cast< const cmf::math::timeseries& >(result))), SWIGTYPE_p_cmf__math__timeseries, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_timeseries_exp(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::math::timeseries *arg1 = (cmf::math::timeseries *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  cmf::math::timeseries result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__math__timeseries, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "timeseries_exp" "', argument " "1"" of type '" "cmf::math::timeseries const *""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::timeseries * >(argp1);
  {
    try {
      result = ((cmf::math::timeseries const *)arg1)->exp();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj((new cmf::math::timeseries(static_cast< const cmf::math::timeseries& >(result))), SWIGTYPE_p_cmf__math__timeseries, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_timeseries_begin_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::math::timeseries *arg1 = (cmf::math::timeseries *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  cmf::math::Time *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__math__timeseries, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "timeseries_begin_get" "', argument " "1"" of type '" "cmf::math::timeseries *""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::timeseries * >(argp1);
  {
    try {
      result = (cmf::math::Time *)cmf_math_timeseries_begin_get(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmf__math__Time, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_timeseries_step_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::math::timeseries *arg1 = (cmf::math::timeseries *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  cmf::math::Time *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__math__timeseries, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "timeseries_step_get" "', argument " "1"" of type '" "cmf::math::timeseries *""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::timeseries * >(argp1);
  {
    try {
      result = (cmf::math::Time *)cmf_math_timeseries_step_get(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmf__math__Time, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_timeseries_end_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::math::timeseries *arg1 = (cmf::math::timeseries *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  cmf::math::Time *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__math__timeseries, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "timeseries_end_get" "', argument " "1"" of type '" "cmf::math::timeseries *""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::timeseries * >(argp1);
  {
    try {
      result = (cmf::math::Time *)cmf_math_timeseries_end_get(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmf__math__Time, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_timeseries___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::math::timeseries *arg1 = (cmf::math::timeseries *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__math__timeseries, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "timeseries___len__" "', argument " "1"" of type '" "cmf::math::timeseries *""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::timeseries * >(argp1);
  {
    try {
      result = (double)cmf_math_timeseries___len__(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_timeseries(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::math::timeseries *arg1 = (cmf::math::timeseries *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__math__timeseries, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_timeseries" "', argument " "1"" of type '" "cmf::math::timeseries *""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::timeseries * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *timeseries_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_cmf__math__timeseries, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *timeseries_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_nash_sutcliff(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::math::timeseries *arg1 = 0 ;
  cmf::math::timeseries *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  double result;
  
  if (!SWIG_Python_UnpackTuple(args,"nash_sutcliff",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cmf__math__timeseries,  0  | SWIG_POINTER_IMPLICIT_CONV);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "nash_sutcliff" "', argument " "1"" of type '" "cmf::math::timeseries const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "nash_sutcliff" "', argument " "1"" of type '" "cmf::math::timeseries const &""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::timeseries * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cmf__math__timeseries,  0  | SWIG_POINTER_IMPLICIT_CONV);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "nash_sutcliff" "', argument " "2"" of type '" "cmf::math::timeseries const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "nash_sutcliff" "', argument " "2"" of type '" "cmf::math::timeseries const &""'"); 
  }
  arg2 = reinterpret_cast< cmf::math::timeseries * >(argp2);
  {
    try {
      result = (double)cmf::math::nash_sutcliff((cmf::math::timeseries const &)*arg1,(cmf::math::timeseries const &)*arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_R2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::math::timeseries *arg1 = 0 ;
  cmf::math::timeseries *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  double result;
  
  if (!SWIG_Python_UnpackTuple(args,"R2",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cmf__math__timeseries,  0  | SWIG_POINTER_IMPLICIT_CONV);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "R2" "', argument " "1"" of type '" "cmf::math::timeseries const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "R2" "', argument " "1"" of type '" "cmf::math::timeseries const &""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::timeseries * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cmf__math__timeseries,  0  | SWIG_POINTER_IMPLICIT_CONV);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "R2" "', argument " "2"" of type '" "cmf::math::timeseries const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "R2" "', argument " "2"" of type '" "cmf::math::timeseries const &""'"); 
  }
  arg2 = reinterpret_cast< cmf::math::timeseries * >(argp2);
  {
    try {
      result = (double)cmf::math::R2((cmf::math::timeseries const &)*arg1,(cmf::math::timeseries const &)*arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_num_array__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  int arg1 ;
  real arg2 = (real) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  cmf::math::num_array *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_num_array" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  if (swig_obj[1]) {
    ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_num_array" "', argument " "2"" of type '" "real""'");
    } 
    arg2 = static_cast< real >(val2);
  }
  {
    try {
      result = (cmf::math::num_array *)new cmf::math::num_array(arg1,arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmf__math__num_array, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_num_array__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  size_t arg1 ;
  real arg2 = (real) 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  cmf::math::num_array *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 2)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_num_array" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);
  if (swig_obj[1]) {
    ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_num_array" "', argument " "2"" of type '" "real""'");
    } 
    arg2 = static_cast< real >(val2);
  }
  {
    try {
      result = (cmf::math::num_array *)new cmf::math::num_array(arg1,arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmf__math__num_array, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_num_array__SWIG_2(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  cmf::math::num_array *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  {
    try {
      result = (cmf::math::num_array *)new cmf::math::num_array();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmf__math__num_array, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_num_array__SWIG_3(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  cmf::math::num_array *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cmf::math::num_array *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cmf__math__num_array,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_num_array" "', argument " "1"" of type '" "cmf::math::num_array const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_num_array" "', argument " "1"" of type '" "cmf::math::num_array const &""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::num_array * >(argp1);
  {
    try {
      result = (cmf::math::num_array *)new cmf::math::num_array((cmf::math::num_array const &)*arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmf__math__num_array, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_num_array__SWIG_4(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  double *arg1 = (double *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  cmf::math::num_array *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_num_array" "', argument " "1"" of type '" "double *""'"); 
  }
  arg1 = reinterpret_cast< double * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_num_array" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (cmf::math::num_array *)new cmf::math::num_array(arg1,arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmf__math__num_array, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_num_array(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"new_num_array",0,2,argv))) SWIG_fail;
  --argc;
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (argc == 0) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
    if (argc == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_cmf__math__num_array, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
    if ((argc >= 1) && (argc <= 2)) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          int res = SWIG_AsVal_int(argv[0], NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (argc > 1) {
        {
          {
            int res = SWIG_AsVal_double(argv[1], NULL);
            _v = SWIG_CheckState(res);
          }
        }
        if (!_v) goto check_3;
        _ranki += _v*_pi;
        _rankm += _pi;
        _pi *= SWIG_MAXCASTRANK;
      }
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 3;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_3:
    
    if ((argc >= 1) && (argc <= 2)) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          int res = SWIG_AsVal_size_t(argv[0], NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (argc > 1) {
        {
          {
            int res = SWIG_AsVal_double(argv[1], NULL);
            _v = SWIG_CheckState(res);
          }
        }
        if (!_v) goto check_4;
        _ranki += _v*_pi;
        _rankm += _pi;
        _pi *= SWIG_MAXCASTRANK;
      }
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 4;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_4:
    
    if (argc == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_double, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_5;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int(argv[1], NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_5;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 5;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_5:
    
  dispatch:
    switch(_index) {
    case 1:
      return _wrap_new_num_array__SWIG_2(self, argc, argv);
    case 2:
      return _wrap_new_num_array__SWIG_3(self, argc, argv);
    case 3:
      return _wrap_new_num_array__SWIG_0(self, argc, argv);
    case 4:
      return _wrap_new_num_array__SWIG_1(self, argc, argv);
    case 5:
      return _wrap_new_num_array__SWIG_4(self, argc, argv);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_num_array'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    cmf::math::num_array(int,real)\n"
    "    cmf::math::num_array(size_t,real)\n"
    "    cmf::math::num_array()\n"
    "    cmf::math::num_array(cmf::math::num_array const &)\n"
    "    cmf::math::num_array(double *,int)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_num_array___set_data_from_adress(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::math::num_array *arg1 = (cmf::math::num_array *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  
  if (!SWIG_Python_UnpackTuple(args,"num_array___set_data_from_adress",3,3,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__math__num_array, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "num_array___set_data_from_adress" "', argument " "1"" of type '" "cmf::math::num_array *""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::num_array * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "num_array___set_data_from_adress" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "num_array___set_data_from_adress" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  {
    try {
      (arg1)->set_data_from_adress(arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_num_array_adress(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::math::num_array *arg1 = (cmf::math::num_array *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  size_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__math__num_array, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "num_array_adress" "', argument " "1"" of type '" "cmf::math::num_array const *""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::num_array * >(argp1);
  {
    try {
      result = ((cmf::math::num_array const *)arg1)->adress();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_num_array(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::math::num_array *arg1 = (cmf::math::num_array *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__math__num_array, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_num_array" "', argument " "1"" of type '" "cmf::math::num_array *""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::num_array * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_num_array_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::math::num_array *arg1 = (cmf::math::num_array *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__math__num_array, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "num_array_size" "', argument " "1"" of type '" "cmf::math::num_array const *""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::num_array * >(argp1);
  {
    try {
      result = (int)((cmf::math::num_array const *)arg1)->size();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_num_array_resize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  cmf::math::num_array *arg1 = (cmf::math::num_array *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__math__num_array, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "num_array_resize" "', argument " "1"" of type '" "cmf::math::num_array *""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::num_array * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "num_array_resize" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (arg1)->resize(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_num_array_resize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  cmf::math::num_array *arg1 = (cmf::math::num_array *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__math__num_array, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "num_array_resize" "', argument " "1"" of type '" "cmf::math::num_array *""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::num_array * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "num_array_resize" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    try {
      (arg1)->resize(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_num_array_resize(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"num_array_resize",0,2,argv))) SWIG_fail;
  --argc;
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (argc == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_cmf__math__num_array, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int(argv[1], NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (argc == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_cmf__math__num_array, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_size_t(argv[1], NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      return _wrap_num_array_resize__SWIG_0(self, argc, argv);
    case 2:
      return _wrap_num_array_resize__SWIG_1(self, argc, argv);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'num_array_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    resize(cmf::math::num_array *,int)\n"
    "    resize(cmf::math::num_array *,size_t)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_num_array___neg__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::math::num_array *arg1 = (cmf::math::num_array *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  cmf::math::num_array result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__math__num_array, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "num_array___neg__" "', argument " "1"" of type '" "cmf::math::num_array const *""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::num_array * >(argp1);
  {
    try {
      result = ((cmf::math::num_array const *)arg1)->operator -();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj((new cmf::math::num_array(static_cast< const cmf::math::num_array& >(result))), SWIGTYPE_p_cmf__math__num_array, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_num_array_power__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  cmf::math::num_array *arg1 = (cmf::math::num_array *) 0 ;
  cmf::math::num_array *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  cmf::math::num_array result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__math__num_array, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "num_array_power" "', argument " "1"" of type '" "cmf::math::num_array const *""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::num_array * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cmf__math__num_array,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "num_array_power" "', argument " "2"" of type '" "cmf::math::num_array const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "num_array_power" "', argument " "2"" of type '" "cmf::math::num_array const &""'"); 
  }
  arg2 = reinterpret_cast< cmf::math::num_array * >(argp2);
  {
    try {
      result = ((cmf::math::num_array const *)arg1)->power((cmf::math::num_array const &)*arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj((new cmf::math::num_array(static_cast< const cmf::math::num_array& >(result))), SWIGTYPE_p_cmf__math__num_array, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_num_array_power__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  cmf::math::num_array *arg1 = (cmf::math::num_array *) 0 ;
  real arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  cmf::math::num_array result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__math__num_array, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "num_array_power" "', argument " "1"" of type '" "cmf::math::num_array const *""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::num_array * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "num_array_power" "', argument " "2"" of type '" "real""'");
  } 
  arg2 = static_cast< real >(val2);
  {
    try {
      result = ((cmf::math::num_array const *)arg1)->power(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj((new cmf::math::num_array(static_cast< const cmf::math::num_array& >(result))), SWIGTYPE_p_cmf__math__num_array, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_num_array_power(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"num_array_power",0,2,argv))) SWIG_fail;
  --argc;
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (argc == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_cmf__math__num_array, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_cmf__math__num_array, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (argc == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_cmf__math__num_array, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_double(argv[1], NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      return _wrap_num_array_power__SWIG_0(self, argc, argv);
    case 2:
      return _wrap_num_array_power__SWIG_1(self, argc, argv);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'num_array_power'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    power(cmf::math::num_array const *,cmf::math::num_array const &)\n"
    "    power(cmf::math::num_array const *,real)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_num_array___iadd____SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  cmf::math::num_array *arg1 = (cmf::math::num_array *) 0 ;
  cmf::math::num_array *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  cmf::math::num_array *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__math__num_array, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "num_array___iadd__" "', argument " "1"" of type '" "cmf::math::num_array *""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::num_array * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cmf__math__num_array,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "num_array___iadd__" "', argument " "2"" of type '" "cmf::math::num_array const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "num_array___iadd__" "', argument " "2"" of type '" "cmf::math::num_array const &""'"); 
  }
  arg2 = reinterpret_cast< cmf::math::num_array * >(argp2);
  {
    try {
      result = (cmf::math::num_array *) &(arg1)->operator +=((cmf::math::num_array const &)*arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmf__math__num_array, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_num_array___iadd____SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  cmf::math::num_array *arg1 = (cmf::math::num_array *) 0 ;
  real arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  cmf::math::num_array *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__math__num_array, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "num_array___iadd__" "', argument " "1"" of type '" "cmf::math::num_array *""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::num_array * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "num_array___iadd__" "', argument " "2"" of type '" "real""'");
  } 
  arg2 = static_cast< real >(val2);
  {
    try {
      result = (cmf::math::num_array *) &(arg1)->operator +=(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmf__math__num_array, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_num_array___iadd__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"num_array___iadd__",0,2,argv))) SWIG_fail;
  --argc;
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (argc == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_cmf__math__num_array, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_cmf__math__num_array, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (argc == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_cmf__math__num_array, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_double(argv[1], NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      return _wrap_num_array___iadd____SWIG_0(self, argc, argv);
    case 2:
      return _wrap_num_array___iadd____SWIG_1(self, argc, argv);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'num_array___iadd__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    operator +=(cmf::math::num_array *,cmf::math::num_array const &)\n"
    "    operator +=(cmf::math::num_array *,real)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_num_array___isub____SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  cmf::math::num_array *arg1 = (cmf::math::num_array *) 0 ;
  cmf::math::num_array *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  cmf::math::num_array *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__math__num_array, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "num_array___isub__" "', argument " "1"" of type '" "cmf::math::num_array *""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::num_array * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cmf__math__num_array,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "num_array___isub__" "', argument " "2"" of type '" "cmf::math::num_array const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "num_array___isub__" "', argument " "2"" of type '" "cmf::math::num_array const &""'"); 
  }
  arg2 = reinterpret_cast< cmf::math::num_array * >(argp2);
  {
    try {
      result = (cmf::math::num_array *) &(arg1)->operator -=((cmf::math::num_array const &)*arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmf__math__num_array, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_num_array___isub____SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  cmf::math::num_array *arg1 = (cmf::math::num_array *) 0 ;
  real arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  cmf::math::num_array *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__math__num_array, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "num_array___isub__" "', argument " "1"" of type '" "cmf::math::num_array *""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::num_array * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "num_array___isub__" "', argument " "2"" of type '" "real""'");
  } 
  arg2 = static_cast< real >(val2);
  {
    try {
      result = (cmf::math::num_array *) &(arg1)->operator -=(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmf__math__num_array, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_num_array___isub__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"num_array___isub__",0,2,argv))) SWIG_fail;
  --argc;
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (argc == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_cmf__math__num_array, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_cmf__math__num_array, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (argc == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_cmf__math__num_array, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_double(argv[1], NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      return _wrap_num_array___isub____SWIG_0(self, argc, argv);
    case 2:
      return _wrap_num_array___isub____SWIG_1(self, argc, argv);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'num_array___isub__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    operator -=(cmf::math::num_array *,cmf::math::num_array const &)\n"
    "    operator -=(cmf::math::num_array *,real)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_num_array___imul____SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  cmf::math::num_array *arg1 = (cmf::math::num_array *) 0 ;
  cmf::math::num_array *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  cmf::math::num_array *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__math__num_array, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "num_array___imul__" "', argument " "1"" of type '" "cmf::math::num_array *""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::num_array * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cmf__math__num_array,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "num_array___imul__" "', argument " "2"" of type '" "cmf::math::num_array const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "num_array___imul__" "', argument " "2"" of type '" "cmf::math::num_array const &""'"); 
  }
  arg2 = reinterpret_cast< cmf::math::num_array * >(argp2);
  {
    try {
      result = (cmf::math::num_array *) &(arg1)->operator *=((cmf::math::num_array const &)*arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmf__math__num_array, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_num_array___imul____SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  cmf::math::num_array *arg1 = (cmf::math::num_array *) 0 ;
  real arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  cmf::math::num_array *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__math__num_array, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "num_array___imul__" "', argument " "1"" of type '" "cmf::math::num_array *""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::num_array * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "num_array___imul__" "', argument " "2"" of type '" "real""'");
  } 
  arg2 = static_cast< real >(val2);
  {
    try {
      result = (cmf::math::num_array *) &(arg1)->operator *=(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmf__math__num_array, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_num_array___imul__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"num_array___imul__",0,2,argv))) SWIG_fail;
  --argc;
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (argc == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_cmf__math__num_array, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_cmf__math__num_array, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (argc == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_cmf__math__num_array, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_double(argv[1], NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      return _wrap_num_array___imul____SWIG_0(self, argc, argv);
    case 2:
      return _wrap_num_array___imul____SWIG_1(self, argc, argv);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'num_array___imul__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    operator *=(cmf::math::num_array *,cmf::math::num_array const &)\n"
    "    operator *=(cmf::math::num_array *,real)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_num_array___idiv____SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  cmf::math::num_array *arg1 = (cmf::math::num_array *) 0 ;
  cmf::math::num_array *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  cmf::math::num_array *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__math__num_array, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "num_array___idiv__" "', argument " "1"" of type '" "cmf::math::num_array *""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::num_array * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cmf__math__num_array,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "num_array___idiv__" "', argument " "2"" of type '" "cmf::math::num_array const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "num_array___idiv__" "', argument " "2"" of type '" "cmf::math::num_array const &""'"); 
  }
  arg2 = reinterpret_cast< cmf::math::num_array * >(argp2);
  {
    try {
      result = (cmf::math::num_array *) &(arg1)->operator /=((cmf::math::num_array const &)*arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmf__math__num_array, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_num_array___idiv____SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  cmf::math::num_array *arg1 = (cmf::math::num_array *) 0 ;
  real arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  cmf::math::num_array *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__math__num_array, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "num_array___idiv__" "', argument " "1"" of type '" "cmf::math::num_array *""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::num_array * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "num_array___idiv__" "', argument " "2"" of type '" "real""'");
  } 
  arg2 = static_cast< real >(val2);
  {
    try {
      result = (cmf::math::num_array *) &(arg1)->operator /=(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmf__math__num_array, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_num_array___idiv__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"num_array___idiv__",0,2,argv))) SWIG_fail;
  --argc;
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (argc == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_cmf__math__num_array, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_cmf__math__num_array, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (argc == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_cmf__math__num_array, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_double(argv[1], NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      return _wrap_num_array___idiv____SWIG_0(self, argc, argv);
    case 2:
      return _wrap_num_array___idiv____SWIG_1(self, argc, argv);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'num_array___idiv__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    operator /=(cmf::math::num_array *,cmf::math::num_array const &)\n"
    "    operator /=(cmf::math::num_array *,real)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_num_array_apply(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::math::num_array *arg1 = (cmf::math::num_array *) 0 ;
  real (*arg2)(real) = (real (*)(real)) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  cmf::math::num_array result;
  
  if (!SWIG_Python_UnpackTuple(args,"num_array_apply",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__math__num_array, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "num_array_apply" "', argument " "1"" of type '" "cmf::math::num_array const *""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::num_array * >(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(swig_obj[1], (void**)(&arg2), SWIGTYPE_p_f_double__double);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "num_array_apply" "', argument " "2"" of type '" "real (*)(real)""'"); 
    }
  }
  {
    try {
      result = ((cmf::math::num_array const *)arg1)->apply(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj((new cmf::math::num_array(static_cast< const cmf::math::num_array& >(result))), SWIGTYPE_p_cmf__math__num_array, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_num_array_dot(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::math::num_array *arg1 = (cmf::math::num_array *) 0 ;
  cmf::math::num_array *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  real result;
  
  if (!SWIG_Python_UnpackTuple(args,"num_array_dot",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__math__num_array, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "num_array_dot" "', argument " "1"" of type '" "cmf::math::num_array const *""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::num_array * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cmf__math__num_array,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "num_array_dot" "', argument " "2"" of type '" "cmf::math::num_array const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "num_array_dot" "', argument " "2"" of type '" "cmf::math::num_array const &""'"); 
  }
  arg2 = reinterpret_cast< cmf::math::num_array * >(argp2);
  {
    try {
      result = (real)((cmf::math::num_array const *)arg1)->dot((cmf::math::num_array const &)*arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_num_array_sum(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::math::num_array *arg1 = (cmf::math::num_array *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  real result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__math__num_array, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "num_array_sum" "', argument " "1"" of type '" "cmf::math::num_array const *""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::num_array * >(argp1);
  {
    try {
      result = (real)((cmf::math::num_array const *)arg1)->sum();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_num_array_max(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::math::num_array *arg1 = (cmf::math::num_array *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  real result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__math__num_array, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "num_array_max" "', argument " "1"" of type '" "cmf::math::num_array const *""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::num_array * >(argp1);
  {
    try {
      result = (real)((cmf::math::num_array const *)arg1)->max();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_num_array_min(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::math::num_array *arg1 = (cmf::math::num_array *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  real result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__math__num_array, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "num_array_min" "', argument " "1"" of type '" "cmf::math::num_array const *""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::num_array * >(argp1);
  {
    try {
      result = (real)((cmf::math::num_array const *)arg1)->min();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_num_array_mean(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::math::num_array *arg1 = (cmf::math::num_array *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  real result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__math__num_array, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "num_array_mean" "', argument " "1"" of type '" "cmf::math::num_array const *""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::num_array * >(argp1);
  {
    try {
      result = (real)((cmf::math::num_array const *)arg1)->mean();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_num_array_norm(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::math::num_array *arg1 = (cmf::math::num_array *) 0 ;
  int arg2 = (int) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  real result;
  
  if (!SWIG_Python_UnpackTuple(args,"num_array_norm",1,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__math__num_array, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "num_array_norm" "', argument " "1"" of type '" "cmf::math::num_array const *""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::num_array * >(argp1);
  if (swig_obj[1]) {
    ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "num_array_norm" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
  }
  {
    try {
      result = (real)((cmf::math::num_array const *)arg1)->norm(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_num_array___add____SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  cmf::math::num_array *arg1 = (cmf::math::num_array *) 0 ;
  cmf::math::num_array *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  cmf::math::num_array result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__math__num_array, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "num_array___add__" "', argument " "1"" of type '" "cmf::math::num_array *""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::num_array * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cmf__math__num_array,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "num_array___add__" "', argument " "2"" of type '" "cmf::math::num_array const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "num_array___add__" "', argument " "2"" of type '" "cmf::math::num_array const &""'"); 
  }
  arg2 = reinterpret_cast< cmf::math::num_array * >(argp2);
  {
    try {
      result = (arg1)->operator +((cmf::math::num_array const &)*arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj((new cmf::math::num_array(static_cast< const cmf::math::num_array& >(result))), SWIGTYPE_p_cmf__math__num_array, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_num_array___sub____SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  cmf::math::num_array *arg1 = (cmf::math::num_array *) 0 ;
  cmf::math::num_array *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  cmf::math::num_array result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__math__num_array, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "num_array___sub__" "', argument " "1"" of type '" "cmf::math::num_array *""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::num_array * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cmf__math__num_array,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "num_array___sub__" "', argument " "2"" of type '" "cmf::math::num_array const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "num_array___sub__" "', argument " "2"" of type '" "cmf::math::num_array const &""'"); 
  }
  arg2 = reinterpret_cast< cmf::math::num_array * >(argp2);
  {
    try {
      result = (arg1)->operator -((cmf::math::num_array const &)*arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj((new cmf::math::num_array(static_cast< const cmf::math::num_array& >(result))), SWIGTYPE_p_cmf__math__num_array, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_num_array___mul____SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  cmf::math::num_array *arg1 = (cmf::math::num_array *) 0 ;
  cmf::math::num_array *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  cmf::math::num_array result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__math__num_array, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "num_array___mul__" "', argument " "1"" of type '" "cmf::math::num_array *""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::num_array * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cmf__math__num_array,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "num_array___mul__" "', argument " "2"" of type '" "cmf::math::num_array const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "num_array___mul__" "', argument " "2"" of type '" "cmf::math::num_array const &""'"); 
  }
  arg2 = reinterpret_cast< cmf::math::num_array * >(argp2);
  {
    try {
      result = (arg1)->operator *((cmf::math::num_array const &)*arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj((new cmf::math::num_array(static_cast< const cmf::math::num_array& >(result))), SWIGTYPE_p_cmf__math__num_array, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_num_array___div____SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  cmf::math::num_array *arg1 = (cmf::math::num_array *) 0 ;
  cmf::math::num_array *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  cmf::math::num_array result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__math__num_array, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "num_array___div__" "', argument " "1"" of type '" "cmf::math::num_array *""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::num_array * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cmf__math__num_array,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "num_array___div__" "', argument " "2"" of type '" "cmf::math::num_array const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "num_array___div__" "', argument " "2"" of type '" "cmf::math::num_array const &""'"); 
  }
  arg2 = reinterpret_cast< cmf::math::num_array * >(argp2);
  {
    try {
      result = (arg1)->operator /((cmf::math::num_array const &)*arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj((new cmf::math::num_array(static_cast< const cmf::math::num_array& >(result))), SWIGTYPE_p_cmf__math__num_array, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_num_array___add____SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  cmf::math::num_array *arg1 = (cmf::math::num_array *) 0 ;
  real arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  cmf::math::num_array result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__math__num_array, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "num_array___add__" "', argument " "1"" of type '" "cmf::math::num_array *""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::num_array * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "num_array___add__" "', argument " "2"" of type '" "real""'");
  } 
  arg2 = static_cast< real >(val2);
  {
    try {
      result = (arg1)->operator +(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj((new cmf::math::num_array(static_cast< const cmf::math::num_array& >(result))), SWIGTYPE_p_cmf__math__num_array, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_num_array___add__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"num_array___add__",0,2,argv))) SWIG_fail;
  --argc;
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (argc == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_cmf__math__num_array, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_cmf__math__num_array, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (argc == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_cmf__math__num_array, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_double(argv[1], NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      return _wrap_num_array___add____SWIG_0(self, argc, argv);
    case 2:
      return _wrap_num_array___add____SWIG_1(self, argc, argv);
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_num_array___sub____SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  cmf::math::num_array *arg1 = (cmf::math::num_array *) 0 ;
  real arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  cmf::math::num_array result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__math__num_array, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "num_array___sub__" "', argument " "1"" of type '" "cmf::math::num_array *""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::num_array * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "num_array___sub__" "', argument " "2"" of type '" "real""'");
  } 
  arg2 = static_cast< real >(val2);
  {
    try {
      result = (arg1)->operator -(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj((new cmf::math::num_array(static_cast< const cmf::math::num_array& >(result))), SWIGTYPE_p_cmf__math__num_array, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_num_array___sub__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"num_array___sub__",0,2,argv))) SWIG_fail;
  --argc;
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (argc == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_cmf__math__num_array, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_cmf__math__num_array, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (argc == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_cmf__math__num_array, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_double(argv[1], NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      return _wrap_num_array___sub____SWIG_0(self, argc, argv);
    case 2:
      return _wrap_num_array___sub____SWIG_1(self, argc, argv);
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_num_array___mul____SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  cmf::math::num_array *arg1 = (cmf::math::num_array *) 0 ;
  real arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  cmf::math::num_array result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__math__num_array, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "num_array___mul__" "', argument " "1"" of type '" "cmf::math::num_array *""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::num_array * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "num_array___mul__" "', argument " "2"" of type '" "real""'");
  } 
  arg2 = static_cast< real >(val2);
  {
    try {
      result = (arg1)->operator *(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj((new cmf::math::num_array(static_cast< const cmf::math::num_array& >(result))), SWIGTYPE_p_cmf__math__num_array, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_num_array___mul__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"num_array___mul__",0,2,argv))) SWIG_fail;
  --argc;
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (argc == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_cmf__math__num_array, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_cmf__math__num_array, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (argc == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_cmf__math__num_array, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_double(argv[1], NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      return _wrap_num_array___mul____SWIG_0(self, argc, argv);
    case 2:
      return _wrap_num_array___mul____SWIG_1(self, argc, argv);
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_num_array___div____SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  cmf::math::num_array *arg1 = (cmf::math::num_array *) 0 ;
  real arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  cmf::math::num_array result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__math__num_array, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "num_array___div__" "', argument " "1"" of type '" "cmf::math::num_array *""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::num_array * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "num_array___div__" "', argument " "2"" of type '" "real""'");
  } 
  arg2 = static_cast< real >(val2);
  {
    try {
      result = (arg1)->operator /(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj((new cmf::math::num_array(static_cast< const cmf::math::num_array& >(result))), SWIGTYPE_p_cmf__math__num_array, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_num_array___div__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"num_array___div__",0,2,argv))) SWIG_fail;
  --argc;
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (argc == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_cmf__math__num_array, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_cmf__math__num_array, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (argc == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_cmf__math__num_array, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_double(argv[1], NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      return _wrap_num_array___div____SWIG_0(self, argc, argv);
    case 2:
      return _wrap_num_array___div____SWIG_1(self, argc, argv);
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_num_array___getitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::math::num_array *arg1 = (cmf::math::num_array *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  double result;
  
  if (!SWIG_Python_UnpackTuple(args,"num_array___getitem__",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__math__num_array, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "num_array___getitem__" "', argument " "1"" of type '" "cmf::math::num_array *""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::num_array * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "num_array___getitem__" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (double)cmf_math_num_array___getitem__(arg1,arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_num_array___setitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::math::num_array *arg1 = (cmf::math::num_array *) 0 ;
  int arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  
  if (!SWIG_Python_UnpackTuple(args,"num_array___setitem__",3,3,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__math__num_array, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "num_array___setitem__" "', argument " "1"" of type '" "cmf::math::num_array *""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::num_array * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "num_array___setitem__" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "num_array___setitem__" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      cmf_math_num_array___setitem__(arg1,arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_num_array___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::math::num_array *arg1 = (cmf::math::num_array *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__math__num_array, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "num_array___len__" "', argument " "1"" of type '" "cmf::math::num_array *""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::num_array * >(argp1);
  {
    try {
      result = (int)cmf_math_num_array___len__(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_num_array___radd__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::math::num_array *arg1 = (cmf::math::num_array *) 0 ;
  real arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  cmf::math::num_array result;
  
  if (!SWIG_Python_UnpackTuple(args,"num_array___radd__",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__math__num_array, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "num_array___radd__" "', argument " "1"" of type '" "cmf::math::num_array *""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::num_array * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "num_array___radd__" "', argument " "2"" of type '" "real""'");
  } 
  arg2 = static_cast< real >(val2);
  {
    try {
      result = cmf_math_num_array___radd__(arg1,arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj((new cmf::math::num_array(static_cast< const cmf::math::num_array& >(result))), SWIGTYPE_p_cmf__math__num_array, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_num_array___rsub__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::math::num_array *arg1 = (cmf::math::num_array *) 0 ;
  real arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  cmf::math::num_array result;
  
  if (!SWIG_Python_UnpackTuple(args,"num_array___rsub__",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__math__num_array, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "num_array___rsub__" "', argument " "1"" of type '" "cmf::math::num_array *""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::num_array * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "num_array___rsub__" "', argument " "2"" of type '" "real""'");
  } 
  arg2 = static_cast< real >(val2);
  {
    try {
      result = cmf_math_num_array___rsub__(arg1,arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj((new cmf::math::num_array(static_cast< const cmf::math::num_array& >(result))), SWIGTYPE_p_cmf__math__num_array, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_num_array___rmul__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::math::num_array *arg1 = (cmf::math::num_array *) 0 ;
  real arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  cmf::math::num_array result;
  
  if (!SWIG_Python_UnpackTuple(args,"num_array___rmul__",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__math__num_array, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "num_array___rmul__" "', argument " "1"" of type '" "cmf::math::num_array *""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::num_array * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "num_array___rmul__" "', argument " "2"" of type '" "real""'");
  } 
  arg2 = static_cast< real >(val2);
  {
    try {
      result = cmf_math_num_array___rmul__(arg1,arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj((new cmf::math::num_array(static_cast< const cmf::math::num_array& >(result))), SWIGTYPE_p_cmf__math__num_array, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_num_array___rdiv__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::math::num_array *arg1 = (cmf::math::num_array *) 0 ;
  real arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  cmf::math::num_array result;
  
  if (!SWIG_Python_UnpackTuple(args,"num_array___rdiv__",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__math__num_array, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "num_array___rdiv__" "', argument " "1"" of type '" "cmf::math::num_array *""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::num_array * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "num_array___rdiv__" "', argument " "2"" of type '" "real""'");
  } 
  arg2 = static_cast< real >(val2);
  {
    try {
      result = cmf_math_num_array___rdiv__(arg1,arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj((new cmf::math::num_array(static_cast< const cmf::math::num_array& >(result))), SWIGTYPE_p_cmf__math__num_array, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *num_array_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_cmf__math__num_array, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *num_array_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap___add__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  real arg1 ;
  cmf::math::num_array *arg2 = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  cmf::math::num_array result;
  
  if (!SWIG_Python_UnpackTuple(args,"__add__",2,2,swig_obj)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "__add__" "', argument " "1"" of type '" "real""'");
  } 
  arg1 = static_cast< real >(val1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cmf__math__num_array,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__add__" "', argument " "2"" of type '" "cmf::math::num_array const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__add__" "', argument " "2"" of type '" "cmf::math::num_array const &""'"); 
  }
  arg2 = reinterpret_cast< cmf::math::num_array * >(argp2);
  {
    try {
      result = cmf::math::operator +(arg1,(cmf::math::num_array const &)*arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj((new cmf::math::num_array(static_cast< const cmf::math::num_array& >(result))), SWIGTYPE_p_cmf__math__num_array, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap___sub__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  real arg1 ;
  cmf::math::num_array *arg2 = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  cmf::math::num_array result;
  
  if (!SWIG_Python_UnpackTuple(args,"__sub__",2,2,swig_obj)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "__sub__" "', argument " "1"" of type '" "real""'");
  } 
  arg1 = static_cast< real >(val1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cmf__math__num_array,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__sub__" "', argument " "2"" of type '" "cmf::math::num_array const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__sub__" "', argument " "2"" of type '" "cmf::math::num_array const &""'"); 
  }
  arg2 = reinterpret_cast< cmf::math::num_array * >(argp2);
  {
    try {
      result = cmf::math::operator -(arg1,(cmf::math::num_array const &)*arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj((new cmf::math::num_array(static_cast< const cmf::math::num_array& >(result))), SWIGTYPE_p_cmf__math__num_array, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap___mul____SWIG_2(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  real arg1 ;
  cmf::math::num_array *arg2 = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  cmf::math::num_array result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "__mul__" "', argument " "1"" of type '" "real""'");
  } 
  arg1 = static_cast< real >(val1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cmf__math__num_array,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__mul__" "', argument " "2"" of type '" "cmf::math::num_array const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__mul__" "', argument " "2"" of type '" "cmf::math::num_array const &""'"); 
  }
  arg2 = reinterpret_cast< cmf::math::num_array * >(argp2);
  {
    try {
      result = cmf::math::operator *(arg1,(cmf::math::num_array const &)*arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj((new cmf::math::num_array(static_cast< const cmf::math::num_array& >(result))), SWIGTYPE_p_cmf__math__num_array, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap___mul__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"__mul__",0,2,argv))) SWIG_fail;
  --argc;
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (argc == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          int res = SWIG_AsVal_int(argv[0], NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          void * pt;    
          int res=SWIG_ConvertPtr(argv[1],&pt,SWIGTYPE_p_cmf__math__Time,0);
          _v=SWIG_IsOK(res) || PyDateTime_Check(argv[1]) || PyDelta_Check(argv[1]) || PyDate_Check(argv[1]);
        }
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (argc == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          int res = SWIG_AsVal_double(argv[0], NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          void * pt;    
          int res=SWIG_ConvertPtr(argv[1],&pt,SWIGTYPE_p_cmf__math__Time,0);
          _v=SWIG_IsOK(res) || PyDateTime_Check(argv[1]) || PyDelta_Check(argv[1]) || PyDate_Check(argv[1]);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
    if (argc == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          int res = SWIG_AsVal_double(argv[0], NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_cmf__math__num_array, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 3;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_3:
    
  dispatch:
    switch(_index) {
    case 1:
      return _wrap___mul____SWIG_1(self, argc, argv);
    case 2:
      return _wrap___mul____SWIG_0(self, argc, argv);
    case 3:
      return _wrap___mul____SWIG_2(self, argc, argv);
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap___div__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  real arg1 ;
  cmf::math::num_array *arg2 = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  cmf::math::num_array result;
  
  if (!SWIG_Python_UnpackTuple(args,"__div__",2,2,swig_obj)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "__div__" "', argument " "1"" of type '" "real""'");
  } 
  arg1 = static_cast< real >(val1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cmf__math__num_array,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__div__" "', argument " "2"" of type '" "cmf::math::num_array const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__div__" "', argument " "2"" of type '" "cmf::math::num_array const &""'"); 
  }
  arg2 = reinterpret_cast< cmf::math::num_array * >(argp2);
  {
    try {
      result = cmf::math::operator /(arg1,(cmf::math::num_array const &)*arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj((new cmf::math::num_array(static_cast< const cmf::math::num_array& >(result))), SWIGTYPE_p_cmf__math__num_array, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_svVector_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< cmf::math::StateVariable * > *arg1 = (std::vector< cmf::math::StateVariable * > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &swig_obj[0];
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_cmf__math__StateVariable_p_std__allocatorT_cmf__math__StateVariable_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "svVector_iterator" "', argument " "1"" of type '" "std::vector< cmf::math::StateVariable * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< cmf::math::StateVariable * > * >(argp1);
  {
    try {
      result = (swig::SwigPyIterator *)std_vector_Sl_cmf_math_StateVariable_Sm__Sg__iterator(arg1,arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_svVector___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< cmf::math::StateVariable * > *arg1 = (std::vector< cmf::math::StateVariable * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_cmf__math__StateVariable_p_std__allocatorT_cmf__math__StateVariable_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "svVector___nonzero__" "', argument " "1"" of type '" "std::vector< cmf::math::StateVariable * > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< cmf::math::StateVariable * > * >(argp1);
  {
    try {
      result = (bool)std_vector_Sl_cmf_math_StateVariable_Sm__Sg____nonzero__((std::vector< cmf::math::StateVariable * > const *)arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_svVector___bool__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< cmf::math::StateVariable * > *arg1 = (std::vector< cmf::math::StateVariable * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_cmf__math__StateVariable_p_std__allocatorT_cmf__math__StateVariable_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "svVector___bool__" "', argument " "1"" of type '" "std::vector< cmf::math::StateVariable * > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< cmf::math::StateVariable * > * >(argp1);
  {
    try {
      result = (bool)std_vector_Sl_cmf_math_StateVariable_Sm__Sg____bool__((std::vector< cmf::math::StateVariable * > const *)arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_svVector___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< cmf::math::StateVariable * > *arg1 = (std::vector< cmf::math::StateVariable * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< cmf::math::StateVariable * >::size_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_cmf__math__StateVariable_p_std__allocatorT_cmf__math__StateVariable_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "svVector___len__" "', argument " "1"" of type '" "std::vector< cmf::math::StateVariable * > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< cmf::math::StateVariable * > * >(argp1);
  {
    try {
      result = std_vector_Sl_cmf_math_StateVariable_Sm__Sg____len__((std::vector< cmf::math::StateVariable * > const *)arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_svVector_pop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< cmf::math::StateVariable * > *arg1 = (std::vector< cmf::math::StateVariable * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< cmf::math::StateVariable * >::value_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_cmf__math__StateVariable_p_std__allocatorT_cmf__math__StateVariable_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "svVector_pop" "', argument " "1"" of type '" "std::vector< cmf::math::StateVariable * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< cmf::math::StateVariable * > * >(argp1);
  {
    try {
      try {
        result = (std::vector< cmf::math::StateVariable * >::value_type)std_vector_Sl_cmf_math_StateVariable_Sm__Sg__pop(arg1);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  {
    std::tr1::shared_ptr<  cmf::math::StateVariable > *smartresult = result ? new std::tr1::shared_ptr<  cmf::math::StateVariable >(result SWIG_NO_NULL_DELETER_0) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__tr1__shared_ptrT_cmf__math__StateVariable_t, 0 | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_svVector___getslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< cmf::math::StateVariable * > *arg1 = (std::vector< cmf::math::StateVariable * > *) 0 ;
  std::vector< cmf::math::StateVariable * >::difference_type arg2 ;
  std::vector< cmf::math::StateVariable * >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  std::vector< cmf::math::StateVariable *,std::allocator< cmf::math::StateVariable * > > *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args,"svVector___getslice__",3,3,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_cmf__math__StateVariable_p_std__allocatorT_cmf__math__StateVariable_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "svVector___getslice__" "', argument " "1"" of type '" "std::vector< cmf::math::StateVariable * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< cmf::math::StateVariable * > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "svVector___getslice__" "', argument " "2"" of type '" "std::vector< cmf::math::StateVariable * >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< cmf::math::StateVariable * >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "svVector___getslice__" "', argument " "3"" of type '" "std::vector< cmf::math::StateVariable * >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< cmf::math::StateVariable * >::difference_type >(val3);
  {
    try {
      try {
        result = (std::vector< cmf::math::StateVariable *,std::allocator< cmf::math::StateVariable * > > *)std_vector_Sl_cmf_math_StateVariable_Sm__Sg____getslice__(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_cmf__math__StateVariable_p_std__allocatorT_cmf__math__StateVariable_p_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_svVector___setslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< cmf::math::StateVariable * > *arg1 = (std::vector< cmf::math::StateVariable * > *) 0 ;
  std::vector< cmf::math::StateVariable * >::difference_type arg2 ;
  std::vector< cmf::math::StateVariable * >::difference_type arg3 ;
  std::vector< cmf::math::StateVariable *,std::allocator< cmf::math::StateVariable * > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject *swig_obj[4] ;
  
  if (!SWIG_Python_UnpackTuple(args,"svVector___setslice__",4,4,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_cmf__math__StateVariable_p_std__allocatorT_cmf__math__StateVariable_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "svVector___setslice__" "', argument " "1"" of type '" "std::vector< cmf::math::StateVariable * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< cmf::math::StateVariable * > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "svVector___setslice__" "', argument " "2"" of type '" "std::vector< cmf::math::StateVariable * >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< cmf::math::StateVariable * >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "svVector___setslice__" "', argument " "3"" of type '" "std::vector< cmf::math::StateVariable * >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< cmf::math::StateVariable * >::difference_type >(val3);
  {
    std::vector<cmf::math::StateVariable*,std::allocator< cmf::math::StateVariable * > > *ptr = (std::vector<cmf::math::StateVariable*,std::allocator< cmf::math::StateVariable * > > *)0;
    res4 = swig::asptr(swig_obj[3], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "svVector___setslice__" "', argument " "4"" of type '" "std::vector< cmf::math::StateVariable *,std::allocator< cmf::math::StateVariable * > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "svVector___setslice__" "', argument " "4"" of type '" "std::vector< cmf::math::StateVariable *,std::allocator< cmf::math::StateVariable * > > const &""'"); 
    }
    arg4 = ptr;
  }
  {
    try {
      try {
        std_vector_Sl_cmf_math_StateVariable_Sm__Sg____setslice__(arg1,arg2,arg3,(std::vector< cmf::math::StateVariable *,std::allocator< cmf::math::StateVariable * > > const &)*arg4);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_svVector___delslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< cmf::math::StateVariable * > *arg1 = (std::vector< cmf::math::StateVariable * > *) 0 ;
  std::vector< cmf::math::StateVariable * >::difference_type arg2 ;
  std::vector< cmf::math::StateVariable * >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  
  if (!SWIG_Python_UnpackTuple(args,"svVector___delslice__",3,3,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_cmf__math__StateVariable_p_std__allocatorT_cmf__math__StateVariable_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "svVector___delslice__" "', argument " "1"" of type '" "std::vector< cmf::math::StateVariable * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< cmf::math::StateVariable * > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "svVector___delslice__" "', argument " "2"" of type '" "std::vector< cmf::math::StateVariable * >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< cmf::math::StateVariable * >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "svVector___delslice__" "', argument " "3"" of type '" "std::vector< cmf::math::StateVariable * >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< cmf::math::StateVariable * >::difference_type >(val3);
  {
    try {
      try {
        std_vector_Sl_cmf_math_StateVariable_Sm__Sg____delslice__(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_svVector___delitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< cmf::math::StateVariable * > *arg1 = (std::vector< cmf::math::StateVariable * > *) 0 ;
  std::vector< cmf::math::StateVariable * >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_cmf__math__StateVariable_p_std__allocatorT_cmf__math__StateVariable_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "svVector___delitem__" "', argument " "1"" of type '" "std::vector< cmf::math::StateVariable * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< cmf::math::StateVariable * > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "svVector___delitem__" "', argument " "2"" of type '" "std::vector< cmf::math::StateVariable * >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< cmf::math::StateVariable * >::difference_type >(val2);
  {
    try {
      try {
        std_vector_Sl_cmf_math_StateVariable_Sm__Sg____delitem____SWIG_0(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_svVector___getitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< cmf::math::StateVariable * > *arg1 = (std::vector< cmf::math::StateVariable * > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< cmf::math::StateVariable *,std::allocator< cmf::math::StateVariable * > > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_cmf__math__StateVariable_p_std__allocatorT_cmf__math__StateVariable_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "svVector___getitem__" "', argument " "1"" of type '" "std::vector< cmf::math::StateVariable * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< cmf::math::StateVariable * > * >(argp1);
  {
    arg2 = (PySliceObject *) swig_obj[1];
  }
  {
    try {
      try {
        result = (std::vector< cmf::math::StateVariable *,std::allocator< cmf::math::StateVariable * > > *)std_vector_Sl_cmf_math_StateVariable_Sm__Sg____getitem____SWIG_0(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_cmf__math__StateVariable_p_std__allocatorT_cmf__math__StateVariable_p_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_svVector___setitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< cmf::math::StateVariable * > *arg1 = (std::vector< cmf::math::StateVariable * > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  std::vector< cmf::math::StateVariable *,std::allocator< cmf::math::StateVariable * > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_cmf__math__StateVariable_p_std__allocatorT_cmf__math__StateVariable_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "svVector___setitem__" "', argument " "1"" of type '" "std::vector< cmf::math::StateVariable * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< cmf::math::StateVariable * > * >(argp1);
  {
    arg2 = (PySliceObject *) swig_obj[1];
  }
  {
    std::vector<cmf::math::StateVariable*,std::allocator< cmf::math::StateVariable * > > *ptr = (std::vector<cmf::math::StateVariable*,std::allocator< cmf::math::StateVariable * > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "svVector___setitem__" "', argument " "3"" of type '" "std::vector< cmf::math::StateVariable *,std::allocator< cmf::math::StateVariable * > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "svVector___setitem__" "', argument " "3"" of type '" "std::vector< cmf::math::StateVariable *,std::allocator< cmf::math::StateVariable * > > const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      try {
        std_vector_Sl_cmf_math_StateVariable_Sm__Sg____setitem____SWIG_0(arg1,arg2,(std::vector< cmf::math::StateVariable *,std::allocator< cmf::math::StateVariable * > > const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_svVector___delitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< cmf::math::StateVariable * > *arg1 = (std::vector< cmf::math::StateVariable * > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_cmf__math__StateVariable_p_std__allocatorT_cmf__math__StateVariable_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "svVector___delitem__" "', argument " "1"" of type '" "std::vector< cmf::math::StateVariable * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< cmf::math::StateVariable * > * >(argp1);
  {
    arg2 = (PySliceObject *) swig_obj[1];
  }
  {
    try {
      try {
        std_vector_Sl_cmf_math_StateVariable_Sm__Sg____delitem____SWIG_1(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_svVector___delitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"svVector___delitem__",0,2,argv))) SWIG_fail;
  --argc;
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (argc == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = swig::asptr(argv[0], (std::vector<cmf::math::StateVariable*,std::allocator< cmf::math::StateVariable * > >**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          _v = PySlice_Check(argv[1]);
        }
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (argc == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = swig::asptr(argv[0], (std::vector<cmf::math::StateVariable*,std::allocator< cmf::math::StateVariable * > >**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      return _wrap_svVector___delitem____SWIG_1(self, argc, argv);
    case 2:
      return _wrap_svVector___delitem____SWIG_0(self, argc, argv);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'svVector___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    __delitem__(std::vector< cmf::math::StateVariable * > *,std::vector< cmf::math::StateVariable * >::difference_type)\n"
    "    __delitem__(std::vector< cmf::math::StateVariable * > *,PySliceObject *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_svVector___getitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< cmf::math::StateVariable * > *arg1 = (std::vector< cmf::math::StateVariable * > *) 0 ;
  std::vector< cmf::math::StateVariable * >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  std::vector< cmf::math::StateVariable * >::value_type result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_cmf__math__StateVariable_p_std__allocatorT_cmf__math__StateVariable_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "svVector___getitem__" "', argument " "1"" of type '" "std::vector< cmf::math::StateVariable * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< cmf::math::StateVariable * > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "svVector___getitem__" "', argument " "2"" of type '" "std::vector< cmf::math::StateVariable * >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< cmf::math::StateVariable * >::difference_type >(val2);
  {
    try {
      try {
        result = (std::vector< cmf::math::StateVariable * >::value_type)std_vector_Sl_cmf_math_StateVariable_Sm__Sg____getitem____SWIG_1(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  {
    std::tr1::shared_ptr<  cmf::math::StateVariable > *smartresult = result ? new std::tr1::shared_ptr<  cmf::math::StateVariable >(result SWIG_NO_NULL_DELETER_0) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__tr1__shared_ptrT_cmf__math__StateVariable_t, 0 | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_svVector___getitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"svVector___getitem__",0,2,argv))) SWIG_fail;
  --argc;
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (argc == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = swig::asptr(argv[0], (std::vector<cmf::math::StateVariable*,std::allocator< cmf::math::StateVariable * > >**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          _v = PySlice_Check(argv[1]);
        }
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (argc == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = swig::asptr(argv[0], (std::vector<cmf::math::StateVariable*,std::allocator< cmf::math::StateVariable * > >**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      return _wrap_svVector___getitem____SWIG_0(self, argc, argv);
    case 2:
      return _wrap_svVector___getitem____SWIG_1(self, argc, argv);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'svVector___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    __getitem__(std::vector< cmf::math::StateVariable * > *,PySliceObject *)\n"
    "    __getitem__(std::vector< cmf::math::StateVariable * > *,std::vector< cmf::math::StateVariable * >::difference_type)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_svVector___setitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< cmf::math::StateVariable * > *arg1 = (std::vector< cmf::math::StateVariable * > *) 0 ;
  std::vector< cmf::math::StateVariable * >::difference_type arg2 ;
  std::vector< cmf::math::StateVariable * >::value_type arg3 = (std::vector< cmf::math::StateVariable * >::value_type) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  std::tr1::shared_ptr< cmf::math::StateVariable > tempshared3 ;
  std::tr1::shared_ptr< cmf::math::StateVariable > *smartarg3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_cmf__math__StateVariable_p_std__allocatorT_cmf__math__StateVariable_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "svVector___setitem__" "', argument " "1"" of type '" "std::vector< cmf::math::StateVariable * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< cmf::math::StateVariable * > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "svVector___setitem__" "', argument " "2"" of type '" "std::vector< cmf::math::StateVariable * >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< cmf::math::StateVariable * >::difference_type >(val2);
  {
    int newmem = 0;
    res3 = SWIG_ConvertPtrAndOwn(swig_obj[2], &argp3, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__math__StateVariable_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "svVector___setitem__" "', argument " "3"" of type '" "std::vector< cmf::math::StateVariable * >::value_type""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared3 = *reinterpret_cast< std::tr1::shared_ptr<  cmf::math::StateVariable > * >(argp3);
      delete reinterpret_cast< std::tr1::shared_ptr<  cmf::math::StateVariable > * >(argp3);
      arg3 = const_cast< std::vector< cmf::math::StateVariable * >::value_type >(tempshared3.get());
    } else {
      smartarg3 = reinterpret_cast< std::tr1::shared_ptr<  cmf::math::StateVariable > * >(argp3);
      arg3 = const_cast< std::vector< cmf::math::StateVariable * >::value_type >((smartarg3 ? smartarg3->get() : 0));
    }
  }
  {
    try {
      try {
        std_vector_Sl_cmf_math_StateVariable_Sm__Sg____setitem____SWIG_1(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_svVector___setitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"svVector___setitem__",0,3,argv))) SWIG_fail;
  --argc;
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (argc == 3) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = swig::asptr(argv[0], (std::vector<cmf::math::StateVariable*,std::allocator< cmf::math::StateVariable * > >**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          _v = PySlice_Check(argv[1]);
        }
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = swig::asptr(argv[2], (std::vector<cmf::math::StateVariable*,std::allocator< cmf::math::StateVariable * > >**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (argc == 3) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = swig::asptr(argv[0], (std::vector<cmf::math::StateVariable*,std::allocator< cmf::math::StateVariable * > >**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__math__StateVariable_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      return _wrap_svVector___setitem____SWIG_0(self, argc, argv);
    case 2:
      return _wrap_svVector___setitem____SWIG_1(self, argc, argv);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'svVector___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    __setitem__(std::vector< cmf::math::StateVariable * > *,PySliceObject *,std::vector< cmf::math::StateVariable *,std::allocator< cmf::math::StateVariable * > > const &)\n"
    "    __setitem__(std::vector< cmf::math::StateVariable * > *,std::vector< cmf::math::StateVariable * >::difference_type,std::vector< cmf::math::StateVariable * >::value_type)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_svVector_append(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< cmf::math::StateVariable * > *arg1 = (std::vector< cmf::math::StateVariable * > *) 0 ;
  std::vector< cmf::math::StateVariable * >::value_type arg2 = (std::vector< cmf::math::StateVariable * >::value_type) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  std::tr1::shared_ptr< cmf::math::StateVariable > tempshared2 ;
  std::tr1::shared_ptr< cmf::math::StateVariable > *smartarg2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"svVector_append",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_cmf__math__StateVariable_p_std__allocatorT_cmf__math__StateVariable_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "svVector_append" "', argument " "1"" of type '" "std::vector< cmf::math::StateVariable * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< cmf::math::StateVariable * > * >(argp1);
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(swig_obj[1], &argp2, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__math__StateVariable_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "svVector_append" "', argument " "2"" of type '" "std::vector< cmf::math::StateVariable * >::value_type""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared2 = *reinterpret_cast< std::tr1::shared_ptr<  cmf::math::StateVariable > * >(argp2);
      delete reinterpret_cast< std::tr1::shared_ptr<  cmf::math::StateVariable > * >(argp2);
      arg2 = const_cast< std::vector< cmf::math::StateVariable * >::value_type >(tempshared2.get());
    } else {
      smartarg2 = reinterpret_cast< std::tr1::shared_ptr<  cmf::math::StateVariable > * >(argp2);
      arg2 = const_cast< std::vector< cmf::math::StateVariable * >::value_type >((smartarg2 ? smartarg2->get() : 0));
    }
  }
  {
    try {
      std_vector_Sl_cmf_math_StateVariable_Sm__Sg__append(arg1,arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_svVector__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  std::vector< cmf::math::StateVariable * > *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  {
    try {
      result = (std::vector< cmf::math::StateVariable * > *)new std::vector< cmf::math::StateVariable * >();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_cmf__math__StateVariable_p_std__allocatorT_cmf__math__StateVariable_p_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_svVector__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< cmf::math::StateVariable * > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  std::vector< cmf::math::StateVariable * > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    std::vector<cmf::math::StateVariable*,std::allocator< cmf::math::StateVariable * > > *ptr = (std::vector<cmf::math::StateVariable*,std::allocator< cmf::math::StateVariable * > > *)0;
    res1 = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_svVector" "', argument " "1"" of type '" "std::vector< cmf::math::StateVariable * > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_svVector" "', argument " "1"" of type '" "std::vector< cmf::math::StateVariable * > const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try {
      result = (std::vector< cmf::math::StateVariable * > *)new std::vector< cmf::math::StateVariable * >((std::vector< cmf::math::StateVariable * > const &)*arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_cmf__math__StateVariable_p_std__allocatorT_cmf__math__StateVariable_p_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_svVector_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< cmf::math::StateVariable * > *arg1 = (std::vector< cmf::math::StateVariable * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_cmf__math__StateVariable_p_std__allocatorT_cmf__math__StateVariable_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "svVector_empty" "', argument " "1"" of type '" "std::vector< cmf::math::StateVariable * > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< cmf::math::StateVariable * > * >(argp1);
  {
    try {
      result = (bool)((std::vector< cmf::math::StateVariable * > const *)arg1)->empty();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_svVector_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< cmf::math::StateVariable * > *arg1 = (std::vector< cmf::math::StateVariable * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< cmf::math::StateVariable * >::size_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_cmf__math__StateVariable_p_std__allocatorT_cmf__math__StateVariable_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "svVector_size" "', argument " "1"" of type '" "std::vector< cmf::math::StateVariable * > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< cmf::math::StateVariable * > * >(argp1);
  {
    try {
      result = ((std::vector< cmf::math::StateVariable * > const *)arg1)->size();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_svVector_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< cmf::math::StateVariable * > *arg1 = (std::vector< cmf::math::StateVariable * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_cmf__math__StateVariable_p_std__allocatorT_cmf__math__StateVariable_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "svVector_clear" "', argument " "1"" of type '" "std::vector< cmf::math::StateVariable * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< cmf::math::StateVariable * > * >(argp1);
  {
    try {
      (arg1)->clear();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_svVector_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< cmf::math::StateVariable * > *arg1 = (std::vector< cmf::math::StateVariable * > *) 0 ;
  std::vector< cmf::math::StateVariable * > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"svVector_swap",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_cmf__math__StateVariable_p_std__allocatorT_cmf__math__StateVariable_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "svVector_swap" "', argument " "1"" of type '" "std::vector< cmf::math::StateVariable * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< cmf::math::StateVariable * > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__vectorT_cmf__math__StateVariable_p_std__allocatorT_cmf__math__StateVariable_p_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "svVector_swap" "', argument " "2"" of type '" "std::vector< cmf::math::StateVariable * > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "svVector_swap" "', argument " "2"" of type '" "std::vector< cmf::math::StateVariable * > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< cmf::math::StateVariable * > * >(argp2);
  {
    try {
      (arg1)->swap(*arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_svVector_get_allocator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< cmf::math::StateVariable * > *arg1 = (std::vector< cmf::math::StateVariable * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  SwigValueWrapper< std::allocator< cmf::math::StateVariable * > > result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_cmf__math__StateVariable_p_std__allocatorT_cmf__math__StateVariable_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "svVector_get_allocator" "', argument " "1"" of type '" "std::vector< cmf::math::StateVariable * > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< cmf::math::StateVariable * > * >(argp1);
  {
    try {
      result = ((std::vector< cmf::math::StateVariable * > const *)arg1)->get_allocator();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj((new std::vector< cmf::math::StateVariable * >::allocator_type(static_cast< const std::vector< cmf::math::StateVariable * >::allocator_type& >(result))), SWIGTYPE_p_std__vectorT_cmf__math__StateVariable_p_std__allocatorT_cmf__math__StateVariable_p_t_t__allocator_type, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_svVector_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< cmf::math::StateVariable * > *arg1 = (std::vector< cmf::math::StateVariable * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< cmf::math::StateVariable * >::const_iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_cmf__math__StateVariable_p_std__allocatorT_cmf__math__StateVariable_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "svVector_begin" "', argument " "1"" of type '" "std::vector< cmf::math::StateVariable * > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< cmf::math::StateVariable * > * >(argp1);
  {
    try {
      result = ((std::vector< cmf::math::StateVariable * > const *)arg1)->begin();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< cmf::math::StateVariable * >::const_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_svVector_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< cmf::math::StateVariable * > *arg1 = (std::vector< cmf::math::StateVariable * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< cmf::math::StateVariable * >::const_iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_cmf__math__StateVariable_p_std__allocatorT_cmf__math__StateVariable_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "svVector_end" "', argument " "1"" of type '" "std::vector< cmf::math::StateVariable * > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< cmf::math::StateVariable * > * >(argp1);
  {
    try {
      result = ((std::vector< cmf::math::StateVariable * > const *)arg1)->end();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< cmf::math::StateVariable * >::const_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_svVector_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< cmf::math::StateVariable * > *arg1 = (std::vector< cmf::math::StateVariable * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< cmf::math::StateVariable * >::const_reverse_iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_cmf__math__StateVariable_p_std__allocatorT_cmf__math__StateVariable_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "svVector_rbegin" "', argument " "1"" of type '" "std::vector< cmf::math::StateVariable * > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< cmf::math::StateVariable * > * >(argp1);
  {
    try {
      result = ((std::vector< cmf::math::StateVariable * > const *)arg1)->rbegin();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< cmf::math::StateVariable * >::const_reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_svVector_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< cmf::math::StateVariable * > *arg1 = (std::vector< cmf::math::StateVariable * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< cmf::math::StateVariable * >::const_reverse_iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_cmf__math__StateVariable_p_std__allocatorT_cmf__math__StateVariable_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "svVector_rend" "', argument " "1"" of type '" "std::vector< cmf::math::StateVariable * > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< cmf::math::StateVariable * > * >(argp1);
  {
    try {
      result = ((std::vector< cmf::math::StateVariable * > const *)arg1)->rend();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< cmf::math::StateVariable * >::const_reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_svVector__SWIG_2(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< cmf::math::StateVariable * >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  std::vector< cmf::math::StateVariable * > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_svVector" "', argument " "1"" of type '" "std::vector< cmf::math::StateVariable * >::size_type""'");
  } 
  arg1 = static_cast< std::vector< cmf::math::StateVariable * >::size_type >(val1);
  {
    try {
      result = (std::vector< cmf::math::StateVariable * > *)new std::vector< cmf::math::StateVariable * >(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_cmf__math__StateVariable_p_std__allocatorT_cmf__math__StateVariable_p_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_svVector_pop_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< cmf::math::StateVariable * > *arg1 = (std::vector< cmf::math::StateVariable * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_cmf__math__StateVariable_p_std__allocatorT_cmf__math__StateVariable_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "svVector_pop_back" "', argument " "1"" of type '" "std::vector< cmf::math::StateVariable * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< cmf::math::StateVariable * > * >(argp1);
  {
    try {
      (arg1)->pop_back();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_svVector_resize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< cmf::math::StateVariable * > *arg1 = (std::vector< cmf::math::StateVariable * > *) 0 ;
  std::vector< cmf::math::StateVariable * >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_cmf__math__StateVariable_p_std__allocatorT_cmf__math__StateVariable_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "svVector_resize" "', argument " "1"" of type '" "std::vector< cmf::math::StateVariable * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< cmf::math::StateVariable * > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "svVector_resize" "', argument " "2"" of type '" "std::vector< cmf::math::StateVariable * >::size_type""'");
  } 
  arg2 = static_cast< std::vector< cmf::math::StateVariable * >::size_type >(val2);
  {
    try {
      (arg1)->resize(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_svVector_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< cmf::math::StateVariable * > *arg1 = (std::vector< cmf::math::StateVariable * > *) 0 ;
  std::vector< cmf::math::StateVariable * >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  std::vector< cmf::math::StateVariable * >::iterator result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_cmf__math__StateVariable_p_std__allocatorT_cmf__math__StateVariable_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "svVector_erase" "', argument " "1"" of type '" "std::vector< cmf::math::StateVariable * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< cmf::math::StateVariable * > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "svVector_erase" "', argument " "2"" of type '" "std::vector< cmf::math::StateVariable * >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< cmf::math::StateVariable * >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< cmf::math::StateVariable * >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "svVector_erase" "', argument " "2"" of type '" "std::vector< cmf::math::StateVariable * >::iterator""'");
    }
  }
  {
    try {
      result = (arg1)->erase(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< cmf::math::StateVariable * >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_svVector_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< cmf::math::StateVariable * > *arg1 = (std::vector< cmf::math::StateVariable * > *) 0 ;
  std::vector< cmf::math::StateVariable * >::iterator arg2 ;
  std::vector< cmf::math::StateVariable * >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  std::vector< cmf::math::StateVariable * >::iterator result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_cmf__math__StateVariable_p_std__allocatorT_cmf__math__StateVariable_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "svVector_erase" "', argument " "1"" of type '" "std::vector< cmf::math::StateVariable * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< cmf::math::StateVariable * > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "svVector_erase" "', argument " "2"" of type '" "std::vector< cmf::math::StateVariable * >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< cmf::math::StateVariable * >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< cmf::math::StateVariable * >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "svVector_erase" "', argument " "2"" of type '" "std::vector< cmf::math::StateVariable * >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "svVector_erase" "', argument " "3"" of type '" "std::vector< cmf::math::StateVariable * >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< cmf::math::StateVariable * >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< cmf::math::StateVariable * >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "svVector_erase" "', argument " "3"" of type '" "std::vector< cmf::math::StateVariable * >::iterator""'");
    }
  }
  {
    try {
      result = (arg1)->erase(arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< cmf::math::StateVariable * >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_svVector_erase(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"svVector_erase",0,3,argv))) SWIG_fail;
  --argc;
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (argc == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = swig::asptr(argv[0], (std::vector<cmf::math::StateVariable*,std::allocator< cmf::math::StateVariable * > >**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< cmf::math::StateVariable * >::iterator > *>(iter) != 0));
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (argc == 3) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = swig::asptr(argv[0], (std::vector<cmf::math::StateVariable*,std::allocator< cmf::math::StateVariable * > >**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< cmf::math::StateVariable * >::iterator > *>(iter) != 0));
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< cmf::math::StateVariable * >::iterator > *>(iter) != 0));
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      return _wrap_svVector_erase__SWIG_0(self, argc, argv);
    case 2:
      return _wrap_svVector_erase__SWIG_1(self, argc, argv);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'svVector_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    erase(std::vector< cmf::math::StateVariable * > *,std::vector< cmf::math::StateVariable * >::iterator)\n"
    "    erase(std::vector< cmf::math::StateVariable * > *,std::vector< cmf::math::StateVariable * >::iterator,std::vector< cmf::math::StateVariable * >::iterator)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_svVector__SWIG_3(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< cmf::math::StateVariable * >::size_type arg1 ;
  std::vector< cmf::math::StateVariable * >::value_type arg2 = (std::vector< cmf::math::StateVariable * >::value_type) 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  std::tr1::shared_ptr< cmf::math::StateVariable > tempshared2 ;
  std::tr1::shared_ptr< cmf::math::StateVariable > *smartarg2 = 0 ;
  std::vector< cmf::math::StateVariable * > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_svVector" "', argument " "1"" of type '" "std::vector< cmf::math::StateVariable * >::size_type""'");
  } 
  arg1 = static_cast< std::vector< cmf::math::StateVariable * >::size_type >(val1);
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(swig_obj[1], &argp2, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__math__StateVariable_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_svVector" "', argument " "2"" of type '" "std::vector< cmf::math::StateVariable * >::value_type""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared2 = *reinterpret_cast< std::tr1::shared_ptr<  cmf::math::StateVariable > * >(argp2);
      delete reinterpret_cast< std::tr1::shared_ptr<  cmf::math::StateVariable > * >(argp2);
      arg2 = const_cast< std::vector< cmf::math::StateVariable * >::value_type >(tempshared2.get());
    } else {
      smartarg2 = reinterpret_cast< std::tr1::shared_ptr<  cmf::math::StateVariable > * >(argp2);
      arg2 = const_cast< std::vector< cmf::math::StateVariable * >::value_type >((smartarg2 ? smartarg2->get() : 0));
    }
  }
  {
    try {
      result = (std::vector< cmf::math::StateVariable * > *)new std::vector< cmf::math::StateVariable * >(arg1,arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_cmf__math__StateVariable_p_std__allocatorT_cmf__math__StateVariable_p_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_svVector(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"new_svVector",0,2,argv))) SWIG_fail;
  --argc;
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (argc == 0) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
    if (argc == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          int res = SWIG_AsVal_size_t(argv[0], NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
    if (argc == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = swig::asptr(argv[0], (std::vector<cmf::math::StateVariable*,std::allocator< cmf::math::StateVariable * > >**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 3;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_3:
    
    if (argc == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          int res = SWIG_AsVal_size_t(argv[0], NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__math__StateVariable_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 4;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_4:
    
  dispatch:
    switch(_index) {
    case 1:
      return _wrap_new_svVector__SWIG_0(self, argc, argv);
    case 2:
      return _wrap_new_svVector__SWIG_2(self, argc, argv);
    case 3:
      return _wrap_new_svVector__SWIG_1(self, argc, argv);
    case 4:
      return _wrap_new_svVector__SWIG_3(self, argc, argv);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_svVector'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< cmf::math::StateVariable * >()\n"
    "    std::vector< cmf::math::StateVariable * >(std::vector< cmf::math::StateVariable * > const &)\n"
    "    std::vector< cmf::math::StateVariable * >(std::vector< cmf::math::StateVariable * >::size_type)\n"
    "    std::vector< cmf::math::StateVariable * >(std::vector< cmf::math::StateVariable * >::size_type,std::vector< cmf::math::StateVariable * >::value_type)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_svVector_push_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< cmf::math::StateVariable * > *arg1 = (std::vector< cmf::math::StateVariable * > *) 0 ;
  std::vector< cmf::math::StateVariable * >::value_type arg2 = (std::vector< cmf::math::StateVariable * >::value_type) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  std::tr1::shared_ptr< cmf::math::StateVariable > tempshared2 ;
  std::tr1::shared_ptr< cmf::math::StateVariable > *smartarg2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"svVector_push_back",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_cmf__math__StateVariable_p_std__allocatorT_cmf__math__StateVariable_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "svVector_push_back" "', argument " "1"" of type '" "std::vector< cmf::math::StateVariable * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< cmf::math::StateVariable * > * >(argp1);
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(swig_obj[1], &argp2, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__math__StateVariable_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "svVector_push_back" "', argument " "2"" of type '" "std::vector< cmf::math::StateVariable * >::value_type""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared2 = *reinterpret_cast< std::tr1::shared_ptr<  cmf::math::StateVariable > * >(argp2);
      delete reinterpret_cast< std::tr1::shared_ptr<  cmf::math::StateVariable > * >(argp2);
      arg2 = const_cast< std::vector< cmf::math::StateVariable * >::value_type >(tempshared2.get());
    } else {
      smartarg2 = reinterpret_cast< std::tr1::shared_ptr<  cmf::math::StateVariable > * >(argp2);
      arg2 = const_cast< std::vector< cmf::math::StateVariable * >::value_type >((smartarg2 ? smartarg2->get() : 0));
    }
  }
  {
    try {
      (arg1)->push_back(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_svVector_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< cmf::math::StateVariable * > *arg1 = (std::vector< cmf::math::StateVariable * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< cmf::math::StateVariable * >::value_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_cmf__math__StateVariable_p_std__allocatorT_cmf__math__StateVariable_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "svVector_front" "', argument " "1"" of type '" "std::vector< cmf::math::StateVariable * > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< cmf::math::StateVariable * > * >(argp1);
  {
    try {
      result = (std::vector< cmf::math::StateVariable * >::value_type)((std::vector< cmf::math::StateVariable * > const *)arg1)->front();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  {
    std::tr1::shared_ptr<  cmf::math::StateVariable > *smartresult = result ? new std::tr1::shared_ptr<  cmf::math::StateVariable >(result SWIG_NO_NULL_DELETER_0) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__tr1__shared_ptrT_cmf__math__StateVariable_t, 0 | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_svVector_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< cmf::math::StateVariable * > *arg1 = (std::vector< cmf::math::StateVariable * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< cmf::math::StateVariable * >::value_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_cmf__math__StateVariable_p_std__allocatorT_cmf__math__StateVariable_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "svVector_back" "', argument " "1"" of type '" "std::vector< cmf::math::StateVariable * > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< cmf::math::StateVariable * > * >(argp1);
  {
    try {
      result = (std::vector< cmf::math::StateVariable * >::value_type)((std::vector< cmf::math::StateVariable * > const *)arg1)->back();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  {
    std::tr1::shared_ptr<  cmf::math::StateVariable > *smartresult = result ? new std::tr1::shared_ptr<  cmf::math::StateVariable >(result SWIG_NO_NULL_DELETER_0) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__tr1__shared_ptrT_cmf__math__StateVariable_t, 0 | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_svVector_assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< cmf::math::StateVariable * > *arg1 = (std::vector< cmf::math::StateVariable * > *) 0 ;
  std::vector< cmf::math::StateVariable * >::size_type arg2 ;
  std::vector< cmf::math::StateVariable * >::value_type arg3 = (std::vector< cmf::math::StateVariable * >::value_type) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  std::tr1::shared_ptr< cmf::math::StateVariable > tempshared3 ;
  std::tr1::shared_ptr< cmf::math::StateVariable > *smartarg3 = 0 ;
  PyObject *swig_obj[3] ;
  
  if (!SWIG_Python_UnpackTuple(args,"svVector_assign",3,3,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_cmf__math__StateVariable_p_std__allocatorT_cmf__math__StateVariable_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "svVector_assign" "', argument " "1"" of type '" "std::vector< cmf::math::StateVariable * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< cmf::math::StateVariable * > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "svVector_assign" "', argument " "2"" of type '" "std::vector< cmf::math::StateVariable * >::size_type""'");
  } 
  arg2 = static_cast< std::vector< cmf::math::StateVariable * >::size_type >(val2);
  {
    int newmem = 0;
    res3 = SWIG_ConvertPtrAndOwn(swig_obj[2], &argp3, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__math__StateVariable_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "svVector_assign" "', argument " "3"" of type '" "std::vector< cmf::math::StateVariable * >::value_type""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared3 = *reinterpret_cast< std::tr1::shared_ptr<  cmf::math::StateVariable > * >(argp3);
      delete reinterpret_cast< std::tr1::shared_ptr<  cmf::math::StateVariable > * >(argp3);
      arg3 = const_cast< std::vector< cmf::math::StateVariable * >::value_type >(tempshared3.get());
    } else {
      smartarg3 = reinterpret_cast< std::tr1::shared_ptr<  cmf::math::StateVariable > * >(argp3);
      arg3 = const_cast< std::vector< cmf::math::StateVariable * >::value_type >((smartarg3 ? smartarg3->get() : 0));
    }
  }
  {
    try {
      (arg1)->assign(arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_svVector_resize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< cmf::math::StateVariable * > *arg1 = (std::vector< cmf::math::StateVariable * > *) 0 ;
  std::vector< cmf::math::StateVariable * >::size_type arg2 ;
  std::vector< cmf::math::StateVariable * >::value_type arg3 = (std::vector< cmf::math::StateVariable * >::value_type) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  std::tr1::shared_ptr< cmf::math::StateVariable > tempshared3 ;
  std::tr1::shared_ptr< cmf::math::StateVariable > *smartarg3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_cmf__math__StateVariable_p_std__allocatorT_cmf__math__StateVariable_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "svVector_resize" "', argument " "1"" of type '" "std::vector< cmf::math::StateVariable * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< cmf::math::StateVariable * > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "svVector_resize" "', argument " "2"" of type '" "std::vector< cmf::math::StateVariable * >::size_type""'");
  } 
  arg2 = static_cast< std::vector< cmf::math::StateVariable * >::size_type >(val2);
  {
    int newmem = 0;
    res3 = SWIG_ConvertPtrAndOwn(swig_obj[2], &argp3, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__math__StateVariable_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "svVector_resize" "', argument " "3"" of type '" "std::vector< cmf::math::StateVariable * >::value_type""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared3 = *reinterpret_cast< std::tr1::shared_ptr<  cmf::math::StateVariable > * >(argp3);
      delete reinterpret_cast< std::tr1::shared_ptr<  cmf::math::StateVariable > * >(argp3);
      arg3 = const_cast< std::vector< cmf::math::StateVariable * >::value_type >(tempshared3.get());
    } else {
      smartarg3 = reinterpret_cast< std::tr1::shared_ptr<  cmf::math::StateVariable > * >(argp3);
      arg3 = const_cast< std::vector< cmf::math::StateVariable * >::value_type >((smartarg3 ? smartarg3->get() : 0));
    }
  }
  {
    try {
      (arg1)->resize(arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_svVector_resize(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"svVector_resize",0,3,argv))) SWIG_fail;
  --argc;
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (argc == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = swig::asptr(argv[0], (std::vector<cmf::math::StateVariable*,std::allocator< cmf::math::StateVariable * > >**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_size_t(argv[1], NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (argc == 3) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = swig::asptr(argv[0], (std::vector<cmf::math::StateVariable*,std::allocator< cmf::math::StateVariable * > >**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_size_t(argv[1], NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__math__StateVariable_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      return _wrap_svVector_resize__SWIG_0(self, argc, argv);
    case 2:
      return _wrap_svVector_resize__SWIG_1(self, argc, argv);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'svVector_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    resize(std::vector< cmf::math::StateVariable * > *,std::vector< cmf::math::StateVariable * >::size_type)\n"
    "    resize(std::vector< cmf::math::StateVariable * > *,std::vector< cmf::math::StateVariable * >::size_type,std::vector< cmf::math::StateVariable * >::value_type)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_svVector_insert__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< cmf::math::StateVariable * > *arg1 = (std::vector< cmf::math::StateVariable * > *) 0 ;
  std::vector< cmf::math::StateVariable * >::iterator arg2 ;
  std::vector< cmf::math::StateVariable * >::value_type arg3 = (std::vector< cmf::math::StateVariable * >::value_type) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  std::tr1::shared_ptr< cmf::math::StateVariable > tempshared3 ;
  std::tr1::shared_ptr< cmf::math::StateVariable > *smartarg3 = 0 ;
  std::vector< cmf::math::StateVariable * >::iterator result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_cmf__math__StateVariable_p_std__allocatorT_cmf__math__StateVariable_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "svVector_insert" "', argument " "1"" of type '" "std::vector< cmf::math::StateVariable * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< cmf::math::StateVariable * > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "svVector_insert" "', argument " "2"" of type '" "std::vector< cmf::math::StateVariable * >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< cmf::math::StateVariable * >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< cmf::math::StateVariable * >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "svVector_insert" "', argument " "2"" of type '" "std::vector< cmf::math::StateVariable * >::iterator""'");
    }
  }
  {
    int newmem = 0;
    res3 = SWIG_ConvertPtrAndOwn(swig_obj[2], &argp3, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__math__StateVariable_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "svVector_insert" "', argument " "3"" of type '" "std::vector< cmf::math::StateVariable * >::value_type""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared3 = *reinterpret_cast< std::tr1::shared_ptr<  cmf::math::StateVariable > * >(argp3);
      delete reinterpret_cast< std::tr1::shared_ptr<  cmf::math::StateVariable > * >(argp3);
      arg3 = const_cast< std::vector< cmf::math::StateVariable * >::value_type >(tempshared3.get());
    } else {
      smartarg3 = reinterpret_cast< std::tr1::shared_ptr<  cmf::math::StateVariable > * >(argp3);
      arg3 = const_cast< std::vector< cmf::math::StateVariable * >::value_type >((smartarg3 ? smartarg3->get() : 0));
    }
  }
  {
    try {
      result = (arg1)->insert(arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< cmf::math::StateVariable * >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_svVector_insert__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< cmf::math::StateVariable * > *arg1 = (std::vector< cmf::math::StateVariable * > *) 0 ;
  std::vector< cmf::math::StateVariable * >::iterator arg2 ;
  std::vector< cmf::math::StateVariable * >::size_type arg3 ;
  std::vector< cmf::math::StateVariable * >::value_type arg4 = (std::vector< cmf::math::StateVariable * >::value_type) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  std::tr1::shared_ptr< cmf::math::StateVariable > tempshared4 ;
  std::tr1::shared_ptr< cmf::math::StateVariable > *smartarg4 = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_cmf__math__StateVariable_p_std__allocatorT_cmf__math__StateVariable_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "svVector_insert" "', argument " "1"" of type '" "std::vector< cmf::math::StateVariable * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< cmf::math::StateVariable * > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "svVector_insert" "', argument " "2"" of type '" "std::vector< cmf::math::StateVariable * >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< cmf::math::StateVariable * >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< cmf::math::StateVariable * >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "svVector_insert" "', argument " "2"" of type '" "std::vector< cmf::math::StateVariable * >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "svVector_insert" "', argument " "3"" of type '" "std::vector< cmf::math::StateVariable * >::size_type""'");
  } 
  arg3 = static_cast< std::vector< cmf::math::StateVariable * >::size_type >(val3);
  {
    int newmem = 0;
    res4 = SWIG_ConvertPtrAndOwn(swig_obj[3], &argp4, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__math__StateVariable_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "svVector_insert" "', argument " "4"" of type '" "std::vector< cmf::math::StateVariable * >::value_type""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared4 = *reinterpret_cast< std::tr1::shared_ptr<  cmf::math::StateVariable > * >(argp4);
      delete reinterpret_cast< std::tr1::shared_ptr<  cmf::math::StateVariable > * >(argp4);
      arg4 = const_cast< std::vector< cmf::math::StateVariable * >::value_type >(tempshared4.get());
    } else {
      smartarg4 = reinterpret_cast< std::tr1::shared_ptr<  cmf::math::StateVariable > * >(argp4);
      arg4 = const_cast< std::vector< cmf::math::StateVariable * >::value_type >((smartarg4 ? smartarg4->get() : 0));
    }
  }
  {
    try {
      (arg1)->insert(arg2,arg3,arg4);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_svVector_insert(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"svVector_insert",0,4,argv))) SWIG_fail;
  --argc;
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (argc == 3) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = swig::asptr(argv[0], (std::vector<cmf::math::StateVariable*,std::allocator< cmf::math::StateVariable * > >**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< cmf::math::StateVariable * >::iterator > *>(iter) != 0));
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__math__StateVariable_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (argc == 4) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = swig::asptr(argv[0], (std::vector<cmf::math::StateVariable*,std::allocator< cmf::math::StateVariable * > >**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< cmf::math::StateVariable * >::iterator > *>(iter) != 0));
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__math__StateVariable_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      return _wrap_svVector_insert__SWIG_0(self, argc, argv);
    case 2:
      return _wrap_svVector_insert__SWIG_1(self, argc, argv);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'svVector_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    insert(std::vector< cmf::math::StateVariable * > *,std::vector< cmf::math::StateVariable * >::iterator,std::vector< cmf::math::StateVariable * >::value_type)\n"
    "    insert(std::vector< cmf::math::StateVariable * > *,std::vector< cmf::math::StateVariable * >::iterator,std::vector< cmf::math::StateVariable * >::size_type,std::vector< cmf::math::StateVariable * >::value_type)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_svVector_reserve(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< cmf::math::StateVariable * > *arg1 = (std::vector< cmf::math::StateVariable * > *) 0 ;
  std::vector< cmf::math::StateVariable * >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"svVector_reserve",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_cmf__math__StateVariable_p_std__allocatorT_cmf__math__StateVariable_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "svVector_reserve" "', argument " "1"" of type '" "std::vector< cmf::math::StateVariable * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< cmf::math::StateVariable * > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "svVector_reserve" "', argument " "2"" of type '" "std::vector< cmf::math::StateVariable * >::size_type""'");
  } 
  arg2 = static_cast< std::vector< cmf::math::StateVariable * >::size_type >(val2);
  {
    try {
      (arg1)->reserve(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_svVector_capacity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< cmf::math::StateVariable * > *arg1 = (std::vector< cmf::math::StateVariable * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< cmf::math::StateVariable * >::size_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_cmf__math__StateVariable_p_std__allocatorT_cmf__math__StateVariable_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "svVector_capacity" "', argument " "1"" of type '" "std::vector< cmf::math::StateVariable * > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< cmf::math::StateVariable * > * >(argp1);
  {
    try {
      result = ((std::vector< cmf::math::StateVariable * > const *)arg1)->capacity();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_svVector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< cmf::math::StateVariable * > *arg1 = (std::vector< cmf::math::StateVariable * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_cmf__math__StateVariable_p_std__allocatorT_cmf__math__StateVariable_p_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_svVector" "', argument " "1"" of type '" "std::vector< cmf::math::StateVariable * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< cmf::math::StateVariable * > * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *svVector_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_cmf__math__StateVariable_p_std__allocatorT_cmf__math__StateVariable_p_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *svVector_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_StateVariable_Derivate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::math::StateVariable *arg1 = (cmf::math::StateVariable *) 0 ;
  cmf::math::Time *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< cmf::math::StateVariable > tempshared1 ;
  std::tr1::shared_ptr< cmf::math::StateVariable > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  real result;
  
  if (!SWIG_Python_UnpackTuple(args,"StateVariable_Derivate",2,2,swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__math__StateVariable_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StateVariable_Derivate" "', argument " "1"" of type '" "cmf::math::StateVariable *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  cmf::math::StateVariable > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  cmf::math::StateVariable > * >(argp1);
      arg1 = const_cast< cmf::math::StateVariable * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  cmf::math::StateVariable > * >(argp1);
      arg1 = const_cast< cmf::math::StateVariable * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cmf__math__Time,  0  | SWIG_POINTER_IMPLICIT_CONV);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "StateVariable_Derivate" "', argument " "2"" of type '" "cmf::math::Time const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StateVariable_Derivate" "', argument " "2"" of type '" "cmf::math::Time const &""'"); 
  }
  arg2 = reinterpret_cast< cmf::math::Time * >(argp2);
  {
    try {
      result = (real)(arg1)->Derivate((cmf::math::Time const &)*arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_StateVariable_StateIsChanged(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::math::StateVariable *arg1 = (cmf::math::StateVariable *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< cmf::math::StateVariable > tempshared1 ;
  std::tr1::shared_ptr< cmf::math::StateVariable > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__math__StateVariable_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StateVariable_StateIsChanged" "', argument " "1"" of type '" "cmf::math::StateVariable *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  cmf::math::StateVariable > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  cmf::math::StateVariable > * >(argp1);
      arg1 = const_cast< cmf::math::StateVariable * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  cmf::math::StateVariable > * >(argp1);
      arg1 = const_cast< cmf::math::StateVariable * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      result = (bool)(arg1)->StateIsChanged();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StateVariable_state_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::math::StateVariable *arg1 = (cmf::math::StateVariable *) 0 ;
  real arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< cmf::math::StateVariable > tempshared1 ;
  std::tr1::shared_ptr< cmf::math::StateVariable > *smartarg1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"StateVariable_state_set",2,2,swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__math__StateVariable_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StateVariable_state_set" "', argument " "1"" of type '" "cmf::math::StateVariable *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  cmf::math::StateVariable > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  cmf::math::StateVariable > * >(argp1);
      arg1 = const_cast< cmf::math::StateVariable * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  cmf::math::StateVariable > * >(argp1);
      arg1 = const_cast< cmf::math::StateVariable * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StateVariable_state_set" "', argument " "2"" of type '" "real""'");
  } 
  arg2 = static_cast< real >(val2);
  {
    try {
      cmf_math_StateVariable_state_set(arg1,arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StateVariable_state_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::math::StateVariable *arg1 = (cmf::math::StateVariable *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< cmf::math::StateVariable > tempshared1 ;
  std::tr1::shared_ptr< cmf::math::StateVariable > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  real result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__math__StateVariable_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StateVariable_state_get" "', argument " "1"" of type '" "cmf::math::StateVariable *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  cmf::math::StateVariable > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  cmf::math::StateVariable > * >(argp1);
      arg1 = const_cast< cmf::math::StateVariable * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  cmf::math::StateVariable > * >(argp1);
      arg1 = const_cast< cmf::math::StateVariable * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      result = (real)cmf_math_StateVariable_state_get(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_StateVariable(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::math::StateVariable *arg1 = (cmf::math::StateVariable *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< cmf::math::StateVariable > tempshared1 ;
  std::tr1::shared_ptr< cmf::math::StateVariable > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__math__StateVariable_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_StateVariable" "', argument " "1"" of type '" "cmf::math::StateVariable *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  cmf::math::StateVariable > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  cmf::math::StateVariable > * >(argp1);
      arg1 = const_cast< cmf::math::StateVariable * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  cmf::math::StateVariable > * >(argp1);
      arg1 = const_cast< cmf::math::StateVariable * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *StateVariable_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__tr1__shared_ptrT_cmf__math__StateVariable_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_StateVariableVector_use_OpenMP_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::math::StateVariableVector *arg1 = (cmf::math::StateVariableVector *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"StateVariableVector_use_OpenMP_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__math__StateVariableVector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StateVariableVector_use_OpenMP_set" "', argument " "1"" of type '" "cmf::math::StateVariableVector *""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::StateVariableVector * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StateVariableVector_use_OpenMP_set" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  if (arg1) (arg1)->use_OpenMP = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StateVariableVector_use_OpenMP_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::math::StateVariableVector *arg1 = (cmf::math::StateVariableVector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__math__StateVariableVector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StateVariableVector_use_OpenMP_get" "', argument " "1"" of type '" "cmf::math::StateVariableVector *""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::StateVariableVector * >(argp1);
  result = (bool) ((arg1)->use_OpenMP);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StateVariableVector_CopyStates__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  cmf::math::StateVariableVector *arg1 = (cmf::math::StateVariableVector *) 0 ;
  cmf::math::num_array *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__math__StateVariableVector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StateVariableVector_CopyStates" "', argument " "1"" of type '" "cmf::math::StateVariableVector const *""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::StateVariableVector * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cmf__math__num_array,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "StateVariableVector_CopyStates" "', argument " "2"" of type '" "cmf::math::num_array &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StateVariableVector_CopyStates" "', argument " "2"" of type '" "cmf::math::num_array &""'"); 
  }
  arg2 = reinterpret_cast< cmf::math::num_array * >(argp2);
  {
    try {
      ((cmf::math::StateVariableVector const *)arg1)->CopyStates(*arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StateVariableVector_CopyStates__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  cmf::math::StateVariableVector *arg1 = (cmf::math::StateVariableVector *) 0 ;
  real *arg2 = (real *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__math__StateVariableVector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StateVariableVector_CopyStates" "', argument " "1"" of type '" "cmf::math::StateVariableVector const *""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::StateVariableVector * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "StateVariableVector_CopyStates" "', argument " "2"" of type '" "real *""'"); 
  }
  arg2 = reinterpret_cast< real * >(argp2);
  {
    try {
      ((cmf::math::StateVariableVector const *)arg1)->CopyStates(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StateVariableVector_CopyStates(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"StateVariableVector_CopyStates",0,2,argv))) SWIG_fail;
  --argc;
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (argc == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_cmf__math__StateVariableVector, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_cmf__math__num_array, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (argc == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_cmf__math__StateVariableVector, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_double, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      return _wrap_StateVariableVector_CopyStates__SWIG_0(self, argc, argv);
    case 2:
      return _wrap_StateVariableVector_CopyStates__SWIG_1(self, argc, argv);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'StateVariableVector_CopyStates'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    CopyStates(cmf::math::StateVariableVector const *,cmf::math::num_array &)\n"
    "    CopyStates(cmf::math::StateVariableVector const *,real *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_StateVariableVector_SetStates__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  cmf::math::StateVariableVector *arg1 = (cmf::math::StateVariableVector *) 0 ;
  cmf::math::num_array *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__math__StateVariableVector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StateVariableVector_SetStates" "', argument " "1"" of type '" "cmf::math::StateVariableVector *""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::StateVariableVector * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cmf__math__num_array,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "StateVariableVector_SetStates" "', argument " "2"" of type '" "cmf::math::num_array const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StateVariableVector_SetStates" "', argument " "2"" of type '" "cmf::math::num_array const &""'"); 
  }
  arg2 = reinterpret_cast< cmf::math::num_array * >(argp2);
  {
    try {
      (arg1)->SetStates((cmf::math::num_array const &)*arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StateVariableVector_SetStates__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  cmf::math::StateVariableVector *arg1 = (cmf::math::StateVariableVector *) 0 ;
  real *arg2 = (real *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__math__StateVariableVector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StateVariableVector_SetStates" "', argument " "1"" of type '" "cmf::math::StateVariableVector *""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::StateVariableVector * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "StateVariableVector_SetStates" "', argument " "2"" of type '" "real *""'"); 
  }
  arg2 = reinterpret_cast< real * >(argp2);
  {
    try {
      (arg1)->SetStates(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StateVariableVector_SetStates(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"StateVariableVector_SetStates",0,2,argv))) SWIG_fail;
  --argc;
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (argc == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_cmf__math__StateVariableVector, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_cmf__math__num_array, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (argc == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_cmf__math__StateVariableVector, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_double, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      return _wrap_StateVariableVector_SetStates__SWIG_0(self, argc, argv);
    case 2:
      return _wrap_StateVariableVector_SetStates__SWIG_1(self, argc, argv);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'StateVariableVector_SetStates'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    SetStates(cmf::math::StateVariableVector *,cmf::math::num_array const &)\n"
    "    SetStates(cmf::math::StateVariableVector *,real *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_StateVariableVector___iadd__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::math::StateVariableVector *arg1 = (cmf::math::StateVariableVector *) 0 ;
  cmf::math::num_array *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  cmf::math::StateVariableVector *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args,"StateVariableVector___iadd__",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__math__StateVariableVector, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StateVariableVector___iadd__" "', argument " "1"" of type '" "cmf::math::StateVariableVector *""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::StateVariableVector * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cmf__math__num_array,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "StateVariableVector___iadd__" "', argument " "2"" of type '" "cmf::math::num_array const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StateVariableVector___iadd__" "', argument " "2"" of type '" "cmf::math::num_array const &""'"); 
  }
  arg2 = reinterpret_cast< cmf::math::num_array * >(argp2);
  {
    try {
      result = (cmf::math::StateVariableVector *) &(arg1)->operator +=((cmf::math::num_array const &)*arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmf__math__StateVariableVector, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StateVariableVector_CopyDerivs__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  cmf::math::StateVariableVector *arg1 = (cmf::math::StateVariableVector *) 0 ;
  cmf::math::Time arg2 ;
  cmf::math::num_array *arg3 = 0 ;
  real arg4 = (real) 1 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__math__StateVariableVector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StateVariableVector_CopyDerivs" "', argument " "1"" of type '" "cmf::math::StateVariableVector const *""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::StateVariableVector * >(argp1);
  {
    arg2 = convert_datetime_to_cmftime(swig_obj[1]);    
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_cmf__math__num_array,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "StateVariableVector_CopyDerivs" "', argument " "3"" of type '" "cmf::math::num_array &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StateVariableVector_CopyDerivs" "', argument " "3"" of type '" "cmf::math::num_array &""'"); 
  }
  arg3 = reinterpret_cast< cmf::math::num_array * >(argp3);
  if (swig_obj[3]) {
    ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "StateVariableVector_CopyDerivs" "', argument " "4"" of type '" "real""'");
    } 
    arg4 = static_cast< real >(val4);
  }
  {
    try {
      ((cmf::math::StateVariableVector const *)arg1)->CopyDerivs(arg2,*arg3,arg4);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StateVariableVector_CopyDerivs__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  cmf::math::StateVariableVector *arg1 = (cmf::math::StateVariableVector *) 0 ;
  cmf::math::Time arg2 ;
  real *arg3 = (real *) 0 ;
  real arg4 = (real) 1 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__math__StateVariableVector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StateVariableVector_CopyDerivs" "', argument " "1"" of type '" "cmf::math::StateVariableVector const *""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::StateVariableVector * >(argp1);
  {
    arg2 = convert_datetime_to_cmftime(swig_obj[1]);    
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "StateVariableVector_CopyDerivs" "', argument " "3"" of type '" "real *""'"); 
  }
  arg3 = reinterpret_cast< real * >(argp3);
  if (swig_obj[3]) {
    ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "StateVariableVector_CopyDerivs" "', argument " "4"" of type '" "real""'");
    } 
    arg4 = static_cast< real >(val4);
  }
  {
    try {
      ((cmf::math::StateVariableVector const *)arg1)->CopyDerivs(arg2,arg3,arg4);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StateVariableVector_CopyDerivs(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"StateVariableVector_CopyDerivs",0,4,argv))) SWIG_fail;
  --argc;
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if ((argc >= 3) && (argc <= 4)) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_cmf__math__StateVariableVector, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          void * pt;    
          int res=SWIG_ConvertPtr(argv[1],&pt,SWIGTYPE_p_cmf__math__Time,0);
          _v=SWIG_IsOK(res) || PyDateTime_Check(argv[1]) || PyDelta_Check(argv[1]) || PyDate_Check(argv[1]);
        }
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_cmf__math__num_array, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (argc > 3) {
        {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
        }
        if (!_v) goto check_1;
        _ranki += _v*_pi;
        _rankm += _pi;
        _pi *= SWIG_MAXCASTRANK;
      }
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if ((argc >= 3) && (argc <= 4)) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_cmf__math__StateVariableVector, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          void * pt;    
          int res=SWIG_ConvertPtr(argv[1],&pt,SWIGTYPE_p_cmf__math__Time,0);
          _v=SWIG_IsOK(res) || PyDateTime_Check(argv[1]) || PyDelta_Check(argv[1]) || PyDate_Check(argv[1]);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_double, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (argc > 3) {
        {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
        }
        if (!_v) goto check_2;
        _ranki += _v*_pi;
        _rankm += _pi;
        _pi *= SWIG_MAXCASTRANK;
      }
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      return _wrap_StateVariableVector_CopyDerivs__SWIG_0(self, argc, argv);
    case 2:
      return _wrap_StateVariableVector_CopyDerivs__SWIG_1(self, argc, argv);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'StateVariableVector_CopyDerivs'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    CopyDerivs(cmf::math::StateVariableVector const *,cmf::math::Time,cmf::math::num_array &,real)\n"
    "    CopyDerivs(cmf::math::StateVariableVector const *,cmf::math::Time,real *,real)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_StateVariableVector_GetStates(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::math::StateVariableVector *arg1 = (cmf::math::StateVariableVector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  cmf::math::num_array result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__math__StateVariableVector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StateVariableVector_GetStates" "', argument " "1"" of type '" "cmf::math::StateVariableVector const *""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::StateVariableVector * >(argp1);
  {
    try {
      result = ((cmf::math::StateVariableVector const *)arg1)->GetStates();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj((new cmf::math::num_array(static_cast< const cmf::math::num_array& >(result))), SWIGTYPE_p_cmf__math__num_array, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StateVariableVector_GetDerivs(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::math::StateVariableVector *arg1 = (cmf::math::StateVariableVector *) 0 ;
  cmf::math::Time arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  cmf::math::num_array result;
  
  if (!SWIG_Python_UnpackTuple(args,"StateVariableVector_GetDerivs",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__math__StateVariableVector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StateVariableVector_GetDerivs" "', argument " "1"" of type '" "cmf::math::StateVariableVector const *""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::StateVariableVector * >(argp1);
  {
    arg2 = convert_datetime_to_cmftime(swig_obj[1]);    
  }
  {
    try {
      result = ((cmf::math::StateVariableVector const *)arg1)->GetDerivs(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj((new cmf::math::num_array(static_cast< const cmf::math::num_array& >(result))), SWIGTYPE_p_cmf__math__num_array, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_StateVariableVector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::math::StateVariableVector *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args,"new_StateVariableVector",0,0,0)) SWIG_fail;
  {
    try {
      result = (cmf::math::StateVariableVector *)new cmf::math::StateVariableVector();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmf__math__StateVariableVector, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_StateVariableVector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::math::StateVariableVector *arg1 = (cmf::math::StateVariableVector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__math__StateVariableVector, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_StateVariableVector" "', argument " "1"" of type '" "cmf::math::StateVariableVector *""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::StateVariableVector * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *StateVariableVector_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_cmf__math__StateVariableVector, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *StateVariableVector_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_StateVariableOwner_AddStateVariables(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::math::StateVariableOwner *arg1 = (cmf::math::StateVariableOwner *) 0 ;
  cmf::math::StateVariableVector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"StateVariableOwner_AddStateVariables",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__math__StateVariableOwner, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StateVariableOwner_AddStateVariables" "', argument " "1"" of type '" "cmf::math::StateVariableOwner *""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::StateVariableOwner * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cmf__math__StateVariableVector,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "StateVariableOwner_AddStateVariables" "', argument " "2"" of type '" "cmf::math::StateVariableVector &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StateVariableOwner_AddStateVariables" "', argument " "2"" of type '" "cmf::math::StateVariableVector &""'"); 
  }
  arg2 = reinterpret_cast< cmf::math::StateVariableVector * >(argp2);
  {
    try {
      (arg1)->AddStateVariables(*arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_StateVariableOwner(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::math::StateVariableOwner *arg1 = (cmf::math::StateVariableOwner *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__math__StateVariableOwner, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_StateVariableOwner" "', argument " "1"" of type '" "cmf::math::StateVariableOwner *""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::StateVariableOwner * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *StateVariableOwner_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_cmf__math__StateVariableOwner, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_Integrator_Tag_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::math::Integrator *arg1 = (cmf::math::Integrator *) 0 ;
  char arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"Integrator_Tag_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__math__Integrator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Integrator_Tag_set" "', argument " "1"" of type '" "cmf::math::Integrator *""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::Integrator * >(argp1);
  ecode2 = SWIG_AsVal_char(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Integrator_Tag_set" "', argument " "2"" of type '" "char""'");
  } 
  arg2 = static_cast< char >(val2);
  if (arg1) (arg1)->Tag = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Integrator_Tag_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::math::Integrator *arg1 = (cmf::math::Integrator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  char result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__math__Integrator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Integrator_Tag_get" "', argument " "1"" of type '" "cmf::math::Integrator *""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::Integrator * >(argp1);
  result = (char) ((arg1)->Tag);
  resultobj = SWIG_From_char(static_cast< char >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Integrator_UseEulerAtTmin_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::math::Integrator *arg1 = (cmf::math::Integrator *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"Integrator_UseEulerAtTmin_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__math__Integrator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Integrator_UseEulerAtTmin_set" "', argument " "1"" of type '" "cmf::math::Integrator *""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::Integrator * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Integrator_UseEulerAtTmin_set" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  if (arg1) (arg1)->UseEulerAtTmin = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Integrator_UseEulerAtTmin_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::math::Integrator *arg1 = (cmf::math::Integrator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__math__Integrator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Integrator_UseEulerAtTmin_get" "', argument " "1"" of type '" "cmf::math::Integrator *""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::Integrator * >(argp1);
  result = (bool) ((arg1)->UseEulerAtTmin);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Integrator_use_OpenMP_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::math::Integrator *arg1 = (cmf::math::Integrator *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"Integrator_use_OpenMP_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__math__Integrator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Integrator_use_OpenMP_set" "', argument " "1"" of type '" "cmf::math::Integrator *""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::Integrator * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Integrator_use_OpenMP_set" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  if (arg1) (arg1)->use_OpenMP = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Integrator_use_OpenMP_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::math::Integrator *arg1 = (cmf::math::Integrator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__math__Integrator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Integrator_use_OpenMP_get" "', argument " "1"" of type '" "cmf::math::Integrator *""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::Integrator * >(argp1);
  result = (bool) ((arg1)->use_OpenMP);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Integrator_count(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::math::Integrator *arg1 = (cmf::math::Integrator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__math__Integrator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Integrator_count" "', argument " "1"" of type '" "cmf::math::Integrator const *""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::Integrator * >(argp1);
  {
    try {
      result = (int)((cmf::math::Integrator const *)arg1)->count();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Integrator_state__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  cmf::math::Integrator *arg1 = (cmf::math::Integrator *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  real result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__math__Integrator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Integrator_state" "', argument " "1"" of type '" "cmf::math::Integrator const *""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::Integrator * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Integrator_state" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (real)((cmf::math::Integrator const *)arg1)->state(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Integrator_state__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  cmf::math::Integrator *arg1 = (cmf::math::Integrator *) 0 ;
  int arg2 ;
  real arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__math__Integrator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Integrator_state" "', argument " "1"" of type '" "cmf::math::Integrator *""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::Integrator * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Integrator_state" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Integrator_state" "', argument " "3"" of type '" "real""'");
  } 
  arg3 = static_cast< real >(val3);
  {
    try {
      (arg1)->state(arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Integrator_state(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Integrator_state",0,3,argv))) SWIG_fail;
  --argc;
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (argc == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_cmf__math__Integrator, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int(argv[1], NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (argc == 3) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_cmf__math__Integrator, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int(argv[1], NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      return _wrap_Integrator_state__SWIG_0(self, argc, argv);
    case 2:
      return _wrap_Integrator_state__SWIG_1(self, argc, argv);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'Integrator_state'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    state(cmf::math::Integrator const *,int)\n"
    "    state(cmf::math::Integrator *,int,real)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Integrator_AddStatesFromOwner(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::math::Integrator *arg1 = (cmf::math::Integrator *) 0 ;
  cmf::math::StateVariableOwner *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"Integrator_AddStatesFromOwner",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__math__Integrator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Integrator_AddStatesFromOwner" "', argument " "1"" of type '" "cmf::math::Integrator *""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::Integrator * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cmf__math__StateVariableOwner,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Integrator_AddStatesFromOwner" "', argument " "2"" of type '" "cmf::math::StateVariableOwner &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Integrator_AddStatesFromOwner" "', argument " "2"" of type '" "cmf::math::StateVariableOwner &""'"); 
  }
  arg2 = reinterpret_cast< cmf::math::StateVariableOwner * >(argp2);
  {
    try {
      (arg1)->AddStatesFromOwner(*arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Integrator_AddState(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::math::Integrator *arg1 = (cmf::math::Integrator *) 0 ;
  cmf::math::StateVariable *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  std::tr1::shared_ptr< cmf::math::StateVariable > tempshared2 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"Integrator_AddState",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__math__Integrator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Integrator_AddState" "', argument " "1"" of type '" "cmf::math::Integrator *""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::Integrator * >(argp1);
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(swig_obj[1], &argp2, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__math__StateVariable_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Integrator_AddState" "', argument " "2"" of type '" "cmf::math::StateVariable &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Integrator_AddState" "', argument " "2"" of type '" "cmf::math::StateVariable &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared2 = *reinterpret_cast< std::tr1::shared_ptr<  cmf::math::StateVariable > * >(argp2);
      delete reinterpret_cast< std::tr1::shared_ptr<  cmf::math::StateVariable > * >(argp2);
      arg2 = const_cast< cmf::math::StateVariable * >(tempshared2.get());
    } else {
      arg2 = const_cast< cmf::math::StateVariable * >(reinterpret_cast< std::tr1::shared_ptr<  cmf::math::StateVariable > * >(argp2)->get());
    }
  }
  {
    try {
      (arg1)->AddState(*arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Integrator_ModelTime__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  cmf::math::Integrator *arg1 = (cmf::math::Integrator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cmf::math::Time result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__math__Integrator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Integrator_ModelTime" "', argument " "1"" of type '" "cmf::math::Integrator const *""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::Integrator * >(argp1);
  {
    try {
      result = ((cmf::math::Integrator const *)arg1)->ModelTime();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj((new cmf::math::Time(static_cast< const cmf::math::Time& >(result))), SWIGTYPE_p_cmf__math__Time, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Integrator_ModelTime__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  cmf::math::Integrator *arg1 = (cmf::math::Integrator *) 0 ;
  cmf::math::Time arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__math__Integrator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Integrator_ModelTime" "', argument " "1"" of type '" "cmf::math::Integrator *""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::Integrator * >(argp1);
  {
    arg2 = convert_datetime_to_cmftime(swig_obj[1]);    
  }
  {
    try {
      (arg1)->ModelTime(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Integrator_ModelTime(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Integrator_ModelTime",0,2,argv))) SWIG_fail;
  --argc;
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (argc == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_cmf__math__Integrator, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (argc == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_cmf__math__Integrator, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          void * pt;    
          int res=SWIG_ConvertPtr(argv[1],&pt,SWIGTYPE_p_cmf__math__Time,0);
          _v=SWIG_IsOK(res) || PyDateTime_Check(argv[1]) || PyDelta_Check(argv[1]) || PyDate_Check(argv[1]);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      return _wrap_Integrator_ModelTime__SWIG_0(self, argc, argv);
    case 2:
      return _wrap_Integrator_ModelTime__SWIG_1(self, argc, argv);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'Integrator_ModelTime'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ModelTime(cmf::math::Integrator const *)\n"
    "    ModelTime(cmf::math::Integrator *,cmf::math::Time)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Integrator_TimeStep(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::math::Integrator *arg1 = (cmf::math::Integrator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  cmf::math::Time result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__math__Integrator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Integrator_TimeStep" "', argument " "1"" of type '" "cmf::math::Integrator const *""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::Integrator * >(argp1);
  {
    try {
      result = ((cmf::math::Integrator const *)arg1)->TimeStep();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj((new cmf::math::Time(static_cast< const cmf::math::Time& >(result))), SWIGTYPE_p_cmf__math__Time, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Integrator_NextTimeStep__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  cmf::math::Integrator *arg1 = (cmf::math::Integrator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cmf::math::Time result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__math__Integrator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Integrator_NextTimeStep" "', argument " "1"" of type '" "cmf::math::Integrator const *""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::Integrator * >(argp1);
  {
    try {
      result = ((cmf::math::Integrator const *)arg1)->NextTimeStep();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj((new cmf::math::Time(static_cast< const cmf::math::Time& >(result))), SWIGTYPE_p_cmf__math__Time, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Integrator_NextTimeStep__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  cmf::math::Integrator *arg1 = (cmf::math::Integrator *) 0 ;
  cmf::math::Time arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__math__Integrator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Integrator_NextTimeStep" "', argument " "1"" of type '" "cmf::math::Integrator *""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::Integrator * >(argp1);
  {
    arg2 = convert_datetime_to_cmftime(swig_obj[1]);    
  }
  {
    try {
      (arg1)->NextTimeStep(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Integrator_NextTimeStep(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Integrator_NextTimeStep",0,2,argv))) SWIG_fail;
  --argc;
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (argc == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_cmf__math__Integrator, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (argc == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_cmf__math__Integrator, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          void * pt;    
          int res=SWIG_ConvertPtr(argv[1],&pt,SWIGTYPE_p_cmf__math__Time,0);
          _v=SWIG_IsOK(res) || PyDateTime_Check(argv[1]) || PyDelta_Check(argv[1]) || PyDate_Check(argv[1]);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      return _wrap_Integrator_NextTimeStep__SWIG_0(self, argc, argv);
    case 2:
      return _wrap_Integrator_NextTimeStep__SWIG_1(self, argc, argv);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'Integrator_NextTimeStep'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    NextTimeStep(cmf::math::Integrator const *)\n"
    "    NextTimeStep(cmf::math::Integrator *,cmf::math::Time)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Integrator_MinTimestep(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::math::Integrator *arg1 = (cmf::math::Integrator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  cmf::math::Time result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__math__Integrator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Integrator_MinTimestep" "', argument " "1"" of type '" "cmf::math::Integrator const *""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::Integrator * >(argp1);
  {
    try {
      result = ((cmf::math::Integrator const *)arg1)->MinTimestep();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj((new cmf::math::Time(static_cast< const cmf::math::Time& >(result))), SWIGTYPE_p_cmf__math__Time, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Integrator_Iterations(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::math::Integrator *arg1 = (cmf::math::Integrator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__math__Integrator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Integrator_Iterations" "', argument " "1"" of type '" "cmf::math::Integrator const *""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::Integrator * >(argp1);
  {
    try {
      result = (int)((cmf::math::Integrator const *)arg1)->Iterations();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Integrator_ResetIterations(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::math::Integrator *arg1 = (cmf::math::Integrator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__math__Integrator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Integrator_ResetIterations" "', argument " "1"" of type '" "cmf::math::Integrator *""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::Integrator * >(argp1);
  {
    try {
      (arg1)->ResetIterations();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Integrator_Reset(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::math::Integrator *arg1 = (cmf::math::Integrator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__math__Integrator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Integrator_Reset" "', argument " "1"" of type '" "cmf::math::Integrator *""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::Integrator * >(argp1);
  {
    try {
      (arg1)->Reset();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Integrator_Copy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::math::Integrator *arg1 = (cmf::math::Integrator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  cmf::math::Integrator *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__math__Integrator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Integrator_Copy" "', argument " "1"" of type '" "cmf::math::Integrator const *""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::Integrator * >(argp1);
  {
    try {
      result = (cmf::math::Integrator *)((cmf::math::Integrator const *)arg1)->Copy();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmf__math__Integrator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Integrator_Integrate__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  cmf::math::Integrator *arg1 = (cmf::math::Integrator *) 0 ;
  cmf::math::Time arg2 ;
  cmf::math::Time arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__math__Integrator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Integrator_Integrate" "', argument " "1"" of type '" "cmf::math::Integrator *""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::Integrator * >(argp1);
  {
    arg2 = convert_datetime_to_cmftime(swig_obj[1]);    
  }
  {
    arg3 = convert_datetime_to_cmftime(swig_obj[2]);    
  }
  {
    try {
      result = (int)(arg1)->Integrate(arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Integrator_Integrate__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  cmf::math::Integrator *arg1 = (cmf::math::Integrator *) 0 ;
  cmf::math::Time arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__math__Integrator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Integrator_Integrate" "', argument " "1"" of type '" "cmf::math::Integrator *""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::Integrator * >(argp1);
  {
    arg2 = convert_datetime_to_cmftime(swig_obj[1]);    
  }
  {
    try {
      result = (int)(arg1)->Integrate(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Integrator_Integrate(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Integrator_Integrate",0,3,argv))) SWIG_fail;
  --argc;
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (argc == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_cmf__math__Integrator, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          void * pt;    
          int res=SWIG_ConvertPtr(argv[1],&pt,SWIGTYPE_p_cmf__math__Time,0);
          _v=SWIG_IsOK(res) || PyDateTime_Check(argv[1]) || PyDelta_Check(argv[1]) || PyDate_Check(argv[1]);
        }
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (argc == 3) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_cmf__math__Integrator, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          void * pt;    
          int res=SWIG_ConvertPtr(argv[1],&pt,SWIGTYPE_p_cmf__math__Time,0);
          _v=SWIG_IsOK(res) || PyDateTime_Check(argv[1]) || PyDelta_Check(argv[1]) || PyDate_Check(argv[1]);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          void * pt;    
          int res=SWIG_ConvertPtr(argv[2],&pt,SWIGTYPE_p_cmf__math__Time,0);
          _v=SWIG_IsOK(res) || PyDateTime_Check(argv[2]) || PyDelta_Check(argv[2]) || PyDate_Check(argv[2]);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      return _wrap_Integrator_Integrate__SWIG_1(self, argc, argv);
    case 2:
      return _wrap_Integrator_Integrate__SWIG_0(self, argc, argv);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'Integrator_Integrate'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Integrate(cmf::math::Integrator *,cmf::math::Time,cmf::math::Time)\n"
    "    Integrate(cmf::math::Integrator *,cmf::math::Time)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Integrator_IntegrateUntil__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  cmf::math::Integrator *arg1 = (cmf::math::Integrator *) 0 ;
  cmf::math::Time arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__math__Integrator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Integrator_IntegrateUntil" "', argument " "1"" of type '" "cmf::math::Integrator *""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::Integrator * >(argp1);
  {
    arg2 = convert_datetime_to_cmftime(swig_obj[1]);    
  }
  {
    try {
      (arg1)->IntegrateUntil(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Integrator_IntegrateUntil__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  cmf::math::Integrator *arg1 = (cmf::math::Integrator *) 0 ;
  cmf::math::Time arg2 ;
  cmf::math::Time arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__math__Integrator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Integrator_IntegrateUntil" "', argument " "1"" of type '" "cmf::math::Integrator *""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::Integrator * >(argp1);
  {
    arg2 = convert_datetime_to_cmftime(swig_obj[1]);    
  }
  {
    arg3 = convert_datetime_to_cmftime(swig_obj[2]);    
  }
  {
    try {
      (arg1)->IntegrateUntil(arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Integrator_IntegrateUntil(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Integrator_IntegrateUntil",0,3,argv))) SWIG_fail;
  --argc;
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (argc == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_cmf__math__Integrator, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          void * pt;    
          int res=SWIG_ConvertPtr(argv[1],&pt,SWIGTYPE_p_cmf__math__Time,0);
          _v=SWIG_IsOK(res) || PyDateTime_Check(argv[1]) || PyDelta_Check(argv[1]) || PyDate_Check(argv[1]);
        }
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (argc == 3) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_cmf__math__Integrator, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          void * pt;    
          int res=SWIG_ConvertPtr(argv[1],&pt,SWIGTYPE_p_cmf__math__Time,0);
          _v=SWIG_IsOK(res) || PyDateTime_Check(argv[1]) || PyDelta_Check(argv[1]) || PyDate_Check(argv[1]);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          void * pt;    
          int res=SWIG_ConvertPtr(argv[2],&pt,SWIGTYPE_p_cmf__math__Time,0);
          _v=SWIG_IsOK(res) || PyDateTime_Check(argv[2]) || PyDelta_Check(argv[2]) || PyDate_Check(argv[2]);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      return _wrap_Integrator_IntegrateUntil__SWIG_0(self, argc, argv);
    case 2:
      return _wrap_Integrator_IntegrateUntil__SWIG_1(self, argc, argv);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'Integrator_IntegrateUntil'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    IntegrateUntil(cmf::math::Integrator *,cmf::math::Time)\n"
    "    IntegrateUntil(cmf::math::Integrator *,cmf::math::Time,cmf::math::Time)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Integrator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::math::Integrator *arg1 = (cmf::math::Integrator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__math__Integrator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Integrator" "', argument " "1"" of type '" "cmf::math::Integrator *""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::Integrator * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Integrator_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_cmf__math__Integrator, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_BDF2_get_error_position(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::math::BDF2 *arg1 = (cmf::math::BDF2 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__math__BDF2, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BDF2_get_error_position" "', argument " "1"" of type '" "cmf::math::BDF2 const *""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::BDF2 * >(argp1);
  {
    try {
      result = (int)((cmf::math::BDF2 const *)arg1)->get_error_position();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_BDF2__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  cmf::math::StateVariableVector *arg1 = 0 ;
  real arg2 = (real) 1e-9 ;
  cmf::math::Time arg3 = (cmf::math::Time) cmf::math::Time::Milliseconds(10) ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  cmf::math::BDF2 *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cmf__math__StateVariableVector,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_BDF2" "', argument " "1"" of type '" "cmf::math::StateVariableVector const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_BDF2" "', argument " "1"" of type '" "cmf::math::StateVariableVector const &""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::StateVariableVector * >(argp1);
  if (swig_obj[1]) {
    ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_BDF2" "', argument " "2"" of type '" "real""'");
    } 
    arg2 = static_cast< real >(val2);
  }
  if (swig_obj[2]) {
    {
      arg3 = convert_datetime_to_cmftime(swig_obj[2]);    
    }
  }
  {
    try {
      result = (cmf::math::BDF2 *)new cmf::math::BDF2((cmf::math::StateVariableVector const &)*arg1,arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmf__math__BDF2, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_BDF2__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  real arg1 = (real) 1e-9 ;
  cmf::math::Time arg2 = (cmf::math::Time) cmf::math::Time::Milliseconds(10) ;
  double val1 ;
  int ecode1 = 0 ;
  cmf::math::BDF2 *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 2)) SWIG_fail;
  if (swig_obj[0]) {
    ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_BDF2" "', argument " "1"" of type '" "real""'");
    } 
    arg1 = static_cast< real >(val1);
  }
  if (swig_obj[1]) {
    {
      arg2 = convert_datetime_to_cmftime(swig_obj[1]);    
    }
  }
  {
    try {
      result = (cmf::math::BDF2 *)new cmf::math::BDF2(arg1,arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmf__math__BDF2, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_BDF2__SWIG_2(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  cmf::math::StateVariableOwner *arg1 = 0 ;
  real arg2 = (real) 1e-9 ;
  cmf::math::Time arg3 = (cmf::math::Time) cmf::math::Time::Milliseconds(10) ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  cmf::math::BDF2 *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cmf__math__StateVariableOwner,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_BDF2" "', argument " "1"" of type '" "cmf::math::StateVariableOwner &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_BDF2" "', argument " "1"" of type '" "cmf::math::StateVariableOwner &""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::StateVariableOwner * >(argp1);
  if (swig_obj[1]) {
    ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_BDF2" "', argument " "2"" of type '" "real""'");
    } 
    arg2 = static_cast< real >(val2);
  }
  if (swig_obj[2]) {
    {
      arg3 = convert_datetime_to_cmftime(swig_obj[2]);    
    }
  }
  {
    try {
      result = (cmf::math::BDF2 *)new cmf::math::BDF2(*arg1,arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmf__math__BDF2, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_BDF2__SWIG_3(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  cmf::math::Integrator *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cmf::math::BDF2 *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cmf__math__Integrator,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_BDF2" "', argument " "1"" of type '" "cmf::math::Integrator const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_BDF2" "', argument " "1"" of type '" "cmf::math::Integrator const &""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::Integrator * >(argp1);
  {
    try {
      result = (cmf::math::BDF2 *)new cmf::math::BDF2((cmf::math::Integrator const &)*arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmf__math__BDF2, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_BDF2(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"new_BDF2",0,3,argv))) SWIG_fail;
  --argc;
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if ((argc >= 0) && (argc <= 2)) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      if (argc > 0) {
        {
          {
            int res = SWIG_AsVal_double(argv[0], NULL);
            _v = SWIG_CheckState(res);
          }
        }
        if (!_v) goto check_1;
        _ranki += _v*_pi;
        _rankm += _pi;
        _pi *= SWIG_MAXCASTRANK;
        if (argc > 1) {
          {
            {
              void * pt;    
              int res=SWIG_ConvertPtr(argv[1],&pt,SWIGTYPE_p_cmf__math__Time,0);
              _v=SWIG_IsOK(res) || PyDateTime_Check(argv[1]) || PyDelta_Check(argv[1]) || PyDate_Check(argv[1]);
            }
          }
          if (!_v) goto check_1;
          _ranki += _v*_pi;
          _rankm += _pi;
          _pi *= SWIG_MAXCASTRANK;
        }
      }
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if ((argc >= 1) && (argc <= 3)) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_cmf__math__StateVariableVector, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (argc > 1) {
        {
          {
            int res = SWIG_AsVal_double(argv[1], NULL);
            _v = SWIG_CheckState(res);
          }
        }
        if (!_v) goto check_2;
        _ranki += _v*_pi;
        _rankm += _pi;
        _pi *= SWIG_MAXCASTRANK;
        if (argc > 2) {
          {
            {
              void * pt;    
              int res=SWIG_ConvertPtr(argv[2],&pt,SWIGTYPE_p_cmf__math__Time,0);
              _v=SWIG_IsOK(res) || PyDateTime_Check(argv[2]) || PyDelta_Check(argv[2]) || PyDate_Check(argv[2]);
            }
          }
          if (!_v) goto check_2;
          _ranki += _v*_pi;
          _rankm += _pi;
          _pi *= SWIG_MAXCASTRANK;
        }
      }
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
    if ((argc >= 1) && (argc <= 3)) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_cmf__math__StateVariableOwner, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (argc > 1) {
        {
          {
            int res = SWIG_AsVal_double(argv[1], NULL);
            _v = SWIG_CheckState(res);
          }
        }
        if (!_v) goto check_3;
        _ranki += _v*_pi;
        _rankm += _pi;
        _pi *= SWIG_MAXCASTRANK;
        if (argc > 2) {
          {
            {
              void * pt;    
              int res=SWIG_ConvertPtr(argv[2],&pt,SWIGTYPE_p_cmf__math__Time,0);
              _v=SWIG_IsOK(res) || PyDateTime_Check(argv[2]) || PyDelta_Check(argv[2]) || PyDate_Check(argv[2]);
            }
          }
          if (!_v) goto check_3;
          _ranki += _v*_pi;
          _rankm += _pi;
          _pi *= SWIG_MAXCASTRANK;
        }
      }
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 3;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_3:
    
    if (argc == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_cmf__math__Integrator, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 4;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_4:
    
  dispatch:
    switch(_index) {
    case 1:
      return _wrap_new_BDF2__SWIG_1(self, argc, argv);
    case 2:
      return _wrap_new_BDF2__SWIG_0(self, argc, argv);
    case 3:
      return _wrap_new_BDF2__SWIG_2(self, argc, argv);
    case 4:
      return _wrap_new_BDF2__SWIG_3(self, argc, argv);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_BDF2'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    cmf::math::BDF2(cmf::math::StateVariableVector const &,real,cmf::math::Time)\n"
    "    cmf::math::BDF2(real,cmf::math::Time)\n"
    "    cmf::math::BDF2(cmf::math::StateVariableOwner &,real,cmf::math::Time)\n"
    "    cmf::math::BDF2(cmf::math::Integrator const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_BDF2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::math::BDF2 *arg1 = (cmf::math::BDF2 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__math__BDF2, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_BDF2" "', argument " "1"" of type '" "cmf::math::BDF2 *""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::BDF2 * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *BDF2_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_cmf__math__BDF2, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *BDF2_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_ExplicitEuler_fixed__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  cmf::math::StateVariableVector *arg1 = 0 ;
  real arg2 = (real) 1e-9 ;
  cmf::math::Time arg3 = (cmf::math::Time) cmf::math::Time::Seconds(10) ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  cmf::math::ExplicitEuler_fixed *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cmf__math__StateVariableVector,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ExplicitEuler_fixed" "', argument " "1"" of type '" "cmf::math::StateVariableVector const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ExplicitEuler_fixed" "', argument " "1"" of type '" "cmf::math::StateVariableVector const &""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::StateVariableVector * >(argp1);
  if (swig_obj[1]) {
    ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_ExplicitEuler_fixed" "', argument " "2"" of type '" "real""'");
    } 
    arg2 = static_cast< real >(val2);
  }
  if (swig_obj[2]) {
    {
      arg3 = convert_datetime_to_cmftime(swig_obj[2]);    
    }
  }
  {
    try {
      result = (cmf::math::ExplicitEuler_fixed *)new cmf::math::ExplicitEuler_fixed((cmf::math::StateVariableVector const &)*arg1,arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmf__math__ExplicitEuler_fixed, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ExplicitEuler_fixed__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  cmf::math::StateVariableOwner *arg1 = 0 ;
  real arg2 = (real) 1e-9 ;
  cmf::math::Time arg3 = (cmf::math::Time) cmf::math::Time::Seconds(10) ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  cmf::math::ExplicitEuler_fixed *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cmf__math__StateVariableOwner,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ExplicitEuler_fixed" "', argument " "1"" of type '" "cmf::math::StateVariableOwner &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ExplicitEuler_fixed" "', argument " "1"" of type '" "cmf::math::StateVariableOwner &""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::StateVariableOwner * >(argp1);
  if (swig_obj[1]) {
    ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_ExplicitEuler_fixed" "', argument " "2"" of type '" "real""'");
    } 
    arg2 = static_cast< real >(val2);
  }
  if (swig_obj[2]) {
    {
      arg3 = convert_datetime_to_cmftime(swig_obj[2]);    
    }
  }
  {
    try {
      result = (cmf::math::ExplicitEuler_fixed *)new cmf::math::ExplicitEuler_fixed(*arg1,arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmf__math__ExplicitEuler_fixed, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ExplicitEuler_fixed__SWIG_2(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  real arg1 = (real) 1e-9 ;
  cmf::math::Time arg2 = (cmf::math::Time) cmf::math::Time::Seconds(10) ;
  double val1 ;
  int ecode1 = 0 ;
  cmf::math::ExplicitEuler_fixed *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 2)) SWIG_fail;
  if (swig_obj[0]) {
    ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ExplicitEuler_fixed" "', argument " "1"" of type '" "real""'");
    } 
    arg1 = static_cast< real >(val1);
  }
  if (swig_obj[1]) {
    {
      arg2 = convert_datetime_to_cmftime(swig_obj[1]);    
    }
  }
  {
    try {
      result = (cmf::math::ExplicitEuler_fixed *)new cmf::math::ExplicitEuler_fixed(arg1,arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmf__math__ExplicitEuler_fixed, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ExplicitEuler_fixed__SWIG_3(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  cmf::math::Integrator *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cmf::math::ExplicitEuler_fixed *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cmf__math__Integrator,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ExplicitEuler_fixed" "', argument " "1"" of type '" "cmf::math::Integrator const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ExplicitEuler_fixed" "', argument " "1"" of type '" "cmf::math::Integrator const &""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::Integrator * >(argp1);
  {
    try {
      result = (cmf::math::ExplicitEuler_fixed *)new cmf::math::ExplicitEuler_fixed((cmf::math::Integrator const &)*arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmf__math__ExplicitEuler_fixed, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ExplicitEuler_fixed(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"new_ExplicitEuler_fixed",0,3,argv))) SWIG_fail;
  --argc;
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if ((argc >= 0) && (argc <= 2)) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      if (argc > 0) {
        {
          {
            int res = SWIG_AsVal_double(argv[0], NULL);
            _v = SWIG_CheckState(res);
          }
        }
        if (!_v) goto check_1;
        _ranki += _v*_pi;
        _rankm += _pi;
        _pi *= SWIG_MAXCASTRANK;
        if (argc > 1) {
          {
            {
              void * pt;    
              int res=SWIG_ConvertPtr(argv[1],&pt,SWIGTYPE_p_cmf__math__Time,0);
              _v=SWIG_IsOK(res) || PyDateTime_Check(argv[1]) || PyDelta_Check(argv[1]) || PyDate_Check(argv[1]);
            }
          }
          if (!_v) goto check_1;
          _ranki += _v*_pi;
          _rankm += _pi;
          _pi *= SWIG_MAXCASTRANK;
        }
      }
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if ((argc >= 1) && (argc <= 3)) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_cmf__math__StateVariableOwner, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (argc > 1) {
        {
          {
            int res = SWIG_AsVal_double(argv[1], NULL);
            _v = SWIG_CheckState(res);
          }
        }
        if (!_v) goto check_2;
        _ranki += _v*_pi;
        _rankm += _pi;
        _pi *= SWIG_MAXCASTRANK;
        if (argc > 2) {
          {
            {
              void * pt;    
              int res=SWIG_ConvertPtr(argv[2],&pt,SWIGTYPE_p_cmf__math__Time,0);
              _v=SWIG_IsOK(res) || PyDateTime_Check(argv[2]) || PyDelta_Check(argv[2]) || PyDate_Check(argv[2]);
            }
          }
          if (!_v) goto check_2;
          _ranki += _v*_pi;
          _rankm += _pi;
          _pi *= SWIG_MAXCASTRANK;
        }
      }
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
    if ((argc >= 1) && (argc <= 3)) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_cmf__math__StateVariableVector, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (argc > 1) {
        {
          {
            int res = SWIG_AsVal_double(argv[1], NULL);
            _v = SWIG_CheckState(res);
          }
        }
        if (!_v) goto check_3;
        _ranki += _v*_pi;
        _rankm += _pi;
        _pi *= SWIG_MAXCASTRANK;
        if (argc > 2) {
          {
            {
              void * pt;    
              int res=SWIG_ConvertPtr(argv[2],&pt,SWIGTYPE_p_cmf__math__Time,0);
              _v=SWIG_IsOK(res) || PyDateTime_Check(argv[2]) || PyDelta_Check(argv[2]) || PyDate_Check(argv[2]);
            }
          }
          if (!_v) goto check_3;
          _ranki += _v*_pi;
          _rankm += _pi;
          _pi *= SWIG_MAXCASTRANK;
        }
      }
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 3;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_3:
    
    if (argc == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_cmf__math__Integrator, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 4;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_4:
    
  dispatch:
    switch(_index) {
    case 1:
      return _wrap_new_ExplicitEuler_fixed__SWIG_2(self, argc, argv);
    case 2:
      return _wrap_new_ExplicitEuler_fixed__SWIG_1(self, argc, argv);
    case 3:
      return _wrap_new_ExplicitEuler_fixed__SWIG_0(self, argc, argv);
    case 4:
      return _wrap_new_ExplicitEuler_fixed__SWIG_3(self, argc, argv);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_ExplicitEuler_fixed'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    cmf::math::ExplicitEuler_fixed(cmf::math::StateVariableVector const &,real,cmf::math::Time)\n"
    "    cmf::math::ExplicitEuler_fixed(cmf::math::StateVariableOwner &,real,cmf::math::Time)\n"
    "    cmf::math::ExplicitEuler_fixed(real,cmf::math::Time)\n"
    "    cmf::math::ExplicitEuler_fixed(cmf::math::Integrator const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ExplicitEuler_fixed(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::math::ExplicitEuler_fixed *arg1 = (cmf::math::ExplicitEuler_fixed *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__math__ExplicitEuler_fixed, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ExplicitEuler_fixed" "', argument " "1"" of type '" "cmf::math::ExplicitEuler_fixed *""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::ExplicitEuler_fixed * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ExplicitEuler_fixed_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_cmf__math__ExplicitEuler_fixed, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *ExplicitEuler_fixed_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_PredictCorrectSimple_alpha_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::math::PredictCorrectSimple *arg1 = (cmf::math::PredictCorrectSimple *) 0 ;
  real arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"PredictCorrectSimple_alpha_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__math__PredictCorrectSimple, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PredictCorrectSimple_alpha_set" "', argument " "1"" of type '" "cmf::math::PredictCorrectSimple *""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::PredictCorrectSimple * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PredictCorrectSimple_alpha_set" "', argument " "2"" of type '" "real""'");
  } 
  arg2 = static_cast< real >(val2);
  if (arg1) (arg1)->alpha = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PredictCorrectSimple_alpha_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::math::PredictCorrectSimple *arg1 = (cmf::math::PredictCorrectSimple *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  real result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__math__PredictCorrectSimple, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PredictCorrectSimple_alpha_get" "', argument " "1"" of type '" "cmf::math::PredictCorrectSimple *""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::PredictCorrectSimple * >(argp1);
  result = (real) ((arg1)->alpha);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PredictCorrectSimple__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  cmf::math::StateVariableVector *arg1 = 0 ;
  real arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  cmf::math::PredictCorrectSimple *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cmf__math__StateVariableVector,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_PredictCorrectSimple" "', argument " "1"" of type '" "cmf::math::StateVariableVector const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_PredictCorrectSimple" "', argument " "1"" of type '" "cmf::math::StateVariableVector const &""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::StateVariableVector * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_PredictCorrectSimple" "', argument " "2"" of type '" "real""'");
  } 
  arg2 = static_cast< real >(val2);
  {
    try {
      result = (cmf::math::PredictCorrectSimple *)new cmf::math::PredictCorrectSimple((cmf::math::StateVariableVector const &)*arg1,arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmf__math__PredictCorrectSimple, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PredictCorrectSimple__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  cmf::math::StateVariableOwner *arg1 = 0 ;
  real arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  cmf::math::PredictCorrectSimple *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cmf__math__StateVariableOwner,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_PredictCorrectSimple" "', argument " "1"" of type '" "cmf::math::StateVariableOwner &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_PredictCorrectSimple" "', argument " "1"" of type '" "cmf::math::StateVariableOwner &""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::StateVariableOwner * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_PredictCorrectSimple" "', argument " "2"" of type '" "real""'");
  } 
  arg2 = static_cast< real >(val2);
  {
    try {
      result = (cmf::math::PredictCorrectSimple *)new cmf::math::PredictCorrectSimple(*arg1,arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmf__math__PredictCorrectSimple, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PredictCorrectSimple__SWIG_2(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  real arg1 = (real) 0.5 ;
  double val1 ;
  int ecode1 = 0 ;
  cmf::math::PredictCorrectSimple *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 1)) SWIG_fail;
  if (swig_obj[0]) {
    ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_PredictCorrectSimple" "', argument " "1"" of type '" "real""'");
    } 
    arg1 = static_cast< real >(val1);
  }
  {
    try {
      result = (cmf::math::PredictCorrectSimple *)new cmf::math::PredictCorrectSimple(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmf__math__PredictCorrectSimple, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PredictCorrectSimple__SWIG_3(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  cmf::math::Integrator *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cmf::math::PredictCorrectSimple *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cmf__math__Integrator,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_PredictCorrectSimple" "', argument " "1"" of type '" "cmf::math::Integrator const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_PredictCorrectSimple" "', argument " "1"" of type '" "cmf::math::Integrator const &""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::Integrator * >(argp1);
  {
    try {
      result = (cmf::math::PredictCorrectSimple *)new cmf::math::PredictCorrectSimple((cmf::math::Integrator const &)*arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmf__math__PredictCorrectSimple, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PredictCorrectSimple(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"new_PredictCorrectSimple",0,2,argv))) SWIG_fail;
  --argc;
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if ((argc >= 0) && (argc <= 1)) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      if (argc > 0) {
        {
          {
            int res = SWIG_AsVal_double(argv[0], NULL);
            _v = SWIG_CheckState(res);
          }
        }
        if (!_v) goto check_1;
        _ranki += _v*_pi;
        _rankm += _pi;
        _pi *= SWIG_MAXCASTRANK;
      }
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (argc == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_cmf__math__Integrator, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
    if (argc == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_cmf__math__StateVariableVector, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_double(argv[1], NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 3;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_3:
    
    if (argc == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_cmf__math__StateVariableOwner, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_double(argv[1], NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 4;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_4:
    
  dispatch:
    switch(_index) {
    case 1:
      return _wrap_new_PredictCorrectSimple__SWIG_2(self, argc, argv);
    case 2:
      return _wrap_new_PredictCorrectSimple__SWIG_3(self, argc, argv);
    case 3:
      return _wrap_new_PredictCorrectSimple__SWIG_0(self, argc, argv);
    case 4:
      return _wrap_new_PredictCorrectSimple__SWIG_1(self, argc, argv);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_PredictCorrectSimple'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    cmf::math::PredictCorrectSimple(cmf::math::StateVariableVector const &,real)\n"
    "    cmf::math::PredictCorrectSimple(cmf::math::StateVariableOwner &,real)\n"
    "    cmf::math::PredictCorrectSimple(real)\n"
    "    cmf::math::PredictCorrectSimple(cmf::math::Integrator const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_PredictCorrectSimple(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::math::PredictCorrectSimple *arg1 = (cmf::math::PredictCorrectSimple *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__math__PredictCorrectSimple, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_PredictCorrectSimple" "', argument " "1"" of type '" "cmf::math::PredictCorrectSimple *""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::PredictCorrectSimple * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *PredictCorrectSimple_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_cmf__math__PredictCorrectSimple, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *PredictCorrectSimple_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_ImplicitEuler__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  cmf::math::StateVariableOwner *arg1 = 0 ;
  real arg2 = (real) 1e-9 ;
  cmf::math::Time arg3 = (cmf::math::Time) cmf::math::Time::Seconds(10) ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  cmf::math::ImplicitEuler *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cmf__math__StateVariableOwner,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ImplicitEuler" "', argument " "1"" of type '" "cmf::math::StateVariableOwner &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ImplicitEuler" "', argument " "1"" of type '" "cmf::math::StateVariableOwner &""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::StateVariableOwner * >(argp1);
  if (swig_obj[1]) {
    ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_ImplicitEuler" "', argument " "2"" of type '" "real""'");
    } 
    arg2 = static_cast< real >(val2);
  }
  if (swig_obj[2]) {
    {
      arg3 = convert_datetime_to_cmftime(swig_obj[2]);    
    }
  }
  {
    try {
      result = (cmf::math::ImplicitEuler *)new cmf::math::ImplicitEuler(*arg1,arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmf__math__ImplicitEuler, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ImplicitEuler__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  real arg1 = (real) 1e-9 ;
  cmf::math::Time arg2 = (cmf::math::Time) cmf::math::Time::Seconds(10) ;
  double val1 ;
  int ecode1 = 0 ;
  cmf::math::ImplicitEuler *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 2)) SWIG_fail;
  if (swig_obj[0]) {
    ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ImplicitEuler" "', argument " "1"" of type '" "real""'");
    } 
    arg1 = static_cast< real >(val1);
  }
  if (swig_obj[1]) {
    {
      arg2 = convert_datetime_to_cmftime(swig_obj[1]);    
    }
  }
  {
    try {
      result = (cmf::math::ImplicitEuler *)new cmf::math::ImplicitEuler(arg1,arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmf__math__ImplicitEuler, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ImplicitEuler__SWIG_2(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  cmf::math::Integrator *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cmf::math::ImplicitEuler *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cmf__math__Integrator,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ImplicitEuler" "', argument " "1"" of type '" "cmf::math::Integrator const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ImplicitEuler" "', argument " "1"" of type '" "cmf::math::Integrator const &""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::Integrator * >(argp1);
  {
    try {
      result = (cmf::math::ImplicitEuler *)new cmf::math::ImplicitEuler((cmf::math::Integrator const &)*arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmf__math__ImplicitEuler, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ImplicitEuler(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"new_ImplicitEuler",0,3,argv))) SWIG_fail;
  --argc;
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if ((argc >= 0) && (argc <= 2)) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      if (argc > 0) {
        {
          {
            int res = SWIG_AsVal_double(argv[0], NULL);
            _v = SWIG_CheckState(res);
          }
        }
        if (!_v) goto check_1;
        _ranki += _v*_pi;
        _rankm += _pi;
        _pi *= SWIG_MAXCASTRANK;
        if (argc > 1) {
          {
            {
              void * pt;    
              int res=SWIG_ConvertPtr(argv[1],&pt,SWIGTYPE_p_cmf__math__Time,0);
              _v=SWIG_IsOK(res) || PyDateTime_Check(argv[1]) || PyDelta_Check(argv[1]) || PyDate_Check(argv[1]);
            }
          }
          if (!_v) goto check_1;
          _ranki += _v*_pi;
          _rankm += _pi;
          _pi *= SWIG_MAXCASTRANK;
        }
      }
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if ((argc >= 1) && (argc <= 3)) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_cmf__math__StateVariableOwner, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (argc > 1) {
        {
          {
            int res = SWIG_AsVal_double(argv[1], NULL);
            _v = SWIG_CheckState(res);
          }
        }
        if (!_v) goto check_2;
        _ranki += _v*_pi;
        _rankm += _pi;
        _pi *= SWIG_MAXCASTRANK;
        if (argc > 2) {
          {
            {
              void * pt;    
              int res=SWIG_ConvertPtr(argv[2],&pt,SWIGTYPE_p_cmf__math__Time,0);
              _v=SWIG_IsOK(res) || PyDateTime_Check(argv[2]) || PyDelta_Check(argv[2]) || PyDate_Check(argv[2]);
            }
          }
          if (!_v) goto check_2;
          _ranki += _v*_pi;
          _rankm += _pi;
          _pi *= SWIG_MAXCASTRANK;
        }
      }
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
    if (argc == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_cmf__math__Integrator, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 3;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_3:
    
  dispatch:
    switch(_index) {
    case 1:
      return _wrap_new_ImplicitEuler__SWIG_1(self, argc, argv);
    case 2:
      return _wrap_new_ImplicitEuler__SWIG_0(self, argc, argv);
    case 3:
      return _wrap_new_ImplicitEuler__SWIG_2(self, argc, argv);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_ImplicitEuler'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    cmf::math::ImplicitEuler(cmf::math::StateVariableOwner &,real,cmf::math::Time)\n"
    "    cmf::math::ImplicitEuler(real,cmf::math::Time)\n"
    "    cmf::math::ImplicitEuler(cmf::math::Integrator const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ImplicitEuler(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::math::ImplicitEuler *arg1 = (cmf::math::ImplicitEuler *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__math__ImplicitEuler, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ImplicitEuler" "', argument " "1"" of type '" "cmf::math::ImplicitEuler *""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::ImplicitEuler * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ImplicitEuler_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_cmf__math__ImplicitEuler, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *ImplicitEuler_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_RKFIntegrator__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  cmf::math::StateVariableOwner *arg1 = 0 ;
  real arg2 = (real) 1e-9 ;
  cmf::math::Time arg3 = (cmf::math::Time) cmf::math::Time::Seconds(10) ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  cmf::math::RKFIntegrator *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cmf__math__StateVariableOwner,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_RKFIntegrator" "', argument " "1"" of type '" "cmf::math::StateVariableOwner &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_RKFIntegrator" "', argument " "1"" of type '" "cmf::math::StateVariableOwner &""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::StateVariableOwner * >(argp1);
  if (swig_obj[1]) {
    ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_RKFIntegrator" "', argument " "2"" of type '" "real""'");
    } 
    arg2 = static_cast< real >(val2);
  }
  if (swig_obj[2]) {
    {
      arg3 = convert_datetime_to_cmftime(swig_obj[2]);    
    }
  }
  {
    try {
      result = (cmf::math::RKFIntegrator *)new cmf::math::RKFIntegrator(*arg1,arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmf__math__RKFIntegrator, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_RKFIntegrator__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  real arg1 = (real) 1e-9 ;
  cmf::math::Time arg2 = (cmf::math::Time) cmf::math::Time::Seconds(10) ;
  double val1 ;
  int ecode1 = 0 ;
  cmf::math::RKFIntegrator *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 2)) SWIG_fail;
  if (swig_obj[0]) {
    ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_RKFIntegrator" "', argument " "1"" of type '" "real""'");
    } 
    arg1 = static_cast< real >(val1);
  }
  if (swig_obj[1]) {
    {
      arg2 = convert_datetime_to_cmftime(swig_obj[1]);    
    }
  }
  {
    try {
      result = (cmf::math::RKFIntegrator *)new cmf::math::RKFIntegrator(arg1,arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmf__math__RKFIntegrator, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_RKFIntegrator__SWIG_2(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  cmf::math::Integrator *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cmf::math::RKFIntegrator *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cmf__math__Integrator,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_RKFIntegrator" "', argument " "1"" of type '" "cmf::math::Integrator const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_RKFIntegrator" "', argument " "1"" of type '" "cmf::math::Integrator const &""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::Integrator * >(argp1);
  {
    try {
      result = (cmf::math::RKFIntegrator *)new cmf::math::RKFIntegrator((cmf::math::Integrator const &)*arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmf__math__RKFIntegrator, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_RKFIntegrator(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"new_RKFIntegrator",0,3,argv))) SWIG_fail;
  --argc;
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if ((argc >= 0) && (argc <= 2)) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      if (argc > 0) {
        {
          {
            int res = SWIG_AsVal_double(argv[0], NULL);
            _v = SWIG_CheckState(res);
          }
        }
        if (!_v) goto check_1;
        _ranki += _v*_pi;
        _rankm += _pi;
        _pi *= SWIG_MAXCASTRANK;
        if (argc > 1) {
          {
            {
              void * pt;    
              int res=SWIG_ConvertPtr(argv[1],&pt,SWIGTYPE_p_cmf__math__Time,0);
              _v=SWIG_IsOK(res) || PyDateTime_Check(argv[1]) || PyDelta_Check(argv[1]) || PyDate_Check(argv[1]);
            }
          }
          if (!_v) goto check_1;
          _ranki += _v*_pi;
          _rankm += _pi;
          _pi *= SWIG_MAXCASTRANK;
        }
      }
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if ((argc >= 1) && (argc <= 3)) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_cmf__math__StateVariableOwner, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (argc > 1) {
        {
          {
            int res = SWIG_AsVal_double(argv[1], NULL);
            _v = SWIG_CheckState(res);
          }
        }
        if (!_v) goto check_2;
        _ranki += _v*_pi;
        _rankm += _pi;
        _pi *= SWIG_MAXCASTRANK;
        if (argc > 2) {
          {
            {
              void * pt;    
              int res=SWIG_ConvertPtr(argv[2],&pt,SWIGTYPE_p_cmf__math__Time,0);
              _v=SWIG_IsOK(res) || PyDateTime_Check(argv[2]) || PyDelta_Check(argv[2]) || PyDate_Check(argv[2]);
            }
          }
          if (!_v) goto check_2;
          _ranki += _v*_pi;
          _rankm += _pi;
          _pi *= SWIG_MAXCASTRANK;
        }
      }
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
    if (argc == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_cmf__math__Integrator, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 3;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_3:
    
  dispatch:
    switch(_index) {
    case 1:
      return _wrap_new_RKFIntegrator__SWIG_1(self, argc, argv);
    case 2:
      return _wrap_new_RKFIntegrator__SWIG_0(self, argc, argv);
    case 3:
      return _wrap_new_RKFIntegrator__SWIG_2(self, argc, argv);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_RKFIntegrator'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    cmf::math::RKFIntegrator(cmf::math::StateVariableOwner &,real,cmf::math::Time)\n"
    "    cmf::math::RKFIntegrator(real,cmf::math::Time)\n"
    "    cmf::math::RKFIntegrator(cmf::math::Integrator const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_RKFIntegrator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::math::RKFIntegrator *arg1 = (cmf::math::RKFIntegrator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__math__RKFIntegrator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_RKFIntegrator" "', argument " "1"" of type '" "cmf::math::RKFIntegrator *""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::RKFIntegrator * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *RKFIntegrator_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_cmf__math__RKFIntegrator, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *RKFIntegrator_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_CVodeIntegrator_preconditioner_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::math::CVodeIntegrator *arg1 = (cmf::math::CVodeIntegrator *) 0 ;
  char arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"CVodeIntegrator_preconditioner_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__math__CVodeIntegrator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CVodeIntegrator_preconditioner_set" "', argument " "1"" of type '" "cmf::math::CVodeIntegrator *""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::CVodeIntegrator * >(argp1);
  ecode2 = SWIG_AsVal_char(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CVodeIntegrator_preconditioner_set" "', argument " "2"" of type '" "char""'");
  } 
  arg2 = static_cast< char >(val2);
  if (arg1) (arg1)->preconditioner = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CVodeIntegrator_preconditioner_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::math::CVodeIntegrator *arg1 = (cmf::math::CVodeIntegrator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  char result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__math__CVodeIntegrator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CVodeIntegrator_preconditioner_get" "', argument " "1"" of type '" "cmf::math::CVodeIntegrator *""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::CVodeIntegrator * >(argp1);
  result = (char) ((arg1)->preconditioner);
  resultobj = SWIG_From_char(static_cast< char >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CVodeIntegrator_MaxNonLinearIterations_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::math::CVodeIntegrator *arg1 = (cmf::math::CVodeIntegrator *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"CVodeIntegrator_MaxNonLinearIterations_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__math__CVodeIntegrator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CVodeIntegrator_MaxNonLinearIterations_set" "', argument " "1"" of type '" "cmf::math::CVodeIntegrator *""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::CVodeIntegrator * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CVodeIntegrator_MaxNonLinearIterations_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->MaxNonLinearIterations = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CVodeIntegrator_MaxNonLinearIterations_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::math::CVodeIntegrator *arg1 = (cmf::math::CVodeIntegrator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__math__CVodeIntegrator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CVodeIntegrator_MaxNonLinearIterations_get" "', argument " "1"" of type '" "cmf::math::CVodeIntegrator *""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::CVodeIntegrator * >(argp1);
  result = (int) ((arg1)->MaxNonLinearIterations);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CVodeIntegrator_MaxConvergenceFailures_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::math::CVodeIntegrator *arg1 = (cmf::math::CVodeIntegrator *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"CVodeIntegrator_MaxConvergenceFailures_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__math__CVodeIntegrator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CVodeIntegrator_MaxConvergenceFailures_set" "', argument " "1"" of type '" "cmf::math::CVodeIntegrator *""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::CVodeIntegrator * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CVodeIntegrator_MaxConvergenceFailures_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->MaxConvergenceFailures = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CVodeIntegrator_MaxConvergenceFailures_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::math::CVodeIntegrator *arg1 = (cmf::math::CVodeIntegrator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__math__CVodeIntegrator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CVodeIntegrator_MaxConvergenceFailures_get" "', argument " "1"" of type '" "cmf::math::CVodeIntegrator *""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::CVodeIntegrator * >(argp1);
  result = (int) ((arg1)->MaxConvergenceFailures);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CVodeIntegrator_MaxErrorTestFailures_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::math::CVodeIntegrator *arg1 = (cmf::math::CVodeIntegrator *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"CVodeIntegrator_MaxErrorTestFailures_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__math__CVodeIntegrator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CVodeIntegrator_MaxErrorTestFailures_set" "', argument " "1"" of type '" "cmf::math::CVodeIntegrator *""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::CVodeIntegrator * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CVodeIntegrator_MaxErrorTestFailures_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->MaxErrorTestFailures = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CVodeIntegrator_MaxErrorTestFailures_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::math::CVodeIntegrator *arg1 = (cmf::math::CVodeIntegrator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__math__CVodeIntegrator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CVodeIntegrator_MaxErrorTestFailures_get" "', argument " "1"" of type '" "cmf::math::CVodeIntegrator *""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::CVodeIntegrator * >(argp1);
  result = (int) ((arg1)->MaxErrorTestFailures);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CVodeIntegrator_maxl_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::math::CVodeIntegrator *arg1 = (cmf::math::CVodeIntegrator *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"CVodeIntegrator_maxl_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__math__CVodeIntegrator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CVodeIntegrator_maxl_set" "', argument " "1"" of type '" "cmf::math::CVodeIntegrator *""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::CVodeIntegrator * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CVodeIntegrator_maxl_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->maxl = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CVodeIntegrator_maxl_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::math::CVodeIntegrator *arg1 = (cmf::math::CVodeIntegrator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__math__CVodeIntegrator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CVodeIntegrator_maxl_get" "', argument " "1"" of type '" "cmf::math::CVodeIntegrator *""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::CVodeIntegrator * >(argp1);
  result = (int) ((arg1)->maxl);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CVodeIntegrator_LinearSolver_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::math::CVodeIntegrator *arg1 = (cmf::math::CVodeIntegrator *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"CVodeIntegrator_LinearSolver_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__math__CVodeIntegrator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CVodeIntegrator_LinearSolver_set" "', argument " "1"" of type '" "cmf::math::CVodeIntegrator *""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::CVodeIntegrator * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CVodeIntegrator_LinearSolver_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->LinearSolver = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CVodeIntegrator_LinearSolver_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::math::CVodeIntegrator *arg1 = (cmf::math::CVodeIntegrator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__math__CVodeIntegrator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CVodeIntegrator_LinearSolver_get" "', argument " "1"" of type '" "cmf::math::CVodeIntegrator *""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::CVodeIntegrator * >(argp1);
  result = (int) ((arg1)->LinearSolver);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CVodeIntegrator_MaxOrder_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::math::CVodeIntegrator *arg1 = (cmf::math::CVodeIntegrator *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"CVodeIntegrator_MaxOrder_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__math__CVodeIntegrator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CVodeIntegrator_MaxOrder_set" "', argument " "1"" of type '" "cmf::math::CVodeIntegrator *""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::CVodeIntegrator * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CVodeIntegrator_MaxOrder_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->MaxOrder = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CVodeIntegrator_MaxOrder_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::math::CVodeIntegrator *arg1 = (cmf::math::CVodeIntegrator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__math__CVodeIntegrator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CVodeIntegrator_MaxOrder_get" "', argument " "1"" of type '" "cmf::math::CVodeIntegrator *""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::CVodeIntegrator * >(argp1);
  result = (int) ((arg1)->MaxOrder);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CVodeIntegrator_reinit_always_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::math::CVodeIntegrator *arg1 = (cmf::math::CVodeIntegrator *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"CVodeIntegrator_reinit_always_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__math__CVodeIntegrator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CVodeIntegrator_reinit_always_set" "', argument " "1"" of type '" "cmf::math::CVodeIntegrator *""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::CVodeIntegrator * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CVodeIntegrator_reinit_always_set" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  if (arg1) (arg1)->reinit_always = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CVodeIntegrator_reinit_always_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::math::CVodeIntegrator *arg1 = (cmf::math::CVodeIntegrator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__math__CVodeIntegrator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CVodeIntegrator_reinit_always_get" "', argument " "1"" of type '" "cmf::math::CVodeIntegrator *""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::CVodeIntegrator * >(argp1);
  result = (bool) ((arg1)->reinit_always);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CVodeIntegrator_max_step_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::math::CVodeIntegrator *arg1 = (cmf::math::CVodeIntegrator *) 0 ;
  cmf::math::Time *arg2 = (cmf::math::Time *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"CVodeIntegrator_max_step_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__math__CVodeIntegrator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CVodeIntegrator_max_step_set" "', argument " "1"" of type '" "cmf::math::CVodeIntegrator *""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::CVodeIntegrator * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cmf__math__Time, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CVodeIntegrator_max_step_set" "', argument " "2"" of type '" "cmf::math::Time *""'"); 
  }
  arg2 = reinterpret_cast< cmf::math::Time * >(argp2);
  if (arg1) (arg1)->max_step = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CVodeIntegrator_max_step_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::math::CVodeIntegrator *arg1 = (cmf::math::CVodeIntegrator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  cmf::math::Time *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__math__CVodeIntegrator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CVodeIntegrator_max_step_get" "', argument " "1"" of type '" "cmf::math::CVodeIntegrator *""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::CVodeIntegrator * >(argp1);
  result = (cmf::math::Time *)& ((arg1)->max_step);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmf__math__Time, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CVodeIntegrator_GetOrder(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::math::CVodeIntegrator *arg1 = (cmf::math::CVodeIntegrator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__math__CVodeIntegrator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CVodeIntegrator_GetOrder" "', argument " "1"" of type '" "cmf::math::CVodeIntegrator *""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::CVodeIntegrator * >(argp1);
  {
    try {
      result = (int)(arg1)->GetOrder();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CVodeIntegrator_ReInit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::math::CVodeIntegrator *arg1 = (cmf::math::CVodeIntegrator *) 0 ;
  cmf::math::Time arg2 ;
  real arg3 = (real) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  
  if (!SWIG_Python_UnpackTuple(args,"CVodeIntegrator_ReInit",2,3,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__math__CVodeIntegrator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CVodeIntegrator_ReInit" "', argument " "1"" of type '" "cmf::math::CVodeIntegrator *""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::CVodeIntegrator * >(argp1);
  {
    arg2 = convert_datetime_to_cmftime(swig_obj[1]);    
  }
  if (swig_obj[2]) {
    ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CVodeIntegrator_ReInit" "', argument " "3"" of type '" "real""'");
    } 
    arg3 = static_cast< real >(val3);
  }
  {
    try {
      (arg1)->ReInit(arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CVodeIntegrator_Initialize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::math::CVodeIntegrator *arg1 = (cmf::math::CVodeIntegrator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__math__CVodeIntegrator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CVodeIntegrator_Initialize" "', argument " "1"" of type '" "cmf::math::CVodeIntegrator *""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::CVodeIntegrator * >(argp1);
  {
    try {
      (arg1)->Initialize();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CVodeIntegrator__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  real arg1 = (real) 1e-9 ;
  cmf::math::Time arg2 = (cmf::math::Time) cmf::math::Time::Milliseconds(50) ;
  double val1 ;
  int ecode1 = 0 ;
  cmf::math::CVodeIntegrator *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 2)) SWIG_fail;
  if (swig_obj[0]) {
    ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_CVodeIntegrator" "', argument " "1"" of type '" "real""'");
    } 
    arg1 = static_cast< real >(val1);
  }
  if (swig_obj[1]) {
    {
      arg2 = convert_datetime_to_cmftime(swig_obj[1]);    
    }
  }
  {
    try {
      result = (cmf::math::CVodeIntegrator *)new cmf::math::CVodeIntegrator(arg1,arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmf__math__CVodeIntegrator, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CVodeIntegrator__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  cmf::math::StateVariableOwner *arg1 = 0 ;
  real arg2 = (real) 1e-9 ;
  cmf::math::Time arg3 = (cmf::math::Time) cmf::math::Time::Milliseconds(50) ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  cmf::math::CVodeIntegrator *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cmf__math__StateVariableOwner,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_CVodeIntegrator" "', argument " "1"" of type '" "cmf::math::StateVariableOwner &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_CVodeIntegrator" "', argument " "1"" of type '" "cmf::math::StateVariableOwner &""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::StateVariableOwner * >(argp1);
  if (swig_obj[1]) {
    ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_CVodeIntegrator" "', argument " "2"" of type '" "real""'");
    } 
    arg2 = static_cast< real >(val2);
  }
  if (swig_obj[2]) {
    {
      arg3 = convert_datetime_to_cmftime(swig_obj[2]);    
    }
  }
  {
    try {
      result = (cmf::math::CVodeIntegrator *)new cmf::math::CVodeIntegrator(*arg1,arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmf__math__CVodeIntegrator, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CVodeIntegrator__SWIG_2(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  cmf::math::CVodeIntegrator *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cmf::math::CVodeIntegrator *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cmf__math__CVodeIntegrator,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_CVodeIntegrator" "', argument " "1"" of type '" "cmf::math::CVodeIntegrator const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_CVodeIntegrator" "', argument " "1"" of type '" "cmf::math::CVodeIntegrator const &""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::CVodeIntegrator * >(argp1);
  {
    try {
      result = (cmf::math::CVodeIntegrator *)new cmf::math::CVodeIntegrator((cmf::math::CVodeIntegrator const &)*arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmf__math__CVodeIntegrator, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CVodeIntegrator(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"new_CVodeIntegrator",0,3,argv))) SWIG_fail;
  --argc;
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if ((argc >= 0) && (argc <= 2)) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      if (argc > 0) {
        {
          {
            int res = SWIG_AsVal_double(argv[0], NULL);
            _v = SWIG_CheckState(res);
          }
        }
        if (!_v) goto check_1;
        _ranki += _v*_pi;
        _rankm += _pi;
        _pi *= SWIG_MAXCASTRANK;
        if (argc > 1) {
          {
            {
              void * pt;    
              int res=SWIG_ConvertPtr(argv[1],&pt,SWIGTYPE_p_cmf__math__Time,0);
              _v=SWIG_IsOK(res) || PyDateTime_Check(argv[1]) || PyDelta_Check(argv[1]) || PyDate_Check(argv[1]);
            }
          }
          if (!_v) goto check_1;
          _ranki += _v*_pi;
          _rankm += _pi;
          _pi *= SWIG_MAXCASTRANK;
        }
      }
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if ((argc >= 1) && (argc <= 3)) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_cmf__math__StateVariableOwner, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (argc > 1) {
        {
          {
            int res = SWIG_AsVal_double(argv[1], NULL);
            _v = SWIG_CheckState(res);
          }
        }
        if (!_v) goto check_2;
        _ranki += _v*_pi;
        _rankm += _pi;
        _pi *= SWIG_MAXCASTRANK;
        if (argc > 2) {
          {
            {
              void * pt;    
              int res=SWIG_ConvertPtr(argv[2],&pt,SWIGTYPE_p_cmf__math__Time,0);
              _v=SWIG_IsOK(res) || PyDateTime_Check(argv[2]) || PyDelta_Check(argv[2]) || PyDate_Check(argv[2]);
            }
          }
          if (!_v) goto check_2;
          _ranki += _v*_pi;
          _rankm += _pi;
          _pi *= SWIG_MAXCASTRANK;
        }
      }
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
    if (argc == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_cmf__math__CVodeIntegrator, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 3;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_3:
    
  dispatch:
    switch(_index) {
    case 1:
      return _wrap_new_CVodeIntegrator__SWIG_0(self, argc, argv);
    case 2:
      return _wrap_new_CVodeIntegrator__SWIG_1(self, argc, argv);
    case 3:
      return _wrap_new_CVodeIntegrator__SWIG_2(self, argc, argv);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_CVodeIntegrator'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    cmf::math::CVodeIntegrator(real,cmf::math::Time)\n"
    "    cmf::math::CVodeIntegrator(cmf::math::StateVariableOwner &,real,cmf::math::Time)\n"
    "    cmf::math::CVodeIntegrator(cmf::math::CVodeIntegrator const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_CVodeIntegrator_Copy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::math::CVodeIntegrator *arg1 = (cmf::math::CVodeIntegrator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  cmf::math::CVodeIntegrator *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__math__CVodeIntegrator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CVodeIntegrator_Copy" "', argument " "1"" of type '" "cmf::math::CVodeIntegrator const *""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::CVodeIntegrator * >(argp1);
  {
    try {
      result = (cmf::math::CVodeIntegrator *)((cmf::math::CVodeIntegrator const *)arg1)->Copy();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmf__math__CVodeIntegrator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_CVodeIntegrator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::math::CVodeIntegrator *arg1 = (cmf::math::CVodeIntegrator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__math__CVodeIntegrator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_CVodeIntegrator" "', argument " "1"" of type '" "cmf::math::CVodeIntegrator *""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::CVodeIntegrator * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *CVodeIntegrator_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_cmf__math__CVodeIntegrator, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *CVodeIntegrator_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_MultiIntegrator_Copy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::math::MultiIntegrator *arg1 = (cmf::math::MultiIntegrator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  cmf::math::MultiIntegrator *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__math__MultiIntegrator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MultiIntegrator_Copy" "', argument " "1"" of type '" "cmf::math::MultiIntegrator const *""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::MultiIntegrator * >(argp1);
  {
    try {
      result = (cmf::math::MultiIntegrator *)((cmf::math::MultiIntegrator const *)arg1)->Copy();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmf__math__MultiIntegrator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MultiIntegrator_add_states_to_integrator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::math::MultiIntegrator *arg1 = (cmf::math::MultiIntegrator *) 0 ;
  cmf::math::StateVariableOwner *arg2 = 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  
  if (!SWIG_Python_UnpackTuple(args,"MultiIntegrator_add_states_to_integrator",3,3,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__math__MultiIntegrator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MultiIntegrator_add_states_to_integrator" "', argument " "1"" of type '" "cmf::math::MultiIntegrator *""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::MultiIntegrator * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cmf__math__StateVariableOwner,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MultiIntegrator_add_states_to_integrator" "', argument " "2"" of type '" "cmf::math::StateVariableOwner &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MultiIntegrator_add_states_to_integrator" "', argument " "2"" of type '" "cmf::math::StateVariableOwner &""'"); 
  }
  arg2 = reinterpret_cast< cmf::math::StateVariableOwner * >(argp2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "MultiIntegrator_add_states_to_integrator" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      (arg1)->add_states_to_integrator(*arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_MultiIntegrator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::math::Integrator *arg1 = 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  cmf::math::MultiIntegrator *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args,"new_MultiIntegrator",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cmf__math__Integrator,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_MultiIntegrator" "', argument " "1"" of type '" "cmf::math::Integrator const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_MultiIntegrator" "', argument " "1"" of type '" "cmf::math::Integrator const &""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::Integrator * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_MultiIntegrator" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (cmf::math::MultiIntegrator *)new cmf::math::MultiIntegrator((cmf::math::Integrator const &)*arg1,arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmf__math__MultiIntegrator, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_MultiIntegrator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::math::MultiIntegrator *arg1 = (cmf::math::MultiIntegrator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__math__MultiIntegrator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_MultiIntegrator" "', argument " "1"" of type '" "cmf::math::MultiIntegrator *""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::MultiIntegrator * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *MultiIntegrator_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_cmf__math__MultiIntegrator, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *MultiIntegrator_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_solute(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::water::solute *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  cmf::water::solute *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cmf__water__solute,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_solute" "', argument " "1"" of type '" "cmf::water::solute const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_solute" "', argument " "1"" of type '" "cmf::water::solute const &""'"); 
  }
  arg1 = reinterpret_cast< cmf::water::solute * >(argp1);
  {
    try {
      result = (cmf::water::solute *)new cmf::water::solute((cmf::water::solute const &)*arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmf__water__solute, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_solute___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::water::solute *arg1 = (cmf::water::solute *) 0 ;
  cmf::water::solute *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args,"solute___eq__",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__water__solute, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "solute___eq__" "', argument " "1"" of type '" "cmf::water::solute const *""'"); 
  }
  arg1 = reinterpret_cast< cmf::water::solute * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cmf__water__solute,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "solute___eq__" "', argument " "2"" of type '" "cmf::water::solute const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "solute___eq__" "', argument " "2"" of type '" "cmf::water::solute const &""'"); 
  }
  arg2 = reinterpret_cast< cmf::water::solute * >(argp2);
  {
    try {
      result = (bool)((cmf::water::solute const *)arg1)->operator ==((cmf::water::solute const &)*arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_solute___lt__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::water::solute *arg1 = (cmf::water::solute *) 0 ;
  cmf::water::solute *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args,"solute___lt__",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__water__solute, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "solute___lt__" "', argument " "1"" of type '" "cmf::water::solute const *""'"); 
  }
  arg1 = reinterpret_cast< cmf::water::solute * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cmf__water__solute,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "solute___lt__" "', argument " "2"" of type '" "cmf::water::solute const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "solute___lt__" "', argument " "2"" of type '" "cmf::water::solute const &""'"); 
  }
  arg2 = reinterpret_cast< cmf::water::solute * >(argp2);
  {
    try {
      result = (bool)((cmf::water::solute const *)arg1)->operator <((cmf::water::solute const &)*arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_solute___gt__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::water::solute *arg1 = (cmf::water::solute *) 0 ;
  cmf::water::solute *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args,"solute___gt__",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__water__solute, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "solute___gt__" "', argument " "1"" of type '" "cmf::water::solute const *""'"); 
  }
  arg1 = reinterpret_cast< cmf::water::solute * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cmf__water__solute,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "solute___gt__" "', argument " "2"" of type '" "cmf::water::solute const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "solute___gt__" "', argument " "2"" of type '" "cmf::water::solute const &""'"); 
  }
  arg2 = reinterpret_cast< cmf::water::solute * >(argp2);
  {
    try {
      result = (bool)((cmf::water::solute const *)arg1)->operator >((cmf::water::solute const &)*arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_solute___le__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::water::solute *arg1 = (cmf::water::solute *) 0 ;
  cmf::water::solute *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args,"solute___le__",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__water__solute, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "solute___le__" "', argument " "1"" of type '" "cmf::water::solute const *""'"); 
  }
  arg1 = reinterpret_cast< cmf::water::solute * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cmf__water__solute,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "solute___le__" "', argument " "2"" of type '" "cmf::water::solute const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "solute___le__" "', argument " "2"" of type '" "cmf::water::solute const &""'"); 
  }
  arg2 = reinterpret_cast< cmf::water::solute * >(argp2);
  {
    try {
      result = (bool)((cmf::water::solute const *)arg1)->operator <=((cmf::water::solute const &)*arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_solute___ge__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::water::solute *arg1 = (cmf::water::solute *) 0 ;
  cmf::water::solute *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args,"solute___ge__",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__water__solute, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "solute___ge__" "', argument " "1"" of type '" "cmf::water::solute const *""'"); 
  }
  arg1 = reinterpret_cast< cmf::water::solute * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cmf__water__solute,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "solute___ge__" "', argument " "2"" of type '" "cmf::water::solute const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "solute___ge__" "', argument " "2"" of type '" "cmf::water::solute const &""'"); 
  }
  arg2 = reinterpret_cast< cmf::water::solute * >(argp2);
  {
    try {
      result = (bool)((cmf::water::solute const *)arg1)->operator >=((cmf::water::solute const &)*arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_solute___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::water::solute *arg1 = (cmf::water::solute *) 0 ;
  cmf::water::solute *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args,"solute___ne__",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__water__solute, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "solute___ne__" "', argument " "1"" of type '" "cmf::water::solute const *""'"); 
  }
  arg1 = reinterpret_cast< cmf::water::solute * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cmf__water__solute,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "solute___ne__" "', argument " "2"" of type '" "cmf::water::solute const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "solute___ne__" "', argument " "2"" of type '" "cmf::water::solute const &""'"); 
  }
  arg2 = reinterpret_cast< cmf::water::solute * >(argp2);
  {
    try {
      result = (bool)((cmf::water::solute const *)arg1)->operator !=((cmf::water::solute const &)*arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_solute_Name_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::water::solute *arg1 = (cmf::water::solute *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"solute_Name_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__water__solute, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "solute_Name_set" "', argument " "1"" of type '" "cmf::water::solute *""'"); 
  }
  arg1 = reinterpret_cast< cmf::water::solute * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "solute_Name_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "solute_Name_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->Name = *arg2;
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_solute_Name_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::water::solute *arg1 = (cmf::water::solute *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__water__solute, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "solute_Name_get" "', argument " "1"" of type '" "cmf::water::solute *""'"); 
  }
  arg1 = reinterpret_cast< cmf::water::solute * >(argp1);
  result = (std::string *) & ((arg1)->Name);
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_solute_Unit_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::water::solute *arg1 = (cmf::water::solute *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"solute_Unit_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__water__solute, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "solute_Unit_set" "', argument " "1"" of type '" "cmf::water::solute *""'"); 
  }
  arg1 = reinterpret_cast< cmf::water::solute * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "solute_Unit_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "solute_Unit_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->Unit = *arg2;
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_solute_Unit_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::water::solute *arg1 = (cmf::water::solute *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__water__solute, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "solute_Unit_get" "', argument " "1"" of type '" "cmf::water::solute *""'"); 
  }
  arg1 = reinterpret_cast< cmf::water::solute * >(argp1);
  result = (std::string *) & ((arg1)->Unit);
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_solute_Uptake_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::water::solute *arg1 = (cmf::water::solute *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"solute_Uptake_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__water__solute, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "solute_Uptake_set" "', argument " "1"" of type '" "cmf::water::solute *""'"); 
  }
  arg1 = reinterpret_cast< cmf::water::solute * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "solute_Uptake_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->Uptake = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_solute_Uptake_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::water::solute *arg1 = (cmf::water::solute *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__water__solute, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "solute_Uptake_get" "', argument " "1"" of type '" "cmf::water::solute *""'"); 
  }
  arg1 = reinterpret_cast< cmf::water::solute * >(argp1);
  result = (double) ((arg1)->Uptake);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_solute_Id_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::water::solute *arg1 = (cmf::water::solute *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  size_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__water__solute, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "solute_Id_get" "', argument " "1"" of type '" "cmf::water::solute *""'"); 
  }
  arg1 = reinterpret_cast< cmf::water::solute * >(argp1);
  result = (size_t) ((arg1)->Id);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_solute___repr__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::water::solute *arg1 = (cmf::water::solute *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__water__solute, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "solute___repr__" "', argument " "1"" of type '" "cmf::water::solute *""'"); 
  }
  arg1 = reinterpret_cast< cmf::water::solute * >(argp1);
  {
    try {
      result = cmf_water_solute___repr__(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_solute(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::water::solute *arg1 = (cmf::water::solute *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__water__solute, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_solute" "', argument " "1"" of type '" "cmf::water::solute *""'"); 
  }
  arg1 = reinterpret_cast< cmf::water::solute * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *solute_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_cmf__water__solute, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *solute_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_solute_vector_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::water::solute_vector *arg1 = (cmf::water::solute_vector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  size_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__water__solute_vector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "solute_vector_size" "', argument " "1"" of type '" "cmf::water::solute_vector const *""'"); 
  }
  arg1 = reinterpret_cast< cmf::water::solute_vector * >(argp1);
  {
    try {
      result = ((cmf::water::solute_vector const *)arg1)->size();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_solute_vector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  PyObject *swig_obj[1] ;
  cmf::water::solute_vector *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_solute_vector" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (cmf::water::solute_vector *)new cmf::water::solute_vector(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmf__water__solute_vector, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_solute_vector_get_solute(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::water::solute_vector *arg1 = (cmf::water::solute_vector *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  cmf::water::solute *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args,"solute_vector_get_solute",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__water__solute_vector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "solute_vector_get_solute" "', argument " "1"" of type '" "cmf::water::solute_vector *""'"); 
  }
  arg1 = reinterpret_cast< cmf::water::solute_vector * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "solute_vector_get_solute" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (cmf::water::solute *)(arg1)->get_solute(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmf__water__solute, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_solute_vector___getitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::water::solute_vector *arg1 = (cmf::water::solute_vector *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  cmf::water::solute *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args,"solute_vector___getitem__",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__water__solute_vector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "solute_vector___getitem__" "', argument " "1"" of type '" "cmf::water::solute_vector *""'"); 
  }
  arg1 = reinterpret_cast< cmf::water::solute_vector * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "solute_vector___getitem__" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (cmf::water::solute *)cmf_water_solute_vector___getitem__(arg1,arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmf__water__solute, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_solute_vector___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::water::solute_vector *arg1 = (cmf::water::solute_vector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  size_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__water__solute_vector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "solute_vector___len__" "', argument " "1"" of type '" "cmf::water::solute_vector *""'"); 
  }
  arg1 = reinterpret_cast< cmf::water::solute_vector * >(argp1);
  {
    try {
      result = cmf_water_solute_vector___len__(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_solute_vector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::water::solute_vector *arg1 = (cmf::water::solute_vector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__water__solute_vector, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_solute_vector" "', argument " "1"" of type '" "cmf::water::solute_vector *""'"); 
  }
  arg1 = reinterpret_cast< cmf::water::solute_vector * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *solute_vector_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_cmf__water__solute_vector, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *solute_vector_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_SoluteTimeseries_conc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::water::SoluteTimeseries *arg1 = (cmf::water::SoluteTimeseries *) 0 ;
  cmf::math::Time arg2 ;
  cmf::water::solute *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  real result;
  
  if (!SWIG_Python_UnpackTuple(args,"SoluteTimeseries_conc",3,3,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__water__SoluteTimeseries, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SoluteTimeseries_conc" "', argument " "1"" of type '" "cmf::water::SoluteTimeseries const *""'"); 
  }
  arg1 = reinterpret_cast< cmf::water::SoluteTimeseries * >(argp1);
  {
    arg2 = convert_datetime_to_cmftime(swig_obj[1]);    
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_cmf__water__solute,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "SoluteTimeseries_conc" "', argument " "3"" of type '" "cmf::water::solute const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SoluteTimeseries_conc" "', argument " "3"" of type '" "cmf::water::solute const &""'"); 
  }
  arg3 = reinterpret_cast< cmf::water::solute * >(argp3);
  {
    try {
      result = (real)((cmf::water::SoluteTimeseries const *)arg1)->conc(arg2,(cmf::water::solute const &)*arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SoluteTimeseries_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::water::SoluteTimeseries *arg1 = (cmf::water::SoluteTimeseries *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  size_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__water__SoluteTimeseries, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SoluteTimeseries_size" "', argument " "1"" of type '" "cmf::water::SoluteTimeseries const *""'"); 
  }
  arg1 = reinterpret_cast< cmf::water::SoluteTimeseries * >(argp1);
  {
    try {
      result = ((cmf::water::SoluteTimeseries const *)arg1)->size();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SoluteTimeseries__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  cmf::water::SoluteTimeseries *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  {
    try {
      result = (cmf::water::SoluteTimeseries *)new cmf::water::SoluteTimeseries();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmf__water__SoluteTimeseries, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SoluteTimeseries__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  cmf::water::solute_vector *arg1 = 0 ;
  cmf::math::Time arg2 ;
  cmf::math::Time arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cmf::water::SoluteTimeseries *result = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cmf__water__solute_vector,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SoluteTimeseries" "', argument " "1"" of type '" "cmf::water::solute_vector const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SoluteTimeseries" "', argument " "1"" of type '" "cmf::water::solute_vector const &""'"); 
  }
  arg1 = reinterpret_cast< cmf::water::solute_vector * >(argp1);
  {
    arg2 = convert_datetime_to_cmftime(swig_obj[1]);    
  }
  {
    arg3 = convert_datetime_to_cmftime(swig_obj[2]);    
  }
  {
    try {
      result = (cmf::water::SoluteTimeseries *)new cmf::water::SoluteTimeseries((cmf::water::solute_vector const &)*arg1,arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmf__water__SoluteTimeseries, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SoluteTimeseries__SWIG_2(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  cmf::water::SoluteTimeseries *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cmf::water::SoluteTimeseries *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cmf__water__SoluteTimeseries,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SoluteTimeseries" "', argument " "1"" of type '" "cmf::water::SoluteTimeseries const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SoluteTimeseries" "', argument " "1"" of type '" "cmf::water::SoluteTimeseries const &""'"); 
  }
  arg1 = reinterpret_cast< cmf::water::SoluteTimeseries * >(argp1);
  {
    try {
      result = (cmf::water::SoluteTimeseries *)new cmf::water::SoluteTimeseries((cmf::water::SoluteTimeseries const &)*arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmf__water__SoluteTimeseries, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SoluteTimeseries(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"new_SoluteTimeseries",0,3,argv))) SWIG_fail;
  --argc;
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (argc == 0) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
    if (argc == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_cmf__water__SoluteTimeseries, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
    if (argc == 3) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_cmf__water__solute_vector, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          void * pt;    
          int res=SWIG_ConvertPtr(argv[1],&pt,SWIGTYPE_p_cmf__math__Time,0);
          _v=SWIG_IsOK(res) || PyDateTime_Check(argv[1]) || PyDelta_Check(argv[1]) || PyDate_Check(argv[1]);
        }
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          void * pt;    
          int res=SWIG_ConvertPtr(argv[2],&pt,SWIGTYPE_p_cmf__math__Time,0);
          _v=SWIG_IsOK(res) || PyDateTime_Check(argv[2]) || PyDelta_Check(argv[2]) || PyDate_Check(argv[2]);
        }
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 3;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_3:
    
  dispatch:
    switch(_index) {
    case 1:
      return _wrap_new_SoluteTimeseries__SWIG_0(self, argc, argv);
    case 2:
      return _wrap_new_SoluteTimeseries__SWIG_2(self, argc, argv);
    case 3:
      return _wrap_new_SoluteTimeseries__SWIG_1(self, argc, argv);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_SoluteTimeseries'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    cmf::water::SoluteTimeseries()\n"
    "    cmf::water::SoluteTimeseries(cmf::water::solute_vector const &,cmf::math::Time,cmf::math::Time)\n"
    "    cmf::water::SoluteTimeseries(cmf::water::SoluteTimeseries const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_SoluteTimeseries___getitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::water::SoluteTimeseries *arg1 = (cmf::water::SoluteTimeseries *) 0 ;
  cmf::water::solute *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  cmf::math::timeseries *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args,"SoluteTimeseries___getitem__",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__water__SoluteTimeseries, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SoluteTimeseries___getitem__" "', argument " "1"" of type '" "cmf::water::SoluteTimeseries *""'"); 
  }
  arg1 = reinterpret_cast< cmf::water::SoluteTimeseries * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cmf__water__solute,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SoluteTimeseries___getitem__" "', argument " "2"" of type '" "cmf::water::solute const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SoluteTimeseries___getitem__" "', argument " "2"" of type '" "cmf::water::solute const &""'"); 
  }
  arg2 = reinterpret_cast< cmf::water::solute * >(argp2);
  {
    try {
      result = (cmf::math::timeseries *) &cmf_water_SoluteTimeseries___getitem__(arg1,(cmf::water::solute const &)*arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmf__math__timeseries, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SoluteTimeseries___setitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::water::SoluteTimeseries *arg1 = (cmf::water::SoluteTimeseries *) 0 ;
  cmf::water::solute *arg2 = 0 ;
  cmf::math::timeseries arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  
  if (!SWIG_Python_UnpackTuple(args,"SoluteTimeseries___setitem__",3,3,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__water__SoluteTimeseries, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SoluteTimeseries___setitem__" "', argument " "1"" of type '" "cmf::water::SoluteTimeseries *""'"); 
  }
  arg1 = reinterpret_cast< cmf::water::SoluteTimeseries * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cmf__water__solute,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SoluteTimeseries___setitem__" "', argument " "2"" of type '" "cmf::water::solute const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SoluteTimeseries___setitem__" "', argument " "2"" of type '" "cmf::water::solute const &""'"); 
  }
  arg2 = reinterpret_cast< cmf::water::solute * >(argp2);
  {
    res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_cmf__math__timeseries,  0  | SWIG_POINTER_IMPLICIT_CONV);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "SoluteTimeseries___setitem__" "', argument " "3"" of type '" "cmf::math::timeseries""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SoluteTimeseries___setitem__" "', argument " "3"" of type '" "cmf::math::timeseries""'");
    } else {
      cmf::math::timeseries * temp = reinterpret_cast< cmf::math::timeseries * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    try {
      cmf_water_SoluteTimeseries___setitem__(arg1,(cmf::water::solute const &)*arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SoluteTimeseries___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::water::SoluteTimeseries *arg1 = (cmf::water::SoluteTimeseries *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  size_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__water__SoluteTimeseries, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SoluteTimeseries___len__" "', argument " "1"" of type '" "cmf::water::SoluteTimeseries const *""'"); 
  }
  arg1 = reinterpret_cast< cmf::water::SoluteTimeseries * >(argp1);
  {
    try {
      result = cmf_water_SoluteTimeseries___len__((cmf::water::SoluteTimeseries const *)arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_SoluteTimeseries(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::water::SoluteTimeseries *arg1 = (cmf::water::SoluteTimeseries *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__water__SoluteTimeseries, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SoluteTimeseries" "', argument " "1"" of type '" "cmf::water::SoluteTimeseries *""'"); 
  }
  arg1 = reinterpret_cast< cmf::water::SoluteTimeseries * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *SoluteTimeseries_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_cmf__water__SoluteTimeseries, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *SoluteTimeseries_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_SoluteStorage_decay_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::water::SoluteStorage *arg1 = (cmf::water::SoluteStorage *) 0 ;
  real arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< cmf::water::SoluteStorage > tempshared1 ;
  std::tr1::shared_ptr< cmf::water::SoluteStorage > *smartarg1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"SoluteStorage_decay_set",2,2,swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__water__SoluteStorage_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SoluteStorage_decay_set" "', argument " "1"" of type '" "cmf::water::SoluteStorage *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  cmf::water::SoluteStorage > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  cmf::water::SoluteStorage > * >(argp1);
      arg1 = const_cast< cmf::water::SoluteStorage * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  cmf::water::SoluteStorage > * >(argp1);
      arg1 = const_cast< cmf::water::SoluteStorage * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SoluteStorage_decay_set" "', argument " "2"" of type '" "real""'");
  } 
  arg2 = static_cast< real >(val2);
  if (arg1) (arg1)->decay = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SoluteStorage_decay_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::water::SoluteStorage *arg1 = (cmf::water::SoluteStorage *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< cmf::water::SoluteStorage > tempshared1 ;
  std::tr1::shared_ptr< cmf::water::SoluteStorage > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  real result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__water__SoluteStorage_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SoluteStorage_decay_get" "', argument " "1"" of type '" "cmf::water::SoluteStorage *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  cmf::water::SoluteStorage > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  cmf::water::SoluteStorage > * >(argp1);
      arg1 = const_cast< cmf::water::SoluteStorage * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  cmf::water::SoluteStorage > * >(argp1);
      arg1 = const_cast< cmf::water::SoluteStorage * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (real) ((arg1)->decay);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SoluteStorage_source_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::water::SoluteStorage *arg1 = (cmf::water::SoluteStorage *) 0 ;
  real arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< cmf::water::SoluteStorage > tempshared1 ;
  std::tr1::shared_ptr< cmf::water::SoluteStorage > *smartarg1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"SoluteStorage_source_set",2,2,swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__water__SoluteStorage_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SoluteStorage_source_set" "', argument " "1"" of type '" "cmf::water::SoluteStorage *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  cmf::water::SoluteStorage > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  cmf::water::SoluteStorage > * >(argp1);
      arg1 = const_cast< cmf::water::SoluteStorage * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  cmf::water::SoluteStorage > * >(argp1);
      arg1 = const_cast< cmf::water::SoluteStorage * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SoluteStorage_source_set" "', argument " "2"" of type '" "real""'");
  } 
  arg2 = static_cast< real >(val2);
  if (arg1) (arg1)->source = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SoluteStorage_source_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::water::SoluteStorage *arg1 = (cmf::water::SoluteStorage *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< cmf::water::SoluteStorage > tempshared1 ;
  std::tr1::shared_ptr< cmf::water::SoluteStorage > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  real result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__water__SoluteStorage_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SoluteStorage_source_get" "', argument " "1"" of type '" "cmf::water::SoluteStorage *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  cmf::water::SoluteStorage > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  cmf::water::SoluteStorage > * >(argp1);
      arg1 = const_cast< cmf::water::SoluteStorage * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  cmf::water::SoluteStorage > * >(argp1);
      arg1 = const_cast< cmf::water::SoluteStorage * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (real) ((arg1)->source);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SoluteStorage_Solute_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::water::SoluteStorage *arg1 = (cmf::water::SoluteStorage *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< cmf::water::SoluteStorage > tempshared1 ;
  std::tr1::shared_ptr< cmf::water::SoluteStorage > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  cmf::water::solute *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__water__SoluteStorage_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SoluteStorage_Solute_get" "', argument " "1"" of type '" "cmf::water::SoluteStorage *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  cmf::water::SoluteStorage > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  cmf::water::SoluteStorage > * >(argp1);
      arg1 = const_cast< cmf::water::SoluteStorage * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  cmf::water::SoluteStorage > * >(argp1);
      arg1 = const_cast< cmf::water::SoluteStorage * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (cmf::water::solute *) &(cmf::water::solute const &) ((arg1)->Solute);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmf__water__solute, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SoluteStorage_conc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::water::SoluteStorage *arg1 = (cmf::water::SoluteStorage *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< cmf::water::SoluteStorage const > tempshared1 ;
  std::tr1::shared_ptr< cmf::water::SoluteStorage const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  real result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__water__SoluteStorage_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SoluteStorage_conc" "', argument " "1"" of type '" "cmf::water::SoluteStorage const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr< const cmf::water::SoluteStorage > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr< const cmf::water::SoluteStorage > * >(argp1);
      arg1 = const_cast< cmf::water::SoluteStorage * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr< const cmf::water::SoluteStorage > * >(argp1);
      arg1 = const_cast< cmf::water::SoluteStorage * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      result = (real)((cmf::water::SoluteStorage const *)arg1)->conc();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SoluteStorage_SWIGSharedPtrUpcast(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::tr1::shared_ptr< cmf::water::SoluteStorage > arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::tr1::shared_ptr< cmf::math::StateVariable > result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__water__SoluteStorage_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SoluteStorage_SWIGSharedPtrUpcast" "', argument " "1"" of type '" "std::tr1::shared_ptr< cmf::water::SoluteStorage >""'"); 
    }
    if (argp1) arg1 = *(reinterpret_cast< std::tr1::shared_ptr< cmf::water::SoluteStorage > * >(argp1));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< std::tr1::shared_ptr< cmf::water::SoluteStorage > * >(argp1);
  }
  {
    try {
      result = cmf_water_SoluteStorage_SWIGSharedPtrUpcast(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  {
    std::tr1::shared_ptr<  cmf::math::StateVariable > *smartresult = result ? new std::tr1::shared_ptr<  cmf::math::StateVariable >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__tr1__shared_ptrT_cmf__math__StateVariable_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_SoluteStorage(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::water::SoluteStorage *arg1 = (cmf::water::SoluteStorage *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< cmf::water::SoluteStorage > tempshared1 ;
  std::tr1::shared_ptr< cmf::water::SoluteStorage > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__water__SoluteStorage_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SoluteStorage" "', argument " "1"" of type '" "cmf::water::SoluteStorage *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  cmf::water::SoluteStorage > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  cmf::water::SoluteStorage > * >(argp1);
      arg1 = const_cast< cmf::water::SoluteStorage * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  cmf::water::SoluteStorage > * >(argp1);
      arg1 = const_cast< cmf::water::SoluteStorage * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *SoluteStorage_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__tr1__shared_ptrT_cmf__water__SoluteStorage_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_connection_vector_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< cmf::water::flux_connection * > *arg1 = (std::vector< cmf::water::flux_connection * > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &swig_obj[0];
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_cmf__water__flux_connection_p_std__allocatorT_cmf__water__flux_connection_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "connection_vector_iterator" "', argument " "1"" of type '" "std::vector< cmf::water::flux_connection * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< cmf::water::flux_connection * > * >(argp1);
  {
    try {
      result = (swig::SwigPyIterator *)std_vector_Sl_cmf_water_flux_connection_Sm__Sg__iterator(arg1,arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_connection_vector___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< cmf::water::flux_connection * > *arg1 = (std::vector< cmf::water::flux_connection * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_cmf__water__flux_connection_p_std__allocatorT_cmf__water__flux_connection_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "connection_vector___nonzero__" "', argument " "1"" of type '" "std::vector< cmf::water::flux_connection * > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< cmf::water::flux_connection * > * >(argp1);
  {
    try {
      result = (bool)std_vector_Sl_cmf_water_flux_connection_Sm__Sg____nonzero__((std::vector< cmf::water::flux_connection * > const *)arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_connection_vector___bool__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< cmf::water::flux_connection * > *arg1 = (std::vector< cmf::water::flux_connection * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_cmf__water__flux_connection_p_std__allocatorT_cmf__water__flux_connection_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "connection_vector___bool__" "', argument " "1"" of type '" "std::vector< cmf::water::flux_connection * > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< cmf::water::flux_connection * > * >(argp1);
  {
    try {
      result = (bool)std_vector_Sl_cmf_water_flux_connection_Sm__Sg____bool__((std::vector< cmf::water::flux_connection * > const *)arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_connection_vector___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< cmf::water::flux_connection * > *arg1 = (std::vector< cmf::water::flux_connection * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< cmf::water::flux_connection * >::size_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_cmf__water__flux_connection_p_std__allocatorT_cmf__water__flux_connection_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "connection_vector___len__" "', argument " "1"" of type '" "std::vector< cmf::water::flux_connection * > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< cmf::water::flux_connection * > * >(argp1);
  {
    try {
      result = std_vector_Sl_cmf_water_flux_connection_Sm__Sg____len__((std::vector< cmf::water::flux_connection * > const *)arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_connection_vector_pop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< cmf::water::flux_connection * > *arg1 = (std::vector< cmf::water::flux_connection * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< cmf::water::flux_connection * >::value_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_cmf__water__flux_connection_p_std__allocatorT_cmf__water__flux_connection_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "connection_vector_pop" "', argument " "1"" of type '" "std::vector< cmf::water::flux_connection * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< cmf::water::flux_connection * > * >(argp1);
  {
    try {
      try {
        result = (std::vector< cmf::water::flux_connection * >::value_type)std_vector_Sl_cmf_water_flux_connection_Sm__Sg__pop(arg1);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_std__vectorT_cmf__water__flux_connection_p_std__allocatorT_cmf__water__flux_connection_p_t_t__value_type, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_connection_vector___getslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< cmf::water::flux_connection * > *arg1 = (std::vector< cmf::water::flux_connection * > *) 0 ;
  std::vector< cmf::water::flux_connection * >::difference_type arg2 ;
  std::vector< cmf::water::flux_connection * >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  std::vector< cmf::water::flux_connection *,std::allocator< cmf::water::flux_connection * > > *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args,"connection_vector___getslice__",3,3,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_cmf__water__flux_connection_p_std__allocatorT_cmf__water__flux_connection_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "connection_vector___getslice__" "', argument " "1"" of type '" "std::vector< cmf::water::flux_connection * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< cmf::water::flux_connection * > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "connection_vector___getslice__" "', argument " "2"" of type '" "std::vector< cmf::water::flux_connection * >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< cmf::water::flux_connection * >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "connection_vector___getslice__" "', argument " "3"" of type '" "std::vector< cmf::water::flux_connection * >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< cmf::water::flux_connection * >::difference_type >(val3);
  {
    try {
      try {
        result = (std::vector< cmf::water::flux_connection *,std::allocator< cmf::water::flux_connection * > > *)std_vector_Sl_cmf_water_flux_connection_Sm__Sg____getslice__(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_cmf__water__flux_connection_p_std__allocatorT_cmf__water__flux_connection_p_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_connection_vector___setslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< cmf::water::flux_connection * > *arg1 = (std::vector< cmf::water::flux_connection * > *) 0 ;
  std::vector< cmf::water::flux_connection * >::difference_type arg2 ;
  std::vector< cmf::water::flux_connection * >::difference_type arg3 ;
  std::vector< cmf::water::flux_connection *,std::allocator< cmf::water::flux_connection * > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject *swig_obj[4] ;
  
  if (!SWIG_Python_UnpackTuple(args,"connection_vector___setslice__",4,4,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_cmf__water__flux_connection_p_std__allocatorT_cmf__water__flux_connection_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "connection_vector___setslice__" "', argument " "1"" of type '" "std::vector< cmf::water::flux_connection * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< cmf::water::flux_connection * > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "connection_vector___setslice__" "', argument " "2"" of type '" "std::vector< cmf::water::flux_connection * >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< cmf::water::flux_connection * >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "connection_vector___setslice__" "', argument " "3"" of type '" "std::vector< cmf::water::flux_connection * >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< cmf::water::flux_connection * >::difference_type >(val3);
  {
    std::vector<cmf::water::flux_connection*,std::allocator< cmf::water::flux_connection * > > *ptr = (std::vector<cmf::water::flux_connection*,std::allocator< cmf::water::flux_connection * > > *)0;
    res4 = swig::asptr(swig_obj[3], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "connection_vector___setslice__" "', argument " "4"" of type '" "std::vector< cmf::water::flux_connection *,std::allocator< cmf::water::flux_connection * > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "connection_vector___setslice__" "', argument " "4"" of type '" "std::vector< cmf::water::flux_connection *,std::allocator< cmf::water::flux_connection * > > const &""'"); 
    }
    arg4 = ptr;
  }
  {
    try {
      try {
        std_vector_Sl_cmf_water_flux_connection_Sm__Sg____setslice__(arg1,arg2,arg3,(std::vector< cmf::water::flux_connection *,std::allocator< cmf::water::flux_connection * > > const &)*arg4);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_connection_vector___delslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< cmf::water::flux_connection * > *arg1 = (std::vector< cmf::water::flux_connection * > *) 0 ;
  std::vector< cmf::water::flux_connection * >::difference_type arg2 ;
  std::vector< cmf::water::flux_connection * >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  
  if (!SWIG_Python_UnpackTuple(args,"connection_vector___delslice__",3,3,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_cmf__water__flux_connection_p_std__allocatorT_cmf__water__flux_connection_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "connection_vector___delslice__" "', argument " "1"" of type '" "std::vector< cmf::water::flux_connection * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< cmf::water::flux_connection * > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "connection_vector___delslice__" "', argument " "2"" of type '" "std::vector< cmf::water::flux_connection * >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< cmf::water::flux_connection * >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "connection_vector___delslice__" "', argument " "3"" of type '" "std::vector< cmf::water::flux_connection * >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< cmf::water::flux_connection * >::difference_type >(val3);
  {
    try {
      try {
        std_vector_Sl_cmf_water_flux_connection_Sm__Sg____delslice__(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_connection_vector___delitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< cmf::water::flux_connection * > *arg1 = (std::vector< cmf::water::flux_connection * > *) 0 ;
  std::vector< cmf::water::flux_connection * >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_cmf__water__flux_connection_p_std__allocatorT_cmf__water__flux_connection_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "connection_vector___delitem__" "', argument " "1"" of type '" "std::vector< cmf::water::flux_connection * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< cmf::water::flux_connection * > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "connection_vector___delitem__" "', argument " "2"" of type '" "std::vector< cmf::water::flux_connection * >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< cmf::water::flux_connection * >::difference_type >(val2);
  {
    try {
      try {
        std_vector_Sl_cmf_water_flux_connection_Sm__Sg____delitem____SWIG_0(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_connection_vector___getitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< cmf::water::flux_connection * > *arg1 = (std::vector< cmf::water::flux_connection * > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< cmf::water::flux_connection *,std::allocator< cmf::water::flux_connection * > > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_cmf__water__flux_connection_p_std__allocatorT_cmf__water__flux_connection_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "connection_vector___getitem__" "', argument " "1"" of type '" "std::vector< cmf::water::flux_connection * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< cmf::water::flux_connection * > * >(argp1);
  {
    arg2 = (PySliceObject *) swig_obj[1];
  }
  {
    try {
      try {
        result = (std::vector< cmf::water::flux_connection *,std::allocator< cmf::water::flux_connection * > > *)std_vector_Sl_cmf_water_flux_connection_Sm__Sg____getitem____SWIG_0(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_cmf__water__flux_connection_p_std__allocatorT_cmf__water__flux_connection_p_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_connection_vector___setitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< cmf::water::flux_connection * > *arg1 = (std::vector< cmf::water::flux_connection * > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  std::vector< cmf::water::flux_connection *,std::allocator< cmf::water::flux_connection * > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_cmf__water__flux_connection_p_std__allocatorT_cmf__water__flux_connection_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "connection_vector___setitem__" "', argument " "1"" of type '" "std::vector< cmf::water::flux_connection * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< cmf::water::flux_connection * > * >(argp1);
  {
    arg2 = (PySliceObject *) swig_obj[1];
  }
  {
    std::vector<cmf::water::flux_connection*,std::allocator< cmf::water::flux_connection * > > *ptr = (std::vector<cmf::water::flux_connection*,std::allocator< cmf::water::flux_connection * > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "connection_vector___setitem__" "', argument " "3"" of type '" "std::vector< cmf::water::flux_connection *,std::allocator< cmf::water::flux_connection * > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "connection_vector___setitem__" "', argument " "3"" of type '" "std::vector< cmf::water::flux_connection *,std::allocator< cmf::water::flux_connection * > > const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      try {
        std_vector_Sl_cmf_water_flux_connection_Sm__Sg____setitem____SWIG_0(arg1,arg2,(std::vector< cmf::water::flux_connection *,std::allocator< cmf::water::flux_connection * > > const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_connection_vector___delitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< cmf::water::flux_connection * > *arg1 = (std::vector< cmf::water::flux_connection * > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_cmf__water__flux_connection_p_std__allocatorT_cmf__water__flux_connection_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "connection_vector___delitem__" "', argument " "1"" of type '" "std::vector< cmf::water::flux_connection * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< cmf::water::flux_connection * > * >(argp1);
  {
    arg2 = (PySliceObject *) swig_obj[1];
  }
  {
    try {
      try {
        std_vector_Sl_cmf_water_flux_connection_Sm__Sg____delitem____SWIG_1(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_connection_vector___delitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"connection_vector___delitem__",0,2,argv))) SWIG_fail;
  --argc;
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (argc == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = swig::asptr(argv[0], (std::vector<cmf::water::flux_connection*,std::allocator< cmf::water::flux_connection * > >**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          _v = PySlice_Check(argv[1]);
        }
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (argc == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = swig::asptr(argv[0], (std::vector<cmf::water::flux_connection*,std::allocator< cmf::water::flux_connection * > >**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      return _wrap_connection_vector___delitem____SWIG_1(self, argc, argv);
    case 2:
      return _wrap_connection_vector___delitem____SWIG_0(self, argc, argv);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'connection_vector___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    __delitem__(std::vector< cmf::water::flux_connection * > *,std::vector< cmf::water::flux_connection * >::difference_type)\n"
    "    __delitem__(std::vector< cmf::water::flux_connection * > *,PySliceObject *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_connection_vector___getitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< cmf::water::flux_connection * > *arg1 = (std::vector< cmf::water::flux_connection * > *) 0 ;
  std::vector< cmf::water::flux_connection * >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  std::vector< cmf::water::flux_connection * >::value_type result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_cmf__water__flux_connection_p_std__allocatorT_cmf__water__flux_connection_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "connection_vector___getitem__" "', argument " "1"" of type '" "std::vector< cmf::water::flux_connection * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< cmf::water::flux_connection * > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "connection_vector___getitem__" "', argument " "2"" of type '" "std::vector< cmf::water::flux_connection * >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< cmf::water::flux_connection * >::difference_type >(val2);
  {
    try {
      try {
        result = (std::vector< cmf::water::flux_connection * >::value_type)std_vector_Sl_cmf_water_flux_connection_Sm__Sg____getitem____SWIG_1(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_std__vectorT_cmf__water__flux_connection_p_std__allocatorT_cmf__water__flux_connection_p_t_t__value_type, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_connection_vector___getitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"connection_vector___getitem__",0,2,argv))) SWIG_fail;
  --argc;
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (argc == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = swig::asptr(argv[0], (std::vector<cmf::water::flux_connection*,std::allocator< cmf::water::flux_connection * > >**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          _v = PySlice_Check(argv[1]);
        }
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (argc == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = swig::asptr(argv[0], (std::vector<cmf::water::flux_connection*,std::allocator< cmf::water::flux_connection * > >**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      return _wrap_connection_vector___getitem____SWIG_0(self, argc, argv);
    case 2:
      return _wrap_connection_vector___getitem____SWIG_1(self, argc, argv);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'connection_vector___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    __getitem__(std::vector< cmf::water::flux_connection * > *,PySliceObject *)\n"
    "    __getitem__(std::vector< cmf::water::flux_connection * > *,std::vector< cmf::water::flux_connection * >::difference_type)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_connection_vector___setitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< cmf::water::flux_connection * > *arg1 = (std::vector< cmf::water::flux_connection * > *) 0 ;
  std::vector< cmf::water::flux_connection * >::difference_type arg2 ;
  std::vector< cmf::water::flux_connection * >::value_type arg3 = (std::vector< cmf::water::flux_connection * >::value_type) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_cmf__water__flux_connection_p_std__allocatorT_cmf__water__flux_connection_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "connection_vector___setitem__" "', argument " "1"" of type '" "std::vector< cmf::water::flux_connection * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< cmf::water::flux_connection * > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "connection_vector___setitem__" "', argument " "2"" of type '" "std::vector< cmf::water::flux_connection * >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< cmf::water::flux_connection * >::difference_type >(val2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_std__vectorT_cmf__water__flux_connection_p_std__allocatorT_cmf__water__flux_connection_p_t_t__value_type, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "connection_vector___setitem__" "', argument " "3"" of type '" "std::vector< cmf::water::flux_connection * >::value_type""'"); 
  }
  arg3 = reinterpret_cast< std::vector< cmf::water::flux_connection * >::value_type >(argp3);
  {
    try {
      try {
        std_vector_Sl_cmf_water_flux_connection_Sm__Sg____setitem____SWIG_1(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_connection_vector___setitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"connection_vector___setitem__",0,3,argv))) SWIG_fail;
  --argc;
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (argc == 3) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = swig::asptr(argv[0], (std::vector<cmf::water::flux_connection*,std::allocator< cmf::water::flux_connection * > >**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          _v = PySlice_Check(argv[1]);
        }
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = swig::asptr(argv[2], (std::vector<cmf::water::flux_connection*,std::allocator< cmf::water::flux_connection * > >**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (argc == 3) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = swig::asptr(argv[0], (std::vector<cmf::water::flux_connection*,std::allocator< cmf::water::flux_connection * > >**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_std__vectorT_cmf__water__flux_connection_p_std__allocatorT_cmf__water__flux_connection_p_t_t__value_type, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      return _wrap_connection_vector___setitem____SWIG_0(self, argc, argv);
    case 2:
      return _wrap_connection_vector___setitem____SWIG_1(self, argc, argv);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'connection_vector___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    __setitem__(std::vector< cmf::water::flux_connection * > *,PySliceObject *,std::vector< cmf::water::flux_connection *,std::allocator< cmf::water::flux_connection * > > const &)\n"
    "    __setitem__(std::vector< cmf::water::flux_connection * > *,std::vector< cmf::water::flux_connection * >::difference_type,std::vector< cmf::water::flux_connection * >::value_type)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_connection_vector_append(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< cmf::water::flux_connection * > *arg1 = (std::vector< cmf::water::flux_connection * > *) 0 ;
  std::vector< cmf::water::flux_connection * >::value_type arg2 = (std::vector< cmf::water::flux_connection * >::value_type) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"connection_vector_append",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_cmf__water__flux_connection_p_std__allocatorT_cmf__water__flux_connection_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "connection_vector_append" "', argument " "1"" of type '" "std::vector< cmf::water::flux_connection * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< cmf::water::flux_connection * > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_std__vectorT_cmf__water__flux_connection_p_std__allocatorT_cmf__water__flux_connection_p_t_t__value_type, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "connection_vector_append" "', argument " "2"" of type '" "std::vector< cmf::water::flux_connection * >::value_type""'"); 
  }
  arg2 = reinterpret_cast< std::vector< cmf::water::flux_connection * >::value_type >(argp2);
  {
    try {
      std_vector_Sl_cmf_water_flux_connection_Sm__Sg__append(arg1,arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_connection_vector__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  std::vector< cmf::water::flux_connection * > *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  {
    try {
      result = (std::vector< cmf::water::flux_connection * > *)new std::vector< cmf::water::flux_connection * >();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_cmf__water__flux_connection_p_std__allocatorT_cmf__water__flux_connection_p_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_connection_vector__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< cmf::water::flux_connection * > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  std::vector< cmf::water::flux_connection * > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    std::vector<cmf::water::flux_connection*,std::allocator< cmf::water::flux_connection * > > *ptr = (std::vector<cmf::water::flux_connection*,std::allocator< cmf::water::flux_connection * > > *)0;
    res1 = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_connection_vector" "', argument " "1"" of type '" "std::vector< cmf::water::flux_connection * > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_connection_vector" "', argument " "1"" of type '" "std::vector< cmf::water::flux_connection * > const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try {
      result = (std::vector< cmf::water::flux_connection * > *)new std::vector< cmf::water::flux_connection * >((std::vector< cmf::water::flux_connection * > const &)*arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_cmf__water__flux_connection_p_std__allocatorT_cmf__water__flux_connection_p_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_connection_vector_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< cmf::water::flux_connection * > *arg1 = (std::vector< cmf::water::flux_connection * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_cmf__water__flux_connection_p_std__allocatorT_cmf__water__flux_connection_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "connection_vector_empty" "', argument " "1"" of type '" "std::vector< cmf::water::flux_connection * > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< cmf::water::flux_connection * > * >(argp1);
  {
    try {
      result = (bool)((std::vector< cmf::water::flux_connection * > const *)arg1)->empty();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_connection_vector_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< cmf::water::flux_connection * > *arg1 = (std::vector< cmf::water::flux_connection * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< cmf::water::flux_connection * >::size_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_cmf__water__flux_connection_p_std__allocatorT_cmf__water__flux_connection_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "connection_vector_size" "', argument " "1"" of type '" "std::vector< cmf::water::flux_connection * > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< cmf::water::flux_connection * > * >(argp1);
  {
    try {
      result = ((std::vector< cmf::water::flux_connection * > const *)arg1)->size();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_connection_vector_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< cmf::water::flux_connection * > *arg1 = (std::vector< cmf::water::flux_connection * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_cmf__water__flux_connection_p_std__allocatorT_cmf__water__flux_connection_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "connection_vector_clear" "', argument " "1"" of type '" "std::vector< cmf::water::flux_connection * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< cmf::water::flux_connection * > * >(argp1);
  {
    try {
      (arg1)->clear();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_connection_vector_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< cmf::water::flux_connection * > *arg1 = (std::vector< cmf::water::flux_connection * > *) 0 ;
  std::vector< cmf::water::flux_connection * > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"connection_vector_swap",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_cmf__water__flux_connection_p_std__allocatorT_cmf__water__flux_connection_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "connection_vector_swap" "', argument " "1"" of type '" "std::vector< cmf::water::flux_connection * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< cmf::water::flux_connection * > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__vectorT_cmf__water__flux_connection_p_std__allocatorT_cmf__water__flux_connection_p_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "connection_vector_swap" "', argument " "2"" of type '" "std::vector< cmf::water::flux_connection * > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "connection_vector_swap" "', argument " "2"" of type '" "std::vector< cmf::water::flux_connection * > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< cmf::water::flux_connection * > * >(argp2);
  {
    try {
      (arg1)->swap(*arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_connection_vector_get_allocator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< cmf::water::flux_connection * > *arg1 = (std::vector< cmf::water::flux_connection * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  SwigValueWrapper< std::allocator< cmf::water::flux_connection * > > result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_cmf__water__flux_connection_p_std__allocatorT_cmf__water__flux_connection_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "connection_vector_get_allocator" "', argument " "1"" of type '" "std::vector< cmf::water::flux_connection * > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< cmf::water::flux_connection * > * >(argp1);
  {
    try {
      result = ((std::vector< cmf::water::flux_connection * > const *)arg1)->get_allocator();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj((new std::vector< cmf::water::flux_connection * >::allocator_type(static_cast< const std::vector< cmf::water::flux_connection * >::allocator_type& >(result))), SWIGTYPE_p_std__vectorT_cmf__water__flux_connection_p_std__allocatorT_cmf__water__flux_connection_p_t_t__allocator_type, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_connection_vector_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< cmf::water::flux_connection * > *arg1 = (std::vector< cmf::water::flux_connection * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< cmf::water::flux_connection * >::const_iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_cmf__water__flux_connection_p_std__allocatorT_cmf__water__flux_connection_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "connection_vector_begin" "', argument " "1"" of type '" "std::vector< cmf::water::flux_connection * > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< cmf::water::flux_connection * > * >(argp1);
  {
    try {
      result = ((std::vector< cmf::water::flux_connection * > const *)arg1)->begin();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< cmf::water::flux_connection * >::const_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_connection_vector_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< cmf::water::flux_connection * > *arg1 = (std::vector< cmf::water::flux_connection * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< cmf::water::flux_connection * >::const_iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_cmf__water__flux_connection_p_std__allocatorT_cmf__water__flux_connection_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "connection_vector_end" "', argument " "1"" of type '" "std::vector< cmf::water::flux_connection * > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< cmf::water::flux_connection * > * >(argp1);
  {
    try {
      result = ((std::vector< cmf::water::flux_connection * > const *)arg1)->end();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< cmf::water::flux_connection * >::const_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_connection_vector_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< cmf::water::flux_connection * > *arg1 = (std::vector< cmf::water::flux_connection * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< cmf::water::flux_connection * >::const_reverse_iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_cmf__water__flux_connection_p_std__allocatorT_cmf__water__flux_connection_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "connection_vector_rbegin" "', argument " "1"" of type '" "std::vector< cmf::water::flux_connection * > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< cmf::water::flux_connection * > * >(argp1);
  {
    try {
      result = ((std::vector< cmf::water::flux_connection * > const *)arg1)->rbegin();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< cmf::water::flux_connection * >::const_reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_connection_vector_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< cmf::water::flux_connection * > *arg1 = (std::vector< cmf::water::flux_connection * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< cmf::water::flux_connection * >::const_reverse_iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_cmf__water__flux_connection_p_std__allocatorT_cmf__water__flux_connection_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "connection_vector_rend" "', argument " "1"" of type '" "std::vector< cmf::water::flux_connection * > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< cmf::water::flux_connection * > * >(argp1);
  {
    try {
      result = ((std::vector< cmf::water::flux_connection * > const *)arg1)->rend();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< cmf::water::flux_connection * >::const_reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_connection_vector__SWIG_2(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< cmf::water::flux_connection * >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  std::vector< cmf::water::flux_connection * > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_connection_vector" "', argument " "1"" of type '" "std::vector< cmf::water::flux_connection * >::size_type""'");
  } 
  arg1 = static_cast< std::vector< cmf::water::flux_connection * >::size_type >(val1);
  {
    try {
      result = (std::vector< cmf::water::flux_connection * > *)new std::vector< cmf::water::flux_connection * >(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_cmf__water__flux_connection_p_std__allocatorT_cmf__water__flux_connection_p_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_connection_vector_pop_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< cmf::water::flux_connection * > *arg1 = (std::vector< cmf::water::flux_connection * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_cmf__water__flux_connection_p_std__allocatorT_cmf__water__flux_connection_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "connection_vector_pop_back" "', argument " "1"" of type '" "std::vector< cmf::water::flux_connection * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< cmf::water::flux_connection * > * >(argp1);
  {
    try {
      (arg1)->pop_back();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_connection_vector_resize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< cmf::water::flux_connection * > *arg1 = (std::vector< cmf::water::flux_connection * > *) 0 ;
  std::vector< cmf::water::flux_connection * >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_cmf__water__flux_connection_p_std__allocatorT_cmf__water__flux_connection_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "connection_vector_resize" "', argument " "1"" of type '" "std::vector< cmf::water::flux_connection * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< cmf::water::flux_connection * > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "connection_vector_resize" "', argument " "2"" of type '" "std::vector< cmf::water::flux_connection * >::size_type""'");
  } 
  arg2 = static_cast< std::vector< cmf::water::flux_connection * >::size_type >(val2);
  {
    try {
      (arg1)->resize(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_connection_vector_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< cmf::water::flux_connection * > *arg1 = (std::vector< cmf::water::flux_connection * > *) 0 ;
  std::vector< cmf::water::flux_connection * >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  std::vector< cmf::water::flux_connection * >::iterator result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_cmf__water__flux_connection_p_std__allocatorT_cmf__water__flux_connection_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "connection_vector_erase" "', argument " "1"" of type '" "std::vector< cmf::water::flux_connection * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< cmf::water::flux_connection * > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "connection_vector_erase" "', argument " "2"" of type '" "std::vector< cmf::water::flux_connection * >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< cmf::water::flux_connection * >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< cmf::water::flux_connection * >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "connection_vector_erase" "', argument " "2"" of type '" "std::vector< cmf::water::flux_connection * >::iterator""'");
    }
  }
  {
    try {
      result = (arg1)->erase(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< cmf::water::flux_connection * >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_connection_vector_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< cmf::water::flux_connection * > *arg1 = (std::vector< cmf::water::flux_connection * > *) 0 ;
  std::vector< cmf::water::flux_connection * >::iterator arg2 ;
  std::vector< cmf::water::flux_connection * >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  std::vector< cmf::water::flux_connection * >::iterator result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_cmf__water__flux_connection_p_std__allocatorT_cmf__water__flux_connection_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "connection_vector_erase" "', argument " "1"" of type '" "std::vector< cmf::water::flux_connection * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< cmf::water::flux_connection * > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "connection_vector_erase" "', argument " "2"" of type '" "std::vector< cmf::water::flux_connection * >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< cmf::water::flux_connection * >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< cmf::water::flux_connection * >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "connection_vector_erase" "', argument " "2"" of type '" "std::vector< cmf::water::flux_connection * >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "connection_vector_erase" "', argument " "3"" of type '" "std::vector< cmf::water::flux_connection * >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< cmf::water::flux_connection * >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< cmf::water::flux_connection * >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "connection_vector_erase" "', argument " "3"" of type '" "std::vector< cmf::water::flux_connection * >::iterator""'");
    }
  }
  {
    try {
      result = (arg1)->erase(arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< cmf::water::flux_connection * >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_connection_vector_erase(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"connection_vector_erase",0,3,argv))) SWIG_fail;
  --argc;
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (argc == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = swig::asptr(argv[0], (std::vector<cmf::water::flux_connection*,std::allocator< cmf::water::flux_connection * > >**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< cmf::water::flux_connection * >::iterator > *>(iter) != 0));
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (argc == 3) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = swig::asptr(argv[0], (std::vector<cmf::water::flux_connection*,std::allocator< cmf::water::flux_connection * > >**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< cmf::water::flux_connection * >::iterator > *>(iter) != 0));
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< cmf::water::flux_connection * >::iterator > *>(iter) != 0));
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      return _wrap_connection_vector_erase__SWIG_0(self, argc, argv);
    case 2:
      return _wrap_connection_vector_erase__SWIG_1(self, argc, argv);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'connection_vector_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    erase(std::vector< cmf::water::flux_connection * > *,std::vector< cmf::water::flux_connection * >::iterator)\n"
    "    erase(std::vector< cmf::water::flux_connection * > *,std::vector< cmf::water::flux_connection * >::iterator,std::vector< cmf::water::flux_connection * >::iterator)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_connection_vector__SWIG_3(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< cmf::water::flux_connection * >::size_type arg1 ;
  std::vector< cmf::water::flux_connection * >::value_type arg2 = (std::vector< cmf::water::flux_connection * >::value_type) 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  std::vector< cmf::water::flux_connection * > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_connection_vector" "', argument " "1"" of type '" "std::vector< cmf::water::flux_connection * >::size_type""'");
  } 
  arg1 = static_cast< std::vector< cmf::water::flux_connection * >::size_type >(val1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_std__vectorT_cmf__water__flux_connection_p_std__allocatorT_cmf__water__flux_connection_p_t_t__value_type, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_connection_vector" "', argument " "2"" of type '" "std::vector< cmf::water::flux_connection * >::value_type""'"); 
  }
  arg2 = reinterpret_cast< std::vector< cmf::water::flux_connection * >::value_type >(argp2);
  {
    try {
      result = (std::vector< cmf::water::flux_connection * > *)new std::vector< cmf::water::flux_connection * >(arg1,arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_cmf__water__flux_connection_p_std__allocatorT_cmf__water__flux_connection_p_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_connection_vector(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"new_connection_vector",0,2,argv))) SWIG_fail;
  --argc;
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (argc == 0) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
    if (argc == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          int res = SWIG_AsVal_size_t(argv[0], NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
    if (argc == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = swig::asptr(argv[0], (std::vector<cmf::water::flux_connection*,std::allocator< cmf::water::flux_connection * > >**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 3;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_3:
    
    if (argc == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          int res = SWIG_AsVal_size_t(argv[0], NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_std__vectorT_cmf__water__flux_connection_p_std__allocatorT_cmf__water__flux_connection_p_t_t__value_type, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 4;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_4:
    
  dispatch:
    switch(_index) {
    case 1:
      return _wrap_new_connection_vector__SWIG_0(self, argc, argv);
    case 2:
      return _wrap_new_connection_vector__SWIG_2(self, argc, argv);
    case 3:
      return _wrap_new_connection_vector__SWIG_1(self, argc, argv);
    case 4:
      return _wrap_new_connection_vector__SWIG_3(self, argc, argv);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_connection_vector'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< cmf::water::flux_connection * >()\n"
    "    std::vector< cmf::water::flux_connection * >(std::vector< cmf::water::flux_connection * > const &)\n"
    "    std::vector< cmf::water::flux_connection * >(std::vector< cmf::water::flux_connection * >::size_type)\n"
    "    std::vector< cmf::water::flux_connection * >(std::vector< cmf::water::flux_connection * >::size_type,std::vector< cmf::water::flux_connection * >::value_type)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_connection_vector_push_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< cmf::water::flux_connection * > *arg1 = (std::vector< cmf::water::flux_connection * > *) 0 ;
  std::vector< cmf::water::flux_connection * >::value_type arg2 = (std::vector< cmf::water::flux_connection * >::value_type) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"connection_vector_push_back",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_cmf__water__flux_connection_p_std__allocatorT_cmf__water__flux_connection_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "connection_vector_push_back" "', argument " "1"" of type '" "std::vector< cmf::water::flux_connection * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< cmf::water::flux_connection * > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_std__vectorT_cmf__water__flux_connection_p_std__allocatorT_cmf__water__flux_connection_p_t_t__value_type, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "connection_vector_push_back" "', argument " "2"" of type '" "std::vector< cmf::water::flux_connection * >::value_type""'"); 
  }
  arg2 = reinterpret_cast< std::vector< cmf::water::flux_connection * >::value_type >(argp2);
  {
    try {
      (arg1)->push_back(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_connection_vector_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< cmf::water::flux_connection * > *arg1 = (std::vector< cmf::water::flux_connection * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< cmf::water::flux_connection * >::value_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_cmf__water__flux_connection_p_std__allocatorT_cmf__water__flux_connection_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "connection_vector_front" "', argument " "1"" of type '" "std::vector< cmf::water::flux_connection * > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< cmf::water::flux_connection * > * >(argp1);
  {
    try {
      result = (std::vector< cmf::water::flux_connection * >::value_type)((std::vector< cmf::water::flux_connection * > const *)arg1)->front();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_std__vectorT_cmf__water__flux_connection_p_std__allocatorT_cmf__water__flux_connection_p_t_t__value_type, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_connection_vector_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< cmf::water::flux_connection * > *arg1 = (std::vector< cmf::water::flux_connection * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< cmf::water::flux_connection * >::value_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_cmf__water__flux_connection_p_std__allocatorT_cmf__water__flux_connection_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "connection_vector_back" "', argument " "1"" of type '" "std::vector< cmf::water::flux_connection * > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< cmf::water::flux_connection * > * >(argp1);
  {
    try {
      result = (std::vector< cmf::water::flux_connection * >::value_type)((std::vector< cmf::water::flux_connection * > const *)arg1)->back();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_std__vectorT_cmf__water__flux_connection_p_std__allocatorT_cmf__water__flux_connection_p_t_t__value_type, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_connection_vector_assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< cmf::water::flux_connection * > *arg1 = (std::vector< cmf::water::flux_connection * > *) 0 ;
  std::vector< cmf::water::flux_connection * >::size_type arg2 ;
  std::vector< cmf::water::flux_connection * >::value_type arg3 = (std::vector< cmf::water::flux_connection * >::value_type) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  
  if (!SWIG_Python_UnpackTuple(args,"connection_vector_assign",3,3,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_cmf__water__flux_connection_p_std__allocatorT_cmf__water__flux_connection_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "connection_vector_assign" "', argument " "1"" of type '" "std::vector< cmf::water::flux_connection * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< cmf::water::flux_connection * > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "connection_vector_assign" "', argument " "2"" of type '" "std::vector< cmf::water::flux_connection * >::size_type""'");
  } 
  arg2 = static_cast< std::vector< cmf::water::flux_connection * >::size_type >(val2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_std__vectorT_cmf__water__flux_connection_p_std__allocatorT_cmf__water__flux_connection_p_t_t__value_type, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "connection_vector_assign" "', argument " "3"" of type '" "std::vector< cmf::water::flux_connection * >::value_type""'"); 
  }
  arg3 = reinterpret_cast< std::vector< cmf::water::flux_connection * >::value_type >(argp3);
  {
    try {
      (arg1)->assign(arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_connection_vector_resize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< cmf::water::flux_connection * > *arg1 = (std::vector< cmf::water::flux_connection * > *) 0 ;
  std::vector< cmf::water::flux_connection * >::size_type arg2 ;
  std::vector< cmf::water::flux_connection * >::value_type arg3 = (std::vector< cmf::water::flux_connection * >::value_type) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_cmf__water__flux_connection_p_std__allocatorT_cmf__water__flux_connection_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "connection_vector_resize" "', argument " "1"" of type '" "std::vector< cmf::water::flux_connection * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< cmf::water::flux_connection * > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "connection_vector_resize" "', argument " "2"" of type '" "std::vector< cmf::water::flux_connection * >::size_type""'");
  } 
  arg2 = static_cast< std::vector< cmf::water::flux_connection * >::size_type >(val2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_std__vectorT_cmf__water__flux_connection_p_std__allocatorT_cmf__water__flux_connection_p_t_t__value_type, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "connection_vector_resize" "', argument " "3"" of type '" "std::vector< cmf::water::flux_connection * >::value_type""'"); 
  }
  arg3 = reinterpret_cast< std::vector< cmf::water::flux_connection * >::value_type >(argp3);
  {
    try {
      (arg1)->resize(arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_connection_vector_resize(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"connection_vector_resize",0,3,argv))) SWIG_fail;
  --argc;
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (argc == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = swig::asptr(argv[0], (std::vector<cmf::water::flux_connection*,std::allocator< cmf::water::flux_connection * > >**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_size_t(argv[1], NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (argc == 3) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = swig::asptr(argv[0], (std::vector<cmf::water::flux_connection*,std::allocator< cmf::water::flux_connection * > >**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_size_t(argv[1], NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_std__vectorT_cmf__water__flux_connection_p_std__allocatorT_cmf__water__flux_connection_p_t_t__value_type, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      return _wrap_connection_vector_resize__SWIG_0(self, argc, argv);
    case 2:
      return _wrap_connection_vector_resize__SWIG_1(self, argc, argv);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'connection_vector_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    resize(std::vector< cmf::water::flux_connection * > *,std::vector< cmf::water::flux_connection * >::size_type)\n"
    "    resize(std::vector< cmf::water::flux_connection * > *,std::vector< cmf::water::flux_connection * >::size_type,std::vector< cmf::water::flux_connection * >::value_type)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_connection_vector_insert__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< cmf::water::flux_connection * > *arg1 = (std::vector< cmf::water::flux_connection * > *) 0 ;
  std::vector< cmf::water::flux_connection * >::iterator arg2 ;
  std::vector< cmf::water::flux_connection * >::value_type arg3 = (std::vector< cmf::water::flux_connection * >::value_type) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  std::vector< cmf::water::flux_connection * >::iterator result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_cmf__water__flux_connection_p_std__allocatorT_cmf__water__flux_connection_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "connection_vector_insert" "', argument " "1"" of type '" "std::vector< cmf::water::flux_connection * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< cmf::water::flux_connection * > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "connection_vector_insert" "', argument " "2"" of type '" "std::vector< cmf::water::flux_connection * >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< cmf::water::flux_connection * >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< cmf::water::flux_connection * >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "connection_vector_insert" "', argument " "2"" of type '" "std::vector< cmf::water::flux_connection * >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_std__vectorT_cmf__water__flux_connection_p_std__allocatorT_cmf__water__flux_connection_p_t_t__value_type, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "connection_vector_insert" "', argument " "3"" of type '" "std::vector< cmf::water::flux_connection * >::value_type""'"); 
  }
  arg3 = reinterpret_cast< std::vector< cmf::water::flux_connection * >::value_type >(argp3);
  {
    try {
      result = (arg1)->insert(arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< cmf::water::flux_connection * >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_connection_vector_insert__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< cmf::water::flux_connection * > *arg1 = (std::vector< cmf::water::flux_connection * > *) 0 ;
  std::vector< cmf::water::flux_connection * >::iterator arg2 ;
  std::vector< cmf::water::flux_connection * >::size_type arg3 ;
  std::vector< cmf::water::flux_connection * >::value_type arg4 = (std::vector< cmf::water::flux_connection * >::value_type) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_cmf__water__flux_connection_p_std__allocatorT_cmf__water__flux_connection_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "connection_vector_insert" "', argument " "1"" of type '" "std::vector< cmf::water::flux_connection * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< cmf::water::flux_connection * > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "connection_vector_insert" "', argument " "2"" of type '" "std::vector< cmf::water::flux_connection * >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< cmf::water::flux_connection * >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< cmf::water::flux_connection * >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "connection_vector_insert" "', argument " "2"" of type '" "std::vector< cmf::water::flux_connection * >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "connection_vector_insert" "', argument " "3"" of type '" "std::vector< cmf::water::flux_connection * >::size_type""'");
  } 
  arg3 = static_cast< std::vector< cmf::water::flux_connection * >::size_type >(val3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4,SWIGTYPE_std__vectorT_cmf__water__flux_connection_p_std__allocatorT_cmf__water__flux_connection_p_t_t__value_type, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "connection_vector_insert" "', argument " "4"" of type '" "std::vector< cmf::water::flux_connection * >::value_type""'"); 
  }
  arg4 = reinterpret_cast< std::vector< cmf::water::flux_connection * >::value_type >(argp4);
  {
    try {
      (arg1)->insert(arg2,arg3,arg4);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_connection_vector_insert(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"connection_vector_insert",0,4,argv))) SWIG_fail;
  --argc;
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (argc == 3) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = swig::asptr(argv[0], (std::vector<cmf::water::flux_connection*,std::allocator< cmf::water::flux_connection * > >**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< cmf::water::flux_connection * >::iterator > *>(iter) != 0));
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_std__vectorT_cmf__water__flux_connection_p_std__allocatorT_cmf__water__flux_connection_p_t_t__value_type, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (argc == 4) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = swig::asptr(argv[0], (std::vector<cmf::water::flux_connection*,std::allocator< cmf::water::flux_connection * > >**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< cmf::water::flux_connection * >::iterator > *>(iter) != 0));
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_std__vectorT_cmf__water__flux_connection_p_std__allocatorT_cmf__water__flux_connection_p_t_t__value_type, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      return _wrap_connection_vector_insert__SWIG_0(self, argc, argv);
    case 2:
      return _wrap_connection_vector_insert__SWIG_1(self, argc, argv);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'connection_vector_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    insert(std::vector< cmf::water::flux_connection * > *,std::vector< cmf::water::flux_connection * >::iterator,std::vector< cmf::water::flux_connection * >::value_type)\n"
    "    insert(std::vector< cmf::water::flux_connection * > *,std::vector< cmf::water::flux_connection * >::iterator,std::vector< cmf::water::flux_connection * >::size_type,std::vector< cmf::water::flux_connection * >::value_type)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_connection_vector_reserve(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< cmf::water::flux_connection * > *arg1 = (std::vector< cmf::water::flux_connection * > *) 0 ;
  std::vector< cmf::water::flux_connection * >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"connection_vector_reserve",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_cmf__water__flux_connection_p_std__allocatorT_cmf__water__flux_connection_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "connection_vector_reserve" "', argument " "1"" of type '" "std::vector< cmf::water::flux_connection * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< cmf::water::flux_connection * > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "connection_vector_reserve" "', argument " "2"" of type '" "std::vector< cmf::water::flux_connection * >::size_type""'");
  } 
  arg2 = static_cast< std::vector< cmf::water::flux_connection * >::size_type >(val2);
  {
    try {
      (arg1)->reserve(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_connection_vector_capacity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< cmf::water::flux_connection * > *arg1 = (std::vector< cmf::water::flux_connection * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< cmf::water::flux_connection * >::size_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_cmf__water__flux_connection_p_std__allocatorT_cmf__water__flux_connection_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "connection_vector_capacity" "', argument " "1"" of type '" "std::vector< cmf::water::flux_connection * > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< cmf::water::flux_connection * > * >(argp1);
  {
    try {
      result = ((std::vector< cmf::water::flux_connection * > const *)arg1)->capacity();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_connection_vector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< cmf::water::flux_connection * > *arg1 = (std::vector< cmf::water::flux_connection * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_cmf__water__flux_connection_p_std__allocatorT_cmf__water__flux_connection_p_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_connection_vector" "', argument " "1"" of type '" "std::vector< cmf::water::flux_connection * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< cmf::water::flux_connection * > * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *connection_vector_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_cmf__water__flux_connection_p_std__allocatorT_cmf__water__flux_connection_p_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *connection_vector_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_connection_set__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::less< cmf::water::flux_connection * > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::set< cmf::water::flux_connection * > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__lessT_cmf__water__flux_connection_p_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_connection_set" "', argument " "1"" of type '" "std::less< cmf::water::flux_connection * > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_connection_set" "', argument " "1"" of type '" "std::less< cmf::water::flux_connection * > const &""'"); 
  }
  arg1 = reinterpret_cast< std::less< cmf::water::flux_connection * > * >(argp1);
  {
    try {
      result = (std::set< cmf::water::flux_connection * > *)new std::set< cmf::water::flux_connection * >((std::less< cmf::water::flux_connection * > const &)*arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__setT_cmf__water__flux_connection_p_std__lessT_cmf__water__flux_connection_p_t_std__allocatorT_cmf__water__flux_connection_p_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_connection_set_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< cmf::water::flux_connection * > *arg1 = (std::set< cmf::water::flux_connection * > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &swig_obj[0];
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__setT_cmf__water__flux_connection_p_std__lessT_cmf__water__flux_connection_p_t_std__allocatorT_cmf__water__flux_connection_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "connection_set_iterator" "', argument " "1"" of type '" "std::set< cmf::water::flux_connection * > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< cmf::water::flux_connection * > * >(argp1);
  {
    try {
      result = (swig::SwigPyIterator *)std_set_Sl_cmf_water_flux_connection_Sm__Sg__iterator(arg1,arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_connection_set___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< cmf::water::flux_connection * > *arg1 = (std::set< cmf::water::flux_connection * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__setT_cmf__water__flux_connection_p_std__lessT_cmf__water__flux_connection_p_t_std__allocatorT_cmf__water__flux_connection_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "connection_set___nonzero__" "', argument " "1"" of type '" "std::set< cmf::water::flux_connection * > const *""'"); 
  }
  arg1 = reinterpret_cast< std::set< cmf::water::flux_connection * > * >(argp1);
  {
    try {
      result = (bool)std_set_Sl_cmf_water_flux_connection_Sm__Sg____nonzero__((std::set< cmf::water::flux_connection * > const *)arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_connection_set___bool__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< cmf::water::flux_connection * > *arg1 = (std::set< cmf::water::flux_connection * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__setT_cmf__water__flux_connection_p_std__lessT_cmf__water__flux_connection_p_t_std__allocatorT_cmf__water__flux_connection_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "connection_set___bool__" "', argument " "1"" of type '" "std::set< cmf::water::flux_connection * > const *""'"); 
  }
  arg1 = reinterpret_cast< std::set< cmf::water::flux_connection * > * >(argp1);
  {
    try {
      result = (bool)std_set_Sl_cmf_water_flux_connection_Sm__Sg____bool__((std::set< cmf::water::flux_connection * > const *)arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_connection_set___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< cmf::water::flux_connection * > *arg1 = (std::set< cmf::water::flux_connection * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::set< cmf::water::flux_connection * >::size_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__setT_cmf__water__flux_connection_p_std__lessT_cmf__water__flux_connection_p_t_std__allocatorT_cmf__water__flux_connection_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "connection_set___len__" "', argument " "1"" of type '" "std::set< cmf::water::flux_connection * > const *""'"); 
  }
  arg1 = reinterpret_cast< std::set< cmf::water::flux_connection * > * >(argp1);
  {
    try {
      result = std_set_Sl_cmf_water_flux_connection_Sm__Sg____len__((std::set< cmf::water::flux_connection * > const *)arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_connection_set_append(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< cmf::water::flux_connection * > *arg1 = (std::set< cmf::water::flux_connection * > *) 0 ;
  std::set< cmf::water::flux_connection * >::value_type arg2 = (std::set< cmf::water::flux_connection * >::value_type) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"connection_set_append",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__setT_cmf__water__flux_connection_p_std__lessT_cmf__water__flux_connection_p_t_std__allocatorT_cmf__water__flux_connection_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "connection_set_append" "', argument " "1"" of type '" "std::set< cmf::water::flux_connection * > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< cmf::water::flux_connection * > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_std__setT_cmf__water__flux_connection_p_std__lessT_cmf__water__flux_connection_p_t_std__allocatorT_cmf__water__flux_connection_p_t_t__value_type, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "connection_set_append" "', argument " "2"" of type '" "std::set< cmf::water::flux_connection * >::value_type""'"); 
  }
  arg2 = reinterpret_cast< std::set< cmf::water::flux_connection * >::value_type >(argp2);
  {
    try {
      std_set_Sl_cmf_water_flux_connection_Sm__Sg__append(arg1,arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_connection_set___contains__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< cmf::water::flux_connection * > *arg1 = (std::set< cmf::water::flux_connection * > *) 0 ;
  std::set< cmf::water::flux_connection * >::value_type arg2 = (std::set< cmf::water::flux_connection * >::value_type) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args,"connection_set___contains__",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__setT_cmf__water__flux_connection_p_std__lessT_cmf__water__flux_connection_p_t_std__allocatorT_cmf__water__flux_connection_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "connection_set___contains__" "', argument " "1"" of type '" "std::set< cmf::water::flux_connection * > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< cmf::water::flux_connection * > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_std__setT_cmf__water__flux_connection_p_std__lessT_cmf__water__flux_connection_p_t_std__allocatorT_cmf__water__flux_connection_p_t_t__value_type, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "connection_set___contains__" "', argument " "2"" of type '" "std::set< cmf::water::flux_connection * >::value_type""'"); 
  }
  arg2 = reinterpret_cast< std::set< cmf::water::flux_connection * >::value_type >(argp2);
  {
    try {
      result = (bool)std_set_Sl_cmf_water_flux_connection_Sm__Sg____contains__(arg1,arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_connection_set___getitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< cmf::water::flux_connection * > *arg1 = (std::set< cmf::water::flux_connection * > *) 0 ;
  std::set< cmf::water::flux_connection * >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  std::set< cmf::water::flux_connection * >::value_type result;
  
  if (!SWIG_Python_UnpackTuple(args,"connection_set___getitem__",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__setT_cmf__water__flux_connection_p_std__lessT_cmf__water__flux_connection_p_t_std__allocatorT_cmf__water__flux_connection_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "connection_set___getitem__" "', argument " "1"" of type '" "std::set< cmf::water::flux_connection * > const *""'"); 
  }
  arg1 = reinterpret_cast< std::set< cmf::water::flux_connection * > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "connection_set___getitem__" "', argument " "2"" of type '" "std::set< cmf::water::flux_connection * >::difference_type""'");
  } 
  arg2 = static_cast< std::set< cmf::water::flux_connection * >::difference_type >(val2);
  {
    try {
      try {
        result = (std::set< cmf::water::flux_connection * >::value_type)std_set_Sl_cmf_water_flux_connection_Sm__Sg____getitem__((std::set< cmf::water::flux_connection * > const *)arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_std__setT_cmf__water__flux_connection_p_std__lessT_cmf__water__flux_connection_p_t_std__allocatorT_cmf__water__flux_connection_p_t_t__value_type, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_connection_set__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  std::set< cmf::water::flux_connection * > *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  {
    try {
      result = (std::set< cmf::water::flux_connection * > *)new std::set< cmf::water::flux_connection * >();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__setT_cmf__water__flux_connection_p_std__lessT_cmf__water__flux_connection_p_t_std__allocatorT_cmf__water__flux_connection_p_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_connection_set__SWIG_2(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::set< cmf::water::flux_connection * > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  std::set< cmf::water::flux_connection * > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    std::set<cmf::water::flux_connection *,std::less< cmf::water::flux_connection * >,std::allocator< cmf::water::flux_connection * > > *ptr = (std::set<cmf::water::flux_connection *,std::less< cmf::water::flux_connection * >,std::allocator< cmf::water::flux_connection * > > *)0;
    res1 = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_connection_set" "', argument " "1"" of type '" "std::set< cmf::water::flux_connection * > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_connection_set" "', argument " "1"" of type '" "std::set< cmf::water::flux_connection * > const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try {
      result = (std::set< cmf::water::flux_connection * > *)new std::set< cmf::water::flux_connection * >((std::set< cmf::water::flux_connection * > const &)*arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__setT_cmf__water__flux_connection_p_std__lessT_cmf__water__flux_connection_p_t_std__allocatorT_cmf__water__flux_connection_p_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_connection_set(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"new_connection_set",0,1,argv))) SWIG_fail;
  --argc;
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (argc == 0) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
    if (argc == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__lessT_cmf__water__flux_connection_p_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
    if (argc == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = swig::asptr(argv[0], (std::set<cmf::water::flux_connection *,std::less< cmf::water::flux_connection * >,std::allocator< cmf::water::flux_connection * > >**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 3;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_3:
    
  dispatch:
    switch(_index) {
    case 1:
      return _wrap_new_connection_set__SWIG_1(self, argc, argv);
    case 2:
      return _wrap_new_connection_set__SWIG_0(self, argc, argv);
    case 3:
      return _wrap_new_connection_set__SWIG_2(self, argc, argv);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_connection_set'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::set< cmf::water::flux_connection * >(std::less< cmf::water::flux_connection * > const &)\n"
    "    std::set< cmf::water::flux_connection * >()\n"
    "    std::set< cmf::water::flux_connection * >(std::set< cmf::water::flux_connection * > const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_connection_set_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< cmf::water::flux_connection * > *arg1 = (std::set< cmf::water::flux_connection * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__setT_cmf__water__flux_connection_p_std__lessT_cmf__water__flux_connection_p_t_std__allocatorT_cmf__water__flux_connection_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "connection_set_empty" "', argument " "1"" of type '" "std::set< cmf::water::flux_connection * > const *""'"); 
  }
  arg1 = reinterpret_cast< std::set< cmf::water::flux_connection * > * >(argp1);
  {
    try {
      result = (bool)((std::set< cmf::water::flux_connection * > const *)arg1)->empty();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_connection_set_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< cmf::water::flux_connection * > *arg1 = (std::set< cmf::water::flux_connection * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::set< cmf::water::flux_connection * >::size_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__setT_cmf__water__flux_connection_p_std__lessT_cmf__water__flux_connection_p_t_std__allocatorT_cmf__water__flux_connection_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "connection_set_size" "', argument " "1"" of type '" "std::set< cmf::water::flux_connection * > const *""'"); 
  }
  arg1 = reinterpret_cast< std::set< cmf::water::flux_connection * > * >(argp1);
  {
    try {
      result = ((std::set< cmf::water::flux_connection * > const *)arg1)->size();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_connection_set_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< cmf::water::flux_connection * > *arg1 = (std::set< cmf::water::flux_connection * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__setT_cmf__water__flux_connection_p_std__lessT_cmf__water__flux_connection_p_t_std__allocatorT_cmf__water__flux_connection_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "connection_set_clear" "', argument " "1"" of type '" "std::set< cmf::water::flux_connection * > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< cmf::water::flux_connection * > * >(argp1);
  {
    try {
      (arg1)->clear();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_connection_set_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< cmf::water::flux_connection * > *arg1 = (std::set< cmf::water::flux_connection * > *) 0 ;
  std::set< cmf::water::flux_connection * > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"connection_set_swap",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__setT_cmf__water__flux_connection_p_std__lessT_cmf__water__flux_connection_p_t_std__allocatorT_cmf__water__flux_connection_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "connection_set_swap" "', argument " "1"" of type '" "std::set< cmf::water::flux_connection * > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< cmf::water::flux_connection * > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__setT_cmf__water__flux_connection_p_std__lessT_cmf__water__flux_connection_p_t_std__allocatorT_cmf__water__flux_connection_p_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "connection_set_swap" "', argument " "2"" of type '" "std::set< cmf::water::flux_connection * > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "connection_set_swap" "', argument " "2"" of type '" "std::set< cmf::water::flux_connection * > &""'"); 
  }
  arg2 = reinterpret_cast< std::set< cmf::water::flux_connection * > * >(argp2);
  {
    try {
      (arg1)->swap(*arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_connection_set_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::set< cmf::water::flux_connection * > *arg1 = (std::set< cmf::water::flux_connection * > *) 0 ;
  std::set< cmf::water::flux_connection * >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  std::set< cmf::water::flux_connection * >::key_type temp2 ;
  std::set< cmf::water::flux_connection * >::size_type result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__setT_cmf__water__flux_connection_p_std__lessT_cmf__water__flux_connection_p_t_std__allocatorT_cmf__water__flux_connection_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "connection_set_erase" "', argument " "1"" of type '" "std::set< cmf::water::flux_connection * > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< cmf::water::flux_connection * > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_std__setT_cmf__water__flux_connection_p_std__lessT_cmf__water__flux_connection_p_t_std__allocatorT_cmf__water__flux_connection_p_t_t__key_type, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "connection_set_erase" "', argument " "2"" of type '" "std::set< cmf::water::flux_connection * >::key_type""'"); 
  }
  temp2 = reinterpret_cast< std::set< cmf::water::flux_connection * >::key_type >(argp2);
  arg2 = &temp2;
  {
    try {
      result = (arg1)->erase((std::set< cmf::water::flux_connection * >::key_type const &)*arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_connection_set_count(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< cmf::water::flux_connection * > *arg1 = (std::set< cmf::water::flux_connection * > *) 0 ;
  std::set< cmf::water::flux_connection * >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  std::set< cmf::water::flux_connection * >::key_type temp2 ;
  PyObject *swig_obj[2] ;
  std::set< cmf::water::flux_connection * >::size_type result;
  
  if (!SWIG_Python_UnpackTuple(args,"connection_set_count",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__setT_cmf__water__flux_connection_p_std__lessT_cmf__water__flux_connection_p_t_std__allocatorT_cmf__water__flux_connection_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "connection_set_count" "', argument " "1"" of type '" "std::set< cmf::water::flux_connection * > const *""'"); 
  }
  arg1 = reinterpret_cast< std::set< cmf::water::flux_connection * > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_std__setT_cmf__water__flux_connection_p_std__lessT_cmf__water__flux_connection_p_t_std__allocatorT_cmf__water__flux_connection_p_t_t__key_type, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "connection_set_count" "', argument " "2"" of type '" "std::set< cmf::water::flux_connection * >::key_type""'"); 
  }
  temp2 = reinterpret_cast< std::set< cmf::water::flux_connection * >::key_type >(argp2);
  arg2 = &temp2;
  {
    try {
      result = ((std::set< cmf::water::flux_connection * > const *)arg1)->count((std::set< cmf::water::flux_connection * >::key_type const &)*arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_connection_set_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< cmf::water::flux_connection * > *arg1 = (std::set< cmf::water::flux_connection * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::set< cmf::water::flux_connection * >::iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__setT_cmf__water__flux_connection_p_std__lessT_cmf__water__flux_connection_p_t_std__allocatorT_cmf__water__flux_connection_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "connection_set_begin" "', argument " "1"" of type '" "std::set< cmf::water::flux_connection * > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< cmf::water::flux_connection * > * >(argp1);
  {
    try {
      result = (arg1)->begin();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::set< cmf::water::flux_connection * >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_connection_set_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< cmf::water::flux_connection * > *arg1 = (std::set< cmf::water::flux_connection * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::set< cmf::water::flux_connection * >::iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__setT_cmf__water__flux_connection_p_std__lessT_cmf__water__flux_connection_p_t_std__allocatorT_cmf__water__flux_connection_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "connection_set_end" "', argument " "1"" of type '" "std::set< cmf::water::flux_connection * > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< cmf::water::flux_connection * > * >(argp1);
  {
    try {
      result = (arg1)->end();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::set< cmf::water::flux_connection * >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_connection_set_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< cmf::water::flux_connection * > *arg1 = (std::set< cmf::water::flux_connection * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::set< cmf::water::flux_connection * >::reverse_iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__setT_cmf__water__flux_connection_p_std__lessT_cmf__water__flux_connection_p_t_std__allocatorT_cmf__water__flux_connection_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "connection_set_rbegin" "', argument " "1"" of type '" "std::set< cmf::water::flux_connection * > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< cmf::water::flux_connection * > * >(argp1);
  {
    try {
      result = (arg1)->rbegin();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::set< cmf::water::flux_connection * >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_connection_set_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< cmf::water::flux_connection * > *arg1 = (std::set< cmf::water::flux_connection * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::set< cmf::water::flux_connection * >::reverse_iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__setT_cmf__water__flux_connection_p_std__lessT_cmf__water__flux_connection_p_t_std__allocatorT_cmf__water__flux_connection_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "connection_set_rend" "', argument " "1"" of type '" "std::set< cmf::water::flux_connection * > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< cmf::water::flux_connection * > * >(argp1);
  {
    try {
      result = (arg1)->rend();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::set< cmf::water::flux_connection * >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_connection_set_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::set< cmf::water::flux_connection * > *arg1 = (std::set< cmf::water::flux_connection * > *) 0 ;
  std::set< cmf::water::flux_connection * >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__setT_cmf__water__flux_connection_p_std__lessT_cmf__water__flux_connection_p_t_std__allocatorT_cmf__water__flux_connection_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "connection_set_erase" "', argument " "1"" of type '" "std::set< cmf::water::flux_connection * > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< cmf::water::flux_connection * > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "connection_set_erase" "', argument " "2"" of type '" "std::set< cmf::water::flux_connection * >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::set< cmf::water::flux_connection * >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::set< cmf::water::flux_connection * >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "connection_set_erase" "', argument " "2"" of type '" "std::set< cmf::water::flux_connection * >::iterator""'");
    }
  }
  {
    try {
      (arg1)->erase(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_connection_set_erase__SWIG_2(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::set< cmf::water::flux_connection * > *arg1 = (std::set< cmf::water::flux_connection * > *) 0 ;
  std::set< cmf::water::flux_connection * >::iterator arg2 ;
  std::set< cmf::water::flux_connection * >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__setT_cmf__water__flux_connection_p_std__lessT_cmf__water__flux_connection_p_t_std__allocatorT_cmf__water__flux_connection_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "connection_set_erase" "', argument " "1"" of type '" "std::set< cmf::water::flux_connection * > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< cmf::water::flux_connection * > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "connection_set_erase" "', argument " "2"" of type '" "std::set< cmf::water::flux_connection * >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::set< cmf::water::flux_connection * >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::set< cmf::water::flux_connection * >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "connection_set_erase" "', argument " "2"" of type '" "std::set< cmf::water::flux_connection * >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "connection_set_erase" "', argument " "3"" of type '" "std::set< cmf::water::flux_connection * >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::set< cmf::water::flux_connection * >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::set< cmf::water::flux_connection * >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "connection_set_erase" "', argument " "3"" of type '" "std::set< cmf::water::flux_connection * >::iterator""'");
    }
  }
  {
    try {
      (arg1)->erase(arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_connection_set_erase(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"connection_set_erase",0,3,argv))) SWIG_fail;
  --argc;
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (argc == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = swig::asptr(argv[0], (std::set<cmf::water::flux_connection *,std::less< cmf::water::flux_connection * >,std::allocator< cmf::water::flux_connection * > >**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__setT_cmf__water__flux_connection_p_std__lessT_cmf__water__flux_connection_p_t_std__allocatorT_cmf__water__flux_connection_p_t_t__key_type, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (argc == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = swig::asptr(argv[0], (std::set<cmf::water::flux_connection *,std::less< cmf::water::flux_connection * >,std::allocator< cmf::water::flux_connection * > >**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::set< cmf::water::flux_connection * >::iterator > *>(iter) != 0));
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
    if (argc == 3) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = swig::asptr(argv[0], (std::set<cmf::water::flux_connection *,std::less< cmf::water::flux_connection * >,std::allocator< cmf::water::flux_connection * > >**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::set< cmf::water::flux_connection * >::iterator > *>(iter) != 0));
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::set< cmf::water::flux_connection * >::iterator > *>(iter) != 0));
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 3;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_3:
    
  dispatch:
    switch(_index) {
    case 1:
      return _wrap_connection_set_erase__SWIG_0(self, argc, argv);
    case 2:
      return _wrap_connection_set_erase__SWIG_1(self, argc, argv);
    case 3:
      return _wrap_connection_set_erase__SWIG_2(self, argc, argv);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'connection_set_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    erase(std::set< cmf::water::flux_connection * > *,std::set< cmf::water::flux_connection * >::key_type const &)\n"
    "    erase(std::set< cmf::water::flux_connection * > *,std::set< cmf::water::flux_connection * >::iterator)\n"
    "    erase(std::set< cmf::water::flux_connection * > *,std::set< cmf::water::flux_connection * >::iterator,std::set< cmf::water::flux_connection * >::iterator)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_connection_set_find(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< cmf::water::flux_connection * > *arg1 = (std::set< cmf::water::flux_connection * > *) 0 ;
  std::set< cmf::water::flux_connection * >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  std::set< cmf::water::flux_connection * >::key_type temp2 ;
  PyObject *swig_obj[2] ;
  std::set< cmf::water::flux_connection * >::iterator result;
  
  if (!SWIG_Python_UnpackTuple(args,"connection_set_find",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__setT_cmf__water__flux_connection_p_std__lessT_cmf__water__flux_connection_p_t_std__allocatorT_cmf__water__flux_connection_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "connection_set_find" "', argument " "1"" of type '" "std::set< cmf::water::flux_connection * > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< cmf::water::flux_connection * > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_std__setT_cmf__water__flux_connection_p_std__lessT_cmf__water__flux_connection_p_t_std__allocatorT_cmf__water__flux_connection_p_t_t__key_type, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "connection_set_find" "', argument " "2"" of type '" "std::set< cmf::water::flux_connection * >::key_type""'"); 
  }
  temp2 = reinterpret_cast< std::set< cmf::water::flux_connection * >::key_type >(argp2);
  arg2 = &temp2;
  {
    try {
      result = (arg1)->find((std::set< cmf::water::flux_connection * >::key_type const &)*arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::set< cmf::water::flux_connection * >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_connection_set_lower_bound(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< cmf::water::flux_connection * > *arg1 = (std::set< cmf::water::flux_connection * > *) 0 ;
  std::set< cmf::water::flux_connection * >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  std::set< cmf::water::flux_connection * >::key_type temp2 ;
  PyObject *swig_obj[2] ;
  std::set< cmf::water::flux_connection * >::iterator result;
  
  if (!SWIG_Python_UnpackTuple(args,"connection_set_lower_bound",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__setT_cmf__water__flux_connection_p_std__lessT_cmf__water__flux_connection_p_t_std__allocatorT_cmf__water__flux_connection_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "connection_set_lower_bound" "', argument " "1"" of type '" "std::set< cmf::water::flux_connection * > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< cmf::water::flux_connection * > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_std__setT_cmf__water__flux_connection_p_std__lessT_cmf__water__flux_connection_p_t_std__allocatorT_cmf__water__flux_connection_p_t_t__key_type, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "connection_set_lower_bound" "', argument " "2"" of type '" "std::set< cmf::water::flux_connection * >::key_type""'"); 
  }
  temp2 = reinterpret_cast< std::set< cmf::water::flux_connection * >::key_type >(argp2);
  arg2 = &temp2;
  {
    try {
      result = (arg1)->lower_bound((std::set< cmf::water::flux_connection * >::key_type const &)*arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::set< cmf::water::flux_connection * >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_connection_set_upper_bound(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< cmf::water::flux_connection * > *arg1 = (std::set< cmf::water::flux_connection * > *) 0 ;
  std::set< cmf::water::flux_connection * >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  std::set< cmf::water::flux_connection * >::key_type temp2 ;
  PyObject *swig_obj[2] ;
  std::set< cmf::water::flux_connection * >::iterator result;
  
  if (!SWIG_Python_UnpackTuple(args,"connection_set_upper_bound",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__setT_cmf__water__flux_connection_p_std__lessT_cmf__water__flux_connection_p_t_std__allocatorT_cmf__water__flux_connection_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "connection_set_upper_bound" "', argument " "1"" of type '" "std::set< cmf::water::flux_connection * > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< cmf::water::flux_connection * > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_std__setT_cmf__water__flux_connection_p_std__lessT_cmf__water__flux_connection_p_t_std__allocatorT_cmf__water__flux_connection_p_t_t__key_type, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "connection_set_upper_bound" "', argument " "2"" of type '" "std::set< cmf::water::flux_connection * >::key_type""'"); 
  }
  temp2 = reinterpret_cast< std::set< cmf::water::flux_connection * >::key_type >(argp2);
  arg2 = &temp2;
  {
    try {
      result = (arg1)->upper_bound((std::set< cmf::water::flux_connection * >::key_type const &)*arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::set< cmf::water::flux_connection * >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_connection_set_equal_range(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< cmf::water::flux_connection * > *arg1 = (std::set< cmf::water::flux_connection * > *) 0 ;
  std::set< cmf::water::flux_connection * >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  std::set< cmf::water::flux_connection * >::key_type temp2 ;
  PyObject *swig_obj[2] ;
  SwigValueWrapper< std::pair< std::set< cmf::water::flux_connection * >::iterator,std::set< cmf::water::flux_connection * >::iterator > > result;
  
  if (!SWIG_Python_UnpackTuple(args,"connection_set_equal_range",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__setT_cmf__water__flux_connection_p_std__lessT_cmf__water__flux_connection_p_t_std__allocatorT_cmf__water__flux_connection_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "connection_set_equal_range" "', argument " "1"" of type '" "std::set< cmf::water::flux_connection * > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< cmf::water::flux_connection * > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_std__setT_cmf__water__flux_connection_p_std__lessT_cmf__water__flux_connection_p_t_std__allocatorT_cmf__water__flux_connection_p_t_t__key_type, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "connection_set_equal_range" "', argument " "2"" of type '" "std::set< cmf::water::flux_connection * >::key_type""'"); 
  }
  temp2 = reinterpret_cast< std::set< cmf::water::flux_connection * >::key_type >(argp2);
  arg2 = &temp2;
  {
    try {
      result = (arg1)->equal_range((std::set< cmf::water::flux_connection * >::key_type const &)*arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = PyTuple_New(2);
  PyTuple_SetItem(resultobj,0,SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::pair< std::set< cmf::water::flux_connection * >::iterator,std::set< cmf::water::flux_connection * >::iterator > & >(result).first),
      swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN));
  PyTuple_SetItem(resultobj,1,SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::pair< std::set< cmf::water::flux_connection * >::iterator,std::set< cmf::water::flux_connection * >::iterator > & >(result).second),
      swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_connection_set_insert(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< cmf::water::flux_connection * > *arg1 = (std::set< cmf::water::flux_connection * > *) 0 ;
  std::set< cmf::water::flux_connection * >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  std::set< cmf::water::flux_connection * >::value_type temp2 ;
  PyObject *swig_obj[2] ;
  SwigValueWrapper< std::pair< std::set< cmf::water::flux_connection * >::iterator,bool > > result;
  
  if (!SWIG_Python_UnpackTuple(args,"connection_set_insert",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__setT_cmf__water__flux_connection_p_std__lessT_cmf__water__flux_connection_p_t_std__allocatorT_cmf__water__flux_connection_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "connection_set_insert" "', argument " "1"" of type '" "std::set< cmf::water::flux_connection * > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< cmf::water::flux_connection * > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_std__setT_cmf__water__flux_connection_p_std__lessT_cmf__water__flux_connection_p_t_std__allocatorT_cmf__water__flux_connection_p_t_t__value_type, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "connection_set_insert" "', argument " "2"" of type '" "std::set< cmf::water::flux_connection * >::value_type""'"); 
  }
  temp2 = reinterpret_cast< std::set< cmf::water::flux_connection * >::value_type >(argp2);
  arg2 = &temp2;
  {
    try {
      result = (arg1)->insert((std::set< cmf::water::flux_connection * >::value_type const &)*arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = PyTuple_New(2);
  PyTuple_SetItem(resultobj,0,SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::pair< std::set< cmf::water::flux_connection * >::iterator,bool > & >(result).first),
      swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN));    
  PyTuple_SetItem(resultobj,1,SWIG_From_bool  (static_cast< const std::pair< std::set< cmf::water::flux_connection * >::iterator,bool > & >(result).second));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_connection_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< cmf::water::flux_connection * > *arg1 = (std::set< cmf::water::flux_connection * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__setT_cmf__water__flux_connection_p_std__lessT_cmf__water__flux_connection_p_t_std__allocatorT_cmf__water__flux_connection_p_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_connection_set" "', argument " "1"" of type '" "std::set< cmf::water::flux_connection * > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< cmf::water::flux_connection * > * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *connection_set_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__setT_cmf__water__flux_connection_p_std__lessT_cmf__water__flux_connection_p_t_std__allocatorT_cmf__water__flux_connection_p_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *connection_set_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_flux_node_project(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::water::flux_node *arg1 = (cmf::water::flux_node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< cmf::water::flux_node const > tempshared1 ;
  std::tr1::shared_ptr< cmf::water::flux_node const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  cmf::project *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__water__flux_node_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "flux_node_project" "', argument " "1"" of type '" "cmf::water::flux_node const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr< const cmf::water::flux_node > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr< const cmf::water::flux_node > * >(argp1);
      arg1 = const_cast< cmf::water::flux_node * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr< const cmf::water::flux_node > * >(argp1);
      arg1 = const_cast< cmf::water::flux_node * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      result = (cmf::project *) &((cmf::water::flux_node const *)arg1)->project();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmf__project, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_flux_node_node_id_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::water::flux_node *arg1 = (cmf::water::flux_node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< cmf::water::flux_node > tempshared1 ;
  std::tr1::shared_ptr< cmf::water::flux_node > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__water__flux_node_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "flux_node_node_id_get" "', argument " "1"" of type '" "cmf::water::flux_node *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  cmf::water::flux_node > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  cmf::water::flux_node > * >(argp1);
      arg1 = const_cast< cmf::water::flux_node * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  cmf::water::flux_node > * >(argp1);
      arg1 = const_cast< cmf::water::flux_node * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (int)(int) ((arg1)->node_id);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_flux_node_is_storage(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::water::flux_node *arg1 = (cmf::water::flux_node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< cmf::water::flux_node const > tempshared1 ;
  std::tr1::shared_ptr< cmf::water::flux_node const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__water__flux_node_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "flux_node_is_storage" "', argument " "1"" of type '" "cmf::water::flux_node const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr< const cmf::water::flux_node > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr< const cmf::water::flux_node > * >(argp1);
      arg1 = const_cast< cmf::water::flux_node * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr< const cmf::water::flux_node > * >(argp1);
      arg1 = const_cast< cmf::water::flux_node * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      result = (bool)((cmf::water::flux_node const *)arg1)->is_storage();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_flux_node_Name_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::water::flux_node *arg1 = (cmf::water::flux_node *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< cmf::water::flux_node > tempshared1 ;
  std::tr1::shared_ptr< cmf::water::flux_node > *smartarg1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"flux_node_Name_set",2,2,swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__water__flux_node_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "flux_node_Name_set" "', argument " "1"" of type '" "cmf::water::flux_node *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  cmf::water::flux_node > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  cmf::water::flux_node > * >(argp1);
      arg1 = const_cast< cmf::water::flux_node * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  cmf::water::flux_node > * >(argp1);
      arg1 = const_cast< cmf::water::flux_node * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "flux_node_Name_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "flux_node_Name_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->Name = *arg2;
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_flux_node_Name_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::water::flux_node *arg1 = (cmf::water::flux_node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< cmf::water::flux_node > tempshared1 ;
  std::tr1::shared_ptr< cmf::water::flux_node > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__water__flux_node_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "flux_node_Name_get" "', argument " "1"" of type '" "cmf::water::flux_node *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  cmf::water::flux_node > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  cmf::water::flux_node > * >(argp1);
      arg1 = const_cast< cmf::water::flux_node * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  cmf::water::flux_node > * >(argp1);
      arg1 = const_cast< cmf::water::flux_node * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (std::string *) & ((arg1)->Name);
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_flux_node_to_string(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::water::flux_node *arg1 = (cmf::water::flux_node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< cmf::water::flux_node const > tempshared1 ;
  std::tr1::shared_ptr< cmf::water::flux_node const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__water__flux_node_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "flux_node_to_string" "', argument " "1"" of type '" "cmf::water::flux_node const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr< const cmf::water::flux_node > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr< const cmf::water::flux_node > * >(argp1);
      arg1 = const_cast< cmf::water::flux_node * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr< const cmf::water::flux_node > * >(argp1);
      arg1 = const_cast< cmf::water::flux_node * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      result = ((cmf::water::flux_node const *)arg1)->to_string();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_flux_node(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::water::flux_node *arg1 = (cmf::water::flux_node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< cmf::water::flux_node > tempshared1 ;
  std::tr1::shared_ptr< cmf::water::flux_node > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__water__flux_node_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_flux_node" "', argument " "1"" of type '" "cmf::water::flux_node *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  cmf::water::flux_node > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  cmf::water::flux_node > * >(argp1);
      arg1 = const_cast< cmf::water::flux_node * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  cmf::water::flux_node > * >(argp1);
      arg1 = const_cast< cmf::water::flux_node * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_flux_node___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::water::flux_node *arg1 = (cmf::water::flux_node *) 0 ;
  cmf::water::flux_node *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< cmf::water::flux_node const > tempshared1 ;
  std::tr1::shared_ptr< cmf::water::flux_node const > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  std::tr1::shared_ptr< cmf::water::flux_node const > tempshared2 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args,"flux_node___eq__",2,2,swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__water__flux_node_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "flux_node___eq__" "', argument " "1"" of type '" "cmf::water::flux_node const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr< const cmf::water::flux_node > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr< const cmf::water::flux_node > * >(argp1);
      arg1 = const_cast< cmf::water::flux_node * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr< const cmf::water::flux_node > * >(argp1);
      arg1 = const_cast< cmf::water::flux_node * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(swig_obj[1], &argp2, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__water__flux_node_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "flux_node___eq__" "', argument " "2"" of type '" "cmf::water::flux_node const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "flux_node___eq__" "', argument " "2"" of type '" "cmf::water::flux_node const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared2 = *reinterpret_cast< std::tr1::shared_ptr< const cmf::water::flux_node > * >(argp2);
      delete reinterpret_cast< std::tr1::shared_ptr< const cmf::water::flux_node > * >(argp2);
      arg2 = const_cast< cmf::water::flux_node * >(tempshared2.get());
    } else {
      arg2 = const_cast< cmf::water::flux_node * >(reinterpret_cast< std::tr1::shared_ptr< const cmf::water::flux_node > * >(argp2)->get());
    }
  }
  {
    try {
      result = (bool)((cmf::water::flux_node const *)arg1)->operator ==((cmf::water::flux_node const &)*arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_flux_node_RecalcFluxes(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::water::flux_node *arg1 = (cmf::water::flux_node *) 0 ;
  cmf::math::Time arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< cmf::water::flux_node > tempshared1 ;
  std::tr1::shared_ptr< cmf::water::flux_node > *smartarg1 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args,"flux_node_RecalcFluxes",2,2,swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__water__flux_node_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "flux_node_RecalcFluxes" "', argument " "1"" of type '" "cmf::water::flux_node *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  cmf::water::flux_node > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  cmf::water::flux_node > * >(argp1);
      arg1 = const_cast< cmf::water::flux_node * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  cmf::water::flux_node > * >(argp1);
      arg1 = const_cast< cmf::water::flux_node * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    arg2 = convert_datetime_to_cmftime(swig_obj[1]);    
  }
  {
    try {
      result = (bool)(arg1)->RecalcFluxes(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_flux_node_get_connection(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::water::flux_node *arg1 = (cmf::water::flux_node *) 0 ;
  cmf::water::flux_node *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< cmf::water::flux_node > tempshared1 ;
  std::tr1::shared_ptr< cmf::water::flux_node > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  std::tr1::shared_ptr< cmf::water::flux_node const > tempshared2 ;
  PyObject *swig_obj[2] ;
  cmf::water::flux_connection *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args,"flux_node_get_connection",2,2,swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__water__flux_node_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "flux_node_get_connection" "', argument " "1"" of type '" "cmf::water::flux_node *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  cmf::water::flux_node > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  cmf::water::flux_node > * >(argp1);
      arg1 = const_cast< cmf::water::flux_node * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  cmf::water::flux_node > * >(argp1);
      arg1 = const_cast< cmf::water::flux_node * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(swig_obj[1], &argp2, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__water__flux_node_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "flux_node_get_connection" "', argument " "2"" of type '" "cmf::water::flux_node const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "flux_node_get_connection" "', argument " "2"" of type '" "cmf::water::flux_node const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared2 = *reinterpret_cast< std::tr1::shared_ptr< const cmf::water::flux_node > * >(argp2);
      delete reinterpret_cast< std::tr1::shared_ptr< const cmf::water::flux_node > * >(argp2);
      arg2 = const_cast< cmf::water::flux_node * >(tempshared2.get());
    } else {
      arg2 = const_cast< cmf::water::flux_node * >(reinterpret_cast< std::tr1::shared_ptr< const cmf::water::flux_node > * >(argp2)->get());
    }
  }
  {
    try {
      result = (cmf::water::flux_connection *)(arg1)->get_connection((cmf::water::flux_node const &)*arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmf__water__flux_connection, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_flux_node_remove_connection(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::water::flux_node *arg1 = (cmf::water::flux_node *) 0 ;
  cmf::water::flux_node::ptr arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< cmf::water::flux_node > tempshared1 ;
  std::tr1::shared_ptr< cmf::water::flux_node > *smartarg1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args,"flux_node_remove_connection",2,2,swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__water__flux_node_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "flux_node_remove_connection" "', argument " "1"" of type '" "cmf::water::flux_node *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  cmf::water::flux_node > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  cmf::water::flux_node > * >(argp1);
      arg1 = const_cast< cmf::water::flux_node * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  cmf::water::flux_node > * >(argp1);
      arg1 = const_cast< cmf::water::flux_node * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(swig_obj[1], &argp2, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__water__flux_node_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "flux_node_remove_connection" "', argument " "2"" of type '" "cmf::water::flux_node::ptr""'"); 
    }
    if (argp2) arg2 = *(reinterpret_cast< cmf::water::flux_node::ptr * >(argp2));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< cmf::water::flux_node::ptr * >(argp2);
  }
  {
    try {
      result = (bool)(arg1)->remove_connection(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_flux_node_flux_to(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::water::flux_node *arg1 = (cmf::water::flux_node *) 0 ;
  cmf::water::flux_node *arg2 = 0 ;
  cmf::math::Time arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< cmf::water::flux_node > tempshared1 ;
  std::tr1::shared_ptr< cmf::water::flux_node > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  std::tr1::shared_ptr< cmf::water::flux_node const > tempshared2 ;
  PyObject *swig_obj[3] ;
  real result;
  
  if (!SWIG_Python_UnpackTuple(args,"flux_node_flux_to",3,3,swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__water__flux_node_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "flux_node_flux_to" "', argument " "1"" of type '" "cmf::water::flux_node *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  cmf::water::flux_node > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  cmf::water::flux_node > * >(argp1);
      arg1 = const_cast< cmf::water::flux_node * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  cmf::water::flux_node > * >(argp1);
      arg1 = const_cast< cmf::water::flux_node * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(swig_obj[1], &argp2, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__water__flux_node_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "flux_node_flux_to" "', argument " "2"" of type '" "cmf::water::flux_node const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "flux_node_flux_to" "', argument " "2"" of type '" "cmf::water::flux_node const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared2 = *reinterpret_cast< std::tr1::shared_ptr< const cmf::water::flux_node > * >(argp2);
      delete reinterpret_cast< std::tr1::shared_ptr< const cmf::water::flux_node > * >(argp2);
      arg2 = const_cast< cmf::water::flux_node * >(tempshared2.get());
    } else {
      arg2 = const_cast< cmf::water::flux_node * >(reinterpret_cast< std::tr1::shared_ptr< const cmf::water::flux_node > * >(argp2)->get());
    }
  }
  {
    arg3 = convert_datetime_to_cmftime(swig_obj[2]);    
  }
  {
    try {
      result = (real)(arg1)->flux_to((cmf::water::flux_node const &)*arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_flux_node_flux3d_to(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::water::flux_node *arg1 = (cmf::water::flux_node *) 0 ;
  cmf::water::flux_node *arg2 = 0 ;
  cmf::math::Time arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< cmf::water::flux_node > tempshared1 ;
  std::tr1::shared_ptr< cmf::water::flux_node > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  std::tr1::shared_ptr< cmf::water::flux_node const > tempshared2 ;
  PyObject *swig_obj[3] ;
  cmf::geometry::point result;
  
  if (!SWIG_Python_UnpackTuple(args,"flux_node_flux3d_to",3,3,swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__water__flux_node_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "flux_node_flux3d_to" "', argument " "1"" of type '" "cmf::water::flux_node *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  cmf::water::flux_node > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  cmf::water::flux_node > * >(argp1);
      arg1 = const_cast< cmf::water::flux_node * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  cmf::water::flux_node > * >(argp1);
      arg1 = const_cast< cmf::water::flux_node * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(swig_obj[1], &argp2, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__water__flux_node_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "flux_node_flux3d_to" "', argument " "2"" of type '" "cmf::water::flux_node const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "flux_node_flux3d_to" "', argument " "2"" of type '" "cmf::water::flux_node const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared2 = *reinterpret_cast< std::tr1::shared_ptr< const cmf::water::flux_node > * >(argp2);
      delete reinterpret_cast< std::tr1::shared_ptr< const cmf::water::flux_node > * >(argp2);
      arg2 = const_cast< cmf::water::flux_node * >(tempshared2.get());
    } else {
      arg2 = const_cast< cmf::water::flux_node * >(reinterpret_cast< std::tr1::shared_ptr< const cmf::water::flux_node > * >(argp2)->get());
    }
  }
  {
    arg3 = convert_datetime_to_cmftime(swig_obj[2]);    
  }
  {
    try {
      result = (arg1)->flux3d_to((cmf::water::flux_node const &)*arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj((new cmf::geometry::point(static_cast< const cmf::geometry::point& >(result))), SWIGTYPE_p_cmf__geometry__point, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_flux_node_get_3d_flux(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::water::flux_node *arg1 = (cmf::water::flux_node *) 0 ;
  cmf::math::Time arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< cmf::water::flux_node > tempshared1 ;
  std::tr1::shared_ptr< cmf::water::flux_node > *smartarg1 = 0 ;
  PyObject *swig_obj[2] ;
  cmf::geometry::point result;
  
  if (!SWIG_Python_UnpackTuple(args,"flux_node_get_3d_flux",2,2,swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__water__flux_node_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "flux_node_get_3d_flux" "', argument " "1"" of type '" "cmf::water::flux_node *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  cmf::water::flux_node > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  cmf::water::flux_node > * >(argp1);
      arg1 = const_cast< cmf::water::flux_node * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  cmf::water::flux_node > * >(argp1);
      arg1 = const_cast< cmf::water::flux_node * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    arg2 = convert_datetime_to_cmftime(swig_obj[1]);    
  }
  {
    try {
      result = (arg1)->get_3d_flux(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj((new cmf::geometry::point(static_cast< const cmf::geometry::point& >(result))), SWIGTYPE_p_cmf__geometry__point, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_flux_node_water_balance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::water::flux_node *arg1 = (cmf::water::flux_node *) 0 ;
  cmf::math::Time arg2 ;
  cmf::water::flux_connection *arg3 = (cmf::water::flux_connection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< cmf::water::flux_node const > tempshared1 ;
  std::tr1::shared_ptr< cmf::water::flux_node const > *smartarg1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  real result;
  
  if (!SWIG_Python_UnpackTuple(args,"flux_node_water_balance",2,3,swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__water__flux_node_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "flux_node_water_balance" "', argument " "1"" of type '" "cmf::water::flux_node const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr< const cmf::water::flux_node > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr< const cmf::water::flux_node > * >(argp1);
      arg1 = const_cast< cmf::water::flux_node * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr< const cmf::water::flux_node > * >(argp1);
      arg1 = const_cast< cmf::water::flux_node * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    arg2 = convert_datetime_to_cmftime(swig_obj[1]);    
  }
  if (swig_obj[2]) {
    res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_cmf__water__flux_connection, 0 |  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "flux_node_water_balance" "', argument " "3"" of type '" "cmf::water::flux_connection const *""'"); 
    }
    arg3 = reinterpret_cast< cmf::water::flux_connection * >(argp3);
  }
  {
    try {
      result = (real)((cmf::water::flux_node const *)arg1)->water_balance(arg2,(cmf::water::flux_connection const *)arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_flux_node_conc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::water::flux_node *arg1 = (cmf::water::flux_node *) 0 ;
  cmf::math::Time arg2 ;
  cmf::water::solute *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< cmf::water::flux_node const > tempshared1 ;
  std::tr1::shared_ptr< cmf::water::flux_node const > *smartarg1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  real result;
  
  if (!SWIG_Python_UnpackTuple(args,"flux_node_conc",3,3,swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__water__flux_node_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "flux_node_conc" "', argument " "1"" of type '" "cmf::water::flux_node const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr< const cmf::water::flux_node > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr< const cmf::water::flux_node > * >(argp1);
      arg1 = const_cast< cmf::water::flux_node * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr< const cmf::water::flux_node > * >(argp1);
      arg1 = const_cast< cmf::water::flux_node * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    arg2 = convert_datetime_to_cmftime(swig_obj[1]);    
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_cmf__water__solute,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "flux_node_conc" "', argument " "3"" of type '" "cmf::water::solute const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "flux_node_conc" "', argument " "3"" of type '" "cmf::water::solute const &""'"); 
  }
  arg3 = reinterpret_cast< cmf::water::solute * >(argp3);
  {
    try {
      result = (real)((cmf::water::flux_node const *)arg1)->conc(arg2,(cmf::water::solute const &)*arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_flux_node_Location_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::water::flux_node *arg1 = (cmf::water::flux_node *) 0 ;
  cmf::geometry::point *arg2 = (cmf::geometry::point *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< cmf::water::flux_node > tempshared1 ;
  std::tr1::shared_ptr< cmf::water::flux_node > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"flux_node_Location_set",2,2,swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__water__flux_node_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "flux_node_Location_set" "', argument " "1"" of type '" "cmf::water::flux_node *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  cmf::water::flux_node > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  cmf::water::flux_node > * >(argp1);
      arg1 = const_cast< cmf::water::flux_node * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  cmf::water::flux_node > * >(argp1);
      arg1 = const_cast< cmf::water::flux_node * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cmf__geometry__point, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "flux_node_Location_set" "', argument " "2"" of type '" "cmf::geometry::point *""'"); 
  }
  arg2 = reinterpret_cast< cmf::geometry::point * >(argp2);
  if (arg1) (arg1)->Location = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_flux_node_Location_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::water::flux_node *arg1 = (cmf::water::flux_node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< cmf::water::flux_node > tempshared1 ;
  std::tr1::shared_ptr< cmf::water::flux_node > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  cmf::geometry::point *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__water__flux_node_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "flux_node_Location_get" "', argument " "1"" of type '" "cmf::water::flux_node *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  cmf::water::flux_node > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  cmf::water::flux_node > * >(argp1);
      arg1 = const_cast< cmf::water::flux_node * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  cmf::water::flux_node > * >(argp1);
      arg1 = const_cast< cmf::water::flux_node * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (cmf::geometry::point *)& ((arg1)->Location);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmf__geometry__point, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_flux_node_is_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::water::flux_node *arg1 = (cmf::water::flux_node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< cmf::water::flux_node const > tempshared1 ;
  std::tr1::shared_ptr< cmf::water::flux_node const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__water__flux_node_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "flux_node_is_empty" "', argument " "1"" of type '" "cmf::water::flux_node const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr< const cmf::water::flux_node > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr< const cmf::water::flux_node > * >(argp1);
      arg1 = const_cast< cmf::water::flux_node * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr< const cmf::water::flux_node > * >(argp1);
      arg1 = const_cast< cmf::water::flux_node * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      result = (bool)((cmf::water::flux_node const *)arg1)->is_empty();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_flux_node(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::project *arg1 = 0 ;
  cmf::geometry::point arg2 = (cmf::geometry::point) cmf::geometry::point() ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  cmf::water::flux_node *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args,"new_flux_node",1,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cmf__project,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_flux_node" "', argument " "1"" of type '" "cmf::project const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_flux_node" "', argument " "1"" of type '" "cmf::project const &""'"); 
  }
  arg1 = reinterpret_cast< cmf::project * >(argp1);
  if (swig_obj[1]) {
    {
      cmf::geometry::point p;
      if (((!convert_xyz_to_point(swig_obj[1],p)) || !convert_seq_to_point(swig_obj[1],p)))
      {
        PyErr_SetString(PyExc_ValueError,"The object to convert needs to be either a sequence of length 2 or 3 or an object exposing an x and y attribute of type float(z is used if present)");
      }
      arg2=p;
    }
  }
  {
    try {
      result = (cmf::water::flux_node *)new cmf::water::flux_node((cmf::project const &)*arg1,arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  {
    std::tr1::shared_ptr<  cmf::water::flux_node > *smartresult = result ? new std::tr1::shared_ptr<  cmf::water::flux_node >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__tr1__shared_ptrT_cmf__water__flux_node_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_flux_node_SWIGSharedPtrUpcast(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::tr1::shared_ptr< cmf::water::flux_node > arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  SwigValueWrapper< std::tr1::shared_ptr< cmf::geometry::Locatable > > result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__water__flux_node_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "flux_node_SWIGSharedPtrUpcast" "', argument " "1"" of type '" "std::tr1::shared_ptr< cmf::water::flux_node >""'"); 
    }
    if (argp1) arg1 = *(reinterpret_cast< std::tr1::shared_ptr< cmf::water::flux_node > * >(argp1));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< std::tr1::shared_ptr< cmf::water::flux_node > * >(argp1);
  }
  {
    try {
      result = cmf_water_flux_node_SWIGSharedPtrUpcast(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj((new std::tr1::shared_ptr< cmf::geometry::Locatable >(static_cast< const std::tr1::shared_ptr< cmf::geometry::Locatable >& >(result))), SWIGTYPE_p_std__tr1__shared_ptrT_cmf__geometry__Locatable_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_flux_node_potential_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::water::flux_node *arg1 = (cmf::water::flux_node *) 0 ;
  real arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< cmf::water::flux_node > tempshared1 ;
  std::tr1::shared_ptr< cmf::water::flux_node > *smartarg1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"flux_node_potential_set",2,2,swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__water__flux_node_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "flux_node_potential_set" "', argument " "1"" of type '" "cmf::water::flux_node *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  cmf::water::flux_node > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  cmf::water::flux_node > * >(argp1);
      arg1 = const_cast< cmf::water::flux_node * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  cmf::water::flux_node > * >(argp1);
      arg1 = const_cast< cmf::water::flux_node * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "flux_node_potential_set" "', argument " "2"" of type '" "real""'");
  } 
  arg2 = static_cast< real >(val2);
  {
    try {
      cmf_water_flux_node_potential_set(arg1,arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_flux_node_potential_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::water::flux_node *arg1 = (cmf::water::flux_node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< cmf::water::flux_node > tempshared1 ;
  std::tr1::shared_ptr< cmf::water::flux_node > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  real result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__water__flux_node_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "flux_node_potential_get" "', argument " "1"" of type '" "cmf::water::flux_node *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  cmf::water::flux_node > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  cmf::water::flux_node > * >(argp1);
      arg1 = const_cast< cmf::water::flux_node * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  cmf::water::flux_node > * >(argp1);
      arg1 = const_cast< cmf::water::flux_node * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      result = (real)cmf_water_flux_node_potential_get(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_flux_node_connections_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::water::flux_node *arg1 = (cmf::water::flux_node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< cmf::water::flux_node > tempshared1 ;
  std::tr1::shared_ptr< cmf::water::flux_node > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  cmf::water::connection_vector *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__water__flux_node_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "flux_node_connections_get" "', argument " "1"" of type '" "cmf::water::flux_node *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  cmf::water::flux_node > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  cmf::water::flux_node > * >(argp1);
      arg1 = const_cast< cmf::water::flux_node * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  cmf::water::flux_node > * >(argp1);
      arg1 = const_cast< cmf::water::flux_node * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      result = (cmf::water::connection_vector *)cmf_water_flux_node_connections_get(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_cmf__water__flux_connection_p_std__allocatorT_cmf__water__flux_connection_p_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *flux_node_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__tr1__shared_ptrT_cmf__water__flux_node_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *flux_node_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_count_node_references(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::water::flux_node::ptr arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__water__flux_node_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "count_node_references" "', argument " "1"" of type '" "cmf::water::flux_node::ptr""'"); 
    }
    if (argp1) arg1 = *(reinterpret_cast< cmf::water::flux_node::ptr * >(argp1));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< cmf::water::flux_node::ptr * >(argp1);
  }
  {
    try {
      result = (int)cmf::water::count_node_references(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_get_higher_node(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::water::flux_node::ptr arg1 ;
  cmf::water::flux_node::ptr arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  cmf::water::flux_node::ptr result;
  
  if (!SWIG_Python_UnpackTuple(args,"get_higher_node",2,2,swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__water__flux_node_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "get_higher_node" "', argument " "1"" of type '" "cmf::water::flux_node::ptr""'"); 
    }
    if (argp1) arg1 = *(reinterpret_cast< cmf::water::flux_node::ptr * >(argp1));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< cmf::water::flux_node::ptr * >(argp1);
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(swig_obj[1], &argp2, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__water__flux_node_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "get_higher_node" "', argument " "2"" of type '" "cmf::water::flux_node::ptr""'"); 
    }
    if (argp2) arg2 = *(reinterpret_cast< cmf::water::flux_node::ptr * >(argp2));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< cmf::water::flux_node::ptr * >(argp2);
  }
  {
    try {
      result = cmf::water::get_higher_node(arg1,arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  {
    std::tr1::shared_ptr<  cmf::water::flux_node > *smartresult = result ? new std::tr1::shared_ptr<  cmf::water::flux_node >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__tr1__shared_ptrT_cmf__water__flux_node_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_get_lower_node(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::water::flux_node::ptr arg1 ;
  cmf::water::flux_node::ptr arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  cmf::water::flux_node::ptr result;
  
  if (!SWIG_Python_UnpackTuple(args,"get_lower_node",2,2,swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__water__flux_node_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "get_lower_node" "', argument " "1"" of type '" "cmf::water::flux_node::ptr""'"); 
    }
    if (argp1) arg1 = *(reinterpret_cast< cmf::water::flux_node::ptr * >(argp1));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< cmf::water::flux_node::ptr * >(argp1);
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(swig_obj[1], &argp2, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__water__flux_node_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "get_lower_node" "', argument " "2"" of type '" "cmf::water::flux_node::ptr""'"); 
    }
    if (argp2) arg2 = *(reinterpret_cast< cmf::water::flux_node::ptr * >(argp2));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< cmf::water::flux_node::ptr * >(argp2);
  }
  {
    try {
      result = cmf::water::get_lower_node(arg1,arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  {
    std::tr1::shared_ptr<  cmf::water::flux_node > *smartresult = result ? new std::tr1::shared_ptr<  cmf::water::flux_node >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__tr1__shared_ptrT_cmf__water__flux_node_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_flux_connection_left_node(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::water::flux_connection *arg1 = (cmf::water::flux_connection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  cmf::water::flux_node::ptr result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__water__flux_connection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "flux_connection_left_node" "', argument " "1"" of type '" "cmf::water::flux_connection const *""'"); 
  }
  arg1 = reinterpret_cast< cmf::water::flux_connection * >(argp1);
  {
    try {
      result = ((cmf::water::flux_connection const *)arg1)->left_node();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  {
    std::tr1::shared_ptr<  cmf::water::flux_node > *smartresult = result ? new std::tr1::shared_ptr<  cmf::water::flux_node >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__tr1__shared_ptrT_cmf__water__flux_node_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_flux_connection_right_node(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::water::flux_connection *arg1 = (cmf::water::flux_connection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  cmf::water::flux_node::ptr result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__water__flux_connection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "flux_connection_right_node" "', argument " "1"" of type '" "cmf::water::flux_connection const *""'"); 
  }
  arg1 = reinterpret_cast< cmf::water::flux_connection * >(argp1);
  {
    try {
      result = ((cmf::water::flux_connection const *)arg1)->right_node();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  {
    std::tr1::shared_ptr<  cmf::water::flux_node > *smartresult = result ? new std::tr1::shared_ptr<  cmf::water::flux_node >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__tr1__shared_ptrT_cmf__water__flux_node_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_flux_connection_kill_me(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::water::flux_connection *arg1 = (cmf::water::flux_connection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__water__flux_connection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "flux_connection_kill_me" "', argument " "1"" of type '" "cmf::water::flux_connection *""'"); 
  }
  arg1 = reinterpret_cast< cmf::water::flux_connection * >(argp1);
  {
    try {
      result = (bool)(arg1)->kill_me();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_flux_connection_connection_id_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::water::flux_connection *arg1 = (cmf::water::flux_connection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__water__flux_connection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "flux_connection_connection_id_get" "', argument " "1"" of type '" "cmf::water::flux_connection *""'"); 
  }
  arg1 = reinterpret_cast< cmf::water::flux_connection * >(argp1);
  result = (int)(int) ((arg1)->connection_id);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_flux_connection___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::water::flux_connection *arg1 = (cmf::water::flux_connection *) 0 ;
  cmf::water::flux_connection *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args,"flux_connection___eq__",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__water__flux_connection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "flux_connection___eq__" "', argument " "1"" of type '" "cmf::water::flux_connection *""'"); 
  }
  arg1 = reinterpret_cast< cmf::water::flux_connection * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cmf__water__flux_connection,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "flux_connection___eq__" "', argument " "2"" of type '" "cmf::water::flux_connection const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "flux_connection___eq__" "', argument " "2"" of type '" "cmf::water::flux_connection const &""'"); 
  }
  arg2 = reinterpret_cast< cmf::water::flux_connection * >(argp2);
  {
    try {
      result = (bool)(arg1)->operator ==((cmf::water::flux_connection const &)*arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_flux_connection_get_target__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  cmf::water::flux_connection *arg1 = (cmf::water::flux_connection *) 0 ;
  cmf::water::flux_node *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  std::tr1::shared_ptr< cmf::water::flux_node const > tempshared2 ;
  cmf::water::flux_node::ptr result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__water__flux_connection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "flux_connection_get_target" "', argument " "1"" of type '" "cmf::water::flux_connection *""'"); 
  }
  arg1 = reinterpret_cast< cmf::water::flux_connection * >(argp1);
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(swig_obj[1], &argp2, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__water__flux_node_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "flux_connection_get_target" "', argument " "2"" of type '" "cmf::water::flux_node const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "flux_connection_get_target" "', argument " "2"" of type '" "cmf::water::flux_node const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared2 = *reinterpret_cast< std::tr1::shared_ptr< const cmf::water::flux_node > * >(argp2);
      delete reinterpret_cast< std::tr1::shared_ptr< const cmf::water::flux_node > * >(argp2);
      arg2 = const_cast< cmf::water::flux_node * >(tempshared2.get());
    } else {
      arg2 = const_cast< cmf::water::flux_node * >(reinterpret_cast< std::tr1::shared_ptr< const cmf::water::flux_node > * >(argp2)->get());
    }
  }
  {
    try {
      result = (arg1)->get_target((cmf::water::flux_node const &)*arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  {
    int dcast = 0;
    /*@SWIG:C:\\Programme\\swig\\Lib\\typemaps\\swigmacros.swg,200,%formacro@*//*@SWIG:C:\\Programme\\swig\\Lib\\typemaps\\swigmacros.swg,192,%_formacro_1@*//*@SWIG:cmf.i,113,%_node_down_cast@*/
    if (dcast==0 && result) /*check for cmf::atmosphere::RainCloud*/  {
      std::tr1::shared_ptr<cmf::atmosphere::RainCloud> output = std::tr1::dynamic_pointer_cast<cmf::atmosphere::RainCloud>(result);
      if (output) /*flux_node is cmf::atmosphere::RainCloud */ {
        dcast=1; 
        resultobj = SWIG_NewPointerObj(new std::tr1::shared_ptr<cmf::atmosphere::RainCloud>(output),SWIGTYPE_p_std__tr1__shared_ptrT_cmf__atmosphere__RainCloud_t, SWIG_POINTER_OWN); 
      }
    }
    /*@SWIG@*/
    
    /*@SWIG:C:\\Programme\\swig\\Lib\\typemaps\\swigmacros.swg,192,%_formacro_1@*//*@SWIG:cmf.i,113,%_node_down_cast@*/
    if (dcast==0 && result) /*check for cmf::water::DricheletBoundary*/  {
      std::tr1::shared_ptr<cmf::water::DricheletBoundary> output = std::tr1::dynamic_pointer_cast<cmf::water::DricheletBoundary>(result);
      if (output) /*flux_node is cmf::water::DricheletBoundary */ {
        dcast=1; 
        resultobj = SWIG_NewPointerObj(new std::tr1::shared_ptr<cmf::water::DricheletBoundary>(output),SWIGTYPE_p_std__tr1__shared_ptrT_cmf__water__DricheletBoundary_t, SWIG_POINTER_OWN); 
      }
    }
    /*@SWIG@*/
    
    /*@SWIG:C:\\Programme\\swig\\Lib\\typemaps\\swigmacros.swg,192,%_formacro_1@*//*@SWIG:cmf.i,113,%_node_down_cast@*/
    if (dcast==0 && result) /*check for cmf::water::NeumannBoundary*/  {
      std::tr1::shared_ptr<cmf::water::NeumannBoundary> output = std::tr1::dynamic_pointer_cast<cmf::water::NeumannBoundary>(result);
      if (output) /*flux_node is cmf::water::NeumannBoundary */ {
        dcast=1; 
        resultobj = SWIG_NewPointerObj(new std::tr1::shared_ptr<cmf::water::NeumannBoundary>(output),SWIGTYPE_p_std__tr1__shared_ptrT_cmf__water__NeumannBoundary_t, SWIG_POINTER_OWN); 
      }
    }
    /*@SWIG@*/
    
    /*@SWIG:C:\\Programme\\swig\\Lib\\typemaps\\swigmacros.swg,192,%_formacro_1@*//*@SWIG:cmf.i,113,%_node_down_cast@*/
    if (dcast==0 && result) /*check for cmf::upslope::SoilLayer*/  {
      std::tr1::shared_ptr<cmf::upslope::SoilLayer> output = std::tr1::dynamic_pointer_cast<cmf::upslope::SoilLayer>(result);
      if (output) /*flux_node is cmf::upslope::SoilLayer */ {
        dcast=1; 
        resultobj = SWIG_NewPointerObj(new std::tr1::shared_ptr<cmf::upslope::SoilLayer>(output),SWIGTYPE_p_std__tr1__shared_ptrT_cmf__upslope__SoilLayer_t, SWIG_POINTER_OWN); 
      }
    }
    /*@SWIG@*/
    
    /*@SWIG:C:\\Programme\\swig\\Lib\\typemaps\\swigmacros.swg,192,%_formacro_1@*//*@SWIG:cmf.i,113,%_node_down_cast@*/
    if (dcast==0 && result) /*check for cmf::river::Reach*/  {
      std::tr1::shared_ptr<cmf::river::Reach> output = std::tr1::dynamic_pointer_cast<cmf::river::Reach>(result);
      if (output) /*flux_node is cmf::river::Reach */ {
        dcast=1; 
        resultobj = SWIG_NewPointerObj(new std::tr1::shared_ptr<cmf::river::Reach>(output),SWIGTYPE_p_std__tr1__shared_ptrT_cmf__river__Reach_t, SWIG_POINTER_OWN); 
      }
    }
    /*@SWIG@*/
    
    /*@SWIG:C:\\Programme\\swig\\Lib\\typemaps\\swigmacros.swg,192,%_formacro_1@*//*@SWIG:cmf.i,113,%_node_down_cast@*/
    if (dcast==0 && result) /*check for cmf::river::OpenWaterStorage*/  {
      std::tr1::shared_ptr<cmf::river::OpenWaterStorage> output = std::tr1::dynamic_pointer_cast<cmf::river::OpenWaterStorage>(result);
      if (output) /*flux_node is cmf::river::OpenWaterStorage */ {
        dcast=1; 
        resultobj = SWIG_NewPointerObj(new std::tr1::shared_ptr<cmf::river::OpenWaterStorage>(output),SWIGTYPE_p_std__tr1__shared_ptrT_cmf__river__OpenWaterStorage_t, SWIG_POINTER_OWN); 
      }
    }
    /*@SWIG@*/
    
    /*@SWIG:C:\\Programme\\swig\\Lib\\typemaps\\swigmacros.swg,192,%_formacro_1@*//*@SWIG:cmf.i,113,%_node_down_cast@*/
    if (dcast==0 && result) /*check for cmf::water::WaterStorage*/  {
      std::tr1::shared_ptr<cmf::water::WaterStorage> output = std::tr1::dynamic_pointer_cast<cmf::water::WaterStorage>(result);
      if (output) /*flux_node is cmf::water::WaterStorage */ {
        dcast=1; 
        resultobj = SWIG_NewPointerObj(new std::tr1::shared_ptr<cmf::water::WaterStorage>(output),SWIGTYPE_p_std__tr1__shared_ptrT_cmf__water__WaterStorage_t, SWIG_POINTER_OWN); 
      }
    }
    /*@SWIG@*/
    
    
    
    /*@SWIG@*/
    
    /*@SWIG@*/
    
    /*@SWIG@*/
    
    /*@SWIG@*/
    
    /*@SWIG@*/
    
    /*@SWIG@*/
    
    /*@SWIG@*//*@SWIG@*/
    if (!dcast) resultobj = SWIG_NewPointerObj(result ? new std::tr1::shared_ptr<cmf::water::flux_node>(result) : 0,SWIGTYPE_p_std__tr1__shared_ptrT_cmf__water__flux_node_t, SWIG_POINTER_OWN);   
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_flux_connection_get_target__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  cmf::water::flux_connection *arg1 = (cmf::water::flux_connection *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  cmf::water::flux_node::ptr result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__water__flux_connection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "flux_connection_get_target" "', argument " "1"" of type '" "cmf::water::flux_connection const *""'"); 
  }
  arg1 = reinterpret_cast< cmf::water::flux_connection * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "flux_connection_get_target" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = ((cmf::water::flux_connection const *)arg1)->get_target(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  {
    int dcast = 0;
    /*@SWIG:C:\\Programme\\swig\\Lib\\typemaps\\swigmacros.swg,200,%formacro@*//*@SWIG:C:\\Programme\\swig\\Lib\\typemaps\\swigmacros.swg,192,%_formacro_1@*//*@SWIG:cmf.i,113,%_node_down_cast@*/
    if (dcast==0 && result) /*check for cmf::atmosphere::RainCloud*/  {
      std::tr1::shared_ptr<cmf::atmosphere::RainCloud> output = std::tr1::dynamic_pointer_cast<cmf::atmosphere::RainCloud>(result);
      if (output) /*flux_node is cmf::atmosphere::RainCloud */ {
        dcast=1; 
        resultobj = SWIG_NewPointerObj(new std::tr1::shared_ptr<cmf::atmosphere::RainCloud>(output),SWIGTYPE_p_std__tr1__shared_ptrT_cmf__atmosphere__RainCloud_t, SWIG_POINTER_OWN); 
      }
    }
    /*@SWIG@*/
    
    /*@SWIG:C:\\Programme\\swig\\Lib\\typemaps\\swigmacros.swg,192,%_formacro_1@*//*@SWIG:cmf.i,113,%_node_down_cast@*/
    if (dcast==0 && result) /*check for cmf::water::DricheletBoundary*/  {
      std::tr1::shared_ptr<cmf::water::DricheletBoundary> output = std::tr1::dynamic_pointer_cast<cmf::water::DricheletBoundary>(result);
      if (output) /*flux_node is cmf::water::DricheletBoundary */ {
        dcast=1; 
        resultobj = SWIG_NewPointerObj(new std::tr1::shared_ptr<cmf::water::DricheletBoundary>(output),SWIGTYPE_p_std__tr1__shared_ptrT_cmf__water__DricheletBoundary_t, SWIG_POINTER_OWN); 
      }
    }
    /*@SWIG@*/
    
    /*@SWIG:C:\\Programme\\swig\\Lib\\typemaps\\swigmacros.swg,192,%_formacro_1@*//*@SWIG:cmf.i,113,%_node_down_cast@*/
    if (dcast==0 && result) /*check for cmf::water::NeumannBoundary*/  {
      std::tr1::shared_ptr<cmf::water::NeumannBoundary> output = std::tr1::dynamic_pointer_cast<cmf::water::NeumannBoundary>(result);
      if (output) /*flux_node is cmf::water::NeumannBoundary */ {
        dcast=1; 
        resultobj = SWIG_NewPointerObj(new std::tr1::shared_ptr<cmf::water::NeumannBoundary>(output),SWIGTYPE_p_std__tr1__shared_ptrT_cmf__water__NeumannBoundary_t, SWIG_POINTER_OWN); 
      }
    }
    /*@SWIG@*/
    
    /*@SWIG:C:\\Programme\\swig\\Lib\\typemaps\\swigmacros.swg,192,%_formacro_1@*//*@SWIG:cmf.i,113,%_node_down_cast@*/
    if (dcast==0 && result) /*check for cmf::upslope::SoilLayer*/  {
      std::tr1::shared_ptr<cmf::upslope::SoilLayer> output = std::tr1::dynamic_pointer_cast<cmf::upslope::SoilLayer>(result);
      if (output) /*flux_node is cmf::upslope::SoilLayer */ {
        dcast=1; 
        resultobj = SWIG_NewPointerObj(new std::tr1::shared_ptr<cmf::upslope::SoilLayer>(output),SWIGTYPE_p_std__tr1__shared_ptrT_cmf__upslope__SoilLayer_t, SWIG_POINTER_OWN); 
      }
    }
    /*@SWIG@*/
    
    /*@SWIG:C:\\Programme\\swig\\Lib\\typemaps\\swigmacros.swg,192,%_formacro_1@*//*@SWIG:cmf.i,113,%_node_down_cast@*/
    if (dcast==0 && result) /*check for cmf::river::Reach*/  {
      std::tr1::shared_ptr<cmf::river::Reach> output = std::tr1::dynamic_pointer_cast<cmf::river::Reach>(result);
      if (output) /*flux_node is cmf::river::Reach */ {
        dcast=1; 
        resultobj = SWIG_NewPointerObj(new std::tr1::shared_ptr<cmf::river::Reach>(output),SWIGTYPE_p_std__tr1__shared_ptrT_cmf__river__Reach_t, SWIG_POINTER_OWN); 
      }
    }
    /*@SWIG@*/
    
    /*@SWIG:C:\\Programme\\swig\\Lib\\typemaps\\swigmacros.swg,192,%_formacro_1@*//*@SWIG:cmf.i,113,%_node_down_cast@*/
    if (dcast==0 && result) /*check for cmf::river::OpenWaterStorage*/  {
      std::tr1::shared_ptr<cmf::river::OpenWaterStorage> output = std::tr1::dynamic_pointer_cast<cmf::river::OpenWaterStorage>(result);
      if (output) /*flux_node is cmf::river::OpenWaterStorage */ {
        dcast=1; 
        resultobj = SWIG_NewPointerObj(new std::tr1::shared_ptr<cmf::river::OpenWaterStorage>(output),SWIGTYPE_p_std__tr1__shared_ptrT_cmf__river__OpenWaterStorage_t, SWIG_POINTER_OWN); 
      }
    }
    /*@SWIG@*/
    
    /*@SWIG:C:\\Programme\\swig\\Lib\\typemaps\\swigmacros.swg,192,%_formacro_1@*//*@SWIG:cmf.i,113,%_node_down_cast@*/
    if (dcast==0 && result) /*check for cmf::water::WaterStorage*/  {
      std::tr1::shared_ptr<cmf::water::WaterStorage> output = std::tr1::dynamic_pointer_cast<cmf::water::WaterStorage>(result);
      if (output) /*flux_node is cmf::water::WaterStorage */ {
        dcast=1; 
        resultobj = SWIG_NewPointerObj(new std::tr1::shared_ptr<cmf::water::WaterStorage>(output),SWIGTYPE_p_std__tr1__shared_ptrT_cmf__water__WaterStorage_t, SWIG_POINTER_OWN); 
      }
    }
    /*@SWIG@*/
    
    
    
    /*@SWIG@*/
    
    /*@SWIG@*/
    
    /*@SWIG@*/
    
    /*@SWIG@*/
    
    /*@SWIG@*/
    
    /*@SWIG@*/
    
    /*@SWIG@*//*@SWIG@*/
    if (!dcast) resultobj = SWIG_NewPointerObj(result ? new std::tr1::shared_ptr<cmf::water::flux_node>(result) : 0,SWIGTYPE_p_std__tr1__shared_ptrT_cmf__water__flux_node_t, SWIG_POINTER_OWN);   
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_flux_connection_get_target(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"flux_connection_get_target",0,2,argv))) SWIG_fail;
  --argc;
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (argc == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_cmf__water__flux_connection, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__water__flux_node_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (argc == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_cmf__water__flux_connection, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int(argv[1], NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      return _wrap_flux_connection_get_target__SWIG_0(self, argc, argv);
    case 2:
      return _wrap_flux_connection_get_target__SWIG_1(self, argc, argv);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'flux_connection_get_target'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    get_target(cmf::water::flux_connection *,cmf::water::flux_node const &)\n"
    "    get_target(cmf::water::flux_connection const *,int)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_flux_connection_exchange_target(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::water::flux_connection *arg1 = (cmf::water::flux_connection *) 0 ;
  cmf::water::flux_node::ptr arg2 ;
  cmf::water::flux_node::ptr arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  
  if (!SWIG_Python_UnpackTuple(args,"flux_connection_exchange_target",3,3,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__water__flux_connection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "flux_connection_exchange_target" "', argument " "1"" of type '" "cmf::water::flux_connection *""'"); 
  }
  arg1 = reinterpret_cast< cmf::water::flux_connection * >(argp1);
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(swig_obj[1], &argp2, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__water__flux_node_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "flux_connection_exchange_target" "', argument " "2"" of type '" "cmf::water::flux_node::ptr""'"); 
    }
    if (argp2) arg2 = *(reinterpret_cast< cmf::water::flux_node::ptr * >(argp2));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< cmf::water::flux_node::ptr * >(argp2);
  }
  {
    int newmem = 0;
    res3 = SWIG_ConvertPtrAndOwn(swig_obj[2], &argp3, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__water__flux_node_t,  0 , &newmem);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "flux_connection_exchange_target" "', argument " "3"" of type '" "cmf::water::flux_node::ptr""'"); 
    }
    if (argp3) arg3 = *(reinterpret_cast< cmf::water::flux_node::ptr * >(argp3));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< cmf::water::flux_node::ptr * >(argp3);
  }
  {
    try {
      (arg1)->exchange_target(arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_flux_connection_q(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::water::flux_connection *arg1 = (cmf::water::flux_connection *) 0 ;
  cmf::water::flux_node *arg2 = 0 ;
  cmf::math::Time arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  std::tr1::shared_ptr< cmf::water::flux_node const > tempshared2 ;
  PyObject *swig_obj[3] ;
  real result;
  
  if (!SWIG_Python_UnpackTuple(args,"flux_connection_q",3,3,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__water__flux_connection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "flux_connection_q" "', argument " "1"" of type '" "cmf::water::flux_connection *""'"); 
  }
  arg1 = reinterpret_cast< cmf::water::flux_connection * >(argp1);
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(swig_obj[1], &argp2, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__water__flux_node_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "flux_connection_q" "', argument " "2"" of type '" "cmf::water::flux_node const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "flux_connection_q" "', argument " "2"" of type '" "cmf::water::flux_node const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared2 = *reinterpret_cast< std::tr1::shared_ptr< const cmf::water::flux_node > * >(argp2);
      delete reinterpret_cast< std::tr1::shared_ptr< const cmf::water::flux_node > * >(argp2);
      arg2 = const_cast< cmf::water::flux_node * >(tempshared2.get());
    } else {
      arg2 = const_cast< cmf::water::flux_node * >(reinterpret_cast< std::tr1::shared_ptr< const cmf::water::flux_node > * >(argp2)->get());
    }
  }
  {
    arg3 = convert_datetime_to_cmftime(swig_obj[2]);    
  }
  {
    try {
      result = (real)(arg1)->q((cmf::water::flux_node const &)*arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_flux_connection_conc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::water::flux_connection *arg1 = (cmf::water::flux_connection *) 0 ;
  cmf::math::Time arg2 ;
  cmf::water::solute *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  real result;
  
  if (!SWIG_Python_UnpackTuple(args,"flux_connection_conc",3,3,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__water__flux_connection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "flux_connection_conc" "', argument " "1"" of type '" "cmf::water::flux_connection *""'"); 
  }
  arg1 = reinterpret_cast< cmf::water::flux_connection * >(argp1);
  {
    arg2 = convert_datetime_to_cmftime(swig_obj[1]);    
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_cmf__water__solute,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "flux_connection_conc" "', argument " "3"" of type '" "cmf::water::solute const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "flux_connection_conc" "', argument " "3"" of type '" "cmf::water::solute const &""'"); 
  }
  arg3 = reinterpret_cast< cmf::water::solute * >(argp3);
  {
    try {
      result = (real)(arg1)->conc(arg2,(cmf::water::solute const &)*arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_flux_connection_type_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::water::flux_connection *arg1 = (cmf::water::flux_connection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__water__flux_connection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "flux_connection_type_get" "', argument " "1"" of type '" "cmf::water::flux_connection *""'"); 
  }
  arg1 = reinterpret_cast< cmf::water::flux_connection * >(argp1);
  result = (std::string *) & ((arg1)->type);
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_flux_connection_to_string(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::water::flux_connection *arg1 = (cmf::water::flux_connection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__water__flux_connection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "flux_connection_to_string" "', argument " "1"" of type '" "cmf::water::flux_connection const *""'"); 
  }
  arg1 = reinterpret_cast< cmf::water::flux_connection * >(argp1);
  {
    try {
      result = ((cmf::water::flux_connection const *)arg1)->to_string();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_flux_connection_short_string(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::water::flux_connection *arg1 = (cmf::water::flux_connection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__water__flux_connection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "flux_connection_short_string" "', argument " "1"" of type '" "cmf::water::flux_connection const *""'"); 
  }
  arg1 = reinterpret_cast< cmf::water::flux_connection * >(argp1);
  {
    try {
      result = ((cmf::water::flux_connection const *)arg1)->short_string();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_flux_connection(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::water::flux_connection *arg1 = (cmf::water::flux_connection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__water__flux_connection, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_flux_connection" "', argument " "1"" of type '" "cmf::water::flux_connection *""'"); 
  }
  arg1 = reinterpret_cast< cmf::water::flux_connection * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_flux_connection_tracer_filter_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::water::flux_connection *arg1 = (cmf::water::flux_connection *) 0 ;
  real arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"flux_connection_tracer_filter_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__water__flux_connection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "flux_connection_tracer_filter_set" "', argument " "1"" of type '" "cmf::water::flux_connection *""'"); 
  }
  arg1 = reinterpret_cast< cmf::water::flux_connection * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "flux_connection_tracer_filter_set" "', argument " "2"" of type '" "real""'");
  } 
  arg2 = static_cast< real >(val2);
  {
    try {
      cmf_water_flux_connection_tracer_filter_set(arg1,arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_flux_connection_tracer_filter_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::water::flux_connection *arg1 = (cmf::water::flux_connection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  real result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__water__flux_connection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "flux_connection_tracer_filter_get" "', argument " "1"" of type '" "cmf::water::flux_connection *""'"); 
  }
  arg1 = reinterpret_cast< cmf::water::flux_connection * >(argp1);
  {
    try {
      result = (real)cmf_water_flux_connection_tracer_filter_get(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *flux_connection_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_cmf__water__flux_connection, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_replace_node(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::water::flux_node::ptr arg1 ;
  cmf::water::flux_node::ptr arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"replace_node",2,2,swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__water__flux_node_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "replace_node" "', argument " "1"" of type '" "cmf::water::flux_node::ptr""'"); 
    }
    if (argp1) arg1 = *(reinterpret_cast< cmf::water::flux_node::ptr * >(argp1));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< cmf::water::flux_node::ptr * >(argp1);
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(swig_obj[1], &argp2, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__water__flux_node_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "replace_node" "', argument " "2"" of type '" "cmf::water::flux_node::ptr""'"); 
    }
    if (argp2) arg2 = *(reinterpret_cast< cmf::water::flux_node::ptr * >(argp2));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< cmf::water::flux_node::ptr * >(argp2);
  }
  {
    try {
      cmf::water::replace_node(arg1,arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_waterbalance_connection(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::water::flux_node::ptr arg1 ;
  cmf::water::flux_node::ptr arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  cmf::water::waterbalance_connection *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args,"new_waterbalance_connection",2,2,swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__water__flux_node_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_waterbalance_connection" "', argument " "1"" of type '" "cmf::water::flux_node::ptr""'"); 
    }
    if (argp1) arg1 = *(reinterpret_cast< cmf::water::flux_node::ptr * >(argp1));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< cmf::water::flux_node::ptr * >(argp1);
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(swig_obj[1], &argp2, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__water__flux_node_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_waterbalance_connection" "', argument " "2"" of type '" "cmf::water::flux_node::ptr""'"); 
    }
    if (argp2) arg2 = *(reinterpret_cast< cmf::water::flux_node::ptr * >(argp2));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< cmf::water::flux_node::ptr * >(argp2);
  }
  {
    try {
      result = (cmf::water::waterbalance_connection *)new cmf::water::waterbalance_connection(arg1,arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmf__water__waterbalance_connection, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_waterbalance_connection(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::water::waterbalance_connection *arg1 = (cmf::water::waterbalance_connection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__water__waterbalance_connection, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_waterbalance_connection" "', argument " "1"" of type '" "cmf::water::waterbalance_connection *""'"); 
  }
  arg1 = reinterpret_cast< cmf::water::waterbalance_connection * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *waterbalance_connection_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_cmf__water__waterbalance_connection, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *waterbalance_connection_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_linear_scale_displacement_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::water::linear_scale *arg1 = (cmf::water::linear_scale *) 0 ;
  real arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"linear_scale_displacement_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__water__linear_scale, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "linear_scale_displacement_set" "', argument " "1"" of type '" "cmf::water::linear_scale *""'"); 
  }
  arg1 = reinterpret_cast< cmf::water::linear_scale * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "linear_scale_displacement_set" "', argument " "2"" of type '" "real""'");
  } 
  arg2 = static_cast< real >(val2);
  if (arg1) (arg1)->displacement = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_linear_scale_displacement_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::water::linear_scale *arg1 = (cmf::water::linear_scale *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  real result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__water__linear_scale, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "linear_scale_displacement_get" "', argument " "1"" of type '" "cmf::water::linear_scale *""'"); 
  }
  arg1 = reinterpret_cast< cmf::water::linear_scale * >(argp1);
  result = (real) ((arg1)->displacement);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_linear_scale_slope_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::water::linear_scale *arg1 = (cmf::water::linear_scale *) 0 ;
  real arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"linear_scale_slope_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__water__linear_scale, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "linear_scale_slope_set" "', argument " "1"" of type '" "cmf::water::linear_scale *""'"); 
  }
  arg1 = reinterpret_cast< cmf::water::linear_scale * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "linear_scale_slope_set" "', argument " "2"" of type '" "real""'");
  } 
  arg2 = static_cast< real >(val2);
  if (arg1) (arg1)->slope = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_linear_scale_slope_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::water::linear_scale *arg1 = (cmf::water::linear_scale *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  real result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__water__linear_scale, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "linear_scale_slope_get" "', argument " "1"" of type '" "cmf::water::linear_scale *""'"); 
  }
  arg1 = reinterpret_cast< cmf::water::linear_scale * >(argp1);
  result = (real) ((arg1)->slope);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_linear_scale___call__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::water::linear_scale *arg1 = (cmf::water::linear_scale *) 0 ;
  real arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  real result;
  
  if (!SWIG_Python_UnpackTuple(args,"linear_scale___call__",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__water__linear_scale, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "linear_scale___call__" "', argument " "1"" of type '" "cmf::water::linear_scale const *""'"); 
  }
  arg1 = reinterpret_cast< cmf::water::linear_scale * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "linear_scale___call__" "', argument " "2"" of type '" "real""'");
  } 
  arg2 = static_cast< real >(val2);
  {
    try {
      result = (real)((cmf::water::linear_scale const *)arg1)->operator ()(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_linear_scale(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  real arg1 = (real) 1 ;
  real arg2 = (real) 0 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  cmf::water::linear_scale *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args,"new_linear_scale",0,2,swig_obj)) SWIG_fail;
  if (swig_obj[0]) {
    ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_linear_scale" "', argument " "1"" of type '" "real""'");
    } 
    arg1 = static_cast< real >(val1);
  }
  if (swig_obj[1]) {
    ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_linear_scale" "', argument " "2"" of type '" "real""'");
    } 
    arg2 = static_cast< real >(val2);
  }
  {
    try {
      result = (cmf::water::linear_scale *)new cmf::water::linear_scale(arg1,arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmf__water__linear_scale, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_linear_scale(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::water::linear_scale *arg1 = (cmf::water::linear_scale *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__water__linear_scale, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_linear_scale" "', argument " "1"" of type '" "cmf::water::linear_scale *""'"); 
  }
  arg1 = reinterpret_cast< cmf::water::linear_scale * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *linear_scale_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_cmf__water__linear_scale, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *linear_scale_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_DricheletBoundary_set_conc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::water::DricheletBoundary *arg1 = (cmf::water::DricheletBoundary *) 0 ;
  cmf::water::solute *arg2 = 0 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< cmf::water::DricheletBoundary > tempshared1 ;
  std::tr1::shared_ptr< cmf::water::DricheletBoundary > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  
  if (!SWIG_Python_UnpackTuple(args,"DricheletBoundary_set_conc",3,3,swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__water__DricheletBoundary_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DricheletBoundary_set_conc" "', argument " "1"" of type '" "cmf::water::DricheletBoundary *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  cmf::water::DricheletBoundary > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  cmf::water::DricheletBoundary > * >(argp1);
      arg1 = const_cast< cmf::water::DricheletBoundary * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  cmf::water::DricheletBoundary > * >(argp1);
      arg1 = const_cast< cmf::water::DricheletBoundary * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cmf__water__solute,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DricheletBoundary_set_conc" "', argument " "2"" of type '" "cmf::water::solute const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DricheletBoundary_set_conc" "', argument " "2"" of type '" "cmf::water::solute const &""'"); 
  }
  arg2 = reinterpret_cast< cmf::water::solute * >(argp2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DricheletBoundary_set_conc" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      (arg1)->set_conc((cmf::water::solute const &)*arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DricheletBoundary_is_source_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::water::DricheletBoundary *arg1 = (cmf::water::DricheletBoundary *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< cmf::water::DricheletBoundary > tempshared1 ;
  std::tr1::shared_ptr< cmf::water::DricheletBoundary > *smartarg1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"DricheletBoundary_is_source_set",2,2,swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__water__DricheletBoundary_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DricheletBoundary_is_source_set" "', argument " "1"" of type '" "cmf::water::DricheletBoundary *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  cmf::water::DricheletBoundary > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  cmf::water::DricheletBoundary > * >(argp1);
      arg1 = const_cast< cmf::water::DricheletBoundary * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  cmf::water::DricheletBoundary > * >(argp1);
      arg1 = const_cast< cmf::water::DricheletBoundary * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DricheletBoundary_is_source_set" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  if (arg1) (arg1)->is_source = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DricheletBoundary_is_source_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::water::DricheletBoundary *arg1 = (cmf::water::DricheletBoundary *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< cmf::water::DricheletBoundary > tempshared1 ;
  std::tr1::shared_ptr< cmf::water::DricheletBoundary > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__water__DricheletBoundary_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DricheletBoundary_is_source_get" "', argument " "1"" of type '" "cmf::water::DricheletBoundary *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  cmf::water::DricheletBoundary > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  cmf::water::DricheletBoundary > * >(argp1);
      arg1 = const_cast< cmf::water::DricheletBoundary * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  cmf::water::DricheletBoundary > * >(argp1);
      arg1 = const_cast< cmf::water::DricheletBoundary * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (bool) ((arg1)->is_source);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DricheletBoundary_RecalcFluxes(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::water::DricheletBoundary *arg1 = (cmf::water::DricheletBoundary *) 0 ;
  cmf::math::Time arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< cmf::water::DricheletBoundary const > tempshared1 ;
  std::tr1::shared_ptr< cmf::water::DricheletBoundary const > *smartarg1 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args,"DricheletBoundary_RecalcFluxes",2,2,swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__water__DricheletBoundary_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DricheletBoundary_RecalcFluxes" "', argument " "1"" of type '" "cmf::water::DricheletBoundary const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr< const cmf::water::DricheletBoundary > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr< const cmf::water::DricheletBoundary > * >(argp1);
      arg1 = const_cast< cmf::water::DricheletBoundary * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr< const cmf::water::DricheletBoundary > * >(argp1);
      arg1 = const_cast< cmf::water::DricheletBoundary * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    arg2 = convert_datetime_to_cmftime(swig_obj[1]);    
  }
  {
    try {
      result = (bool)((cmf::water::DricheletBoundary const *)arg1)->RecalcFluxes(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DricheletBoundary(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::project *arg1 = 0 ;
  real arg2 ;
  cmf::geometry::point arg3 = (cmf::geometry::point) cmf::geometry::point() ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[3] ;
  cmf::water::DricheletBoundary *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args,"new_DricheletBoundary",2,3,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cmf__project,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_DricheletBoundary" "', argument " "1"" of type '" "cmf::project const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_DricheletBoundary" "', argument " "1"" of type '" "cmf::project const &""'"); 
  }
  arg1 = reinterpret_cast< cmf::project * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_DricheletBoundary" "', argument " "2"" of type '" "real""'");
  } 
  arg2 = static_cast< real >(val2);
  if (swig_obj[2]) {
    {
      cmf::geometry::point p;
      if (((!convert_xyz_to_point(swig_obj[2],p)) || !convert_seq_to_point(swig_obj[2],p)))
      {
        PyErr_SetString(PyExc_ValueError,"The object to convert needs to be either a sequence of length 2 or 3 or an object exposing an x and y attribute of type float(z is used if present)");
      }
      arg3=p;
    }
  }
  {
    try {
      result = (cmf::water::DricheletBoundary *)new cmf::water::DricheletBoundary((cmf::project const &)*arg1,arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  {
    std::tr1::shared_ptr<  cmf::water::DricheletBoundary > *smartresult = result ? new std::tr1::shared_ptr<  cmf::water::DricheletBoundary >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__tr1__shared_ptrT_cmf__water__DricheletBoundary_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DricheletBoundary_SWIGSharedPtrUpcast(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::tr1::shared_ptr< cmf::water::DricheletBoundary > arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::tr1::shared_ptr< cmf::water::flux_node > result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__water__DricheletBoundary_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DricheletBoundary_SWIGSharedPtrUpcast" "', argument " "1"" of type '" "std::tr1::shared_ptr< cmf::water::DricheletBoundary >""'"); 
    }
    if (argp1) arg1 = *(reinterpret_cast< std::tr1::shared_ptr< cmf::water::DricheletBoundary > * >(argp1));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< std::tr1::shared_ptr< cmf::water::DricheletBoundary > * >(argp1);
  }
  {
    try {
      result = cmf_water_DricheletBoundary_SWIGSharedPtrUpcast(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  {
    std::tr1::shared_ptr<  cmf::water::flux_node > *smartresult = result ? new std::tr1::shared_ptr<  cmf::water::flux_node >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__tr1__shared_ptrT_cmf__water__flux_node_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_DricheletBoundary(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::water::DricheletBoundary *arg1 = (cmf::water::DricheletBoundary *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< cmf::water::DricheletBoundary > tempshared1 ;
  std::tr1::shared_ptr< cmf::water::DricheletBoundary > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__water__DricheletBoundary_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_DricheletBoundary" "', argument " "1"" of type '" "cmf::water::DricheletBoundary *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  cmf::water::DricheletBoundary > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  cmf::water::DricheletBoundary > * >(argp1);
      arg1 = const_cast< cmf::water::DricheletBoundary * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  cmf::water::DricheletBoundary > * >(argp1);
      arg1 = const_cast< cmf::water::DricheletBoundary * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *DricheletBoundary_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__tr1__shared_ptrT_cmf__water__DricheletBoundary_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *DricheletBoundary_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_NeumannBoundary_flux_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::water::NeumannBoundary *arg1 = (cmf::water::NeumannBoundary *) 0 ;
  cmf::math::timeseries *arg2 = (cmf::math::timeseries *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< cmf::water::NeumannBoundary > tempshared1 ;
  std::tr1::shared_ptr< cmf::water::NeumannBoundary > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"NeumannBoundary_flux_set",2,2,swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__water__NeumannBoundary_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NeumannBoundary_flux_set" "', argument " "1"" of type '" "cmf::water::NeumannBoundary *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  cmf::water::NeumannBoundary > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  cmf::water::NeumannBoundary > * >(argp1);
      arg1 = const_cast< cmf::water::NeumannBoundary * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  cmf::water::NeumannBoundary > * >(argp1);
      arg1 = const_cast< cmf::water::NeumannBoundary * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cmf__math__timeseries, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NeumannBoundary_flux_set" "', argument " "2"" of type '" "cmf::math::timeseries *""'"); 
  }
  arg2 = reinterpret_cast< cmf::math::timeseries * >(argp2);
  if (arg1) (arg1)->flux = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NeumannBoundary_flux_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::water::NeumannBoundary *arg1 = (cmf::water::NeumannBoundary *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< cmf::water::NeumannBoundary > tempshared1 ;
  std::tr1::shared_ptr< cmf::water::NeumannBoundary > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  cmf::math::timeseries *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__water__NeumannBoundary_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NeumannBoundary_flux_get" "', argument " "1"" of type '" "cmf::water::NeumannBoundary *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  cmf::water::NeumannBoundary > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  cmf::water::NeumannBoundary > * >(argp1);
      arg1 = const_cast< cmf::water::NeumannBoundary * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  cmf::water::NeumannBoundary > * >(argp1);
      arg1 = const_cast< cmf::water::NeumannBoundary * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (cmf::math::timeseries *)& ((arg1)->flux);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmf__math__timeseries, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NeumannBoundary_flux_scale_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::water::NeumannBoundary *arg1 = (cmf::water::NeumannBoundary *) 0 ;
  cmf::water::linear_scale *arg2 = (cmf::water::linear_scale *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< cmf::water::NeumannBoundary > tempshared1 ;
  std::tr1::shared_ptr< cmf::water::NeumannBoundary > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"NeumannBoundary_flux_scale_set",2,2,swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__water__NeumannBoundary_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NeumannBoundary_flux_scale_set" "', argument " "1"" of type '" "cmf::water::NeumannBoundary *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  cmf::water::NeumannBoundary > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  cmf::water::NeumannBoundary > * >(argp1);
      arg1 = const_cast< cmf::water::NeumannBoundary * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  cmf::water::NeumannBoundary > * >(argp1);
      arg1 = const_cast< cmf::water::NeumannBoundary * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cmf__water__linear_scale, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NeumannBoundary_flux_scale_set" "', argument " "2"" of type '" "cmf::water::linear_scale *""'"); 
  }
  arg2 = reinterpret_cast< cmf::water::linear_scale * >(argp2);
  if (arg1) (arg1)->flux_scale = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NeumannBoundary_flux_scale_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::water::NeumannBoundary *arg1 = (cmf::water::NeumannBoundary *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< cmf::water::NeumannBoundary > tempshared1 ;
  std::tr1::shared_ptr< cmf::water::NeumannBoundary > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  cmf::water::linear_scale *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__water__NeumannBoundary_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NeumannBoundary_flux_scale_get" "', argument " "1"" of type '" "cmf::water::NeumannBoundary *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  cmf::water::NeumannBoundary > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  cmf::water::NeumannBoundary > * >(argp1);
      arg1 = const_cast< cmf::water::NeumannBoundary * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  cmf::water::NeumannBoundary > * >(argp1);
      arg1 = const_cast< cmf::water::NeumannBoundary * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (cmf::water::linear_scale *)& ((arg1)->flux_scale);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmf__water__linear_scale, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NeumannBoundary_concentration_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::water::NeumannBoundary *arg1 = (cmf::water::NeumannBoundary *) 0 ;
  cmf::water::SoluteTimeseries *arg2 = (cmf::water::SoluteTimeseries *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< cmf::water::NeumannBoundary > tempshared1 ;
  std::tr1::shared_ptr< cmf::water::NeumannBoundary > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"NeumannBoundary_concentration_set",2,2,swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__water__NeumannBoundary_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NeumannBoundary_concentration_set" "', argument " "1"" of type '" "cmf::water::NeumannBoundary *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  cmf::water::NeumannBoundary > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  cmf::water::NeumannBoundary > * >(argp1);
      arg1 = const_cast< cmf::water::NeumannBoundary * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  cmf::water::NeumannBoundary > * >(argp1);
      arg1 = const_cast< cmf::water::NeumannBoundary * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cmf__water__SoluteTimeseries, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NeumannBoundary_concentration_set" "', argument " "2"" of type '" "cmf::water::SoluteTimeseries *""'"); 
  }
  arg2 = reinterpret_cast< cmf::water::SoluteTimeseries * >(argp2);
  if (arg1) (arg1)->concentration = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NeumannBoundary_concentration_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::water::NeumannBoundary *arg1 = (cmf::water::NeumannBoundary *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< cmf::water::NeumannBoundary > tempshared1 ;
  std::tr1::shared_ptr< cmf::water::NeumannBoundary > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  cmf::water::SoluteTimeseries *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__water__NeumannBoundary_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NeumannBoundary_concentration_get" "', argument " "1"" of type '" "cmf::water::NeumannBoundary *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  cmf::water::NeumannBoundary > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  cmf::water::NeumannBoundary > * >(argp1);
      arg1 = const_cast< cmf::water::NeumannBoundary * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  cmf::water::NeumannBoundary > * >(argp1);
      arg1 = const_cast< cmf::water::NeumannBoundary * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (cmf::water::SoluteTimeseries *)& ((arg1)->concentration);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmf__water__SoluteTimeseries, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NeumannBoundary___call__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::water::NeumannBoundary *arg1 = (cmf::water::NeumannBoundary *) 0 ;
  cmf::math::Time arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< cmf::water::NeumannBoundary const > tempshared1 ;
  std::tr1::shared_ptr< cmf::water::NeumannBoundary const > *smartarg1 = 0 ;
  PyObject *swig_obj[2] ;
  real result;
  
  if (!SWIG_Python_UnpackTuple(args,"NeumannBoundary___call__",2,2,swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__water__NeumannBoundary_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NeumannBoundary___call__" "', argument " "1"" of type '" "cmf::water::NeumannBoundary const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr< const cmf::water::NeumannBoundary > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr< const cmf::water::NeumannBoundary > * >(argp1);
      arg1 = const_cast< cmf::water::NeumannBoundary * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr< const cmf::water::NeumannBoundary > * >(argp1);
      arg1 = const_cast< cmf::water::NeumannBoundary * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    arg2 = convert_datetime_to_cmftime(swig_obj[1]);    
  }
  {
    try {
      result = (real)((cmf::water::NeumannBoundary const *)arg1)->operator ()(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NeumannBoundary_connect_to(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::water::NeumannBoundary *arg1 = (cmf::water::NeumannBoundary *) 0 ;
  cmf::water::flux_node::ptr arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< cmf::water::NeumannBoundary > tempshared1 ;
  std::tr1::shared_ptr< cmf::water::NeumannBoundary > *smartarg1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"NeumannBoundary_connect_to",2,2,swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__water__NeumannBoundary_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NeumannBoundary_connect_to" "', argument " "1"" of type '" "cmf::water::NeumannBoundary *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  cmf::water::NeumannBoundary > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  cmf::water::NeumannBoundary > * >(argp1);
      arg1 = const_cast< cmf::water::NeumannBoundary * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  cmf::water::NeumannBoundary > * >(argp1);
      arg1 = const_cast< cmf::water::NeumannBoundary * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(swig_obj[1], &argp2, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__water__flux_node_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NeumannBoundary_connect_to" "', argument " "2"" of type '" "cmf::water::flux_node::ptr""'"); 
    }
    if (argp2) arg2 = *(reinterpret_cast< cmf::water::flux_node::ptr * >(argp2));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< cmf::water::flux_node::ptr * >(argp2);
  }
  {
    try {
      (arg1)->connect_to(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_NeumannBoundary__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  cmf::project *arg1 = 0 ;
  cmf::math::timeseries arg2 ;
  cmf::water::SoluteTimeseries arg3 = (cmf::water::SoluteTimeseries) cmf::water::SoluteTimeseries() ;
  cmf::geometry::point arg4 = (cmf::geometry::point) cmf::geometry::point() ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  cmf::water::NeumannBoundary *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cmf__project,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_NeumannBoundary" "', argument " "1"" of type '" "cmf::project const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_NeumannBoundary" "', argument " "1"" of type '" "cmf::project const &""'"); 
  }
  arg1 = reinterpret_cast< cmf::project * >(argp1);
  {
    res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cmf__math__timeseries,  0  | SWIG_POINTER_IMPLICIT_CONV);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_NeumannBoundary" "', argument " "2"" of type '" "cmf::math::timeseries""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_NeumannBoundary" "', argument " "2"" of type '" "cmf::math::timeseries""'");
    } else {
      cmf::math::timeseries * temp = reinterpret_cast< cmf::math::timeseries * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (swig_obj[2]) {
    {
      res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_cmf__water__SoluteTimeseries,  0  | 0);
      if (!SWIG_IsOK(res3)) {
        SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_NeumannBoundary" "', argument " "3"" of type '" "cmf::water::SoluteTimeseries""'"); 
      }  
      if (!argp3) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_NeumannBoundary" "', argument " "3"" of type '" "cmf::water::SoluteTimeseries""'");
      } else {
        cmf::water::SoluteTimeseries * temp = reinterpret_cast< cmf::water::SoluteTimeseries * >(argp3);
        arg3 = *temp;
        if (SWIG_IsNewObj(res3)) delete temp;
      }
    }
  }
  if (swig_obj[3]) {
    {
      cmf::geometry::point p;
      if (((!convert_xyz_to_point(swig_obj[3],p)) || !convert_seq_to_point(swig_obj[3],p)))
      {
        PyErr_SetString(PyExc_ValueError,"The object to convert needs to be either a sequence of length 2 or 3 or an object exposing an x and y attribute of type float(z is used if present)");
      }
      arg4=p;
    }
  }
  {
    try {
      result = (cmf::water::NeumannBoundary *)new cmf::water::NeumannBoundary((cmf::project const &)*arg1,arg2,arg3,arg4);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  {
    std::tr1::shared_ptr<  cmf::water::NeumannBoundary > *smartresult = result ? new std::tr1::shared_ptr<  cmf::water::NeumannBoundary >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__tr1__shared_ptrT_cmf__water__NeumannBoundary_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_NeumannBoundary__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  cmf::project *arg1 = 0 ;
  cmf::geometry::point arg2 = (cmf::geometry::point) cmf::geometry::point() ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cmf::water::NeumannBoundary *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cmf__project,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_NeumannBoundary" "', argument " "1"" of type '" "cmf::project const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_NeumannBoundary" "', argument " "1"" of type '" "cmf::project const &""'"); 
  }
  arg1 = reinterpret_cast< cmf::project * >(argp1);
  if (swig_obj[1]) {
    {
      cmf::geometry::point p;
      if (((!convert_xyz_to_point(swig_obj[1],p)) || !convert_seq_to_point(swig_obj[1],p)))
      {
        PyErr_SetString(PyExc_ValueError,"The object to convert needs to be either a sequence of length 2 or 3 or an object exposing an x and y attribute of type float(z is used if present)");
      }
      arg2=p;
    }
  }
  {
    try {
      result = (cmf::water::NeumannBoundary *)new cmf::water::NeumannBoundary((cmf::project const &)*arg1,arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  {
    std::tr1::shared_ptr<  cmf::water::NeumannBoundary > *smartresult = result ? new std::tr1::shared_ptr<  cmf::water::NeumannBoundary >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__tr1__shared_ptrT_cmf__water__NeumannBoundary_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_NeumannBoundary(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"new_NeumannBoundary",0,4,argv))) SWIG_fail;
  --argc;
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if ((argc >= 1) && (argc <= 2)) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_cmf__project, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (argc > 1) {
        {
          {
            cmf::geometry::point p;
            _v=convert_seq_to_point(argv[1],p) || convert_xyz_to_point(argv[1],p);
          }
        }
        if (!_v) goto check_1;
        _ranki += _v*_pi;
        _rankm += _pi;
        _pi *= SWIG_MAXCASTRANK;
      }
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if ((argc >= 2) && (argc <= 4)) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_cmf__project, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_cmf__math__timeseries, SWIG_POINTER_IMPLICIT_CONV);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (argc > 2) {
        {
          int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_cmf__water__SoluteTimeseries, 0);
          _v = SWIG_CheckState(res);
        }
        if (!_v) goto check_2;
        _ranki += _v*_pi;
        _rankm += _pi;
        _pi *= SWIG_MAXCASTRANK;
        if (argc > 3) {
          {
            {
              cmf::geometry::point p;
              _v=convert_seq_to_point(argv[3],p) || convert_xyz_to_point(argv[3],p);
            }
          }
          if (!_v) goto check_2;
          _ranki += _v*_pi;
          _rankm += _pi;
          _pi *= SWIG_MAXCASTRANK;
        }
      }
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      return _wrap_new_NeumannBoundary__SWIG_1(self, argc, argv);
    case 2:
      return _wrap_new_NeumannBoundary__SWIG_0(self, argc, argv);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_NeumannBoundary'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    cmf::water::NeumannBoundary(cmf::project const &,cmf::math::timeseries,cmf::water::SoluteTimeseries,cmf::geometry::point)\n"
    "    cmf::water::NeumannBoundary(cmf::project const &,cmf::geometry::point)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_NeumannBoundary_create(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::water::flux_node::ptr arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  cmf::water::NeumannBoundary::ptr result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__water__flux_node_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NeumannBoundary_create" "', argument " "1"" of type '" "cmf::water::flux_node::ptr""'"); 
    }
    if (argp1) arg1 = *(reinterpret_cast< cmf::water::flux_node::ptr * >(argp1));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< cmf::water::flux_node::ptr * >(argp1);
  }
  {
    try {
      result = cmf::water::NeumannBoundary::create(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  {
    std::tr1::shared_ptr<  cmf::water::NeumannBoundary > *smartresult = result ? new std::tr1::shared_ptr<  cmf::water::NeumannBoundary >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__tr1__shared_ptrT_cmf__water__NeumannBoundary_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NeumannBoundary_SWIGSharedPtrUpcast(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::tr1::shared_ptr< cmf::water::NeumannBoundary > arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::tr1::shared_ptr< cmf::water::flux_node > result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__water__NeumannBoundary_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NeumannBoundary_SWIGSharedPtrUpcast" "', argument " "1"" of type '" "std::tr1::shared_ptr< cmf::water::NeumannBoundary >""'"); 
    }
    if (argp1) arg1 = *(reinterpret_cast< std::tr1::shared_ptr< cmf::water::NeumannBoundary > * >(argp1));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< std::tr1::shared_ptr< cmf::water::NeumannBoundary > * >(argp1);
  }
  {
    try {
      result = cmf_water_NeumannBoundary_SWIGSharedPtrUpcast(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  {
    std::tr1::shared_ptr<  cmf::water::flux_node > *smartresult = result ? new std::tr1::shared_ptr<  cmf::water::flux_node >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__tr1__shared_ptrT_cmf__water__flux_node_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_NeumannBoundary(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::water::NeumannBoundary *arg1 = (cmf::water::NeumannBoundary *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< cmf::water::NeumannBoundary > tempshared1 ;
  std::tr1::shared_ptr< cmf::water::NeumannBoundary > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__water__NeumannBoundary_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_NeumannBoundary" "', argument " "1"" of type '" "cmf::water::NeumannBoundary *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  cmf::water::NeumannBoundary > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  cmf::water::NeumannBoundary > * >(argp1);
      arg1 = const_cast< cmf::water::NeumannBoundary * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  cmf::water::NeumannBoundary > * >(argp1);
      arg1 = const_cast< cmf::water::NeumannBoundary * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *NeumannBoundary_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__tr1__shared_ptrT_cmf__water__NeumannBoundary_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *NeumannBoundary_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_NeumannFlux(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::tr1::shared_ptr< cmf::water::NeumannBoundary > arg1 ;
  cmf::water::flux_node::ptr arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  cmf::water::NeumannFlux *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args,"new_NeumannFlux",2,2,swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__water__NeumannBoundary_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_NeumannFlux" "', argument " "1"" of type '" "std::tr1::shared_ptr< cmf::water::NeumannBoundary >""'"); 
    }
    if (argp1) arg1 = *(reinterpret_cast< std::tr1::shared_ptr< cmf::water::NeumannBoundary > * >(argp1));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< std::tr1::shared_ptr< cmf::water::NeumannBoundary > * >(argp1);
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(swig_obj[1], &argp2, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__water__flux_node_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_NeumannFlux" "', argument " "2"" of type '" "cmf::water::flux_node::ptr""'"); 
    }
    if (argp2) arg2 = *(reinterpret_cast< cmf::water::flux_node::ptr * >(argp2));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< cmf::water::flux_node::ptr * >(argp2);
  }
  {
    try {
      result = (cmf::water::NeumannFlux *)new cmf::water::NeumannFlux(arg1,arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmf__water__NeumannFlux, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_NeumannFlux(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::water::NeumannFlux *arg1 = (cmf::water::NeumannFlux *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__water__NeumannFlux, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_NeumannFlux" "', argument " "1"" of type '" "cmf::water::NeumannFlux *""'"); 
  }
  arg1 = reinterpret_cast< cmf::water::NeumannFlux * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *NeumannFlux_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_cmf__water__NeumannFlux, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *NeumannFlux_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_TechnicalFlux_MaxFlux_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::water::TechnicalFlux *arg1 = (cmf::water::TechnicalFlux *) 0 ;
  real arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"TechnicalFlux_MaxFlux_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__water__TechnicalFlux, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TechnicalFlux_MaxFlux_set" "', argument " "1"" of type '" "cmf::water::TechnicalFlux *""'"); 
  }
  arg1 = reinterpret_cast< cmf::water::TechnicalFlux * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TechnicalFlux_MaxFlux_set" "', argument " "2"" of type '" "real""'");
  } 
  arg2 = static_cast< real >(val2);
  if (arg1) (arg1)->MaxFlux = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TechnicalFlux_MaxFlux_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::water::TechnicalFlux *arg1 = (cmf::water::TechnicalFlux *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  real result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__water__TechnicalFlux, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TechnicalFlux_MaxFlux_get" "', argument " "1"" of type '" "cmf::water::TechnicalFlux *""'"); 
  }
  arg1 = reinterpret_cast< cmf::water::TechnicalFlux * >(argp1);
  result = (real) ((arg1)->MaxFlux);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TechnicalFlux_MinState_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::water::TechnicalFlux *arg1 = (cmf::water::TechnicalFlux *) 0 ;
  real arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"TechnicalFlux_MinState_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__water__TechnicalFlux, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TechnicalFlux_MinState_set" "', argument " "1"" of type '" "cmf::water::TechnicalFlux *""'"); 
  }
  arg1 = reinterpret_cast< cmf::water::TechnicalFlux * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TechnicalFlux_MinState_set" "', argument " "2"" of type '" "real""'");
  } 
  arg2 = static_cast< real >(val2);
  if (arg1) (arg1)->MinState = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TechnicalFlux_MinState_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::water::TechnicalFlux *arg1 = (cmf::water::TechnicalFlux *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  real result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__water__TechnicalFlux, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TechnicalFlux_MinState_get" "', argument " "1"" of type '" "cmf::water::TechnicalFlux *""'"); 
  }
  arg1 = reinterpret_cast< cmf::water::TechnicalFlux * >(argp1);
  result = (real) ((arg1)->MinState);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TechnicalFlux_FluxDecreaseTime_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::water::TechnicalFlux *arg1 = (cmf::water::TechnicalFlux *) 0 ;
  cmf::math::Time *arg2 = (cmf::math::Time *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"TechnicalFlux_FluxDecreaseTime_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__water__TechnicalFlux, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TechnicalFlux_FluxDecreaseTime_set" "', argument " "1"" of type '" "cmf::water::TechnicalFlux *""'"); 
  }
  arg1 = reinterpret_cast< cmf::water::TechnicalFlux * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cmf__math__Time, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TechnicalFlux_FluxDecreaseTime_set" "', argument " "2"" of type '" "cmf::math::Time *""'"); 
  }
  arg2 = reinterpret_cast< cmf::math::Time * >(argp2);
  if (arg1) (arg1)->FluxDecreaseTime = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TechnicalFlux_FluxDecreaseTime_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::water::TechnicalFlux *arg1 = (cmf::water::TechnicalFlux *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  cmf::math::Time *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__water__TechnicalFlux, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TechnicalFlux_FluxDecreaseTime_get" "', argument " "1"" of type '" "cmf::water::TechnicalFlux *""'"); 
  }
  arg1 = reinterpret_cast< cmf::water::TechnicalFlux * >(argp1);
  result = (cmf::math::Time *)& ((arg1)->FluxDecreaseTime);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmf__math__Time, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TechnicalFlux(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::tr1::shared_ptr< cmf::water::WaterStorage > *arg1 = 0 ;
  std::tr1::shared_ptr< cmf::water::flux_node > arg2 ;
  real arg3 ;
  real arg4 = (real) 0 ;
  cmf::math::Time arg5 = (cmf::math::Time) cmf::math::h ;
  void *argp1 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< cmf::water::WaterStorage > tempshared1 ;
  void *argp2 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject *swig_obj[5] ;
  cmf::water::TechnicalFlux *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args,"new_TechnicalFlux",3,5,swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__water__WaterStorage_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_TechnicalFlux" "', argument " "1"" of type '" "std::tr1::shared_ptr< cmf::water::WaterStorage > &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp1) tempshared1 = *reinterpret_cast< std::tr1::shared_ptr< cmf::water::WaterStorage > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr< cmf::water::WaterStorage > * >(argp1);
      arg1 = &tempshared1;
    } else {
      arg1 = (argp1) ? reinterpret_cast< std::tr1::shared_ptr< cmf::water::WaterStorage > * >(argp1) : &tempshared1;
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(swig_obj[1], &argp2, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__water__flux_node_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_TechnicalFlux" "', argument " "2"" of type '" "std::tr1::shared_ptr< cmf::water::flux_node >""'"); 
    }
    if (argp2) arg2 = *(reinterpret_cast< std::tr1::shared_ptr< cmf::water::flux_node > * >(argp2));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< std::tr1::shared_ptr< cmf::water::flux_node > * >(argp2);
  }
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_TechnicalFlux" "', argument " "3"" of type '" "real""'");
  } 
  arg3 = static_cast< real >(val3);
  if (swig_obj[3]) {
    ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_TechnicalFlux" "', argument " "4"" of type '" "real""'");
    } 
    arg4 = static_cast< real >(val4);
  }
  if (swig_obj[4]) {
    {
      arg5 = convert_datetime_to_cmftime(swig_obj[4]);    
    }
  }
  {
    try {
      result = (cmf::water::TechnicalFlux *)new cmf::water::TechnicalFlux(*arg1,arg2,arg3,arg4,arg5);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmf__water__TechnicalFlux, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_TechnicalFlux(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::water::TechnicalFlux *arg1 = (cmf::water::TechnicalFlux *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__water__TechnicalFlux, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_TechnicalFlux" "', argument " "1"" of type '" "cmf::water::TechnicalFlux *""'"); 
  }
  arg1 = reinterpret_cast< cmf::water::TechnicalFlux * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *TechnicalFlux_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_cmf__water__TechnicalFlux, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *TechnicalFlux_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_WaterStorage(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::project *arg1 = 0 ;
  double arg2 = (double) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  cmf::water::WaterStorage *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args,"new_WaterStorage",1,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cmf__project,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_WaterStorage" "', argument " "1"" of type '" "cmf::project const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_WaterStorage" "', argument " "1"" of type '" "cmf::project const &""'"); 
  }
  arg1 = reinterpret_cast< cmf::project * >(argp1);
  if (swig_obj[1]) {
    ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_WaterStorage" "', argument " "2"" of type '" "double""'");
    } 
    arg2 = static_cast< double >(val2);
  }
  {
    try {
      result = (cmf::water::WaterStorage *)new cmf::water::WaterStorage((cmf::project const &)*arg1,arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  {
    std::tr1::shared_ptr<  cmf::water::WaterStorage > *smartresult = result ? new std::tr1::shared_ptr<  cmf::water::WaterStorage >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__tr1__shared_ptrT_cmf__water__WaterStorage_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WaterStorage_from_node(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::water::flux_node::ptr arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::tr1::shared_ptr< cmf::water::WaterStorage > result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__water__flux_node_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WaterStorage_from_node" "', argument " "1"" of type '" "cmf::water::flux_node::ptr""'"); 
    }
    if (argp1) arg1 = *(reinterpret_cast< cmf::water::flux_node::ptr * >(argp1));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< cmf::water::flux_node::ptr * >(argp1);
  }
  {
    try {
      result = cmf::water::WaterStorage::from_node(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  {
    std::tr1::shared_ptr<  cmf::water::WaterStorage > *smartresult = result ? new std::tr1::shared_ptr<  cmf::water::WaterStorage >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__tr1__shared_ptrT_cmf__water__WaterStorage_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WaterStorage_Solute__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  cmf::water::WaterStorage *arg1 = (cmf::water::WaterStorage *) 0 ;
  cmf::water::solute *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< cmf::water::WaterStorage > tempshared1 ;
  std::tr1::shared_ptr< cmf::water::WaterStorage > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  cmf::water::SoluteStorage *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__water__WaterStorage_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WaterStorage_Solute" "', argument " "1"" of type '" "cmf::water::WaterStorage *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  cmf::water::WaterStorage > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  cmf::water::WaterStorage > * >(argp1);
      arg1 = const_cast< cmf::water::WaterStorage * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  cmf::water::WaterStorage > * >(argp1);
      arg1 = const_cast< cmf::water::WaterStorage * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cmf__water__solute,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "WaterStorage_Solute" "', argument " "2"" of type '" "cmf::water::solute const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WaterStorage_Solute" "', argument " "2"" of type '" "cmf::water::solute const &""'"); 
  }
  arg2 = reinterpret_cast< cmf::water::solute * >(argp2);
  {
    try {
      result = (cmf::water::SoluteStorage *) &(arg1)->Solute((cmf::water::solute const &)*arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  {
    std::tr1::shared_ptr<  cmf::water::SoluteStorage > *smartresult = new std::tr1::shared_ptr<  cmf::water::SoluteStorage >(result SWIG_NO_NULL_DELETER_0);
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__tr1__shared_ptrT_cmf__water__SoluteStorage_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WaterStorage_Solute__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  cmf::water::WaterStorage *arg1 = (cmf::water::WaterStorage *) 0 ;
  cmf::water::solute *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< cmf::water::WaterStorage const > tempshared1 ;
  std::tr1::shared_ptr< cmf::water::WaterStorage const > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  cmf::water::SoluteStorage *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__water__WaterStorage_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WaterStorage_Solute" "', argument " "1"" of type '" "cmf::water::WaterStorage const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr< const cmf::water::WaterStorage > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr< const cmf::water::WaterStorage > * >(argp1);
      arg1 = const_cast< cmf::water::WaterStorage * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr< const cmf::water::WaterStorage > * >(argp1);
      arg1 = const_cast< cmf::water::WaterStorage * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cmf__water__solute,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "WaterStorage_Solute" "', argument " "2"" of type '" "cmf::water::solute const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WaterStorage_Solute" "', argument " "2"" of type '" "cmf::water::solute const &""'"); 
  }
  arg2 = reinterpret_cast< cmf::water::solute * >(argp2);
  {
    try {
      result = (cmf::water::SoluteStorage *) &((cmf::water::WaterStorage const *)arg1)->Solute((cmf::water::solute const &)*arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  {
    std::tr1::shared_ptr< const cmf::water::SoluteStorage > *smartresult = new std::tr1::shared_ptr< const cmf::water::SoluteStorage >(result SWIG_NO_NULL_DELETER_0);
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__tr1__shared_ptrT_cmf__water__SoluteStorage_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WaterStorage_Solute(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"WaterStorage_Solute",0,2,argv))) SWIG_fail;
  --argc;
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (argc == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__water__WaterStorage_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_cmf__water__solute, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (argc == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__water__WaterStorage_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_cmf__water__solute, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      return _wrap_WaterStorage_Solute__SWIG_0(self, argc, argv);
    case 2:
      return _wrap_WaterStorage_Solute__SWIG_1(self, argc, argv);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'WaterStorage_Solute'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Solute(cmf::water::WaterStorage *,cmf::water::solute const &)\n"
    "    Solute(cmf::water::WaterStorage const *,cmf::water::solute const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_WaterStorage_conc__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  cmf::water::WaterStorage *arg1 = (cmf::water::WaterStorage *) 0 ;
  cmf::water::solute *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< cmf::water::WaterStorage const > tempshared1 ;
  std::tr1::shared_ptr< cmf::water::WaterStorage const > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  real result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__water__WaterStorage_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WaterStorage_conc" "', argument " "1"" of type '" "cmf::water::WaterStorage const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr< const cmf::water::WaterStorage > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr< const cmf::water::WaterStorage > * >(argp1);
      arg1 = const_cast< cmf::water::WaterStorage * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr< const cmf::water::WaterStorage > * >(argp1);
      arg1 = const_cast< cmf::water::WaterStorage * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cmf__water__solute,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "WaterStorage_conc" "', argument " "2"" of type '" "cmf::water::solute const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WaterStorage_conc" "', argument " "2"" of type '" "cmf::water::solute const &""'"); 
  }
  arg2 = reinterpret_cast< cmf::water::solute * >(argp2);
  {
    try {
      result = (real)((cmf::water::WaterStorage const *)arg1)->conc((cmf::water::solute const &)*arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WaterStorage_conc__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  cmf::water::WaterStorage *arg1 = (cmf::water::WaterStorage *) 0 ;
  cmf::math::Time arg2 ;
  cmf::water::solute *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< cmf::water::WaterStorage const > tempshared1 ;
  std::tr1::shared_ptr< cmf::water::WaterStorage const > *smartarg1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  real result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__water__WaterStorage_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WaterStorage_conc" "', argument " "1"" of type '" "cmf::water::WaterStorage const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr< const cmf::water::WaterStorage > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr< const cmf::water::WaterStorage > * >(argp1);
      arg1 = const_cast< cmf::water::WaterStorage * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr< const cmf::water::WaterStorage > * >(argp1);
      arg1 = const_cast< cmf::water::WaterStorage * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    arg2 = convert_datetime_to_cmftime(swig_obj[1]);    
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_cmf__water__solute,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "WaterStorage_conc" "', argument " "3"" of type '" "cmf::water::solute const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WaterStorage_conc" "', argument " "3"" of type '" "cmf::water::solute const &""'"); 
  }
  arg3 = reinterpret_cast< cmf::water::solute * >(argp3);
  {
    try {
      result = (real)((cmf::water::WaterStorage const *)arg1)->conc(arg2,(cmf::water::solute const &)*arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WaterStorage_conc__SWIG_2(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  cmf::water::WaterStorage *arg1 = (cmf::water::WaterStorage *) 0 ;
  cmf::water::solute *arg2 = 0 ;
  real arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< cmf::water::WaterStorage > tempshared1 ;
  std::tr1::shared_ptr< cmf::water::WaterStorage > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__water__WaterStorage_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WaterStorage_conc" "', argument " "1"" of type '" "cmf::water::WaterStorage *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  cmf::water::WaterStorage > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  cmf::water::WaterStorage > * >(argp1);
      arg1 = const_cast< cmf::water::WaterStorage * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  cmf::water::WaterStorage > * >(argp1);
      arg1 = const_cast< cmf::water::WaterStorage * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cmf__water__solute,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "WaterStorage_conc" "', argument " "2"" of type '" "cmf::water::solute const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WaterStorage_conc" "', argument " "2"" of type '" "cmf::water::solute const &""'"); 
  }
  arg2 = reinterpret_cast< cmf::water::solute * >(argp2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "WaterStorage_conc" "', argument " "3"" of type '" "real""'");
  } 
  arg3 = static_cast< real >(val3);
  {
    try {
      (arg1)->conc((cmf::water::solute const &)*arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WaterStorage_conc(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"WaterStorage_conc",0,3,argv))) SWIG_fail;
  --argc;
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (argc == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__water__WaterStorage_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_cmf__water__solute, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (argc == 3) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__water__WaterStorage_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          void * pt;    
          int res=SWIG_ConvertPtr(argv[1],&pt,SWIGTYPE_p_cmf__math__Time,0);
          _v=SWIG_IsOK(res) || PyDateTime_Check(argv[1]) || PyDelta_Check(argv[1]) || PyDate_Check(argv[1]);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_cmf__water__solute, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
    if (argc == 3) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__water__WaterStorage_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_cmf__water__solute, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 3;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_3:
    
  dispatch:
    switch(_index) {
    case 1:
      return _wrap_WaterStorage_conc__SWIG_0(self, argc, argv);
    case 2:
      return _wrap_WaterStorage_conc__SWIG_1(self, argc, argv);
    case 3:
      return _wrap_WaterStorage_conc__SWIG_2(self, argc, argv);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'WaterStorage_conc'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    conc(cmf::water::WaterStorage const *,cmf::water::solute const &)\n"
    "    conc(cmf::water::WaterStorage const *,cmf::math::Time,cmf::water::solute const &)\n"
    "    conc(cmf::water::WaterStorage *,cmf::water::solute const &,real)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_WaterStorage_cast(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::tr1::shared_ptr< cmf::water::flux_node > arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::tr1::shared_ptr< cmf::water::WaterStorage > result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__water__flux_node_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WaterStorage_cast" "', argument " "1"" of type '" "std::tr1::shared_ptr< cmf::water::flux_node >""'"); 
    }
    if (argp1) arg1 = *(reinterpret_cast< std::tr1::shared_ptr< cmf::water::flux_node > * >(argp1));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< std::tr1::shared_ptr< cmf::water::flux_node > * >(argp1);
  }
  {
    try {
      result = cmf::water::WaterStorage::cast(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  {
    std::tr1::shared_ptr<  cmf::water::WaterStorage > *smartresult = result ? new std::tr1::shared_ptr<  cmf::water::WaterStorage >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__tr1__shared_ptrT_cmf__water__WaterStorage_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WaterStorage_create(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::project *arg1 = 0 ;
  real arg2 = (real) 0.0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  std::tr1::shared_ptr< cmf::water::WaterStorage > result;
  
  if (!SWIG_Python_UnpackTuple(args,"WaterStorage_create",1,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cmf__project,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WaterStorage_create" "', argument " "1"" of type '" "cmf::project const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WaterStorage_create" "', argument " "1"" of type '" "cmf::project const &""'"); 
  }
  arg1 = reinterpret_cast< cmf::project * >(argp1);
  if (swig_obj[1]) {
    ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "WaterStorage_create" "', argument " "2"" of type '" "real""'");
    } 
    arg2 = static_cast< real >(val2);
  }
  {
    try {
      result = cmf::water::WaterStorage::create((cmf::project const &)*arg1,arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  {
    std::tr1::shared_ptr<  cmf::water::WaterStorage > *smartresult = result ? new std::tr1::shared_ptr<  cmf::water::WaterStorage >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__tr1__shared_ptrT_cmf__water__WaterStorage_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WaterStorage_SWIGSharedPtrUpcast(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::tr1::shared_ptr< cmf::water::WaterStorage > arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::tr1::shared_ptr< cmf::water::flux_node > result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__water__WaterStorage_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WaterStorage_SWIGSharedPtrUpcast" "', argument " "1"" of type '" "std::tr1::shared_ptr< cmf::water::WaterStorage >""'"); 
    }
    if (argp1) arg1 = *(reinterpret_cast< std::tr1::shared_ptr< cmf::water::WaterStorage > * >(argp1));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< std::tr1::shared_ptr< cmf::water::WaterStorage > * >(argp1);
  }
  {
    try {
      result = cmf_water_WaterStorage_SWIGSharedPtrUpcast(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  {
    std::tr1::shared_ptr<  cmf::water::flux_node > *smartresult = result ? new std::tr1::shared_ptr<  cmf::water::flux_node >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__tr1__shared_ptrT_cmf__water__flux_node_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WaterStorage_volume_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::water::WaterStorage *arg1 = (cmf::water::WaterStorage *) 0 ;
  real arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< cmf::water::WaterStorage > tempshared1 ;
  std::tr1::shared_ptr< cmf::water::WaterStorage > *smartarg1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"WaterStorage_volume_set",2,2,swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__water__WaterStorage_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WaterStorage_volume_set" "', argument " "1"" of type '" "cmf::water::WaterStorage *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  cmf::water::WaterStorage > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  cmf::water::WaterStorage > * >(argp1);
      arg1 = const_cast< cmf::water::WaterStorage * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  cmf::water::WaterStorage > * >(argp1);
      arg1 = const_cast< cmf::water::WaterStorage * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "WaterStorage_volume_set" "', argument " "2"" of type '" "real""'");
  } 
  arg2 = static_cast< real >(val2);
  {
    try {
      cmf_water_WaterStorage_volume_set(arg1,arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WaterStorage_volume_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::water::WaterStorage *arg1 = (cmf::water::WaterStorage *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< cmf::water::WaterStorage > tempshared1 ;
  std::tr1::shared_ptr< cmf::water::WaterStorage > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  real result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__water__WaterStorage_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WaterStorage_volume_get" "', argument " "1"" of type '" "cmf::water::WaterStorage *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  cmf::water::WaterStorage > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  cmf::water::WaterStorage > * >(argp1);
      arg1 = const_cast< cmf::water::WaterStorage * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  cmf::water::WaterStorage > * >(argp1);
      arg1 = const_cast< cmf::water::WaterStorage * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      result = (real)cmf_water_WaterStorage_volume_get(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_WaterStorage(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::water::WaterStorage *arg1 = (cmf::water::WaterStorage *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< cmf::water::WaterStorage > tempshared1 ;
  std::tr1::shared_ptr< cmf::water::WaterStorage > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__water__WaterStorage_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_WaterStorage" "', argument " "1"" of type '" "cmf::water::WaterStorage *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  cmf::water::WaterStorage > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  cmf::water::WaterStorage > * >(argp1);
      arg1 = const_cast< cmf::water::WaterStorage * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  cmf::water::WaterStorage > * >(argp1);
      arg1 = const_cast< cmf::water::WaterStorage * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *WaterStorage_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__tr1__shared_ptrT_cmf__water__WaterStorage_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *WaterStorage_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_storage_vector_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< cmf::water::WaterStorage::ptr > *arg1 = (std::vector< cmf::water::WaterStorage::ptr > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &swig_obj[0];
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_cmf__water__WaterStorage_t_std__allocatorT_std__tr1__shared_ptrT_cmf__water__WaterStorage_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "storage_vector_iterator" "', argument " "1"" of type '" "std::vector< cmf::water::WaterStorage::ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< cmf::water::WaterStorage::ptr > * >(argp1);
  {
    try {
      result = (swig::SwigPyIterator *)std_vector_Sl_cmf_water_WaterStorage_ptr_Sg__iterator(arg1,arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_storage_vector___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< cmf::water::WaterStorage::ptr > *arg1 = (std::vector< cmf::water::WaterStorage::ptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_cmf__water__WaterStorage_t_std__allocatorT_std__tr1__shared_ptrT_cmf__water__WaterStorage_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "storage_vector___nonzero__" "', argument " "1"" of type '" "std::vector< cmf::water::WaterStorage::ptr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< cmf::water::WaterStorage::ptr > * >(argp1);
  {
    try {
      result = (bool)std_vector_Sl_cmf_water_WaterStorage_ptr_Sg____nonzero__((std::vector< std::tr1::shared_ptr< cmf::water::WaterStorage > > const *)arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_storage_vector___bool__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< cmf::water::WaterStorage::ptr > *arg1 = (std::vector< cmf::water::WaterStorage::ptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_cmf__water__WaterStorage_t_std__allocatorT_std__tr1__shared_ptrT_cmf__water__WaterStorage_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "storage_vector___bool__" "', argument " "1"" of type '" "std::vector< cmf::water::WaterStorage::ptr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< cmf::water::WaterStorage::ptr > * >(argp1);
  {
    try {
      result = (bool)std_vector_Sl_cmf_water_WaterStorage_ptr_Sg____bool__((std::vector< std::tr1::shared_ptr< cmf::water::WaterStorage > > const *)arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_storage_vector___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< cmf::water::WaterStorage::ptr > *arg1 = (std::vector< cmf::water::WaterStorage::ptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::tr1::shared_ptr< cmf::water::WaterStorage > >::size_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_cmf__water__WaterStorage_t_std__allocatorT_std__tr1__shared_ptrT_cmf__water__WaterStorage_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "storage_vector___len__" "', argument " "1"" of type '" "std::vector< cmf::water::WaterStorage::ptr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< cmf::water::WaterStorage::ptr > * >(argp1);
  {
    try {
      result = std_vector_Sl_cmf_water_WaterStorage_ptr_Sg____len__((std::vector< std::tr1::shared_ptr< cmf::water::WaterStorage > > const *)arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_storage_vector_pop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< cmf::water::WaterStorage::ptr > *arg1 = (std::vector< cmf::water::WaterStorage::ptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::tr1::shared_ptr< cmf::water::WaterStorage > >::value_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_cmf__water__WaterStorage_t_std__allocatorT_std__tr1__shared_ptrT_cmf__water__WaterStorage_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "storage_vector_pop" "', argument " "1"" of type '" "std::vector< cmf::water::WaterStorage::ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< cmf::water::WaterStorage::ptr > * >(argp1);
  {
    try {
      try {
        result = std_vector_Sl_cmf_water_WaterStorage_ptr_Sg__pop(arg1);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  {
    std::tr1::shared_ptr<  cmf::water::WaterStorage > *smartresult = result ? new std::tr1::shared_ptr<  cmf::water::WaterStorage >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__tr1__shared_ptrT_cmf__water__WaterStorage_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_storage_vector___getslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< cmf::water::WaterStorage::ptr > *arg1 = (std::vector< cmf::water::WaterStorage::ptr > *) 0 ;
  std::vector< std::tr1::shared_ptr< cmf::water::WaterStorage > >::difference_type arg2 ;
  std::vector< std::tr1::shared_ptr< cmf::water::WaterStorage > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  std::vector< std::tr1::shared_ptr< cmf::water::WaterStorage >,std::allocator< std::tr1::shared_ptr< cmf::water::WaterStorage > > > *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args,"storage_vector___getslice__",3,3,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_cmf__water__WaterStorage_t_std__allocatorT_std__tr1__shared_ptrT_cmf__water__WaterStorage_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "storage_vector___getslice__" "', argument " "1"" of type '" "std::vector< cmf::water::WaterStorage::ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< cmf::water::WaterStorage::ptr > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "storage_vector___getslice__" "', argument " "2"" of type '" "std::vector< std::tr1::shared_ptr< cmf::water::WaterStorage > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::tr1::shared_ptr< cmf::water::WaterStorage > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "storage_vector___getslice__" "', argument " "3"" of type '" "std::vector< std::tr1::shared_ptr< cmf::water::WaterStorage > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::tr1::shared_ptr< cmf::water::WaterStorage > >::difference_type >(val3);
  {
    try {
      try {
        result = (std::vector< std::tr1::shared_ptr< cmf::water::WaterStorage >,std::allocator< std::tr1::shared_ptr< cmf::water::WaterStorage > > > *)std_vector_Sl_cmf_water_WaterStorage_ptr_Sg____getslice__(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_cmf__water__WaterStorage_t_std__allocatorT_std__tr1__shared_ptrT_cmf__water__WaterStorage_t_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_storage_vector___setslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< cmf::water::WaterStorage::ptr > *arg1 = (std::vector< cmf::water::WaterStorage::ptr > *) 0 ;
  std::vector< std::tr1::shared_ptr< cmf::water::WaterStorage > >::difference_type arg2 ;
  std::vector< std::tr1::shared_ptr< cmf::water::WaterStorage > >::difference_type arg3 ;
  std::vector< std::tr1::shared_ptr< cmf::water::WaterStorage >,std::allocator< std::tr1::shared_ptr< cmf::water::WaterStorage > > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject *swig_obj[4] ;
  
  if (!SWIG_Python_UnpackTuple(args,"storage_vector___setslice__",4,4,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_cmf__water__WaterStorage_t_std__allocatorT_std__tr1__shared_ptrT_cmf__water__WaterStorage_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "storage_vector___setslice__" "', argument " "1"" of type '" "std::vector< cmf::water::WaterStorage::ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< cmf::water::WaterStorage::ptr > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "storage_vector___setslice__" "', argument " "2"" of type '" "std::vector< std::tr1::shared_ptr< cmf::water::WaterStorage > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::tr1::shared_ptr< cmf::water::WaterStorage > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "storage_vector___setslice__" "', argument " "3"" of type '" "std::vector< std::tr1::shared_ptr< cmf::water::WaterStorage > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::tr1::shared_ptr< cmf::water::WaterStorage > >::difference_type >(val3);
  {
    std::vector<std::tr1::shared_ptr< cmf::water::WaterStorage >,std::allocator< std::tr1::shared_ptr< cmf::water::WaterStorage > > > *ptr = (std::vector<std::tr1::shared_ptr< cmf::water::WaterStorage >,std::allocator< std::tr1::shared_ptr< cmf::water::WaterStorage > > > *)0;
    res4 = swig::asptr(swig_obj[3], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "storage_vector___setslice__" "', argument " "4"" of type '" "std::vector< std::tr1::shared_ptr< cmf::water::WaterStorage >,std::allocator< std::tr1::shared_ptr< cmf::water::WaterStorage > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "storage_vector___setslice__" "', argument " "4"" of type '" "std::vector< std::tr1::shared_ptr< cmf::water::WaterStorage >,std::allocator< std::tr1::shared_ptr< cmf::water::WaterStorage > > > const &""'"); 
    }
    arg4 = ptr;
  }
  {
    try {
      try {
        std_vector_Sl_cmf_water_WaterStorage_ptr_Sg____setslice__(arg1,arg2,arg3,(std::vector< std::tr1::shared_ptr< cmf::water::WaterStorage >,std::allocator< std::tr1::shared_ptr< cmf::water::WaterStorage > > > const &)*arg4);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_storage_vector___delslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< cmf::water::WaterStorage::ptr > *arg1 = (std::vector< cmf::water::WaterStorage::ptr > *) 0 ;
  std::vector< std::tr1::shared_ptr< cmf::water::WaterStorage > >::difference_type arg2 ;
  std::vector< std::tr1::shared_ptr< cmf::water::WaterStorage > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  
  if (!SWIG_Python_UnpackTuple(args,"storage_vector___delslice__",3,3,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_cmf__water__WaterStorage_t_std__allocatorT_std__tr1__shared_ptrT_cmf__water__WaterStorage_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "storage_vector___delslice__" "', argument " "1"" of type '" "std::vector< cmf::water::WaterStorage::ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< cmf::water::WaterStorage::ptr > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "storage_vector___delslice__" "', argument " "2"" of type '" "std::vector< std::tr1::shared_ptr< cmf::water::WaterStorage > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::tr1::shared_ptr< cmf::water::WaterStorage > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "storage_vector___delslice__" "', argument " "3"" of type '" "std::vector< std::tr1::shared_ptr< cmf::water::WaterStorage > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::tr1::shared_ptr< cmf::water::WaterStorage > >::difference_type >(val3);
  {
    try {
      try {
        std_vector_Sl_cmf_water_WaterStorage_ptr_Sg____delslice__(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_storage_vector___delitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< cmf::water::WaterStorage::ptr > *arg1 = (std::vector< cmf::water::WaterStorage::ptr > *) 0 ;
  std::vector< std::tr1::shared_ptr< cmf::water::WaterStorage > >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_cmf__water__WaterStorage_t_std__allocatorT_std__tr1__shared_ptrT_cmf__water__WaterStorage_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "storage_vector___delitem__" "', argument " "1"" of type '" "std::vector< cmf::water::WaterStorage::ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< cmf::water::WaterStorage::ptr > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "storage_vector___delitem__" "', argument " "2"" of type '" "std::vector< std::tr1::shared_ptr< cmf::water::WaterStorage > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::tr1::shared_ptr< cmf::water::WaterStorage > >::difference_type >(val2);
  {
    try {
      try {
        std_vector_Sl_cmf_water_WaterStorage_ptr_Sg____delitem____SWIG_0(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_storage_vector___getitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< cmf::water::WaterStorage::ptr > *arg1 = (std::vector< cmf::water::WaterStorage::ptr > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< std::tr1::shared_ptr< cmf::water::WaterStorage >,std::allocator< std::tr1::shared_ptr< cmf::water::WaterStorage > > > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_cmf__water__WaterStorage_t_std__allocatorT_std__tr1__shared_ptrT_cmf__water__WaterStorage_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "storage_vector___getitem__" "', argument " "1"" of type '" "std::vector< cmf::water::WaterStorage::ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< cmf::water::WaterStorage::ptr > * >(argp1);
  {
    arg2 = (PySliceObject *) swig_obj[1];
  }
  {
    try {
      try {
        result = (std::vector< std::tr1::shared_ptr< cmf::water::WaterStorage >,std::allocator< std::tr1::shared_ptr< cmf::water::WaterStorage > > > *)std_vector_Sl_cmf_water_WaterStorage_ptr_Sg____getitem____SWIG_0(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_cmf__water__WaterStorage_t_std__allocatorT_std__tr1__shared_ptrT_cmf__water__WaterStorage_t_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_storage_vector___setitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< cmf::water::WaterStorage::ptr > *arg1 = (std::vector< cmf::water::WaterStorage::ptr > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  std::vector< std::tr1::shared_ptr< cmf::water::WaterStorage >,std::allocator< std::tr1::shared_ptr< cmf::water::WaterStorage > > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_cmf__water__WaterStorage_t_std__allocatorT_std__tr1__shared_ptrT_cmf__water__WaterStorage_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "storage_vector___setitem__" "', argument " "1"" of type '" "std::vector< cmf::water::WaterStorage::ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< cmf::water::WaterStorage::ptr > * >(argp1);
  {
    arg2 = (PySliceObject *) swig_obj[1];
  }
  {
    std::vector<std::tr1::shared_ptr< cmf::water::WaterStorage >,std::allocator< std::tr1::shared_ptr< cmf::water::WaterStorage > > > *ptr = (std::vector<std::tr1::shared_ptr< cmf::water::WaterStorage >,std::allocator< std::tr1::shared_ptr< cmf::water::WaterStorage > > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "storage_vector___setitem__" "', argument " "3"" of type '" "std::vector< std::tr1::shared_ptr< cmf::water::WaterStorage >,std::allocator< std::tr1::shared_ptr< cmf::water::WaterStorage > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "storage_vector___setitem__" "', argument " "3"" of type '" "std::vector< std::tr1::shared_ptr< cmf::water::WaterStorage >,std::allocator< std::tr1::shared_ptr< cmf::water::WaterStorage > > > const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      try {
        std_vector_Sl_cmf_water_WaterStorage_ptr_Sg____setitem____SWIG_0(arg1,arg2,(std::vector< std::tr1::shared_ptr< cmf::water::WaterStorage >,std::allocator< std::tr1::shared_ptr< cmf::water::WaterStorage > > > const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_storage_vector___delitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< cmf::water::WaterStorage::ptr > *arg1 = (std::vector< cmf::water::WaterStorage::ptr > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_cmf__water__WaterStorage_t_std__allocatorT_std__tr1__shared_ptrT_cmf__water__WaterStorage_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "storage_vector___delitem__" "', argument " "1"" of type '" "std::vector< cmf::water::WaterStorage::ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< cmf::water::WaterStorage::ptr > * >(argp1);
  {
    arg2 = (PySliceObject *) swig_obj[1];
  }
  {
    try {
      try {
        std_vector_Sl_cmf_water_WaterStorage_ptr_Sg____delitem____SWIG_1(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_storage_vector___delitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"storage_vector___delitem__",0,2,argv))) SWIG_fail;
  --argc;
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (argc == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = swig::asptr(argv[0], (std::vector<std::tr1::shared_ptr< cmf::water::WaterStorage >,std::allocator< std::tr1::shared_ptr< cmf::water::WaterStorage > > >**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          _v = PySlice_Check(argv[1]);
        }
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (argc == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = swig::asptr(argv[0], (std::vector<std::tr1::shared_ptr< cmf::water::WaterStorage >,std::allocator< std::tr1::shared_ptr< cmf::water::WaterStorage > > >**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      return _wrap_storage_vector___delitem____SWIG_1(self, argc, argv);
    case 2:
      return _wrap_storage_vector___delitem____SWIG_0(self, argc, argv);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'storage_vector___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    __delitem__(std::vector< cmf::water::WaterStorage::ptr > *,std::vector< std::tr1::shared_ptr< cmf::water::WaterStorage > >::difference_type)\n"
    "    __delitem__(std::vector< cmf::water::WaterStorage::ptr > *,PySliceObject *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_storage_vector___getitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< cmf::water::WaterStorage::ptr > *arg1 = (std::vector< cmf::water::WaterStorage::ptr > *) 0 ;
  std::vector< std::tr1::shared_ptr< cmf::water::WaterStorage > >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  std::vector< std::tr1::shared_ptr< cmf::water::WaterStorage > >::value_type *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_cmf__water__WaterStorage_t_std__allocatorT_std__tr1__shared_ptrT_cmf__water__WaterStorage_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "storage_vector___getitem__" "', argument " "1"" of type '" "std::vector< cmf::water::WaterStorage::ptr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< cmf::water::WaterStorage::ptr > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "storage_vector___getitem__" "', argument " "2"" of type '" "std::vector< std::tr1::shared_ptr< cmf::water::WaterStorage > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::tr1::shared_ptr< cmf::water::WaterStorage > >::difference_type >(val2);
  {
    try {
      try {
        result = (std::vector< std::tr1::shared_ptr< cmf::water::WaterStorage > >::value_type *) &std_vector_Sl_cmf_water_WaterStorage_ptr_Sg____getitem____SWIG_1((std::vector< std::tr1::shared_ptr< cmf::water::WaterStorage > > const *)arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  {
    std::tr1::shared_ptr<  cmf::water::WaterStorage > *smartresult = *result ? new std::tr1::shared_ptr<  cmf::water::WaterStorage >(*result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__tr1__shared_ptrT_cmf__water__WaterStorage_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_storage_vector___getitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"storage_vector___getitem__",0,2,argv))) SWIG_fail;
  --argc;
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (argc == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = swig::asptr(argv[0], (std::vector<std::tr1::shared_ptr< cmf::water::WaterStorage >,std::allocator< std::tr1::shared_ptr< cmf::water::WaterStorage > > >**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          _v = PySlice_Check(argv[1]);
        }
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (argc == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = swig::asptr(argv[0], (std::vector<std::tr1::shared_ptr< cmf::water::WaterStorage >,std::allocator< std::tr1::shared_ptr< cmf::water::WaterStorage > > >**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      return _wrap_storage_vector___getitem____SWIG_0(self, argc, argv);
    case 2:
      return _wrap_storage_vector___getitem____SWIG_1(self, argc, argv);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'storage_vector___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    __getitem__(std::vector< cmf::water::WaterStorage::ptr > *,PySliceObject *)\n"
    "    __getitem__(std::vector< cmf::water::WaterStorage::ptr > const *,std::vector< std::tr1::shared_ptr< cmf::water::WaterStorage > >::difference_type)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_storage_vector___setitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< cmf::water::WaterStorage::ptr > *arg1 = (std::vector< cmf::water::WaterStorage::ptr > *) 0 ;
  std::vector< std::tr1::shared_ptr< cmf::water::WaterStorage > >::difference_type arg2 ;
  std::vector< std::tr1::shared_ptr< cmf::water::WaterStorage > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  std::vector< std::tr1::shared_ptr< cmf::water::WaterStorage > >::value_type tempshared3 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_cmf__water__WaterStorage_t_std__allocatorT_std__tr1__shared_ptrT_cmf__water__WaterStorage_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "storage_vector___setitem__" "', argument " "1"" of type '" "std::vector< cmf::water::WaterStorage::ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< cmf::water::WaterStorage::ptr > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "storage_vector___setitem__" "', argument " "2"" of type '" "std::vector< std::tr1::shared_ptr< cmf::water::WaterStorage > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::tr1::shared_ptr< cmf::water::WaterStorage > >::difference_type >(val2);
  {
    int newmem = 0;
    res3 = SWIG_ConvertPtrAndOwn(swig_obj[2], &argp3, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__water__WaterStorage_t,  0 , &newmem);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "storage_vector___setitem__" "', argument " "3"" of type '" "std::vector< std::tr1::shared_ptr< cmf::water::WaterStorage > >::value_type const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp3) tempshared3 = *reinterpret_cast< std::vector< std::tr1::shared_ptr< cmf::water::WaterStorage > >::value_type * >(argp3);
      delete reinterpret_cast< std::vector< std::tr1::shared_ptr< cmf::water::WaterStorage > >::value_type * >(argp3);
      arg3 = &tempshared3;
    } else {
      arg3 = (argp3) ? reinterpret_cast< std::vector< std::tr1::shared_ptr< cmf::water::WaterStorage > >::value_type * >(argp3) : &tempshared3;
    }
  }
  {
    try {
      try {
        std_vector_Sl_cmf_water_WaterStorage_ptr_Sg____setitem____SWIG_1(arg1,arg2,(std::tr1::shared_ptr< cmf::water::WaterStorage > const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_storage_vector___setitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"storage_vector___setitem__",0,3,argv))) SWIG_fail;
  --argc;
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (argc == 3) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = swig::asptr(argv[0], (std::vector<std::tr1::shared_ptr< cmf::water::WaterStorage >,std::allocator< std::tr1::shared_ptr< cmf::water::WaterStorage > > >**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          _v = PySlice_Check(argv[1]);
        }
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = swig::asptr(argv[2], (std::vector<std::tr1::shared_ptr< cmf::water::WaterStorage >,std::allocator< std::tr1::shared_ptr< cmf::water::WaterStorage > > >**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (argc == 3) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = swig::asptr(argv[0], (std::vector<std::tr1::shared_ptr< cmf::water::WaterStorage >,std::allocator< std::tr1::shared_ptr< cmf::water::WaterStorage > > >**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__water__WaterStorage_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      return _wrap_storage_vector___setitem____SWIG_0(self, argc, argv);
    case 2:
      return _wrap_storage_vector___setitem____SWIG_1(self, argc, argv);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'storage_vector___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    __setitem__(std::vector< cmf::water::WaterStorage::ptr > *,PySliceObject *,std::vector< std::tr1::shared_ptr< cmf::water::WaterStorage >,std::allocator< std::tr1::shared_ptr< cmf::water::WaterStorage > > > const &)\n"
    "    __setitem__(std::vector< cmf::water::WaterStorage::ptr > *,std::vector< std::tr1::shared_ptr< cmf::water::WaterStorage > >::difference_type,std::vector< std::tr1::shared_ptr< cmf::water::WaterStorage > >::value_type const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_storage_vector_append(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< cmf::water::WaterStorage::ptr > *arg1 = (std::vector< cmf::water::WaterStorage::ptr > *) 0 ;
  std::vector< std::tr1::shared_ptr< cmf::water::WaterStorage > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::vector< std::tr1::shared_ptr< cmf::water::WaterStorage > >::value_type tempshared2 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"storage_vector_append",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_cmf__water__WaterStorage_t_std__allocatorT_std__tr1__shared_ptrT_cmf__water__WaterStorage_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "storage_vector_append" "', argument " "1"" of type '" "std::vector< cmf::water::WaterStorage::ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< cmf::water::WaterStorage::ptr > * >(argp1);
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(swig_obj[1], &argp2, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__water__WaterStorage_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "storage_vector_append" "', argument " "2"" of type '" "std::vector< std::tr1::shared_ptr< cmf::water::WaterStorage > >::value_type const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp2) tempshared2 = *reinterpret_cast< std::vector< std::tr1::shared_ptr< cmf::water::WaterStorage > >::value_type * >(argp2);
      delete reinterpret_cast< std::vector< std::tr1::shared_ptr< cmf::water::WaterStorage > >::value_type * >(argp2);
      arg2 = &tempshared2;
    } else {
      arg2 = (argp2) ? reinterpret_cast< std::vector< std::tr1::shared_ptr< cmf::water::WaterStorage > >::value_type * >(argp2) : &tempshared2;
    }
  }
  {
    try {
      std_vector_Sl_cmf_water_WaterStorage_ptr_Sg__append(arg1,(std::tr1::shared_ptr< cmf::water::WaterStorage > const &)*arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_storage_vector__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  std::vector< cmf::water::WaterStorage::ptr > *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  {
    try {
      result = (std::vector< cmf::water::WaterStorage::ptr > *)new std::vector< cmf::water::WaterStorage::ptr >();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_cmf__water__WaterStorage_t_std__allocatorT_std__tr1__shared_ptrT_cmf__water__WaterStorage_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_storage_vector__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< cmf::water::WaterStorage::ptr > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  std::vector< cmf::water::WaterStorage::ptr > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    std::vector<std::tr1::shared_ptr< cmf::water::WaterStorage >,std::allocator< std::tr1::shared_ptr< cmf::water::WaterStorage > > > *ptr = (std::vector<std::tr1::shared_ptr< cmf::water::WaterStorage >,std::allocator< std::tr1::shared_ptr< cmf::water::WaterStorage > > > *)0;
    res1 = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_storage_vector" "', argument " "1"" of type '" "std::vector< cmf::water::WaterStorage::ptr > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_storage_vector" "', argument " "1"" of type '" "std::vector< cmf::water::WaterStorage::ptr > const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try {
      result = (std::vector< cmf::water::WaterStorage::ptr > *)new std::vector< cmf::water::WaterStorage::ptr >((std::vector< cmf::water::WaterStorage::ptr > const &)*arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_cmf__water__WaterStorage_t_std__allocatorT_std__tr1__shared_ptrT_cmf__water__WaterStorage_t_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_storage_vector_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< cmf::water::WaterStorage::ptr > *arg1 = (std::vector< cmf::water::WaterStorage::ptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_cmf__water__WaterStorage_t_std__allocatorT_std__tr1__shared_ptrT_cmf__water__WaterStorage_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "storage_vector_empty" "', argument " "1"" of type '" "std::vector< cmf::water::WaterStorage::ptr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< cmf::water::WaterStorage::ptr > * >(argp1);
  {
    try {
      result = (bool)((std::vector< cmf::water::WaterStorage::ptr > const *)arg1)->empty();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_storage_vector_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< cmf::water::WaterStorage::ptr > *arg1 = (std::vector< cmf::water::WaterStorage::ptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::tr1::shared_ptr< cmf::water::WaterStorage > >::size_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_cmf__water__WaterStorage_t_std__allocatorT_std__tr1__shared_ptrT_cmf__water__WaterStorage_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "storage_vector_size" "', argument " "1"" of type '" "std::vector< cmf::water::WaterStorage::ptr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< cmf::water::WaterStorage::ptr > * >(argp1);
  {
    try {
      result = ((std::vector< cmf::water::WaterStorage::ptr > const *)arg1)->size();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_storage_vector_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< cmf::water::WaterStorage::ptr > *arg1 = (std::vector< cmf::water::WaterStorage::ptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_cmf__water__WaterStorage_t_std__allocatorT_std__tr1__shared_ptrT_cmf__water__WaterStorage_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "storage_vector_clear" "', argument " "1"" of type '" "std::vector< cmf::water::WaterStorage::ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< cmf::water::WaterStorage::ptr > * >(argp1);
  {
    try {
      (arg1)->clear();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_storage_vector_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< cmf::water::WaterStorage::ptr > *arg1 = (std::vector< cmf::water::WaterStorage::ptr > *) 0 ;
  std::vector< cmf::water::WaterStorage::ptr > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"storage_vector_swap",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_cmf__water__WaterStorage_t_std__allocatorT_std__tr1__shared_ptrT_cmf__water__WaterStorage_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "storage_vector_swap" "', argument " "1"" of type '" "std::vector< cmf::water::WaterStorage::ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< cmf::water::WaterStorage::ptr > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_cmf__water__WaterStorage_t_std__allocatorT_std__tr1__shared_ptrT_cmf__water__WaterStorage_t_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "storage_vector_swap" "', argument " "2"" of type '" "std::vector< cmf::water::WaterStorage::ptr > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "storage_vector_swap" "', argument " "2"" of type '" "std::vector< cmf::water::WaterStorage::ptr > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< cmf::water::WaterStorage::ptr > * >(argp2);
  {
    try {
      (arg1)->swap(*arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_storage_vector_get_allocator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< cmf::water::WaterStorage::ptr > *arg1 = (std::vector< cmf::water::WaterStorage::ptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  SwigValueWrapper< std::allocator< std::tr1::shared_ptr< cmf::water::WaterStorage > > > result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_cmf__water__WaterStorage_t_std__allocatorT_std__tr1__shared_ptrT_cmf__water__WaterStorage_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "storage_vector_get_allocator" "', argument " "1"" of type '" "std::vector< cmf::water::WaterStorage::ptr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< cmf::water::WaterStorage::ptr > * >(argp1);
  {
    try {
      result = ((std::vector< cmf::water::WaterStorage::ptr > const *)arg1)->get_allocator();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj((new std::vector< std::tr1::shared_ptr< cmf::water::WaterStorage > >::allocator_type(static_cast< const std::vector< std::tr1::shared_ptr< cmf::water::WaterStorage > >::allocator_type& >(result))), SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_cmf__water__WaterStorage_t_std__allocatorT_std__tr1__shared_ptrT_cmf__water__WaterStorage_t_t_t__allocator_type, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_storage_vector_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< cmf::water::WaterStorage::ptr > *arg1 = (std::vector< cmf::water::WaterStorage::ptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  SwigValueWrapper< std::vector< std::tr1::shared_ptr< cmf::water::WaterStorage > >::const_iterator > result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_cmf__water__WaterStorage_t_std__allocatorT_std__tr1__shared_ptrT_cmf__water__WaterStorage_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "storage_vector_begin" "', argument " "1"" of type '" "std::vector< cmf::water::WaterStorage::ptr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< cmf::water::WaterStorage::ptr > * >(argp1);
  {
    try {
      result = ((std::vector< cmf::water::WaterStorage::ptr > const *)arg1)->begin();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::tr1::shared_ptr< cmf::water::WaterStorage > >::const_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_storage_vector_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< cmf::water::WaterStorage::ptr > *arg1 = (std::vector< cmf::water::WaterStorage::ptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  SwigValueWrapper< std::vector< std::tr1::shared_ptr< cmf::water::WaterStorage > >::const_iterator > result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_cmf__water__WaterStorage_t_std__allocatorT_std__tr1__shared_ptrT_cmf__water__WaterStorage_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "storage_vector_end" "', argument " "1"" of type '" "std::vector< cmf::water::WaterStorage::ptr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< cmf::water::WaterStorage::ptr > * >(argp1);
  {
    try {
      result = ((std::vector< cmf::water::WaterStorage::ptr > const *)arg1)->end();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::tr1::shared_ptr< cmf::water::WaterStorage > >::const_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_storage_vector_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< cmf::water::WaterStorage::ptr > *arg1 = (std::vector< cmf::water::WaterStorage::ptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  SwigValueWrapper< std::vector< std::tr1::shared_ptr< cmf::water::WaterStorage > >::const_reverse_iterator > result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_cmf__water__WaterStorage_t_std__allocatorT_std__tr1__shared_ptrT_cmf__water__WaterStorage_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "storage_vector_rbegin" "', argument " "1"" of type '" "std::vector< cmf::water::WaterStorage::ptr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< cmf::water::WaterStorage::ptr > * >(argp1);
  {
    try {
      result = ((std::vector< cmf::water::WaterStorage::ptr > const *)arg1)->rbegin();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::tr1::shared_ptr< cmf::water::WaterStorage > >::const_reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_storage_vector_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< cmf::water::WaterStorage::ptr > *arg1 = (std::vector< cmf::water::WaterStorage::ptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  SwigValueWrapper< std::vector< std::tr1::shared_ptr< cmf::water::WaterStorage > >::const_reverse_iterator > result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_cmf__water__WaterStorage_t_std__allocatorT_std__tr1__shared_ptrT_cmf__water__WaterStorage_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "storage_vector_rend" "', argument " "1"" of type '" "std::vector< cmf::water::WaterStorage::ptr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< cmf::water::WaterStorage::ptr > * >(argp1);
  {
    try {
      result = ((std::vector< cmf::water::WaterStorage::ptr > const *)arg1)->rend();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::tr1::shared_ptr< cmf::water::WaterStorage > >::const_reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_storage_vector__SWIG_2(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::tr1::shared_ptr< cmf::water::WaterStorage > >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  std::vector< cmf::water::WaterStorage::ptr > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_storage_vector" "', argument " "1"" of type '" "std::vector< std::tr1::shared_ptr< cmf::water::WaterStorage > >::size_type""'");
  } 
  arg1 = static_cast< std::vector< std::tr1::shared_ptr< cmf::water::WaterStorage > >::size_type >(val1);
  {
    try {
      result = (std::vector< cmf::water::WaterStorage::ptr > *)new std::vector< cmf::water::WaterStorage::ptr >(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_cmf__water__WaterStorage_t_std__allocatorT_std__tr1__shared_ptrT_cmf__water__WaterStorage_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_storage_vector_pop_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< cmf::water::WaterStorage::ptr > *arg1 = (std::vector< cmf::water::WaterStorage::ptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_cmf__water__WaterStorage_t_std__allocatorT_std__tr1__shared_ptrT_cmf__water__WaterStorage_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "storage_vector_pop_back" "', argument " "1"" of type '" "std::vector< cmf::water::WaterStorage::ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< cmf::water::WaterStorage::ptr > * >(argp1);
  {
    try {
      (arg1)->pop_back();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_storage_vector_resize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< cmf::water::WaterStorage::ptr > *arg1 = (std::vector< cmf::water::WaterStorage::ptr > *) 0 ;
  std::vector< std::tr1::shared_ptr< cmf::water::WaterStorage > >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_cmf__water__WaterStorage_t_std__allocatorT_std__tr1__shared_ptrT_cmf__water__WaterStorage_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "storage_vector_resize" "', argument " "1"" of type '" "std::vector< cmf::water::WaterStorage::ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< cmf::water::WaterStorage::ptr > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "storage_vector_resize" "', argument " "2"" of type '" "std::vector< std::tr1::shared_ptr< cmf::water::WaterStorage > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::tr1::shared_ptr< cmf::water::WaterStorage > >::size_type >(val2);
  {
    try {
      (arg1)->resize(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_storage_vector_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< cmf::water::WaterStorage::ptr > *arg1 = (std::vector< cmf::water::WaterStorage::ptr > *) 0 ;
  SwigValueWrapper< std::vector< std::tr1::shared_ptr< cmf::water::WaterStorage > >::iterator > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  SwigValueWrapper< std::vector< std::tr1::shared_ptr< cmf::water::WaterStorage > >::iterator > result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_cmf__water__WaterStorage_t_std__allocatorT_std__tr1__shared_ptrT_cmf__water__WaterStorage_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "storage_vector_erase" "', argument " "1"" of type '" "std::vector< cmf::water::WaterStorage::ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< cmf::water::WaterStorage::ptr > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "storage_vector_erase" "', argument " "2"" of type '" "std::vector< std::tr1::shared_ptr< cmf::water::WaterStorage > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::tr1::shared_ptr< cmf::water::WaterStorage > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::tr1::shared_ptr< cmf::water::WaterStorage > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "storage_vector_erase" "', argument " "2"" of type '" "std::vector< std::tr1::shared_ptr< cmf::water::WaterStorage > >::iterator""'");
    }
  }
  {
    try {
      result = (arg1)->erase(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::tr1::shared_ptr< cmf::water::WaterStorage > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_storage_vector_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< cmf::water::WaterStorage::ptr > *arg1 = (std::vector< cmf::water::WaterStorage::ptr > *) 0 ;
  SwigValueWrapper< std::vector< std::tr1::shared_ptr< cmf::water::WaterStorage > >::iterator > arg2 ;
  SwigValueWrapper< std::vector< std::tr1::shared_ptr< cmf::water::WaterStorage > >::iterator > arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  SwigValueWrapper< std::vector< std::tr1::shared_ptr< cmf::water::WaterStorage > >::iterator > result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_cmf__water__WaterStorage_t_std__allocatorT_std__tr1__shared_ptrT_cmf__water__WaterStorage_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "storage_vector_erase" "', argument " "1"" of type '" "std::vector< cmf::water::WaterStorage::ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< cmf::water::WaterStorage::ptr > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "storage_vector_erase" "', argument " "2"" of type '" "std::vector< std::tr1::shared_ptr< cmf::water::WaterStorage > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::tr1::shared_ptr< cmf::water::WaterStorage > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::tr1::shared_ptr< cmf::water::WaterStorage > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "storage_vector_erase" "', argument " "2"" of type '" "std::vector< std::tr1::shared_ptr< cmf::water::WaterStorage > >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "storage_vector_erase" "', argument " "3"" of type '" "std::vector< std::tr1::shared_ptr< cmf::water::WaterStorage > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::tr1::shared_ptr< cmf::water::WaterStorage > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::tr1::shared_ptr< cmf::water::WaterStorage > >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "storage_vector_erase" "', argument " "3"" of type '" "std::vector< std::tr1::shared_ptr< cmf::water::WaterStorage > >::iterator""'");
    }
  }
  {
    try {
      result = (arg1)->erase(arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::tr1::shared_ptr< cmf::water::WaterStorage > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_storage_vector_erase(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"storage_vector_erase",0,3,argv))) SWIG_fail;
  --argc;
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (argc == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = swig::asptr(argv[0], (std::vector<std::tr1::shared_ptr< cmf::water::WaterStorage >,std::allocator< std::tr1::shared_ptr< cmf::water::WaterStorage > > >**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::tr1::shared_ptr< cmf::water::WaterStorage > >::iterator > *>(iter) != 0));
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (argc == 3) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = swig::asptr(argv[0], (std::vector<std::tr1::shared_ptr< cmf::water::WaterStorage >,std::allocator< std::tr1::shared_ptr< cmf::water::WaterStorage > > >**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::tr1::shared_ptr< cmf::water::WaterStorage > >::iterator > *>(iter) != 0));
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::tr1::shared_ptr< cmf::water::WaterStorage > >::iterator > *>(iter) != 0));
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      return _wrap_storage_vector_erase__SWIG_0(self, argc, argv);
    case 2:
      return _wrap_storage_vector_erase__SWIG_1(self, argc, argv);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'storage_vector_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    erase(std::vector< cmf::water::WaterStorage::ptr > *,std::vector< std::tr1::shared_ptr< cmf::water::WaterStorage > >::iterator)\n"
    "    erase(std::vector< cmf::water::WaterStorage::ptr > *,std::vector< std::tr1::shared_ptr< cmf::water::WaterStorage > >::iterator,std::vector< std::tr1::shared_ptr< cmf::water::WaterStorage > >::iterator)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_storage_vector__SWIG_3(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::tr1::shared_ptr< cmf::water::WaterStorage > >::size_type arg1 ;
  std::vector< std::tr1::shared_ptr< cmf::water::WaterStorage > >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::vector< std::tr1::shared_ptr< cmf::water::WaterStorage > >::value_type tempshared2 ;
  std::vector< cmf::water::WaterStorage::ptr > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_storage_vector" "', argument " "1"" of type '" "std::vector< std::tr1::shared_ptr< cmf::water::WaterStorage > >::size_type""'");
  } 
  arg1 = static_cast< std::vector< std::tr1::shared_ptr< cmf::water::WaterStorage > >::size_type >(val1);
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(swig_obj[1], &argp2, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__water__WaterStorage_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_storage_vector" "', argument " "2"" of type '" "std::vector< std::tr1::shared_ptr< cmf::water::WaterStorage > >::value_type const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp2) tempshared2 = *reinterpret_cast< std::vector< std::tr1::shared_ptr< cmf::water::WaterStorage > >::value_type * >(argp2);
      delete reinterpret_cast< std::vector< std::tr1::shared_ptr< cmf::water::WaterStorage > >::value_type * >(argp2);
      arg2 = &tempshared2;
    } else {
      arg2 = (argp2) ? reinterpret_cast< std::vector< std::tr1::shared_ptr< cmf::water::WaterStorage > >::value_type * >(argp2) : &tempshared2;
    }
  }
  {
    try {
      result = (std::vector< cmf::water::WaterStorage::ptr > *)new std::vector< cmf::water::WaterStorage::ptr >(arg1,(std::vector< std::tr1::shared_ptr< cmf::water::WaterStorage > >::value_type const &)*arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_cmf__water__WaterStorage_t_std__allocatorT_std__tr1__shared_ptrT_cmf__water__WaterStorage_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_storage_vector(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"new_storage_vector",0,2,argv))) SWIG_fail;
  --argc;
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (argc == 0) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
    if (argc == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          int res = SWIG_AsVal_size_t(argv[0], NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
    if (argc == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = swig::asptr(argv[0], (std::vector<std::tr1::shared_ptr< cmf::water::WaterStorage >,std::allocator< std::tr1::shared_ptr< cmf::water::WaterStorage > > >**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 3;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_3:
    
    if (argc == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          int res = SWIG_AsVal_size_t(argv[0], NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__water__WaterStorage_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 4;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_4:
    
  dispatch:
    switch(_index) {
    case 1:
      return _wrap_new_storage_vector__SWIG_0(self, argc, argv);
    case 2:
      return _wrap_new_storage_vector__SWIG_2(self, argc, argv);
    case 3:
      return _wrap_new_storage_vector__SWIG_1(self, argc, argv);
    case 4:
      return _wrap_new_storage_vector__SWIG_3(self, argc, argv);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_storage_vector'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< cmf::water::WaterStorage::ptr >()\n"
    "    std::vector< cmf::water::WaterStorage::ptr >(std::vector< cmf::water::WaterStorage::ptr > const &)\n"
    "    std::vector< cmf::water::WaterStorage::ptr >(std::vector< std::tr1::shared_ptr< cmf::water::WaterStorage > >::size_type)\n"
    "    std::vector< cmf::water::WaterStorage::ptr >(std::vector< std::tr1::shared_ptr< cmf::water::WaterStorage > >::size_type,std::vector< std::tr1::shared_ptr< cmf::water::WaterStorage > >::value_type const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_storage_vector_push_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< cmf::water::WaterStorage::ptr > *arg1 = (std::vector< cmf::water::WaterStorage::ptr > *) 0 ;
  std::vector< std::tr1::shared_ptr< cmf::water::WaterStorage > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::vector< std::tr1::shared_ptr< cmf::water::WaterStorage > >::value_type tempshared2 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"storage_vector_push_back",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_cmf__water__WaterStorage_t_std__allocatorT_std__tr1__shared_ptrT_cmf__water__WaterStorage_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "storage_vector_push_back" "', argument " "1"" of type '" "std::vector< cmf::water::WaterStorage::ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< cmf::water::WaterStorage::ptr > * >(argp1);
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(swig_obj[1], &argp2, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__water__WaterStorage_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "storage_vector_push_back" "', argument " "2"" of type '" "std::vector< std::tr1::shared_ptr< cmf::water::WaterStorage > >::value_type const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp2) tempshared2 = *reinterpret_cast< std::vector< std::tr1::shared_ptr< cmf::water::WaterStorage > >::value_type * >(argp2);
      delete reinterpret_cast< std::vector< std::tr1::shared_ptr< cmf::water::WaterStorage > >::value_type * >(argp2);
      arg2 = &tempshared2;
    } else {
      arg2 = (argp2) ? reinterpret_cast< std::vector< std::tr1::shared_ptr< cmf::water::WaterStorage > >::value_type * >(argp2) : &tempshared2;
    }
  }
  {
    try {
      (arg1)->push_back((std::vector< std::tr1::shared_ptr< cmf::water::WaterStorage > >::value_type const &)*arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_storage_vector_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< cmf::water::WaterStorage::ptr > *arg1 = (std::vector< cmf::water::WaterStorage::ptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::tr1::shared_ptr< cmf::water::WaterStorage > >::value_type *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_cmf__water__WaterStorage_t_std__allocatorT_std__tr1__shared_ptrT_cmf__water__WaterStorage_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "storage_vector_front" "', argument " "1"" of type '" "std::vector< cmf::water::WaterStorage::ptr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< cmf::water::WaterStorage::ptr > * >(argp1);
  {
    try {
      result = (std::vector< std::tr1::shared_ptr< cmf::water::WaterStorage > >::value_type *) &((std::vector< cmf::water::WaterStorage::ptr > const *)arg1)->front();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  {
    std::tr1::shared_ptr<  cmf::water::WaterStorage > *smartresult = *result ? new std::tr1::shared_ptr<  cmf::water::WaterStorage >(*result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__tr1__shared_ptrT_cmf__water__WaterStorage_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_storage_vector_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< cmf::water::WaterStorage::ptr > *arg1 = (std::vector< cmf::water::WaterStorage::ptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::tr1::shared_ptr< cmf::water::WaterStorage > >::value_type *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_cmf__water__WaterStorage_t_std__allocatorT_std__tr1__shared_ptrT_cmf__water__WaterStorage_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "storage_vector_back" "', argument " "1"" of type '" "std::vector< cmf::water::WaterStorage::ptr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< cmf::water::WaterStorage::ptr > * >(argp1);
  {
    try {
      result = (std::vector< std::tr1::shared_ptr< cmf::water::WaterStorage > >::value_type *) &((std::vector< cmf::water::WaterStorage::ptr > const *)arg1)->back();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  {
    std::tr1::shared_ptr<  cmf::water::WaterStorage > *smartresult = *result ? new std::tr1::shared_ptr<  cmf::water::WaterStorage >(*result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__tr1__shared_ptrT_cmf__water__WaterStorage_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_storage_vector_assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< cmf::water::WaterStorage::ptr > *arg1 = (std::vector< cmf::water::WaterStorage::ptr > *) 0 ;
  std::vector< std::tr1::shared_ptr< cmf::water::WaterStorage > >::size_type arg2 ;
  std::vector< std::tr1::shared_ptr< cmf::water::WaterStorage > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  std::vector< std::tr1::shared_ptr< cmf::water::WaterStorage > >::value_type tempshared3 ;
  PyObject *swig_obj[3] ;
  
  if (!SWIG_Python_UnpackTuple(args,"storage_vector_assign",3,3,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_cmf__water__WaterStorage_t_std__allocatorT_std__tr1__shared_ptrT_cmf__water__WaterStorage_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "storage_vector_assign" "', argument " "1"" of type '" "std::vector< cmf::water::WaterStorage::ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< cmf::water::WaterStorage::ptr > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "storage_vector_assign" "', argument " "2"" of type '" "std::vector< std::tr1::shared_ptr< cmf::water::WaterStorage > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::tr1::shared_ptr< cmf::water::WaterStorage > >::size_type >(val2);
  {
    int newmem = 0;
    res3 = SWIG_ConvertPtrAndOwn(swig_obj[2], &argp3, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__water__WaterStorage_t,  0 , &newmem);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "storage_vector_assign" "', argument " "3"" of type '" "std::vector< std::tr1::shared_ptr< cmf::water::WaterStorage > >::value_type const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp3) tempshared3 = *reinterpret_cast< std::vector< std::tr1::shared_ptr< cmf::water::WaterStorage > >::value_type * >(argp3);
      delete reinterpret_cast< std::vector< std::tr1::shared_ptr< cmf::water::WaterStorage > >::value_type * >(argp3);
      arg3 = &tempshared3;
    } else {
      arg3 = (argp3) ? reinterpret_cast< std::vector< std::tr1::shared_ptr< cmf::water::WaterStorage > >::value_type * >(argp3) : &tempshared3;
    }
  }
  {
    try {
      (arg1)->assign(arg2,(std::vector< std::tr1::shared_ptr< cmf::water::WaterStorage > >::value_type const &)*arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_storage_vector_resize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< cmf::water::WaterStorage::ptr > *arg1 = (std::vector< cmf::water::WaterStorage::ptr > *) 0 ;
  std::vector< std::tr1::shared_ptr< cmf::water::WaterStorage > >::size_type arg2 ;
  std::vector< std::tr1::shared_ptr< cmf::water::WaterStorage > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  std::vector< std::tr1::shared_ptr< cmf::water::WaterStorage > >::value_type tempshared3 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_cmf__water__WaterStorage_t_std__allocatorT_std__tr1__shared_ptrT_cmf__water__WaterStorage_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "storage_vector_resize" "', argument " "1"" of type '" "std::vector< cmf::water::WaterStorage::ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< cmf::water::WaterStorage::ptr > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "storage_vector_resize" "', argument " "2"" of type '" "std::vector< std::tr1::shared_ptr< cmf::water::WaterStorage > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::tr1::shared_ptr< cmf::water::WaterStorage > >::size_type >(val2);
  {
    int newmem = 0;
    res3 = SWIG_ConvertPtrAndOwn(swig_obj[2], &argp3, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__water__WaterStorage_t,  0 , &newmem);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "storage_vector_resize" "', argument " "3"" of type '" "std::vector< std::tr1::shared_ptr< cmf::water::WaterStorage > >::value_type const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp3) tempshared3 = *reinterpret_cast< std::vector< std::tr1::shared_ptr< cmf::water::WaterStorage > >::value_type * >(argp3);
      delete reinterpret_cast< std::vector< std::tr1::shared_ptr< cmf::water::WaterStorage > >::value_type * >(argp3);
      arg3 = &tempshared3;
    } else {
      arg3 = (argp3) ? reinterpret_cast< std::vector< std::tr1::shared_ptr< cmf::water::WaterStorage > >::value_type * >(argp3) : &tempshared3;
    }
  }
  {
    try {
      (arg1)->resize(arg2,(std::vector< std::tr1::shared_ptr< cmf::water::WaterStorage > >::value_type const &)*arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_storage_vector_resize(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"storage_vector_resize",0,3,argv))) SWIG_fail;
  --argc;
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (argc == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = swig::asptr(argv[0], (std::vector<std::tr1::shared_ptr< cmf::water::WaterStorage >,std::allocator< std::tr1::shared_ptr< cmf::water::WaterStorage > > >**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_size_t(argv[1], NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (argc == 3) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = swig::asptr(argv[0], (std::vector<std::tr1::shared_ptr< cmf::water::WaterStorage >,std::allocator< std::tr1::shared_ptr< cmf::water::WaterStorage > > >**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_size_t(argv[1], NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__water__WaterStorage_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      return _wrap_storage_vector_resize__SWIG_0(self, argc, argv);
    case 2:
      return _wrap_storage_vector_resize__SWIG_1(self, argc, argv);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'storage_vector_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    resize(std::vector< cmf::water::WaterStorage::ptr > *,std::vector< std::tr1::shared_ptr< cmf::water::WaterStorage > >::size_type)\n"
    "    resize(std::vector< cmf::water::WaterStorage::ptr > *,std::vector< std::tr1::shared_ptr< cmf::water::WaterStorage > >::size_type,std::vector< std::tr1::shared_ptr< cmf::water::WaterStorage > >::value_type const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_storage_vector_insert__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< cmf::water::WaterStorage::ptr > *arg1 = (std::vector< cmf::water::WaterStorage::ptr > *) 0 ;
  SwigValueWrapper< std::vector< std::tr1::shared_ptr< cmf::water::WaterStorage > >::iterator > arg2 ;
  std::vector< std::tr1::shared_ptr< cmf::water::WaterStorage > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  void *argp3 ;
  int res3 = 0 ;
  std::vector< std::tr1::shared_ptr< cmf::water::WaterStorage > >::value_type tempshared3 ;
  SwigValueWrapper< std::vector< std::tr1::shared_ptr< cmf::water::WaterStorage > >::iterator > result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_cmf__water__WaterStorage_t_std__allocatorT_std__tr1__shared_ptrT_cmf__water__WaterStorage_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "storage_vector_insert" "', argument " "1"" of type '" "std::vector< cmf::water::WaterStorage::ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< cmf::water::WaterStorage::ptr > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "storage_vector_insert" "', argument " "2"" of type '" "std::vector< std::tr1::shared_ptr< cmf::water::WaterStorage > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::tr1::shared_ptr< cmf::water::WaterStorage > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::tr1::shared_ptr< cmf::water::WaterStorage > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "storage_vector_insert" "', argument " "2"" of type '" "std::vector< std::tr1::shared_ptr< cmf::water::WaterStorage > >::iterator""'");
    }
  }
  {
    int newmem = 0;
    res3 = SWIG_ConvertPtrAndOwn(swig_obj[2], &argp3, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__water__WaterStorage_t,  0 , &newmem);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "storage_vector_insert" "', argument " "3"" of type '" "std::vector< std::tr1::shared_ptr< cmf::water::WaterStorage > >::value_type const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp3) tempshared3 = *reinterpret_cast< std::vector< std::tr1::shared_ptr< cmf::water::WaterStorage > >::value_type * >(argp3);
      delete reinterpret_cast< std::vector< std::tr1::shared_ptr< cmf::water::WaterStorage > >::value_type * >(argp3);
      arg3 = &tempshared3;
    } else {
      arg3 = (argp3) ? reinterpret_cast< std::vector< std::tr1::shared_ptr< cmf::water::WaterStorage > >::value_type * >(argp3) : &tempshared3;
    }
  }
  {
    try {
      result = (arg1)->insert(arg2,(std::vector< std::tr1::shared_ptr< cmf::water::WaterStorage > >::value_type const &)*arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::tr1::shared_ptr< cmf::water::WaterStorage > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_storage_vector_insert__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< cmf::water::WaterStorage::ptr > *arg1 = (std::vector< cmf::water::WaterStorage::ptr > *) 0 ;
  SwigValueWrapper< std::vector< std::tr1::shared_ptr< cmf::water::WaterStorage > >::iterator > arg2 ;
  std::vector< std::tr1::shared_ptr< cmf::water::WaterStorage > >::size_type arg3 ;
  std::vector< std::tr1::shared_ptr< cmf::water::WaterStorage > >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  std::vector< std::tr1::shared_ptr< cmf::water::WaterStorage > >::value_type tempshared4 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_cmf__water__WaterStorage_t_std__allocatorT_std__tr1__shared_ptrT_cmf__water__WaterStorage_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "storage_vector_insert" "', argument " "1"" of type '" "std::vector< cmf::water::WaterStorage::ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< cmf::water::WaterStorage::ptr > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "storage_vector_insert" "', argument " "2"" of type '" "std::vector< std::tr1::shared_ptr< cmf::water::WaterStorage > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::tr1::shared_ptr< cmf::water::WaterStorage > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::tr1::shared_ptr< cmf::water::WaterStorage > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "storage_vector_insert" "', argument " "2"" of type '" "std::vector< std::tr1::shared_ptr< cmf::water::WaterStorage > >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "storage_vector_insert" "', argument " "3"" of type '" "std::vector< std::tr1::shared_ptr< cmf::water::WaterStorage > >::size_type""'");
  } 
  arg3 = static_cast< std::vector< std::tr1::shared_ptr< cmf::water::WaterStorage > >::size_type >(val3);
  {
    int newmem = 0;
    res4 = SWIG_ConvertPtrAndOwn(swig_obj[3], &argp4, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__water__WaterStorage_t,  0 , &newmem);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "storage_vector_insert" "', argument " "4"" of type '" "std::vector< std::tr1::shared_ptr< cmf::water::WaterStorage > >::value_type const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp4) tempshared4 = *reinterpret_cast< std::vector< std::tr1::shared_ptr< cmf::water::WaterStorage > >::value_type * >(argp4);
      delete reinterpret_cast< std::vector< std::tr1::shared_ptr< cmf::water::WaterStorage > >::value_type * >(argp4);
      arg4 = &tempshared4;
    } else {
      arg4 = (argp4) ? reinterpret_cast< std::vector< std::tr1::shared_ptr< cmf::water::WaterStorage > >::value_type * >(argp4) : &tempshared4;
    }
  }
  {
    try {
      (arg1)->insert(arg2,arg3,(std::vector< std::tr1::shared_ptr< cmf::water::WaterStorage > >::value_type const &)*arg4);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_storage_vector_insert(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"storage_vector_insert",0,4,argv))) SWIG_fail;
  --argc;
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (argc == 3) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = swig::asptr(argv[0], (std::vector<std::tr1::shared_ptr< cmf::water::WaterStorage >,std::allocator< std::tr1::shared_ptr< cmf::water::WaterStorage > > >**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::tr1::shared_ptr< cmf::water::WaterStorage > >::iterator > *>(iter) != 0));
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__water__WaterStorage_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (argc == 4) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = swig::asptr(argv[0], (std::vector<std::tr1::shared_ptr< cmf::water::WaterStorage >,std::allocator< std::tr1::shared_ptr< cmf::water::WaterStorage > > >**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::tr1::shared_ptr< cmf::water::WaterStorage > >::iterator > *>(iter) != 0));
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__water__WaterStorage_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      return _wrap_storage_vector_insert__SWIG_0(self, argc, argv);
    case 2:
      return _wrap_storage_vector_insert__SWIG_1(self, argc, argv);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'storage_vector_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    insert(std::vector< cmf::water::WaterStorage::ptr > *,std::vector< std::tr1::shared_ptr< cmf::water::WaterStorage > >::iterator,std::vector< std::tr1::shared_ptr< cmf::water::WaterStorage > >::value_type const &)\n"
    "    insert(std::vector< cmf::water::WaterStorage::ptr > *,std::vector< std::tr1::shared_ptr< cmf::water::WaterStorage > >::iterator,std::vector< std::tr1::shared_ptr< cmf::water::WaterStorage > >::size_type,std::vector< std::tr1::shared_ptr< cmf::water::WaterStorage > >::value_type const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_storage_vector_reserve(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< cmf::water::WaterStorage::ptr > *arg1 = (std::vector< cmf::water::WaterStorage::ptr > *) 0 ;
  std::vector< std::tr1::shared_ptr< cmf::water::WaterStorage > >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"storage_vector_reserve",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_cmf__water__WaterStorage_t_std__allocatorT_std__tr1__shared_ptrT_cmf__water__WaterStorage_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "storage_vector_reserve" "', argument " "1"" of type '" "std::vector< cmf::water::WaterStorage::ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< cmf::water::WaterStorage::ptr > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "storage_vector_reserve" "', argument " "2"" of type '" "std::vector< std::tr1::shared_ptr< cmf::water::WaterStorage > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::tr1::shared_ptr< cmf::water::WaterStorage > >::size_type >(val2);
  {
    try {
      (arg1)->reserve(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_storage_vector_capacity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< cmf::water::WaterStorage::ptr > *arg1 = (std::vector< cmf::water::WaterStorage::ptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::tr1::shared_ptr< cmf::water::WaterStorage > >::size_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_cmf__water__WaterStorage_t_std__allocatorT_std__tr1__shared_ptrT_cmf__water__WaterStorage_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "storage_vector_capacity" "', argument " "1"" of type '" "std::vector< cmf::water::WaterStorage::ptr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< cmf::water::WaterStorage::ptr > * >(argp1);
  {
    try {
      result = ((std::vector< cmf::water::WaterStorage::ptr > const *)arg1)->capacity();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_storage_vector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< cmf::water::WaterStorage::ptr > *arg1 = (std::vector< cmf::water::WaterStorage::ptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_cmf__water__WaterStorage_t_std__allocatorT_std__tr1__shared_ptrT_cmf__water__WaterStorage_t_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_storage_vector" "', argument " "1"" of type '" "std::vector< cmf::water::WaterStorage::ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< cmf::water::WaterStorage::ptr > * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *storage_vector_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_cmf__water__WaterStorage_t_std__allocatorT_std__tr1__shared_ptrT_cmf__water__WaterStorage_t_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *storage_vector_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_node_list_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::water::node_list *arg1 = (cmf::water::node_list *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__water__node_list, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "node_list_size" "', argument " "1"" of type '" "cmf::water::node_list const *""'"); 
  }
  arg1 = reinterpret_cast< cmf::water::node_list * >(argp1);
  {
    try {
      result = (int)((cmf::water::node_list const *)arg1)->size();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_node_list__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  cmf::water::node_list *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  {
    try {
      result = (cmf::water::node_list *)new cmf::water::node_list();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmf__water__node_list, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_node_list__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  cmf::water::node_list *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cmf::water::node_list *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cmf__water__node_list,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_node_list" "', argument " "1"" of type '" "cmf::water::node_list const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_node_list" "', argument " "1"" of type '" "cmf::water::node_list const &""'"); 
  }
  arg1 = reinterpret_cast< cmf::water::node_list * >(argp1);
  {
    try {
      result = (cmf::water::node_list *)new cmf::water::node_list((cmf::water::node_list const &)*arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmf__water__node_list, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_node_list(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"new_node_list",0,1,argv))) SWIG_fail;
  --argc;
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (argc == 0) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
    if (argc == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_cmf__water__node_list, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      return _wrap_new_node_list__SWIG_0(self, argc, argv);
    case 2:
      return _wrap_new_node_list__SWIG_1(self, argc, argv);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_node_list'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    cmf::water::node_list()\n"
    "    cmf::water::node_list(cmf::water::node_list const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_node_list___iadd__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::water::node_list *arg1 = (cmf::water::node_list *) 0 ;
  cmf::water::node_list *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  cmf::water::node_list *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args,"node_list___iadd__",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__water__node_list, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "node_list___iadd__" "', argument " "1"" of type '" "cmf::water::node_list *""'"); 
  }
  arg1 = reinterpret_cast< cmf::water::node_list * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cmf__water__node_list,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "node_list___iadd__" "', argument " "2"" of type '" "cmf::water::node_list const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "node_list___iadd__" "', argument " "2"" of type '" "cmf::water::node_list const &""'"); 
  }
  arg2 = reinterpret_cast< cmf::water::node_list * >(argp2);
  {
    try {
      result = (cmf::water::node_list *) &(arg1)->operator +=((cmf::water::node_list const &)*arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmf__water__node_list, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_node_list___add__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::water::node_list *arg1 = (cmf::water::node_list *) 0 ;
  cmf::water::node_list *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  cmf::water::node_list result;
  
  if (!SWIG_Python_UnpackTuple(args,"node_list___add__",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__water__node_list, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "node_list___add__" "', argument " "1"" of type '" "cmf::water::node_list const *""'"); 
  }
  arg1 = reinterpret_cast< cmf::water::node_list * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cmf__water__node_list,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "node_list___add__" "', argument " "2"" of type '" "cmf::water::node_list const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "node_list___add__" "', argument " "2"" of type '" "cmf::water::node_list const &""'"); 
  }
  arg2 = reinterpret_cast< cmf::water::node_list * >(argp2);
  {
    try {
      result = ((cmf::water::node_list const *)arg1)->operator +((cmf::water::node_list const &)*arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj((new cmf::water::node_list(static_cast< const cmf::water::node_list& >(result))), SWIGTYPE_p_cmf__water__node_list, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_node_list_get__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  cmf::water::node_list *arg1 = (cmf::water::node_list *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  cmf::water::flux_node::ptr result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__water__node_list, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "node_list_get" "', argument " "1"" of type '" "cmf::water::node_list const *""'"); 
  }
  arg1 = reinterpret_cast< cmf::water::node_list * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "node_list_get" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = ((cmf::water::node_list const *)arg1)->get(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  {
    int dcast = 0;
    /*@SWIG:C:\\Programme\\swig\\Lib\\typemaps\\swigmacros.swg,200,%formacro@*//*@SWIG:C:\\Programme\\swig\\Lib\\typemaps\\swigmacros.swg,192,%_formacro_1@*//*@SWIG:cmf.i,113,%_node_down_cast@*/
    if (dcast==0 && result) /*check for cmf::atmosphere::RainCloud*/  {
      std::tr1::shared_ptr<cmf::atmosphere::RainCloud> output = std::tr1::dynamic_pointer_cast<cmf::atmosphere::RainCloud>(result);
      if (output) /*flux_node is cmf::atmosphere::RainCloud */ {
        dcast=1; 
        resultobj = SWIG_NewPointerObj(new std::tr1::shared_ptr<cmf::atmosphere::RainCloud>(output),SWIGTYPE_p_std__tr1__shared_ptrT_cmf__atmosphere__RainCloud_t, SWIG_POINTER_OWN); 
      }
    }
    /*@SWIG@*/
    
    /*@SWIG:C:\\Programme\\swig\\Lib\\typemaps\\swigmacros.swg,192,%_formacro_1@*//*@SWIG:cmf.i,113,%_node_down_cast@*/
    if (dcast==0 && result) /*check for cmf::water::DricheletBoundary*/  {
      std::tr1::shared_ptr<cmf::water::DricheletBoundary> output = std::tr1::dynamic_pointer_cast<cmf::water::DricheletBoundary>(result);
      if (output) /*flux_node is cmf::water::DricheletBoundary */ {
        dcast=1; 
        resultobj = SWIG_NewPointerObj(new std::tr1::shared_ptr<cmf::water::DricheletBoundary>(output),SWIGTYPE_p_std__tr1__shared_ptrT_cmf__water__DricheletBoundary_t, SWIG_POINTER_OWN); 
      }
    }
    /*@SWIG@*/
    
    /*@SWIG:C:\\Programme\\swig\\Lib\\typemaps\\swigmacros.swg,192,%_formacro_1@*//*@SWIG:cmf.i,113,%_node_down_cast@*/
    if (dcast==0 && result) /*check for cmf::water::NeumannBoundary*/  {
      std::tr1::shared_ptr<cmf::water::NeumannBoundary> output = std::tr1::dynamic_pointer_cast<cmf::water::NeumannBoundary>(result);
      if (output) /*flux_node is cmf::water::NeumannBoundary */ {
        dcast=1; 
        resultobj = SWIG_NewPointerObj(new std::tr1::shared_ptr<cmf::water::NeumannBoundary>(output),SWIGTYPE_p_std__tr1__shared_ptrT_cmf__water__NeumannBoundary_t, SWIG_POINTER_OWN); 
      }
    }
    /*@SWIG@*/
    
    /*@SWIG:C:\\Programme\\swig\\Lib\\typemaps\\swigmacros.swg,192,%_formacro_1@*//*@SWIG:cmf.i,113,%_node_down_cast@*/
    if (dcast==0 && result) /*check for cmf::upslope::SoilLayer*/  {
      std::tr1::shared_ptr<cmf::upslope::SoilLayer> output = std::tr1::dynamic_pointer_cast<cmf::upslope::SoilLayer>(result);
      if (output) /*flux_node is cmf::upslope::SoilLayer */ {
        dcast=1; 
        resultobj = SWIG_NewPointerObj(new std::tr1::shared_ptr<cmf::upslope::SoilLayer>(output),SWIGTYPE_p_std__tr1__shared_ptrT_cmf__upslope__SoilLayer_t, SWIG_POINTER_OWN); 
      }
    }
    /*@SWIG@*/
    
    /*@SWIG:C:\\Programme\\swig\\Lib\\typemaps\\swigmacros.swg,192,%_formacro_1@*//*@SWIG:cmf.i,113,%_node_down_cast@*/
    if (dcast==0 && result) /*check for cmf::river::Reach*/  {
      std::tr1::shared_ptr<cmf::river::Reach> output = std::tr1::dynamic_pointer_cast<cmf::river::Reach>(result);
      if (output) /*flux_node is cmf::river::Reach */ {
        dcast=1; 
        resultobj = SWIG_NewPointerObj(new std::tr1::shared_ptr<cmf::river::Reach>(output),SWIGTYPE_p_std__tr1__shared_ptrT_cmf__river__Reach_t, SWIG_POINTER_OWN); 
      }
    }
    /*@SWIG@*/
    
    /*@SWIG:C:\\Programme\\swig\\Lib\\typemaps\\swigmacros.swg,192,%_formacro_1@*//*@SWIG:cmf.i,113,%_node_down_cast@*/
    if (dcast==0 && result) /*check for cmf::river::OpenWaterStorage*/  {
      std::tr1::shared_ptr<cmf::river::OpenWaterStorage> output = std::tr1::dynamic_pointer_cast<cmf::river::OpenWaterStorage>(result);
      if (output) /*flux_node is cmf::river::OpenWaterStorage */ {
        dcast=1; 
        resultobj = SWIG_NewPointerObj(new std::tr1::shared_ptr<cmf::river::OpenWaterStorage>(output),SWIGTYPE_p_std__tr1__shared_ptrT_cmf__river__OpenWaterStorage_t, SWIG_POINTER_OWN); 
      }
    }
    /*@SWIG@*/
    
    /*@SWIG:C:\\Programme\\swig\\Lib\\typemaps\\swigmacros.swg,192,%_formacro_1@*//*@SWIG:cmf.i,113,%_node_down_cast@*/
    if (dcast==0 && result) /*check for cmf::water::WaterStorage*/  {
      std::tr1::shared_ptr<cmf::water::WaterStorage> output = std::tr1::dynamic_pointer_cast<cmf::water::WaterStorage>(result);
      if (output) /*flux_node is cmf::water::WaterStorage */ {
        dcast=1; 
        resultobj = SWIG_NewPointerObj(new std::tr1::shared_ptr<cmf::water::WaterStorage>(output),SWIGTYPE_p_std__tr1__shared_ptrT_cmf__water__WaterStorage_t, SWIG_POINTER_OWN); 
      }
    }
    /*@SWIG@*/
    
    
    
    /*@SWIG@*/
    
    /*@SWIG@*/
    
    /*@SWIG@*/
    
    /*@SWIG@*/
    
    /*@SWIG@*/
    
    /*@SWIG@*/
    
    /*@SWIG@*//*@SWIG@*/
    if (!dcast) resultobj = SWIG_NewPointerObj(result ? new std::tr1::shared_ptr<cmf::water::flux_node>(result) : 0,SWIGTYPE_p_std__tr1__shared_ptrT_cmf__water__flux_node_t, SWIG_POINTER_OWN);   
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_node_list_get__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  cmf::water::node_list *arg1 = (cmf::water::node_list *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 = (int) 1 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  cmf::water::node_list result;
  
  if ((nobjs < 3) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__water__node_list, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "node_list_get" "', argument " "1"" of type '" "cmf::water::node_list const *""'"); 
  }
  arg1 = reinterpret_cast< cmf::water::node_list * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "node_list_get" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "node_list_get" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  if (swig_obj[3]) {
    ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "node_list_get" "', argument " "4"" of type '" "int""'");
    } 
    arg4 = static_cast< int >(val4);
  }
  {
    try {
      result = ((cmf::water::node_list const *)arg1)->get(arg2,arg3,arg4);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj((new cmf::water::node_list(static_cast< const cmf::water::node_list& >(result))), SWIGTYPE_p_cmf__water__node_list, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_node_list_get(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"node_list_get",0,4,argv))) SWIG_fail;
  --argc;
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (argc == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_cmf__water__node_list, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int(argv[1], NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if ((argc >= 3) && (argc <= 4)) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_cmf__water__node_list, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int(argv[1], NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (argc > 3) {
        {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
        }
        if (!_v) goto check_2;
        _ranki += _v*_pi;
        _rankm += _pi;
        _pi *= SWIG_MAXCASTRANK;
      }
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      return _wrap_node_list_get__SWIG_0(self, argc, argv);
    case 2:
      return _wrap_node_list_get__SWIG_1(self, argc, argv);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'node_list_get'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    get(cmf::water::node_list const *,int)\n"
    "    get(cmf::water::node_list const *,int,int,int)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_node_list_append(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::water::node_list *arg1 = (cmf::water::node_list *) 0 ;
  cmf::water::flux_node::ptr arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"node_list_append",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__water__node_list, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "node_list_append" "', argument " "1"" of type '" "cmf::water::node_list *""'"); 
  }
  arg1 = reinterpret_cast< cmf::water::node_list * >(argp1);
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(swig_obj[1], &argp2, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__water__flux_node_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "node_list_append" "', argument " "2"" of type '" "cmf::water::flux_node::ptr""'"); 
    }
    if (argp2) arg2 = *(reinterpret_cast< cmf::water::flux_node::ptr * >(argp2));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< cmf::water::flux_node::ptr * >(argp2);
  }
  {
    try {
      (arg1)->append(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_node_list_global_water_balance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::water::node_list *arg1 = (cmf::water::node_list *) 0 ;
  cmf::math::Time arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  real result;
  
  if (!SWIG_Python_UnpackTuple(args,"node_list_global_water_balance",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__water__node_list, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "node_list_global_water_balance" "', argument " "1"" of type '" "cmf::water::node_list const *""'"); 
  }
  arg1 = reinterpret_cast< cmf::water::node_list * >(argp1);
  {
    arg2 = convert_datetime_to_cmftime(swig_obj[1]);    
  }
  {
    try {
      result = (real)((cmf::water::node_list const *)arg1)->global_water_balance(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_node_list_water_balance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::water::node_list *arg1 = (cmf::water::node_list *) 0 ;
  cmf::math::Time arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  cmf::math::num_array result;
  
  if (!SWIG_Python_UnpackTuple(args,"node_list_water_balance",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__water__node_list, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "node_list_water_balance" "', argument " "1"" of type '" "cmf::water::node_list const *""'"); 
  }
  arg1 = reinterpret_cast< cmf::water::node_list * >(argp1);
  {
    arg2 = convert_datetime_to_cmftime(swig_obj[1]);    
  }
  {
    try {
      result = ((cmf::water::node_list const *)arg1)->water_balance(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj((new cmf::math::num_array(static_cast< const cmf::math::num_array& >(result))), SWIGTYPE_p_cmf__math__num_array, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_node_list_conc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::water::node_list *arg1 = (cmf::water::node_list *) 0 ;
  cmf::math::Time arg2 ;
  cmf::water::solute *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  cmf::math::num_array result;
  
  if (!SWIG_Python_UnpackTuple(args,"node_list_conc",3,3,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__water__node_list, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "node_list_conc" "', argument " "1"" of type '" "cmf::water::node_list const *""'"); 
  }
  arg1 = reinterpret_cast< cmf::water::node_list * >(argp1);
  {
    arg2 = convert_datetime_to_cmftime(swig_obj[1]);    
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_cmf__water__solute,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "node_list_conc" "', argument " "3"" of type '" "cmf::water::solute const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "node_list_conc" "', argument " "3"" of type '" "cmf::water::solute const &""'"); 
  }
  arg3 = reinterpret_cast< cmf::water::solute * >(argp3);
  {
    try {
      result = ((cmf::water::node_list const *)arg1)->conc(arg2,(cmf::water::solute const &)*arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj((new cmf::math::num_array(static_cast< const cmf::math::num_array& >(result))), SWIGTYPE_p_cmf__math__num_array, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_node_list_set_solute_source(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::water::node_list *arg1 = (cmf::water::node_list *) 0 ;
  cmf::water::solute *arg2 = 0 ;
  cmf::math::num_array arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args,"node_list_set_solute_source",3,3,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__water__node_list, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "node_list_set_solute_source" "', argument " "1"" of type '" "cmf::water::node_list *""'"); 
  }
  arg1 = reinterpret_cast< cmf::water::node_list * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cmf__water__solute,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "node_list_set_solute_source" "', argument " "2"" of type '" "cmf::water::solute const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "node_list_set_solute_source" "', argument " "2"" of type '" "cmf::water::solute const &""'"); 
  }
  arg2 = reinterpret_cast< cmf::water::solute * >(argp2);
  {
    res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_cmf__math__num_array,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "node_list_set_solute_source" "', argument " "3"" of type '" "cmf::math::num_array""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "node_list_set_solute_source" "', argument " "3"" of type '" "cmf::math::num_array""'");
    } else {
      cmf::math::num_array * temp = reinterpret_cast< cmf::math::num_array * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    try {
      result = (int)(arg1)->set_solute_source((cmf::water::solute const &)*arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_node_list_get_fluxes_to(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::water::node_list *arg1 = (cmf::water::node_list *) 0 ;
  cmf::water::node_list *arg2 = 0 ;
  cmf::math::Time arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[3] ;
  cmf::math::num_array result;
  
  if (!SWIG_Python_UnpackTuple(args,"node_list_get_fluxes_to",3,3,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__water__node_list, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "node_list_get_fluxes_to" "', argument " "1"" of type '" "cmf::water::node_list const *""'"); 
  }
  arg1 = reinterpret_cast< cmf::water::node_list * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cmf__water__node_list,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "node_list_get_fluxes_to" "', argument " "2"" of type '" "cmf::water::node_list const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "node_list_get_fluxes_to" "', argument " "2"" of type '" "cmf::water::node_list const &""'"); 
  }
  arg2 = reinterpret_cast< cmf::water::node_list * >(argp2);
  {
    arg3 = convert_datetime_to_cmftime(swig_obj[2]);    
  }
  {
    try {
      result = ((cmf::water::node_list const *)arg1)->get_fluxes_to((cmf::water::node_list const &)*arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj((new cmf::math::num_array(static_cast< const cmf::math::num_array& >(result))), SWIGTYPE_p_cmf__math__num_array, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_node_list_get_fluxes3d_to(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::water::node_list *arg1 = (cmf::water::node_list *) 0 ;
  cmf::water::node_list *arg2 = 0 ;
  cmf::math::Time arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[3] ;
  SwigValueWrapper< cmf::geometry::point_vector > result;
  
  if (!SWIG_Python_UnpackTuple(args,"node_list_get_fluxes3d_to",3,3,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__water__node_list, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "node_list_get_fluxes3d_to" "', argument " "1"" of type '" "cmf::water::node_list const *""'"); 
  }
  arg1 = reinterpret_cast< cmf::water::node_list * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cmf__water__node_list,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "node_list_get_fluxes3d_to" "', argument " "2"" of type '" "cmf::water::node_list const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "node_list_get_fluxes3d_to" "', argument " "2"" of type '" "cmf::water::node_list const &""'"); 
  }
  arg2 = reinterpret_cast< cmf::water::node_list * >(argp2);
  {
    arg3 = convert_datetime_to_cmftime(swig_obj[2]);    
  }
  {
    try {
      result = ((cmf::water::node_list const *)arg1)->get_fluxes3d_to((cmf::water::node_list const &)*arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj((new cmf::geometry::point_vector(static_cast< const cmf::geometry::point_vector& >(result))), SWIGTYPE_p_cmf__geometry__point_vector, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_node_list_get_fluxes3d(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::water::node_list *arg1 = (cmf::water::node_list *) 0 ;
  cmf::math::Time arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  SwigValueWrapper< cmf::geometry::point_vector > result;
  
  if (!SWIG_Python_UnpackTuple(args,"node_list_get_fluxes3d",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__water__node_list, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "node_list_get_fluxes3d" "', argument " "1"" of type '" "cmf::water::node_list const *""'"); 
  }
  arg1 = reinterpret_cast< cmf::water::node_list * >(argp1);
  {
    arg2 = convert_datetime_to_cmftime(swig_obj[1]);    
  }
  {
    try {
      result = ((cmf::water::node_list const *)arg1)->get_fluxes3d(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj((new cmf::geometry::point_vector(static_cast< const cmf::geometry::point_vector& >(result))), SWIGTYPE_p_cmf__geometry__point_vector, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_node_list_get_positions(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::water::node_list *arg1 = (cmf::water::node_list *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  SwigValueWrapper< cmf::geometry::point_vector > result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__water__node_list, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "node_list_get_positions" "', argument " "1"" of type '" "cmf::water::node_list const *""'"); 
  }
  arg1 = reinterpret_cast< cmf::water::node_list * >(argp1);
  {
    try {
      result = ((cmf::water::node_list const *)arg1)->get_positions();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj((new cmf::geometry::point_vector(static_cast< const cmf::geometry::point_vector& >(result))), SWIGTYPE_p_cmf__geometry__point_vector, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_node_list_potentials_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::water::node_list *arg1 = (cmf::water::node_list *) 0 ;
  cmf::math::num_array *arg2 = (cmf::math::num_array *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"node_list_potentials_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__water__node_list, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "node_list_potentials_set" "', argument " "1"" of type '" "cmf::water::node_list *""'"); 
  }
  arg1 = reinterpret_cast< cmf::water::node_list * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cmf__math__num_array, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "node_list_potentials_set" "', argument " "2"" of type '" "cmf::math::num_array *""'"); 
  }
  arg2 = reinterpret_cast< cmf::math::num_array * >(argp2);
  {
    try {
      cmf_water_node_list_potentials_set(arg1,arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_node_list_potentials_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::water::node_list *arg1 = (cmf::water::node_list *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  cmf::math::num_array *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__water__node_list, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "node_list_potentials_get" "', argument " "1"" of type '" "cmf::water::node_list *""'"); 
  }
  arg1 = reinterpret_cast< cmf::water::node_list * >(argp1);
  {
    try {
      result = (cmf::math::num_array *)cmf_water_node_list_potentials_get(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmf__math__num_array, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_node_list(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::water::node_list *arg1 = (cmf::water::node_list *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__water__node_list, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_node_list" "', argument " "1"" of type '" "cmf::water::node_list *""'"); 
  }
  arg1 = reinterpret_cast< cmf::water::node_list * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *node_list_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_cmf__water__node_list, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *node_list_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_NeumannBoundary_list_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::water::NeumannBoundary_list *arg1 = (cmf::water::NeumannBoundary_list *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  cmf::water::NeumannBoundary_ptr result;
  
  if (!SWIG_Python_UnpackTuple(args,"NeumannBoundary_list_get",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__water__NeumannBoundary_list, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NeumannBoundary_list_get" "', argument " "1"" of type '" "cmf::water::NeumannBoundary_list const *""'"); 
  }
  arg1 = reinterpret_cast< cmf::water::NeumannBoundary_list * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NeumannBoundary_list_get" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = ((cmf::water::NeumannBoundary_list const *)arg1)->get(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  {
    std::tr1::shared_ptr<  cmf::water::NeumannBoundary > *smartresult = result ? new std::tr1::shared_ptr<  cmf::water::NeumannBoundary >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__tr1__shared_ptrT_cmf__water__NeumannBoundary_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NeumannBoundary_list_get_fluxes(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::water::NeumannBoundary_list *arg1 = (cmf::water::NeumannBoundary_list *) 0 ;
  cmf::math::Time arg2 = (cmf::math::Time) cmf::math::Time() ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  cmf::math::num_array result;
  
  if (!SWIG_Python_UnpackTuple(args,"NeumannBoundary_list_get_fluxes",1,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__water__NeumannBoundary_list, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NeumannBoundary_list_get_fluxes" "', argument " "1"" of type '" "cmf::water::NeumannBoundary_list const *""'"); 
  }
  arg1 = reinterpret_cast< cmf::water::NeumannBoundary_list * >(argp1);
  if (swig_obj[1]) {
    {
      arg2 = convert_datetime_to_cmftime(swig_obj[1]);    
    }
  }
  {
    try {
      result = ((cmf::water::NeumannBoundary_list const *)arg1)->get_fluxes(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj((new cmf::math::num_array(static_cast< const cmf::math::num_array& >(result))), SWIGTYPE_p_cmf__math__num_array, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NeumannBoundary_list_append(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::water::NeumannBoundary_list *arg1 = (cmf::water::NeumannBoundary_list *) 0 ;
  cmf::water::NeumannBoundary_ptr arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"NeumannBoundary_list_append",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__water__NeumannBoundary_list, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NeumannBoundary_list_append" "', argument " "1"" of type '" "cmf::water::NeumannBoundary_list *""'"); 
  }
  arg1 = reinterpret_cast< cmf::water::NeumannBoundary_list * >(argp1);
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(swig_obj[1], &argp2, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__water__NeumannBoundary_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NeumannBoundary_list_append" "', argument " "2"" of type '" "cmf::water::NeumannBoundary_ptr""'"); 
    }
    if (argp2) arg2 = *(reinterpret_cast< cmf::water::NeumannBoundary_ptr * >(argp2));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< cmf::water::NeumannBoundary_ptr * >(argp2);
  }
  {
    try {
      (arg1)->append(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NeumannBoundary_list_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::water::NeumannBoundary_list *arg1 = (cmf::water::NeumannBoundary_list *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  size_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__water__NeumannBoundary_list, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NeumannBoundary_list_size" "', argument " "1"" of type '" "cmf::water::NeumannBoundary_list const *""'"); 
  }
  arg1 = reinterpret_cast< cmf::water::NeumannBoundary_list * >(argp1);
  {
    try {
      result = ((cmf::water::NeumannBoundary_list const *)arg1)->size();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_NeumannBoundary_list__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  cmf::water::NeumannBoundary_list *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  {
    try {
      result = (cmf::water::NeumannBoundary_list *)new cmf::water::NeumannBoundary_list();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmf__water__NeumannBoundary_list, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_NeumannBoundary_list__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  cmf::water::node_list *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cmf::water::NeumannBoundary_list *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cmf__water__node_list,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_NeumannBoundary_list" "', argument " "1"" of type '" "cmf::water::node_list const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_NeumannBoundary_list" "', argument " "1"" of type '" "cmf::water::node_list const &""'"); 
  }
  arg1 = reinterpret_cast< cmf::water::node_list * >(argp1);
  {
    try {
      result = (cmf::water::NeumannBoundary_list *)new cmf::water::NeumannBoundary_list((cmf::water::node_list const &)*arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmf__water__NeumannBoundary_list, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_NeumannBoundary_list__SWIG_2(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  cmf::water::NeumannBoundary_list *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cmf::water::NeumannBoundary_list *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cmf__water__NeumannBoundary_list,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_NeumannBoundary_list" "', argument " "1"" of type '" "cmf::water::NeumannBoundary_list const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_NeumannBoundary_list" "', argument " "1"" of type '" "cmf::water::NeumannBoundary_list const &""'"); 
  }
  arg1 = reinterpret_cast< cmf::water::NeumannBoundary_list * >(argp1);
  {
    try {
      result = (cmf::water::NeumannBoundary_list *)new cmf::water::NeumannBoundary_list((cmf::water::NeumannBoundary_list const &)*arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmf__water__NeumannBoundary_list, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_NeumannBoundary_list(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"new_NeumannBoundary_list",0,1,argv))) SWIG_fail;
  --argc;
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (argc == 0) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
    if (argc == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_cmf__water__node_list, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
    if (argc == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_cmf__water__NeumannBoundary_list, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 3;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_3:
    
  dispatch:
    switch(_index) {
    case 1:
      return _wrap_new_NeumannBoundary_list__SWIG_0(self, argc, argv);
    case 2:
      return _wrap_new_NeumannBoundary_list__SWIG_1(self, argc, argv);
    case 3:
      return _wrap_new_NeumannBoundary_list__SWIG_2(self, argc, argv);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_NeumannBoundary_list'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    cmf::water::NeumannBoundary_list()\n"
    "    cmf::water::NeumannBoundary_list(cmf::water::node_list const &)\n"
    "    cmf::water::NeumannBoundary_list(cmf::water::NeumannBoundary_list const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_NeumannBoundary_list_to_node_list(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::water::NeumannBoundary_list *arg1 = (cmf::water::NeumannBoundary_list *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  cmf::water::node_list result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__water__NeumannBoundary_list, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NeumannBoundary_list_to_node_list" "', argument " "1"" of type '" "cmf::water::NeumannBoundary_list const *""'"); 
  }
  arg1 = reinterpret_cast< cmf::water::NeumannBoundary_list * >(argp1);
  {
    try {
      result = ((cmf::water::NeumannBoundary_list const *)arg1)->to_node_list();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj((new cmf::water::node_list(static_cast< const cmf::water::node_list& >(result))), SWIGTYPE_p_cmf__water__node_list, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NeumannBoundary_list_global_water_balance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::water::NeumannBoundary_list *arg1 = (cmf::water::NeumannBoundary_list *) 0 ;
  cmf::math::Time arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  real result;
  
  if (!SWIG_Python_UnpackTuple(args,"NeumannBoundary_list_global_water_balance",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__water__NeumannBoundary_list, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NeumannBoundary_list_global_water_balance" "', argument " "1"" of type '" "cmf::water::NeumannBoundary_list const *""'"); 
  }
  arg1 = reinterpret_cast< cmf::water::NeumannBoundary_list * >(argp1);
  {
    arg2 = convert_datetime_to_cmftime(swig_obj[1]);    
  }
  {
    try {
      result = (real)((cmf::water::NeumannBoundary_list const *)arg1)->global_water_balance(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NeumannBoundary_list_water_balance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::water::NeumannBoundary_list *arg1 = (cmf::water::NeumannBoundary_list *) 0 ;
  cmf::math::Time arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  cmf::math::num_array result;
  
  if (!SWIG_Python_UnpackTuple(args,"NeumannBoundary_list_water_balance",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__water__NeumannBoundary_list, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NeumannBoundary_list_water_balance" "', argument " "1"" of type '" "cmf::water::NeumannBoundary_list const *""'"); 
  }
  arg1 = reinterpret_cast< cmf::water::NeumannBoundary_list * >(argp1);
  {
    arg2 = convert_datetime_to_cmftime(swig_obj[1]);    
  }
  {
    try {
      result = ((cmf::water::NeumannBoundary_list const *)arg1)->water_balance(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj((new cmf::math::num_array(static_cast< const cmf::math::num_array& >(result))), SWIGTYPE_p_cmf__math__num_array, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NeumannBoundary_list_fluxes_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::water::NeumannBoundary_list *arg1 = (cmf::water::NeumannBoundary_list *) 0 ;
  cmf::math::num_array *arg2 = (cmf::math::num_array *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"NeumannBoundary_list_fluxes_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__water__NeumannBoundary_list, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NeumannBoundary_list_fluxes_set" "', argument " "1"" of type '" "cmf::water::NeumannBoundary_list *""'"); 
  }
  arg1 = reinterpret_cast< cmf::water::NeumannBoundary_list * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cmf__math__num_array, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NeumannBoundary_list_fluxes_set" "', argument " "2"" of type '" "cmf::math::num_array *""'"); 
  }
  arg2 = reinterpret_cast< cmf::math::num_array * >(argp2);
  {
    try {
      cmf_water_NeumannBoundary_list_fluxes_set(arg1,arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NeumannBoundary_list_fluxes_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::water::NeumannBoundary_list *arg1 = (cmf::water::NeumannBoundary_list *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  cmf::math::num_array *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__water__NeumannBoundary_list, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NeumannBoundary_list_fluxes_get" "', argument " "1"" of type '" "cmf::water::NeumannBoundary_list *""'"); 
  }
  arg1 = reinterpret_cast< cmf::water::NeumannBoundary_list * >(argp1);
  {
    try {
      result = (cmf::math::num_array *)cmf_water_NeumannBoundary_list_fluxes_get(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmf__math__num_array, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_NeumannBoundary_list(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::water::NeumannBoundary_list *arg1 = (cmf::water::NeumannBoundary_list *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__water__NeumannBoundary_list, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_NeumannBoundary_list" "', argument " "1"" of type '" "cmf::water::NeumannBoundary_list *""'"); 
  }
  arg1 = reinterpret_cast< cmf::water::NeumannBoundary_list * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *NeumannBoundary_list_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_cmf__water__NeumannBoundary_list, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *NeumannBoundary_list_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_vapour_pressure(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "vapour_pressure" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  {
    try {
      result = (double)cmf::atmosphere::vapour_pressure(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_global_radiation(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::math::Time arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 = (double) 8 ;
  double arg5 = (double) 51 ;
  int arg6 = (int) 1 ;
  bool arg7 = (bool) 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  bool val7 ;
  int ecode7 = 0 ;
  PyObject *swig_obj[7] ;
  double result;
  
  if (!SWIG_Python_UnpackTuple(args,"global_radiation",3,7,swig_obj)) SWIG_fail;
  {
    arg1 = convert_datetime_to_cmftime(swig_obj[0]);    
  }
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "global_radiation" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "global_radiation" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  if (swig_obj[3]) {
    ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "global_radiation" "', argument " "4"" of type '" "double""'");
    } 
    arg4 = static_cast< double >(val4);
  }
  if (swig_obj[4]) {
    ecode5 = SWIG_AsVal_double(swig_obj[4], &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "global_radiation" "', argument " "5"" of type '" "double""'");
    } 
    arg5 = static_cast< double >(val5);
  }
  if (swig_obj[5]) {
    ecode6 = SWIG_AsVal_int(swig_obj[5], &val6);
    if (!SWIG_IsOK(ecode6)) {
      SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "global_radiation" "', argument " "6"" of type '" "int""'");
    } 
    arg6 = static_cast< int >(val6);
  }
  if (swig_obj[6]) {
    ecode7 = SWIG_AsVal_bool(swig_obj[6], &val7);
    if (!SWIG_IsOK(ecode7)) {
      SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "global_radiation" "', argument " "7"" of type '" "bool""'");
    } 
    arg7 = static_cast< bool >(val7);
  }
  {
    try {
      result = (double)cmf::atmosphere::global_radiation(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pressure(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Pressure" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  {
    try {
      result = (double)cmf::atmosphere::Pressure(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Weather_T_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::atmosphere::Weather *arg1 = (cmf::atmosphere::Weather *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"Weather_T_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__atmosphere__Weather, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Weather_T_set" "', argument " "1"" of type '" "cmf::atmosphere::Weather *""'"); 
  }
  arg1 = reinterpret_cast< cmf::atmosphere::Weather * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Weather_T_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->T = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Weather_T_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::atmosphere::Weather *arg1 = (cmf::atmosphere::Weather *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__atmosphere__Weather, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Weather_T_get" "', argument " "1"" of type '" "cmf::atmosphere::Weather *""'"); 
  }
  arg1 = reinterpret_cast< cmf::atmosphere::Weather * >(argp1);
  result = (double) ((arg1)->T);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Weather_Tmax_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::atmosphere::Weather *arg1 = (cmf::atmosphere::Weather *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"Weather_Tmax_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__atmosphere__Weather, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Weather_Tmax_set" "', argument " "1"" of type '" "cmf::atmosphere::Weather *""'"); 
  }
  arg1 = reinterpret_cast< cmf::atmosphere::Weather * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Weather_Tmax_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->Tmax = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Weather_Tmax_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::atmosphere::Weather *arg1 = (cmf::atmosphere::Weather *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__atmosphere__Weather, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Weather_Tmax_get" "', argument " "1"" of type '" "cmf::atmosphere::Weather *""'"); 
  }
  arg1 = reinterpret_cast< cmf::atmosphere::Weather * >(argp1);
  result = (double) ((arg1)->Tmax);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Weather_Tmin_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::atmosphere::Weather *arg1 = (cmf::atmosphere::Weather *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"Weather_Tmin_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__atmosphere__Weather, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Weather_Tmin_set" "', argument " "1"" of type '" "cmf::atmosphere::Weather *""'"); 
  }
  arg1 = reinterpret_cast< cmf::atmosphere::Weather * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Weather_Tmin_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->Tmin = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Weather_Tmin_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::atmosphere::Weather *arg1 = (cmf::atmosphere::Weather *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__atmosphere__Weather, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Weather_Tmin_get" "', argument " "1"" of type '" "cmf::atmosphere::Weather *""'"); 
  }
  arg1 = reinterpret_cast< cmf::atmosphere::Weather * >(argp1);
  result = (double) ((arg1)->Tmin);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Weather_Tground_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::atmosphere::Weather *arg1 = (cmf::atmosphere::Weather *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"Weather_Tground_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__atmosphere__Weather, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Weather_Tground_set" "', argument " "1"" of type '" "cmf::atmosphere::Weather *""'"); 
  }
  arg1 = reinterpret_cast< cmf::atmosphere::Weather * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Weather_Tground_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->Tground = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Weather_Tground_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::atmosphere::Weather *arg1 = (cmf::atmosphere::Weather *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__atmosphere__Weather, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Weather_Tground_get" "', argument " "1"" of type '" "cmf::atmosphere::Weather *""'"); 
  }
  arg1 = reinterpret_cast< cmf::atmosphere::Weather * >(argp1);
  result = (double) ((arg1)->Tground);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Weather_Windspeed_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::atmosphere::Weather *arg1 = (cmf::atmosphere::Weather *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"Weather_Windspeed_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__atmosphere__Weather, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Weather_Windspeed_set" "', argument " "1"" of type '" "cmf::atmosphere::Weather *""'"); 
  }
  arg1 = reinterpret_cast< cmf::atmosphere::Weather * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Weather_Windspeed_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->Windspeed = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Weather_Windspeed_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::atmosphere::Weather *arg1 = (cmf::atmosphere::Weather *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__atmosphere__Weather, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Weather_Windspeed_get" "', argument " "1"" of type '" "cmf::atmosphere::Weather *""'"); 
  }
  arg1 = reinterpret_cast< cmf::atmosphere::Weather * >(argp1);
  result = (double) ((arg1)->Windspeed);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Weather_e_a_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::atmosphere::Weather *arg1 = (cmf::atmosphere::Weather *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"Weather_e_a_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__atmosphere__Weather, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Weather_e_a_set" "', argument " "1"" of type '" "cmf::atmosphere::Weather *""'"); 
  }
  arg1 = reinterpret_cast< cmf::atmosphere::Weather * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Weather_e_a_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->e_a = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Weather_e_a_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::atmosphere::Weather *arg1 = (cmf::atmosphere::Weather *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__atmosphere__Weather, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Weather_e_a_get" "', argument " "1"" of type '" "cmf::atmosphere::Weather *""'"); 
  }
  arg1 = reinterpret_cast< cmf::atmosphere::Weather * >(argp1);
  result = (double) ((arg1)->e_a);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Weather_e_s_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::atmosphere::Weather *arg1 = (cmf::atmosphere::Weather *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"Weather_e_s_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__atmosphere__Weather, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Weather_e_s_set" "', argument " "1"" of type '" "cmf::atmosphere::Weather *""'"); 
  }
  arg1 = reinterpret_cast< cmf::atmosphere::Weather * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Weather_e_s_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->e_s = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Weather_e_s_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::atmosphere::Weather *arg1 = (cmf::atmosphere::Weather *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__atmosphere__Weather, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Weather_e_s_get" "', argument " "1"" of type '" "cmf::atmosphere::Weather *""'"); 
  }
  arg1 = reinterpret_cast< cmf::atmosphere::Weather * >(argp1);
  result = (double) ((arg1)->e_s);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Weather_sunshine_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::atmosphere::Weather *arg1 = (cmf::atmosphere::Weather *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"Weather_sunshine_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__atmosphere__Weather, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Weather_sunshine_set" "', argument " "1"" of type '" "cmf::atmosphere::Weather *""'"); 
  }
  arg1 = reinterpret_cast< cmf::atmosphere::Weather * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Weather_sunshine_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->sunshine = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Weather_sunshine_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::atmosphere::Weather *arg1 = (cmf::atmosphere::Weather *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__atmosphere__Weather, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Weather_sunshine_get" "', argument " "1"" of type '" "cmf::atmosphere::Weather *""'"); 
  }
  arg1 = reinterpret_cast< cmf::atmosphere::Weather * >(argp1);
  result = (double) ((arg1)->sunshine);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Weather_Rs_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::atmosphere::Weather *arg1 = (cmf::atmosphere::Weather *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"Weather_Rs_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__atmosphere__Weather, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Weather_Rs_set" "', argument " "1"" of type '" "cmf::atmosphere::Weather *""'"); 
  }
  arg1 = reinterpret_cast< cmf::atmosphere::Weather * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Weather_Rs_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->Rs = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Weather_Rs_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::atmosphere::Weather *arg1 = (cmf::atmosphere::Weather *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__atmosphere__Weather, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Weather_Rs_get" "', argument " "1"" of type '" "cmf::atmosphere::Weather *""'"); 
  }
  arg1 = reinterpret_cast< cmf::atmosphere::Weather * >(argp1);
  result = (double) ((arg1)->Rs);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Weather_instument_height_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::atmosphere::Weather *arg1 = (cmf::atmosphere::Weather *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"Weather_instument_height_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__atmosphere__Weather, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Weather_instument_height_set" "', argument " "1"" of type '" "cmf::atmosphere::Weather *""'"); 
  }
  arg1 = reinterpret_cast< cmf::atmosphere::Weather * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Weather_instument_height_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->instument_height = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Weather_instument_height_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::atmosphere::Weather *arg1 = (cmf::atmosphere::Weather *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__atmosphere__Weather, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Weather_instument_height_get" "', argument " "1"" of type '" "cmf::atmosphere::Weather *""'"); 
  }
  arg1 = reinterpret_cast< cmf::atmosphere::Weather * >(argp1);
  result = (double) ((arg1)->instument_height);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Weather_Rn(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::atmosphere::Weather *arg1 = (cmf::atmosphere::Weather *) 0 ;
  double arg2 ;
  bool arg3 = (bool) false ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  double result;
  
  if (!SWIG_Python_UnpackTuple(args,"Weather_Rn",2,3,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__atmosphere__Weather, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Weather_Rn" "', argument " "1"" of type '" "cmf::atmosphere::Weather const *""'"); 
  }
  arg1 = reinterpret_cast< cmf::atmosphere::Weather * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Weather_Rn" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (swig_obj[2]) {
    ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Weather_Rn" "', argument " "3"" of type '" "bool""'");
    } 
    arg3 = static_cast< bool >(val3);
  }
  {
    try {
      result = (double)((cmf::atmosphere::Weather const *)arg1)->Rn(arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Weather(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::atmosphere::Weather *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args,"new_Weather",0,0,0)) SWIG_fail;
  {
    try {
      result = (cmf::atmosphere::Weather *)new cmf::atmosphere::Weather();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmf__atmosphere__Weather, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Weather_to_string(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::atmosphere::Weather *arg1 = (cmf::atmosphere::Weather *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__atmosphere__Weather, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Weather_to_string" "', argument " "1"" of type '" "cmf::atmosphere::Weather const *""'"); 
  }
  arg1 = reinterpret_cast< cmf::atmosphere::Weather * >(argp1);
  {
    try {
      result = ((cmf::atmosphere::Weather const *)arg1)->to_string();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int Swig_var_Weather_snow_threshold_set(PyObject *_val) {
  {
    double val;
    int res = SWIG_AsVal_double(_val, &val);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""cmf::atmosphere::Weather::snow_threshold""' of type '""double""'");
    }
    cmf::atmosphere::Weather::snow_threshold = static_cast< double >(val);
  }
  return 0;
fail:
  return 1;
}


SWIGINTERN PyObject *Swig_var_Weather_snow_threshold_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_double(static_cast< double >(cmf::atmosphere::Weather::snow_threshold));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_Weather_snow_threshold_get(PyObject *SWIGUNUSEDPARM(self), PyObject *SWIGUNUSEDPARM(args)) {
  return Swig_var_Weather_snow_threshold_get();
}


SWIGINTERN PyObject *_wrap_Weather_snow_threshold_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *value;
  int res;
  
  if (!PyArg_ParseTuple(args,(char *)"O:set",&value)) return NULL;
  res = Swig_var_Weather_snow_threshold_set(value);
  return !res ? SWIG_Py_Void() : NULL;
}


SWIGINTERN PyObject *_wrap_delete_Weather(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::atmosphere::Weather *arg1 = (cmf::atmosphere::Weather *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__atmosphere__Weather, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Weather" "', argument " "1"" of type '" "cmf::atmosphere::Weather *""'"); 
  }
  arg1 = reinterpret_cast< cmf::atmosphere::Weather * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Weather_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_cmf__atmosphere__Weather, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *Weather_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_Meteorology___call__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::atmosphere::Meteorology *arg1 = (cmf::atmosphere::Meteorology *) 0 ;
  cmf::math::Time arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  cmf::atmosphere::Weather result;
  
  if (!SWIG_Python_UnpackTuple(args,"Meteorology___call__",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__atmosphere__Meteorology, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Meteorology___call__" "', argument " "1"" of type '" "cmf::atmosphere::Meteorology *""'"); 
  }
  arg1 = reinterpret_cast< cmf::atmosphere::Meteorology * >(argp1);
  {
    arg2 = convert_datetime_to_cmftime(swig_obj[1]);    
  }
  {
    try {
      result = (arg1)->operator ()(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj((new cmf::atmosphere::Weather(static_cast< const cmf::atmosphere::Weather& >(result))), SWIGTYPE_p_cmf__atmosphere__Weather, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Meteorology_get_weather(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::atmosphere::Meteorology *arg1 = (cmf::atmosphere::Meteorology *) 0 ;
  cmf::math::Time arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  cmf::atmosphere::Weather result;
  
  if (!SWIG_Python_UnpackTuple(args,"Meteorology_get_weather",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__atmosphere__Meteorology, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Meteorology_get_weather" "', argument " "1"" of type '" "cmf::atmosphere::Meteorology const *""'"); 
  }
  arg1 = reinterpret_cast< cmf::atmosphere::Meteorology * >(argp1);
  {
    arg2 = convert_datetime_to_cmftime(swig_obj[1]);    
  }
  {
    try {
      result = ((cmf::atmosphere::Meteorology const *)arg1)->get_weather(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj((new cmf::atmosphere::Weather(static_cast< const cmf::atmosphere::Weather& >(result))), SWIGTYPE_p_cmf__atmosphere__Weather, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Meteorology_copy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::atmosphere::Meteorology *arg1 = (cmf::atmosphere::Meteorology *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  cmf::atmosphere::Meteorology *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__atmosphere__Meteorology, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Meteorology_copy" "', argument " "1"" of type '" "cmf::atmosphere::Meteorology const *""'"); 
  }
  arg1 = reinterpret_cast< cmf::atmosphere::Meteorology * >(argp1);
  {
    try {
      result = (cmf::atmosphere::Meteorology *)((cmf::atmosphere::Meteorology const *)arg1)->copy();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmf__atmosphere__Meteorology, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Meteorology_get_instrument_height(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::atmosphere::Meteorology *arg1 = (cmf::atmosphere::Meteorology *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  real result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__atmosphere__Meteorology, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Meteorology_get_instrument_height" "', argument " "1"" of type '" "cmf::atmosphere::Meteorology const *""'"); 
  }
  arg1 = reinterpret_cast< cmf::atmosphere::Meteorology * >(argp1);
  {
    try {
      result = (real)((cmf::atmosphere::Meteorology const *)arg1)->get_instrument_height();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Meteorology(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::atmosphere::Meteorology *arg1 = (cmf::atmosphere::Meteorology *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__atmosphere__Meteorology, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Meteorology" "', argument " "1"" of type '" "cmf::atmosphere::Meteorology *""'"); 
  }
  arg1 = reinterpret_cast< cmf::atmosphere::Meteorology * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Meteorology_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_cmf__atmosphere__Meteorology, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_ConstantMeteorology_weather_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::atmosphere::ConstantMeteorology *arg1 = (cmf::atmosphere::ConstantMeteorology *) 0 ;
  cmf::atmosphere::Weather *arg2 = (cmf::atmosphere::Weather *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"ConstantMeteorology_weather_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__atmosphere__ConstantMeteorology, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ConstantMeteorology_weather_set" "', argument " "1"" of type '" "cmf::atmosphere::ConstantMeteorology *""'"); 
  }
  arg1 = reinterpret_cast< cmf::atmosphere::ConstantMeteorology * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cmf__atmosphere__Weather, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ConstantMeteorology_weather_set" "', argument " "2"" of type '" "cmf::atmosphere::Weather *""'"); 
  }
  arg2 = reinterpret_cast< cmf::atmosphere::Weather * >(argp2);
  if (arg1) (arg1)->weather = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ConstantMeteorology_weather_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::atmosphere::ConstantMeteorology *arg1 = (cmf::atmosphere::ConstantMeteorology *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  cmf::atmosphere::Weather *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__atmosphere__ConstantMeteorology, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ConstantMeteorology_weather_get" "', argument " "1"" of type '" "cmf::atmosphere::ConstantMeteorology *""'"); 
  }
  arg1 = reinterpret_cast< cmf::atmosphere::ConstantMeteorology * >(argp1);
  result = (cmf::atmosphere::Weather *)& ((arg1)->weather);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmf__atmosphere__Weather, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ConstantMeteorology__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  cmf::atmosphere::ConstantMeteorology *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  {
    try {
      result = (cmf::atmosphere::ConstantMeteorology *)new cmf::atmosphere::ConstantMeteorology();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmf__atmosphere__ConstantMeteorology, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ConstantMeteorology__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  cmf::atmosphere::Weather *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cmf::atmosphere::ConstantMeteorology *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cmf__atmosphere__Weather,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ConstantMeteorology" "', argument " "1"" of type '" "cmf::atmosphere::Weather const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ConstantMeteorology" "', argument " "1"" of type '" "cmf::atmosphere::Weather const &""'"); 
  }
  arg1 = reinterpret_cast< cmf::atmosphere::Weather * >(argp1);
  {
    try {
      result = (cmf::atmosphere::ConstantMeteorology *)new cmf::atmosphere::ConstantMeteorology((cmf::atmosphere::Weather const &)*arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmf__atmosphere__ConstantMeteorology, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ConstantMeteorology__SWIG_2(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  cmf::atmosphere::ConstantMeteorology *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cmf::atmosphere::ConstantMeteorology *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cmf__atmosphere__ConstantMeteorology,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ConstantMeteorology" "', argument " "1"" of type '" "cmf::atmosphere::ConstantMeteorology const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ConstantMeteorology" "', argument " "1"" of type '" "cmf::atmosphere::ConstantMeteorology const &""'"); 
  }
  arg1 = reinterpret_cast< cmf::atmosphere::ConstantMeteorology * >(argp1);
  {
    try {
      result = (cmf::atmosphere::ConstantMeteorology *)new cmf::atmosphere::ConstantMeteorology((cmf::atmosphere::ConstantMeteorology const &)*arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmf__atmosphere__ConstantMeteorology, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ConstantMeteorology(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"new_ConstantMeteorology",0,1,argv))) SWIG_fail;
  --argc;
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (argc == 0) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
    if (argc == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_cmf__atmosphere__Weather, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
    if (argc == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_cmf__atmosphere__ConstantMeteorology, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 3;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_3:
    
  dispatch:
    switch(_index) {
    case 1:
      return _wrap_new_ConstantMeteorology__SWIG_0(self, argc, argv);
    case 2:
      return _wrap_new_ConstantMeteorology__SWIG_1(self, argc, argv);
    case 3:
      return _wrap_new_ConstantMeteorology__SWIG_2(self, argc, argv);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_ConstantMeteorology'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    cmf::atmosphere::ConstantMeteorology()\n"
    "    cmf::atmosphere::ConstantMeteorology(cmf::atmosphere::Weather const &)\n"
    "    cmf::atmosphere::ConstantMeteorology(cmf::atmosphere::ConstantMeteorology const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_ConstantMeteorology_copy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::atmosphere::ConstantMeteorology *arg1 = (cmf::atmosphere::ConstantMeteorology *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  cmf::atmosphere::ConstantMeteorology *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__atmosphere__ConstantMeteorology, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ConstantMeteorology_copy" "', argument " "1"" of type '" "cmf::atmosphere::ConstantMeteorology const *""'"); 
  }
  arg1 = reinterpret_cast< cmf::atmosphere::ConstantMeteorology * >(argp1);
  {
    try {
      result = (cmf::atmosphere::ConstantMeteorology *)((cmf::atmosphere::ConstantMeteorology const *)arg1)->copy();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmf__atmosphere__ConstantMeteorology, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ConstantMeteorology(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::atmosphere::ConstantMeteorology *arg1 = (cmf::atmosphere::ConstantMeteorology *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__atmosphere__ConstantMeteorology, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ConstantMeteorology" "', argument " "1"" of type '" "cmf::atmosphere::ConstantMeteorology *""'"); 
  }
  arg1 = reinterpret_cast< cmf::atmosphere::ConstantMeteorology * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ConstantMeteorology_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_cmf__atmosphere__ConstantMeteorology, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *ConstantMeteorology_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_MeteoStation_Latitude_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::atmosphere::MeteoStation *arg1 = (cmf::atmosphere::MeteoStation *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< cmf::atmosphere::MeteoStation > tempshared1 ;
  std::tr1::shared_ptr< cmf::atmosphere::MeteoStation > *smartarg1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"MeteoStation_Latitude_set",2,2,swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__atmosphere__MeteoStation_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeteoStation_Latitude_set" "', argument " "1"" of type '" "cmf::atmosphere::MeteoStation *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  cmf::atmosphere::MeteoStation > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  cmf::atmosphere::MeteoStation > * >(argp1);
      arg1 = const_cast< cmf::atmosphere::MeteoStation * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  cmf::atmosphere::MeteoStation > * >(argp1);
      arg1 = const_cast< cmf::atmosphere::MeteoStation * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MeteoStation_Latitude_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->Latitude = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeteoStation_Latitude_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::atmosphere::MeteoStation *arg1 = (cmf::atmosphere::MeteoStation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< cmf::atmosphere::MeteoStation > tempshared1 ;
  std::tr1::shared_ptr< cmf::atmosphere::MeteoStation > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__atmosphere__MeteoStation_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeteoStation_Latitude_get" "', argument " "1"" of type '" "cmf::atmosphere::MeteoStation *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  cmf::atmosphere::MeteoStation > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  cmf::atmosphere::MeteoStation > * >(argp1);
      arg1 = const_cast< cmf::atmosphere::MeteoStation * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  cmf::atmosphere::MeteoStation > * >(argp1);
      arg1 = const_cast< cmf::atmosphere::MeteoStation * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (double) ((arg1)->Latitude);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeteoStation_Longitude_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::atmosphere::MeteoStation *arg1 = (cmf::atmosphere::MeteoStation *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< cmf::atmosphere::MeteoStation > tempshared1 ;
  std::tr1::shared_ptr< cmf::atmosphere::MeteoStation > *smartarg1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"MeteoStation_Longitude_set",2,2,swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__atmosphere__MeteoStation_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeteoStation_Longitude_set" "', argument " "1"" of type '" "cmf::atmosphere::MeteoStation *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  cmf::atmosphere::MeteoStation > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  cmf::atmosphere::MeteoStation > * >(argp1);
      arg1 = const_cast< cmf::atmosphere::MeteoStation * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  cmf::atmosphere::MeteoStation > * >(argp1);
      arg1 = const_cast< cmf::atmosphere::MeteoStation * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MeteoStation_Longitude_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->Longitude = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeteoStation_Longitude_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::atmosphere::MeteoStation *arg1 = (cmf::atmosphere::MeteoStation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< cmf::atmosphere::MeteoStation > tempshared1 ;
  std::tr1::shared_ptr< cmf::atmosphere::MeteoStation > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__atmosphere__MeteoStation_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeteoStation_Longitude_get" "', argument " "1"" of type '" "cmf::atmosphere::MeteoStation *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  cmf::atmosphere::MeteoStation > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  cmf::atmosphere::MeteoStation > * >(argp1);
      arg1 = const_cast< cmf::atmosphere::MeteoStation * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  cmf::atmosphere::MeteoStation > * >(argp1);
      arg1 = const_cast< cmf::atmosphere::MeteoStation * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (double) ((arg1)->Longitude);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeteoStation_Timezone_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::atmosphere::MeteoStation *arg1 = (cmf::atmosphere::MeteoStation *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< cmf::atmosphere::MeteoStation > tempshared1 ;
  std::tr1::shared_ptr< cmf::atmosphere::MeteoStation > *smartarg1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"MeteoStation_Timezone_set",2,2,swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__atmosphere__MeteoStation_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeteoStation_Timezone_set" "', argument " "1"" of type '" "cmf::atmosphere::MeteoStation *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  cmf::atmosphere::MeteoStation > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  cmf::atmosphere::MeteoStation > * >(argp1);
      arg1 = const_cast< cmf::atmosphere::MeteoStation * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  cmf::atmosphere::MeteoStation > * >(argp1);
      arg1 = const_cast< cmf::atmosphere::MeteoStation * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MeteoStation_Timezone_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->Timezone = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeteoStation_Timezone_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::atmosphere::MeteoStation *arg1 = (cmf::atmosphere::MeteoStation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< cmf::atmosphere::MeteoStation > tempshared1 ;
  std::tr1::shared_ptr< cmf::atmosphere::MeteoStation > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__atmosphere__MeteoStation_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeteoStation_Timezone_get" "', argument " "1"" of type '" "cmf::atmosphere::MeteoStation *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  cmf::atmosphere::MeteoStation > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  cmf::atmosphere::MeteoStation > * >(argp1);
      arg1 = const_cast< cmf::atmosphere::MeteoStation * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  cmf::atmosphere::MeteoStation > * >(argp1);
      arg1 = const_cast< cmf::atmosphere::MeteoStation * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (double) ((arg1)->Timezone);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeteoStation_x_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::atmosphere::MeteoStation *arg1 = (cmf::atmosphere::MeteoStation *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< cmf::atmosphere::MeteoStation > tempshared1 ;
  std::tr1::shared_ptr< cmf::atmosphere::MeteoStation > *smartarg1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"MeteoStation_x_set",2,2,swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__atmosphere__MeteoStation_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeteoStation_x_set" "', argument " "1"" of type '" "cmf::atmosphere::MeteoStation *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  cmf::atmosphere::MeteoStation > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  cmf::atmosphere::MeteoStation > * >(argp1);
      arg1 = const_cast< cmf::atmosphere::MeteoStation * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  cmf::atmosphere::MeteoStation > * >(argp1);
      arg1 = const_cast< cmf::atmosphere::MeteoStation * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MeteoStation_x_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->x = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeteoStation_x_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::atmosphere::MeteoStation *arg1 = (cmf::atmosphere::MeteoStation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< cmf::atmosphere::MeteoStation > tempshared1 ;
  std::tr1::shared_ptr< cmf::atmosphere::MeteoStation > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__atmosphere__MeteoStation_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeteoStation_x_get" "', argument " "1"" of type '" "cmf::atmosphere::MeteoStation *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  cmf::atmosphere::MeteoStation > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  cmf::atmosphere::MeteoStation > * >(argp1);
      arg1 = const_cast< cmf::atmosphere::MeteoStation * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  cmf::atmosphere::MeteoStation > * >(argp1);
      arg1 = const_cast< cmf::atmosphere::MeteoStation * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (double) ((arg1)->x);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeteoStation_y_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::atmosphere::MeteoStation *arg1 = (cmf::atmosphere::MeteoStation *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< cmf::atmosphere::MeteoStation > tempshared1 ;
  std::tr1::shared_ptr< cmf::atmosphere::MeteoStation > *smartarg1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"MeteoStation_y_set",2,2,swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__atmosphere__MeteoStation_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeteoStation_y_set" "', argument " "1"" of type '" "cmf::atmosphere::MeteoStation *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  cmf::atmosphere::MeteoStation > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  cmf::atmosphere::MeteoStation > * >(argp1);
      arg1 = const_cast< cmf::atmosphere::MeteoStation * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  cmf::atmosphere::MeteoStation > * >(argp1);
      arg1 = const_cast< cmf::atmosphere::MeteoStation * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MeteoStation_y_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->y = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeteoStation_y_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::atmosphere::MeteoStation *arg1 = (cmf::atmosphere::MeteoStation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< cmf::atmosphere::MeteoStation > tempshared1 ;
  std::tr1::shared_ptr< cmf::atmosphere::MeteoStation > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__atmosphere__MeteoStation_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeteoStation_y_get" "', argument " "1"" of type '" "cmf::atmosphere::MeteoStation *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  cmf::atmosphere::MeteoStation > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  cmf::atmosphere::MeteoStation > * >(argp1);
      arg1 = const_cast< cmf::atmosphere::MeteoStation * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  cmf::atmosphere::MeteoStation > * >(argp1);
      arg1 = const_cast< cmf::atmosphere::MeteoStation * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (double) ((arg1)->y);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeteoStation_z_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::atmosphere::MeteoStation *arg1 = (cmf::atmosphere::MeteoStation *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< cmf::atmosphere::MeteoStation > tempshared1 ;
  std::tr1::shared_ptr< cmf::atmosphere::MeteoStation > *smartarg1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"MeteoStation_z_set",2,2,swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__atmosphere__MeteoStation_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeteoStation_z_set" "', argument " "1"" of type '" "cmf::atmosphere::MeteoStation *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  cmf::atmosphere::MeteoStation > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  cmf::atmosphere::MeteoStation > * >(argp1);
      arg1 = const_cast< cmf::atmosphere::MeteoStation * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  cmf::atmosphere::MeteoStation > * >(argp1);
      arg1 = const_cast< cmf::atmosphere::MeteoStation * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MeteoStation_z_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->z = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeteoStation_z_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::atmosphere::MeteoStation *arg1 = (cmf::atmosphere::MeteoStation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< cmf::atmosphere::MeteoStation > tempshared1 ;
  std::tr1::shared_ptr< cmf::atmosphere::MeteoStation > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__atmosphere__MeteoStation_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeteoStation_z_get" "', argument " "1"" of type '" "cmf::atmosphere::MeteoStation *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  cmf::atmosphere::MeteoStation > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  cmf::atmosphere::MeteoStation > * >(argp1);
      arg1 = const_cast< cmf::atmosphere::MeteoStation * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  cmf::atmosphere::MeteoStation > * >(argp1);
      arg1 = const_cast< cmf::atmosphere::MeteoStation * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (double) ((arg1)->z);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeteoStation_Name_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::atmosphere::MeteoStation *arg1 = (cmf::atmosphere::MeteoStation *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< cmf::atmosphere::MeteoStation > tempshared1 ;
  std::tr1::shared_ptr< cmf::atmosphere::MeteoStation > *smartarg1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"MeteoStation_Name_set",2,2,swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__atmosphere__MeteoStation_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeteoStation_Name_set" "', argument " "1"" of type '" "cmf::atmosphere::MeteoStation *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  cmf::atmosphere::MeteoStation > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  cmf::atmosphere::MeteoStation > * >(argp1);
      arg1 = const_cast< cmf::atmosphere::MeteoStation * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  cmf::atmosphere::MeteoStation > * >(argp1);
      arg1 = const_cast< cmf::atmosphere::MeteoStation * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MeteoStation_Name_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MeteoStation_Name_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->Name = *arg2;
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeteoStation_Name_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::atmosphere::MeteoStation *arg1 = (cmf::atmosphere::MeteoStation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< cmf::atmosphere::MeteoStation > tempshared1 ;
  std::tr1::shared_ptr< cmf::atmosphere::MeteoStation > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__atmosphere__MeteoStation_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeteoStation_Name_get" "', argument " "1"" of type '" "cmf::atmosphere::MeteoStation *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  cmf::atmosphere::MeteoStation > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  cmf::atmosphere::MeteoStation > * >(argp1);
      arg1 = const_cast< cmf::atmosphere::MeteoStation * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  cmf::atmosphere::MeteoStation > * >(argp1);
      arg1 = const_cast< cmf::atmosphere::MeteoStation * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (std::string *) & ((arg1)->Name);
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeteoStation_daily_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::atmosphere::MeteoStation *arg1 = (cmf::atmosphere::MeteoStation *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< cmf::atmosphere::MeteoStation > tempshared1 ;
  std::tr1::shared_ptr< cmf::atmosphere::MeteoStation > *smartarg1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"MeteoStation_daily_set",2,2,swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__atmosphere__MeteoStation_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeteoStation_daily_set" "', argument " "1"" of type '" "cmf::atmosphere::MeteoStation *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  cmf::atmosphere::MeteoStation > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  cmf::atmosphere::MeteoStation > * >(argp1);
      arg1 = const_cast< cmf::atmosphere::MeteoStation * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  cmf::atmosphere::MeteoStation > * >(argp1);
      arg1 = const_cast< cmf::atmosphere::MeteoStation * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MeteoStation_daily_set" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  if (arg1) (arg1)->daily = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeteoStation_daily_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::atmosphere::MeteoStation *arg1 = (cmf::atmosphere::MeteoStation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< cmf::atmosphere::MeteoStation > tempshared1 ;
  std::tr1::shared_ptr< cmf::atmosphere::MeteoStation > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__atmosphere__MeteoStation_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeteoStation_daily_get" "', argument " "1"" of type '" "cmf::atmosphere::MeteoStation *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  cmf::atmosphere::MeteoStation > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  cmf::atmosphere::MeteoStation > * >(argp1);
      arg1 = const_cast< cmf::atmosphere::MeteoStation * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  cmf::atmosphere::MeteoStation > * >(argp1);
      arg1 = const_cast< cmf::atmosphere::MeteoStation * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (bool) ((arg1)->daily);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeteoStation_InstrumentHeight_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::atmosphere::MeteoStation *arg1 = (cmf::atmosphere::MeteoStation *) 0 ;
  real arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< cmf::atmosphere::MeteoStation > tempshared1 ;
  std::tr1::shared_ptr< cmf::atmosphere::MeteoStation > *smartarg1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"MeteoStation_InstrumentHeight_set",2,2,swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__atmosphere__MeteoStation_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeteoStation_InstrumentHeight_set" "', argument " "1"" of type '" "cmf::atmosphere::MeteoStation *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  cmf::atmosphere::MeteoStation > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  cmf::atmosphere::MeteoStation > * >(argp1);
      arg1 = const_cast< cmf::atmosphere::MeteoStation * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  cmf::atmosphere::MeteoStation > * >(argp1);
      arg1 = const_cast< cmf::atmosphere::MeteoStation * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MeteoStation_InstrumentHeight_set" "', argument " "2"" of type '" "real""'");
  } 
  arg2 = static_cast< real >(val2);
  if (arg1) (arg1)->InstrumentHeight = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeteoStation_InstrumentHeight_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::atmosphere::MeteoStation *arg1 = (cmf::atmosphere::MeteoStation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< cmf::atmosphere::MeteoStation > tempshared1 ;
  std::tr1::shared_ptr< cmf::atmosphere::MeteoStation > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  real result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__atmosphere__MeteoStation_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeteoStation_InstrumentHeight_get" "', argument " "1"" of type '" "cmf::atmosphere::MeteoStation *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  cmf::atmosphere::MeteoStation > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  cmf::atmosphere::MeteoStation > * >(argp1);
      arg1 = const_cast< cmf::atmosphere::MeteoStation * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  cmf::atmosphere::MeteoStation > * >(argp1);
      arg1 = const_cast< cmf::atmosphere::MeteoStation * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (real) ((arg1)->InstrumentHeight);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_MeteoStation(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::atmosphere::MeteoStation *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< cmf::atmosphere::MeteoStation const > tempshared1 ;
  PyObject *swig_obj[1] ;
  cmf::atmosphere::MeteoStation *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__atmosphere__MeteoStation_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_MeteoStation" "', argument " "1"" of type '" "cmf::atmosphere::MeteoStation const &""'"); 
    }
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_MeteoStation" "', argument " "1"" of type '" "cmf::atmosphere::MeteoStation const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr< const cmf::atmosphere::MeteoStation > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr< const cmf::atmosphere::MeteoStation > * >(argp1);
      arg1 = const_cast< cmf::atmosphere::MeteoStation * >(tempshared1.get());
    } else {
      arg1 = const_cast< cmf::atmosphere::MeteoStation * >(reinterpret_cast< std::tr1::shared_ptr< const cmf::atmosphere::MeteoStation > * >(argp1)->get());
    }
  }
  {
    try {
      result = (cmf::atmosphere::MeteoStation *)new cmf::atmosphere::MeteoStation((cmf::atmosphere::MeteoStation const &)*arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  {
    std::tr1::shared_ptr<  cmf::atmosphere::MeteoStation > *smartresult = result ? new std::tr1::shared_ptr<  cmf::atmosphere::MeteoStation >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__tr1__shared_ptrT_cmf__atmosphere__MeteoStation_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeteoStation_get_data(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::atmosphere::MeteoStation *arg1 = (cmf::atmosphere::MeteoStation *) 0 ;
  cmf::math::Time arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< cmf::atmosphere::MeteoStation const > tempshared1 ;
  std::tr1::shared_ptr< cmf::atmosphere::MeteoStation const > *smartarg1 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  cmf::atmosphere::Weather result;
  
  if (!SWIG_Python_UnpackTuple(args,"MeteoStation_get_data",3,3,swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__atmosphere__MeteoStation_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeteoStation_get_data" "', argument " "1"" of type '" "cmf::atmosphere::MeteoStation const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr< const cmf::atmosphere::MeteoStation > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr< const cmf::atmosphere::MeteoStation > * >(argp1);
      arg1 = const_cast< cmf::atmosphere::MeteoStation * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr< const cmf::atmosphere::MeteoStation > * >(argp1);
      arg1 = const_cast< cmf::atmosphere::MeteoStation * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    arg2 = convert_datetime_to_cmftime(swig_obj[1]);    
  }
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "MeteoStation_get_data" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = ((cmf::atmosphere::MeteoStation const *)arg1)->get_data(arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj((new cmf::atmosphere::Weather(static_cast< const cmf::atmosphere::Weather& >(result))), SWIGTYPE_p_cmf__atmosphere__Weather, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeteoStation_SetSunshineFraction(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::atmosphere::MeteoStation *arg1 = (cmf::atmosphere::MeteoStation *) 0 ;
  cmf::math::timeseries arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< cmf::atmosphere::MeteoStation > tempshared1 ;
  std::tr1::shared_ptr< cmf::atmosphere::MeteoStation > *smartarg1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"MeteoStation_SetSunshineFraction",2,2,swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__atmosphere__MeteoStation_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeteoStation_SetSunshineFraction" "', argument " "1"" of type '" "cmf::atmosphere::MeteoStation *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  cmf::atmosphere::MeteoStation > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  cmf::atmosphere::MeteoStation > * >(argp1);
      arg1 = const_cast< cmf::atmosphere::MeteoStation * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  cmf::atmosphere::MeteoStation > * >(argp1);
      arg1 = const_cast< cmf::atmosphere::MeteoStation * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cmf__math__timeseries,  0  | SWIG_POINTER_IMPLICIT_CONV);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MeteoStation_SetSunshineFraction" "', argument " "2"" of type '" "cmf::math::timeseries""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MeteoStation_SetSunshineFraction" "', argument " "2"" of type '" "cmf::math::timeseries""'");
    } else {
      cmf::math::timeseries * temp = reinterpret_cast< cmf::math::timeseries * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      (arg1)->SetSunshineFraction(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeteoStation_T_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::atmosphere::MeteoStation *arg1 = (cmf::atmosphere::MeteoStation *) 0 ;
  cmf::math::timeseries *arg2 = (cmf::math::timeseries *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< cmf::atmosphere::MeteoStation > tempshared1 ;
  std::tr1::shared_ptr< cmf::atmosphere::MeteoStation > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"MeteoStation_T_set",2,2,swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__atmosphere__MeteoStation_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeteoStation_T_set" "', argument " "1"" of type '" "cmf::atmosphere::MeteoStation *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  cmf::atmosphere::MeteoStation > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  cmf::atmosphere::MeteoStation > * >(argp1);
      arg1 = const_cast< cmf::atmosphere::MeteoStation * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  cmf::atmosphere::MeteoStation > * >(argp1);
      arg1 = const_cast< cmf::atmosphere::MeteoStation * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cmf__math__timeseries, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MeteoStation_T_set" "', argument " "2"" of type '" "cmf::math::timeseries *""'"); 
  }
  arg2 = reinterpret_cast< cmf::math::timeseries * >(argp2);
  if (arg1) (arg1)->T = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeteoStation_T_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::atmosphere::MeteoStation *arg1 = (cmf::atmosphere::MeteoStation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< cmf::atmosphere::MeteoStation > tempshared1 ;
  std::tr1::shared_ptr< cmf::atmosphere::MeteoStation > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  cmf::math::timeseries *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__atmosphere__MeteoStation_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeteoStation_T_get" "', argument " "1"" of type '" "cmf::atmosphere::MeteoStation *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  cmf::atmosphere::MeteoStation > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  cmf::atmosphere::MeteoStation > * >(argp1);
      arg1 = const_cast< cmf::atmosphere::MeteoStation * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  cmf::atmosphere::MeteoStation > * >(argp1);
      arg1 = const_cast< cmf::atmosphere::MeteoStation * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (cmf::math::timeseries *)& ((arg1)->T);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmf__math__timeseries, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeteoStation_Tmax_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::atmosphere::MeteoStation *arg1 = (cmf::atmosphere::MeteoStation *) 0 ;
  cmf::math::timeseries *arg2 = (cmf::math::timeseries *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< cmf::atmosphere::MeteoStation > tempshared1 ;
  std::tr1::shared_ptr< cmf::atmosphere::MeteoStation > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"MeteoStation_Tmax_set",2,2,swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__atmosphere__MeteoStation_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeteoStation_Tmax_set" "', argument " "1"" of type '" "cmf::atmosphere::MeteoStation *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  cmf::atmosphere::MeteoStation > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  cmf::atmosphere::MeteoStation > * >(argp1);
      arg1 = const_cast< cmf::atmosphere::MeteoStation * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  cmf::atmosphere::MeteoStation > * >(argp1);
      arg1 = const_cast< cmf::atmosphere::MeteoStation * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cmf__math__timeseries, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MeteoStation_Tmax_set" "', argument " "2"" of type '" "cmf::math::timeseries *""'"); 
  }
  arg2 = reinterpret_cast< cmf::math::timeseries * >(argp2);
  if (arg1) (arg1)->Tmax = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeteoStation_Tmax_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::atmosphere::MeteoStation *arg1 = (cmf::atmosphere::MeteoStation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< cmf::atmosphere::MeteoStation > tempshared1 ;
  std::tr1::shared_ptr< cmf::atmosphere::MeteoStation > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  cmf::math::timeseries *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__atmosphere__MeteoStation_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeteoStation_Tmax_get" "', argument " "1"" of type '" "cmf::atmosphere::MeteoStation *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  cmf::atmosphere::MeteoStation > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  cmf::atmosphere::MeteoStation > * >(argp1);
      arg1 = const_cast< cmf::atmosphere::MeteoStation * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  cmf::atmosphere::MeteoStation > * >(argp1);
      arg1 = const_cast< cmf::atmosphere::MeteoStation * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (cmf::math::timeseries *)& ((arg1)->Tmax);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmf__math__timeseries, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeteoStation_Tmin_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::atmosphere::MeteoStation *arg1 = (cmf::atmosphere::MeteoStation *) 0 ;
  cmf::math::timeseries *arg2 = (cmf::math::timeseries *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< cmf::atmosphere::MeteoStation > tempshared1 ;
  std::tr1::shared_ptr< cmf::atmosphere::MeteoStation > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"MeteoStation_Tmin_set",2,2,swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__atmosphere__MeteoStation_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeteoStation_Tmin_set" "', argument " "1"" of type '" "cmf::atmosphere::MeteoStation *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  cmf::atmosphere::MeteoStation > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  cmf::atmosphere::MeteoStation > * >(argp1);
      arg1 = const_cast< cmf::atmosphere::MeteoStation * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  cmf::atmosphere::MeteoStation > * >(argp1);
      arg1 = const_cast< cmf::atmosphere::MeteoStation * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cmf__math__timeseries, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MeteoStation_Tmin_set" "', argument " "2"" of type '" "cmf::math::timeseries *""'"); 
  }
  arg2 = reinterpret_cast< cmf::math::timeseries * >(argp2);
  if (arg1) (arg1)->Tmin = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeteoStation_Tmin_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::atmosphere::MeteoStation *arg1 = (cmf::atmosphere::MeteoStation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< cmf::atmosphere::MeteoStation > tempshared1 ;
  std::tr1::shared_ptr< cmf::atmosphere::MeteoStation > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  cmf::math::timeseries *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__atmosphere__MeteoStation_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeteoStation_Tmin_get" "', argument " "1"" of type '" "cmf::atmosphere::MeteoStation *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  cmf::atmosphere::MeteoStation > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  cmf::atmosphere::MeteoStation > * >(argp1);
      arg1 = const_cast< cmf::atmosphere::MeteoStation * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  cmf::atmosphere::MeteoStation > * >(argp1);
      arg1 = const_cast< cmf::atmosphere::MeteoStation * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (cmf::math::timeseries *)& ((arg1)->Tmin);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmf__math__timeseries, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeteoStation_Tground_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::atmosphere::MeteoStation *arg1 = (cmf::atmosphere::MeteoStation *) 0 ;
  cmf::math::timeseries *arg2 = (cmf::math::timeseries *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< cmf::atmosphere::MeteoStation > tempshared1 ;
  std::tr1::shared_ptr< cmf::atmosphere::MeteoStation > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"MeteoStation_Tground_set",2,2,swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__atmosphere__MeteoStation_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeteoStation_Tground_set" "', argument " "1"" of type '" "cmf::atmosphere::MeteoStation *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  cmf::atmosphere::MeteoStation > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  cmf::atmosphere::MeteoStation > * >(argp1);
      arg1 = const_cast< cmf::atmosphere::MeteoStation * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  cmf::atmosphere::MeteoStation > * >(argp1);
      arg1 = const_cast< cmf::atmosphere::MeteoStation * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cmf__math__timeseries, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MeteoStation_Tground_set" "', argument " "2"" of type '" "cmf::math::timeseries *""'"); 
  }
  arg2 = reinterpret_cast< cmf::math::timeseries * >(argp2);
  if (arg1) (arg1)->Tground = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeteoStation_Tground_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::atmosphere::MeteoStation *arg1 = (cmf::atmosphere::MeteoStation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< cmf::atmosphere::MeteoStation > tempshared1 ;
  std::tr1::shared_ptr< cmf::atmosphere::MeteoStation > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  cmf::math::timeseries *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__atmosphere__MeteoStation_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeteoStation_Tground_get" "', argument " "1"" of type '" "cmf::atmosphere::MeteoStation *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  cmf::atmosphere::MeteoStation > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  cmf::atmosphere::MeteoStation > * >(argp1);
      arg1 = const_cast< cmf::atmosphere::MeteoStation * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  cmf::atmosphere::MeteoStation > * >(argp1);
      arg1 = const_cast< cmf::atmosphere::MeteoStation * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (cmf::math::timeseries *)& ((arg1)->Tground);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmf__math__timeseries, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeteoStation_Windspeed_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::atmosphere::MeteoStation *arg1 = (cmf::atmosphere::MeteoStation *) 0 ;
  cmf::math::timeseries *arg2 = (cmf::math::timeseries *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< cmf::atmosphere::MeteoStation > tempshared1 ;
  std::tr1::shared_ptr< cmf::atmosphere::MeteoStation > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"MeteoStation_Windspeed_set",2,2,swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__atmosphere__MeteoStation_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeteoStation_Windspeed_set" "', argument " "1"" of type '" "cmf::atmosphere::MeteoStation *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  cmf::atmosphere::MeteoStation > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  cmf::atmosphere::MeteoStation > * >(argp1);
      arg1 = const_cast< cmf::atmosphere::MeteoStation * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  cmf::atmosphere::MeteoStation > * >(argp1);
      arg1 = const_cast< cmf::atmosphere::MeteoStation * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cmf__math__timeseries, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MeteoStation_Windspeed_set" "', argument " "2"" of type '" "cmf::math::timeseries *""'"); 
  }
  arg2 = reinterpret_cast< cmf::math::timeseries * >(argp2);
  if (arg1) (arg1)->Windspeed = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeteoStation_Windspeed_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::atmosphere::MeteoStation *arg1 = (cmf::atmosphere::MeteoStation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< cmf::atmosphere::MeteoStation > tempshared1 ;
  std::tr1::shared_ptr< cmf::atmosphere::MeteoStation > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  cmf::math::timeseries *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__atmosphere__MeteoStation_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeteoStation_Windspeed_get" "', argument " "1"" of type '" "cmf::atmosphere::MeteoStation *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  cmf::atmosphere::MeteoStation > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  cmf::atmosphere::MeteoStation > * >(argp1);
      arg1 = const_cast< cmf::atmosphere::MeteoStation * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  cmf::atmosphere::MeteoStation > * >(argp1);
      arg1 = const_cast< cmf::atmosphere::MeteoStation * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (cmf::math::timeseries *)& ((arg1)->Windspeed);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmf__math__timeseries, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeteoStation_rHmean_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::atmosphere::MeteoStation *arg1 = (cmf::atmosphere::MeteoStation *) 0 ;
  cmf::math::timeseries *arg2 = (cmf::math::timeseries *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< cmf::atmosphere::MeteoStation > tempshared1 ;
  std::tr1::shared_ptr< cmf::atmosphere::MeteoStation > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"MeteoStation_rHmean_set",2,2,swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__atmosphere__MeteoStation_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeteoStation_rHmean_set" "', argument " "1"" of type '" "cmf::atmosphere::MeteoStation *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  cmf::atmosphere::MeteoStation > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  cmf::atmosphere::MeteoStation > * >(argp1);
      arg1 = const_cast< cmf::atmosphere::MeteoStation * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  cmf::atmosphere::MeteoStation > * >(argp1);
      arg1 = const_cast< cmf::atmosphere::MeteoStation * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cmf__math__timeseries, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MeteoStation_rHmean_set" "', argument " "2"" of type '" "cmf::math::timeseries *""'"); 
  }
  arg2 = reinterpret_cast< cmf::math::timeseries * >(argp2);
  if (arg1) (arg1)->rHmean = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeteoStation_rHmean_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::atmosphere::MeteoStation *arg1 = (cmf::atmosphere::MeteoStation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< cmf::atmosphere::MeteoStation > tempshared1 ;
  std::tr1::shared_ptr< cmf::atmosphere::MeteoStation > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  cmf::math::timeseries *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__atmosphere__MeteoStation_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeteoStation_rHmean_get" "', argument " "1"" of type '" "cmf::atmosphere::MeteoStation *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  cmf::atmosphere::MeteoStation > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  cmf::atmosphere::MeteoStation > * >(argp1);
      arg1 = const_cast< cmf::atmosphere::MeteoStation * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  cmf::atmosphere::MeteoStation > * >(argp1);
      arg1 = const_cast< cmf::atmosphere::MeteoStation * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (cmf::math::timeseries *)& ((arg1)->rHmean);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmf__math__timeseries, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeteoStation_rHmin_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::atmosphere::MeteoStation *arg1 = (cmf::atmosphere::MeteoStation *) 0 ;
  cmf::math::timeseries *arg2 = (cmf::math::timeseries *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< cmf::atmosphere::MeteoStation > tempshared1 ;
  std::tr1::shared_ptr< cmf::atmosphere::MeteoStation > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"MeteoStation_rHmin_set",2,2,swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__atmosphere__MeteoStation_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeteoStation_rHmin_set" "', argument " "1"" of type '" "cmf::atmosphere::MeteoStation *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  cmf::atmosphere::MeteoStation > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  cmf::atmosphere::MeteoStation > * >(argp1);
      arg1 = const_cast< cmf::atmosphere::MeteoStation * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  cmf::atmosphere::MeteoStation > * >(argp1);
      arg1 = const_cast< cmf::atmosphere::MeteoStation * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cmf__math__timeseries, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MeteoStation_rHmin_set" "', argument " "2"" of type '" "cmf::math::timeseries *""'"); 
  }
  arg2 = reinterpret_cast< cmf::math::timeseries * >(argp2);
  if (arg1) (arg1)->rHmin = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeteoStation_rHmin_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::atmosphere::MeteoStation *arg1 = (cmf::atmosphere::MeteoStation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< cmf::atmosphere::MeteoStation > tempshared1 ;
  std::tr1::shared_ptr< cmf::atmosphere::MeteoStation > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  cmf::math::timeseries *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__atmosphere__MeteoStation_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeteoStation_rHmin_get" "', argument " "1"" of type '" "cmf::atmosphere::MeteoStation *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  cmf::atmosphere::MeteoStation > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  cmf::atmosphere::MeteoStation > * >(argp1);
      arg1 = const_cast< cmf::atmosphere::MeteoStation * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  cmf::atmosphere::MeteoStation > * >(argp1);
      arg1 = const_cast< cmf::atmosphere::MeteoStation * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (cmf::math::timeseries *)& ((arg1)->rHmin);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmf__math__timeseries, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeteoStation_rHmax_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::atmosphere::MeteoStation *arg1 = (cmf::atmosphere::MeteoStation *) 0 ;
  cmf::math::timeseries *arg2 = (cmf::math::timeseries *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< cmf::atmosphere::MeteoStation > tempshared1 ;
  std::tr1::shared_ptr< cmf::atmosphere::MeteoStation > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"MeteoStation_rHmax_set",2,2,swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__atmosphere__MeteoStation_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeteoStation_rHmax_set" "', argument " "1"" of type '" "cmf::atmosphere::MeteoStation *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  cmf::atmosphere::MeteoStation > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  cmf::atmosphere::MeteoStation > * >(argp1);
      arg1 = const_cast< cmf::atmosphere::MeteoStation * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  cmf::atmosphere::MeteoStation > * >(argp1);
      arg1 = const_cast< cmf::atmosphere::MeteoStation * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cmf__math__timeseries, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MeteoStation_rHmax_set" "', argument " "2"" of type '" "cmf::math::timeseries *""'"); 
  }
  arg2 = reinterpret_cast< cmf::math::timeseries * >(argp2);
  if (arg1) (arg1)->rHmax = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeteoStation_rHmax_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::atmosphere::MeteoStation *arg1 = (cmf::atmosphere::MeteoStation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< cmf::atmosphere::MeteoStation > tempshared1 ;
  std::tr1::shared_ptr< cmf::atmosphere::MeteoStation > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  cmf::math::timeseries *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__atmosphere__MeteoStation_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeteoStation_rHmax_get" "', argument " "1"" of type '" "cmf::atmosphere::MeteoStation *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  cmf::atmosphere::MeteoStation > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  cmf::atmosphere::MeteoStation > * >(argp1);
      arg1 = const_cast< cmf::atmosphere::MeteoStation * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  cmf::atmosphere::MeteoStation > * >(argp1);
      arg1 = const_cast< cmf::atmosphere::MeteoStation * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (cmf::math::timeseries *)& ((arg1)->rHmax);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmf__math__timeseries, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeteoStation_Tdew_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::atmosphere::MeteoStation *arg1 = (cmf::atmosphere::MeteoStation *) 0 ;
  cmf::math::timeseries *arg2 = (cmf::math::timeseries *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< cmf::atmosphere::MeteoStation > tempshared1 ;
  std::tr1::shared_ptr< cmf::atmosphere::MeteoStation > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"MeteoStation_Tdew_set",2,2,swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__atmosphere__MeteoStation_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeteoStation_Tdew_set" "', argument " "1"" of type '" "cmf::atmosphere::MeteoStation *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  cmf::atmosphere::MeteoStation > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  cmf::atmosphere::MeteoStation > * >(argp1);
      arg1 = const_cast< cmf::atmosphere::MeteoStation * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  cmf::atmosphere::MeteoStation > * >(argp1);
      arg1 = const_cast< cmf::atmosphere::MeteoStation * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cmf__math__timeseries, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MeteoStation_Tdew_set" "', argument " "2"" of type '" "cmf::math::timeseries *""'"); 
  }
  arg2 = reinterpret_cast< cmf::math::timeseries * >(argp2);
  if (arg1) (arg1)->Tdew = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeteoStation_Tdew_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::atmosphere::MeteoStation *arg1 = (cmf::atmosphere::MeteoStation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< cmf::atmosphere::MeteoStation > tempshared1 ;
  std::tr1::shared_ptr< cmf::atmosphere::MeteoStation > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  cmf::math::timeseries *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__atmosphere__MeteoStation_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeteoStation_Tdew_get" "', argument " "1"" of type '" "cmf::atmosphere::MeteoStation *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  cmf::atmosphere::MeteoStation > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  cmf::atmosphere::MeteoStation > * >(argp1);
      arg1 = const_cast< cmf::atmosphere::MeteoStation * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  cmf::atmosphere::MeteoStation > * >(argp1);
      arg1 = const_cast< cmf::atmosphere::MeteoStation * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (cmf::math::timeseries *)& ((arg1)->Tdew);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmf__math__timeseries, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeteoStation_Sunshine_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::atmosphere::MeteoStation *arg1 = (cmf::atmosphere::MeteoStation *) 0 ;
  cmf::math::timeseries *arg2 = (cmf::math::timeseries *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< cmf::atmosphere::MeteoStation > tempshared1 ;
  std::tr1::shared_ptr< cmf::atmosphere::MeteoStation > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"MeteoStation_Sunshine_set",2,2,swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__atmosphere__MeteoStation_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeteoStation_Sunshine_set" "', argument " "1"" of type '" "cmf::atmosphere::MeteoStation *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  cmf::atmosphere::MeteoStation > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  cmf::atmosphere::MeteoStation > * >(argp1);
      arg1 = const_cast< cmf::atmosphere::MeteoStation * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  cmf::atmosphere::MeteoStation > * >(argp1);
      arg1 = const_cast< cmf::atmosphere::MeteoStation * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cmf__math__timeseries, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MeteoStation_Sunshine_set" "', argument " "2"" of type '" "cmf::math::timeseries *""'"); 
  }
  arg2 = reinterpret_cast< cmf::math::timeseries * >(argp2);
  if (arg1) (arg1)->Sunshine = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeteoStation_Sunshine_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::atmosphere::MeteoStation *arg1 = (cmf::atmosphere::MeteoStation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< cmf::atmosphere::MeteoStation > tempshared1 ;
  std::tr1::shared_ptr< cmf::atmosphere::MeteoStation > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  cmf::math::timeseries *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__atmosphere__MeteoStation_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeteoStation_Sunshine_get" "', argument " "1"" of type '" "cmf::atmosphere::MeteoStation *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  cmf::atmosphere::MeteoStation > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  cmf::atmosphere::MeteoStation > * >(argp1);
      arg1 = const_cast< cmf::atmosphere::MeteoStation * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  cmf::atmosphere::MeteoStation > * >(argp1);
      arg1 = const_cast< cmf::atmosphere::MeteoStation * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (cmf::math::timeseries *)& ((arg1)->Sunshine);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmf__math__timeseries, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeteoStation_Rs_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::atmosphere::MeteoStation *arg1 = (cmf::atmosphere::MeteoStation *) 0 ;
  cmf::math::timeseries *arg2 = (cmf::math::timeseries *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< cmf::atmosphere::MeteoStation > tempshared1 ;
  std::tr1::shared_ptr< cmf::atmosphere::MeteoStation > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"MeteoStation_Rs_set",2,2,swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__atmosphere__MeteoStation_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeteoStation_Rs_set" "', argument " "1"" of type '" "cmf::atmosphere::MeteoStation *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  cmf::atmosphere::MeteoStation > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  cmf::atmosphere::MeteoStation > * >(argp1);
      arg1 = const_cast< cmf::atmosphere::MeteoStation * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  cmf::atmosphere::MeteoStation > * >(argp1);
      arg1 = const_cast< cmf::atmosphere::MeteoStation * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cmf__math__timeseries, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MeteoStation_Rs_set" "', argument " "2"" of type '" "cmf::math::timeseries *""'"); 
  }
  arg2 = reinterpret_cast< cmf::math::timeseries * >(argp2);
  if (arg1) (arg1)->Rs = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeteoStation_Rs_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::atmosphere::MeteoStation *arg1 = (cmf::atmosphere::MeteoStation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< cmf::atmosphere::MeteoStation > tempshared1 ;
  std::tr1::shared_ptr< cmf::atmosphere::MeteoStation > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  cmf::math::timeseries *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__atmosphere__MeteoStation_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeteoStation_Rs_get" "', argument " "1"" of type '" "cmf::atmosphere::MeteoStation *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  cmf::atmosphere::MeteoStation > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  cmf::atmosphere::MeteoStation > * >(argp1);
      arg1 = const_cast< cmf::atmosphere::MeteoStation * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  cmf::atmosphere::MeteoStation > * >(argp1);
      arg1 = const_cast< cmf::atmosphere::MeteoStation * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (cmf::math::timeseries *)& ((arg1)->Rs);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmf__math__timeseries, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeteoStation_T_lapse_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::atmosphere::MeteoStation *arg1 = (cmf::atmosphere::MeteoStation *) 0 ;
  cmf::math::timeseries *arg2 = (cmf::math::timeseries *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< cmf::atmosphere::MeteoStation > tempshared1 ;
  std::tr1::shared_ptr< cmf::atmosphere::MeteoStation > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"MeteoStation_T_lapse_set",2,2,swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__atmosphere__MeteoStation_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeteoStation_T_lapse_set" "', argument " "1"" of type '" "cmf::atmosphere::MeteoStation *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  cmf::atmosphere::MeteoStation > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  cmf::atmosphere::MeteoStation > * >(argp1);
      arg1 = const_cast< cmf::atmosphere::MeteoStation * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  cmf::atmosphere::MeteoStation > * >(argp1);
      arg1 = const_cast< cmf::atmosphere::MeteoStation * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cmf__math__timeseries, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MeteoStation_T_lapse_set" "', argument " "2"" of type '" "cmf::math::timeseries *""'"); 
  }
  arg2 = reinterpret_cast< cmf::math::timeseries * >(argp2);
  if (arg1) (arg1)->T_lapse = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeteoStation_T_lapse_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::atmosphere::MeteoStation *arg1 = (cmf::atmosphere::MeteoStation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< cmf::atmosphere::MeteoStation > tempshared1 ;
  std::tr1::shared_ptr< cmf::atmosphere::MeteoStation > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  cmf::math::timeseries *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__atmosphere__MeteoStation_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeteoStation_T_lapse_get" "', argument " "1"" of type '" "cmf::atmosphere::MeteoStation *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  cmf::atmosphere::MeteoStation > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  cmf::atmosphere::MeteoStation > * >(argp1);
      arg1 = const_cast< cmf::atmosphere::MeteoStation * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  cmf::atmosphere::MeteoStation > * >(argp1);
      arg1 = const_cast< cmf::atmosphere::MeteoStation * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (cmf::math::timeseries *)& ((arg1)->T_lapse);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmf__math__timeseries, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_MeteoStation(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::atmosphere::MeteoStation *arg1 = (cmf::atmosphere::MeteoStation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< cmf::atmosphere::MeteoStation > tempshared1 ;
  std::tr1::shared_ptr< cmf::atmosphere::MeteoStation > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__atmosphere__MeteoStation_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_MeteoStation" "', argument " "1"" of type '" "cmf::atmosphere::MeteoStation *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  cmf::atmosphere::MeteoStation > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  cmf::atmosphere::MeteoStation > * >(argp1);
      arg1 = const_cast< cmf::atmosphere::MeteoStation * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  cmf::atmosphere::MeteoStation > * >(argp1);
      arg1 = const_cast< cmf::atmosphere::MeteoStation * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *MeteoStation_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__tr1__shared_ptrT_cmf__atmosphere__MeteoStation_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *MeteoStation_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_MeteoStationReference_get_station(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::atmosphere::MeteoStationReference *arg1 = (cmf::atmosphere::MeteoStationReference *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  cmf::atmosphere::meteo_station_pointer result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__atmosphere__MeteoStationReference, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeteoStationReference_get_station" "', argument " "1"" of type '" "cmf::atmosphere::MeteoStationReference const *""'"); 
  }
  arg1 = reinterpret_cast< cmf::atmosphere::MeteoStationReference * >(argp1);
  {
    try {
      result = ((cmf::atmosphere::MeteoStationReference const *)arg1)->get_station();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  {
    std::tr1::shared_ptr<  cmf::atmosphere::MeteoStation > *smartresult = result ? new std::tr1::shared_ptr<  cmf::atmosphere::MeteoStation >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__tr1__shared_ptrT_cmf__atmosphere__MeteoStation_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_MeteoStationReference__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  cmf::atmosphere::meteo_station_pointer arg1 ;
  cmf::geometry::Locatable *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  cmf::atmosphere::MeteoStationReference *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__atmosphere__MeteoStation_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_MeteoStationReference" "', argument " "1"" of type '" "cmf::atmosphere::meteo_station_pointer""'"); 
    }
    if (argp1) arg1 = *(reinterpret_cast< cmf::atmosphere::meteo_station_pointer * >(argp1));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< cmf::atmosphere::meteo_station_pointer * >(argp1);
  }
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cmf__geometry__Locatable,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_MeteoStationReference" "', argument " "2"" of type '" "cmf::geometry::Locatable const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_MeteoStationReference" "', argument " "2"" of type '" "cmf::geometry::Locatable const &""'"); 
  }
  arg2 = reinterpret_cast< cmf::geometry::Locatable * >(argp2);
  {
    try {
      result = (cmf::atmosphere::MeteoStationReference *)new cmf::atmosphere::MeteoStationReference(arg1,(cmf::geometry::Locatable const &)*arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmf__atmosphere__MeteoStationReference, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_MeteoStationReference__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  cmf::atmosphere::MeteoStationReference *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cmf::atmosphere::MeteoStationReference *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cmf__atmosphere__MeteoStationReference,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_MeteoStationReference" "', argument " "1"" of type '" "cmf::atmosphere::MeteoStationReference const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_MeteoStationReference" "', argument " "1"" of type '" "cmf::atmosphere::MeteoStationReference const &""'"); 
  }
  arg1 = reinterpret_cast< cmf::atmosphere::MeteoStationReference * >(argp1);
  {
    try {
      result = (cmf::atmosphere::MeteoStationReference *)new cmf::atmosphere::MeteoStationReference((cmf::atmosphere::MeteoStationReference const &)*arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmf__atmosphere__MeteoStationReference, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_MeteoStationReference(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"new_MeteoStationReference",0,2,argv))) SWIG_fail;
  --argc;
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (argc == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_cmf__atmosphere__MeteoStationReference, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (argc == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__atmosphere__MeteoStation_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_cmf__geometry__Locatable, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      return _wrap_new_MeteoStationReference__SWIG_1(self, argc, argv);
    case 2:
      return _wrap_new_MeteoStationReference__SWIG_0(self, argc, argv);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_MeteoStationReference'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    cmf::atmosphere::MeteoStationReference(cmf::atmosphere::meteo_station_pointer,cmf::geometry::Locatable const &)\n"
    "    cmf::atmosphere::MeteoStationReference(cmf::atmosphere::MeteoStationReference const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeteoStationReference_copy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::atmosphere::MeteoStationReference *arg1 = (cmf::atmosphere::MeteoStationReference *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  cmf::atmosphere::MeteoStationReference *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__atmosphere__MeteoStationReference, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeteoStationReference_copy" "', argument " "1"" of type '" "cmf::atmosphere::MeteoStationReference const *""'"); 
  }
  arg1 = reinterpret_cast< cmf::atmosphere::MeteoStationReference * >(argp1);
  {
    try {
      result = (cmf::atmosphere::MeteoStationReference *)((cmf::atmosphere::MeteoStationReference const *)arg1)->copy();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmf__atmosphere__MeteoStationReference, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_MeteoStationReference(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::atmosphere::MeteoStationReference *arg1 = (cmf::atmosphere::MeteoStationReference *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__atmosphere__MeteoStationReference, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_MeteoStationReference" "', argument " "1"" of type '" "cmf::atmosphere::MeteoStationReference *""'"); 
  }
  arg1 = reinterpret_cast< cmf::atmosphere::MeteoStationReference * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *MeteoStationReference_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_cmf__atmosphere__MeteoStationReference, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *MeteoStationReference_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_MeteoStationList___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::atmosphere::MeteoStationList *arg1 = (cmf::atmosphere::MeteoStationList *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__atmosphere__MeteoStationList, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeteoStationList___len__" "', argument " "1"" of type '" "cmf::atmosphere::MeteoStationList const *""'"); 
  }
  arg1 = reinterpret_cast< cmf::atmosphere::MeteoStationList * >(argp1);
  {
    try {
      result = (int)((cmf::atmosphere::MeteoStationList const *)arg1)->size();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeteoStationList___getitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  cmf::atmosphere::MeteoStationList *arg1 = (cmf::atmosphere::MeteoStationList *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  cmf::atmosphere::meteo_station_pointer result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__atmosphere__MeteoStationList, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeteoStationList___getitem__" "', argument " "1"" of type '" "cmf::atmosphere::MeteoStationList const *""'"); 
  }
  arg1 = reinterpret_cast< cmf::atmosphere::MeteoStationList * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MeteoStationList___getitem__" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = ((cmf::atmosphere::MeteoStationList const *)arg1)->operator [](arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  {
    std::tr1::shared_ptr<  cmf::atmosphere::MeteoStation > *smartresult = result ? new std::tr1::shared_ptr<  cmf::atmosphere::MeteoStation >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__tr1__shared_ptrT_cmf__atmosphere__MeteoStation_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeteoStationList___getitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  cmf::atmosphere::MeteoStationList *arg1 = (cmf::atmosphere::MeteoStationList *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  cmf::atmosphere::meteo_station_pointer result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__atmosphere__MeteoStationList, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeteoStationList___getitem__" "', argument " "1"" of type '" "cmf::atmosphere::MeteoStationList const *""'"); 
  }
  arg1 = reinterpret_cast< cmf::atmosphere::MeteoStationList * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MeteoStationList___getitem__" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MeteoStationList___getitem__" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = ((cmf::atmosphere::MeteoStationList const *)arg1)->operator []((std::string const &)*arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  {
    std::tr1::shared_ptr<  cmf::atmosphere::MeteoStation > *smartresult = result ? new std::tr1::shared_ptr<  cmf::atmosphere::MeteoStation >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__tr1__shared_ptrT_cmf__atmosphere__MeteoStation_t, SWIG_POINTER_OWN);
  }
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeteoStationList___getitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"MeteoStationList___getitem__",0,2,argv))) SWIG_fail;
  --argc;
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (argc == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_cmf__atmosphere__MeteoStationList, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int(argv[1], NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (argc == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_cmf__atmosphere__MeteoStationList, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      return _wrap_MeteoStationList___getitem____SWIG_0(self, argc, argv);
    case 2:
      return _wrap_MeteoStationList___getitem____SWIG_1(self, argc, argv);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'MeteoStationList___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    operator [](cmf::atmosphere::MeteoStationList const *,int)\n"
    "    operator [](cmf::atmosphere::MeteoStationList const *,std::string const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeteoStationList_calculate_Temp_lapse(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::atmosphere::MeteoStationList *arg1 = (cmf::atmosphere::MeteoStationList *) 0 ;
  cmf::math::Time arg2 ;
  cmf::math::Time arg3 ;
  cmf::math::Time arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[4] ;
  double result;
  
  if (!SWIG_Python_UnpackTuple(args,"MeteoStationList_calculate_Temp_lapse",4,4,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__atmosphere__MeteoStationList, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeteoStationList_calculate_Temp_lapse" "', argument " "1"" of type '" "cmf::atmosphere::MeteoStationList *""'"); 
  }
  arg1 = reinterpret_cast< cmf::atmosphere::MeteoStationList * >(argp1);
  {
    arg2 = convert_datetime_to_cmftime(swig_obj[1]);    
  }
  {
    arg3 = convert_datetime_to_cmftime(swig_obj[2]);    
  }
  {
    arg4 = convert_datetime_to_cmftime(swig_obj[3]);    
  }
  {
    try {
      result = (double)(arg1)->calculate_Temp_lapse(arg2,arg3,arg4);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeteoStationList_add_station__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  cmf::atmosphere::MeteoStationList *arg1 = (cmf::atmosphere::MeteoStationList *) 0 ;
  std::string arg2 ;
  double arg3 = (double) 51 ;
  double arg4 = (double) 8 ;
  double arg5 = (double) 1 ;
  double arg6 = (double) 0 ;
  cmf::math::Time arg7 = (cmf::math::Time) cmf::math::Time(1,1,2001) ;
  cmf::math::Time arg8 = (cmf::math::Time) cmf::math::day ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  cmf::atmosphere::meteo_station_pointer result;
  
  if ((nobjs < 2) || (nobjs > 8)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__atmosphere__MeteoStationList, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeteoStationList_add_station" "', argument " "1"" of type '" "cmf::atmosphere::MeteoStationList *""'"); 
  }
  arg1 = reinterpret_cast< cmf::atmosphere::MeteoStationList * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "MeteoStationList_add_station" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  if (swig_obj[2]) {
    ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "MeteoStationList_add_station" "', argument " "3"" of type '" "double""'");
    } 
    arg3 = static_cast< double >(val3);
  }
  if (swig_obj[3]) {
    ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "MeteoStationList_add_station" "', argument " "4"" of type '" "double""'");
    } 
    arg4 = static_cast< double >(val4);
  }
  if (swig_obj[4]) {
    ecode5 = SWIG_AsVal_double(swig_obj[4], &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "MeteoStationList_add_station" "', argument " "5"" of type '" "double""'");
    } 
    arg5 = static_cast< double >(val5);
  }
  if (swig_obj[5]) {
    ecode6 = SWIG_AsVal_double(swig_obj[5], &val6);
    if (!SWIG_IsOK(ecode6)) {
      SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "MeteoStationList_add_station" "', argument " "6"" of type '" "double""'");
    } 
    arg6 = static_cast< double >(val6);
  }
  if (swig_obj[6]) {
    {
      arg7 = convert_datetime_to_cmftime(swig_obj[6]);    
    }
  }
  if (swig_obj[7]) {
    {
      arg8 = convert_datetime_to_cmftime(swig_obj[7]);    
    }
  }
  {
    try {
      result = (arg1)->add_station(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  {
    std::tr1::shared_ptr<  cmf::atmosphere::MeteoStation > *smartresult = result ? new std::tr1::shared_ptr<  cmf::atmosphere::MeteoStation >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__tr1__shared_ptrT_cmf__atmosphere__MeteoStation_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeteoStationList_add_station__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  cmf::atmosphere::MeteoStationList *arg1 = (cmf::atmosphere::MeteoStationList *) 0 ;
  std::string arg2 ;
  cmf::geometry::point arg3 ;
  double arg4 = (double) 51 ;
  double arg5 = (double) 8 ;
  double arg6 = (double) 1 ;
  cmf::math::Time arg7 = (cmf::math::Time) cmf::math::Time(1,1,2001) ;
  cmf::math::Time arg8 = (cmf::math::Time) cmf::math::day ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  cmf::atmosphere::meteo_station_pointer result;
  
  if ((nobjs < 3) || (nobjs > 8)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__atmosphere__MeteoStationList, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeteoStationList_add_station" "', argument " "1"" of type '" "cmf::atmosphere::MeteoStationList *""'"); 
  }
  arg1 = reinterpret_cast< cmf::atmosphere::MeteoStationList * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "MeteoStationList_add_station" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    cmf::geometry::point p;
    if (((!convert_xyz_to_point(swig_obj[2],p)) || !convert_seq_to_point(swig_obj[2],p)))
    {
      PyErr_SetString(PyExc_ValueError,"The object to convert needs to be either a sequence of length 2 or 3 or an object exposing an x and y attribute of type float(z is used if present)");
    }
    arg3=p;
  }
  if (swig_obj[3]) {
    ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "MeteoStationList_add_station" "', argument " "4"" of type '" "double""'");
    } 
    arg4 = static_cast< double >(val4);
  }
  if (swig_obj[4]) {
    ecode5 = SWIG_AsVal_double(swig_obj[4], &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "MeteoStationList_add_station" "', argument " "5"" of type '" "double""'");
    } 
    arg5 = static_cast< double >(val5);
  }
  if (swig_obj[5]) {
    ecode6 = SWIG_AsVal_double(swig_obj[5], &val6);
    if (!SWIG_IsOK(ecode6)) {
      SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "MeteoStationList_add_station" "', argument " "6"" of type '" "double""'");
    } 
    arg6 = static_cast< double >(val6);
  }
  if (swig_obj[6]) {
    {
      arg7 = convert_datetime_to_cmftime(swig_obj[6]);    
    }
  }
  if (swig_obj[7]) {
    {
      arg8 = convert_datetime_to_cmftime(swig_obj[7]);    
    }
  }
  {
    try {
      result = (arg1)->add_station(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  {
    std::tr1::shared_ptr<  cmf::atmosphere::MeteoStation > *smartresult = result ? new std::tr1::shared_ptr<  cmf::atmosphere::MeteoStation >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__tr1__shared_ptrT_cmf__atmosphere__MeteoStation_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeteoStationList_add_station(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[9];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"MeteoStationList_add_station",0,8,argv))) SWIG_fail;
  --argc;
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if ((argc >= 2) && (argc <= 8)) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_cmf__atmosphere__MeteoStationList, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (argc > 2) {
        {
          {
            int res = SWIG_AsVal_double(argv[2], NULL);
            _v = SWIG_CheckState(res);
          }
        }
        if (!_v) goto check_1;
        _ranki += _v*_pi;
        _rankm += _pi;
        _pi *= SWIG_MAXCASTRANK;
        if (argc > 3) {
          {
            {
              int res = SWIG_AsVal_double(argv[3], NULL);
              _v = SWIG_CheckState(res);
            }
          }
          if (!_v) goto check_1;
          _ranki += _v*_pi;
          _rankm += _pi;
          _pi *= SWIG_MAXCASTRANK;
          if (argc > 4) {
            {
              {
                int res = SWIG_AsVal_double(argv[4], NULL);
                _v = SWIG_CheckState(res);
              }
            }
            if (!_v) goto check_1;
            _ranki += _v*_pi;
            _rankm += _pi;
            _pi *= SWIG_MAXCASTRANK;
            if (argc > 5) {
              {
                {
                  int res = SWIG_AsVal_double(argv[5], NULL);
                  _v = SWIG_CheckState(res);
                }
              }
              if (!_v) goto check_1;
              _ranki += _v*_pi;
              _rankm += _pi;
              _pi *= SWIG_MAXCASTRANK;
              if (argc > 6) {
                {
                  {
                    void * pt;    
                    int res=SWIG_ConvertPtr(argv[6],&pt,SWIGTYPE_p_cmf__math__Time,0);
                    _v=SWIG_IsOK(res) || PyDateTime_Check(argv[6]) || PyDelta_Check(argv[6]) || PyDate_Check(argv[6]);
                  }
                }
                if (!_v) goto check_1;
                _ranki += _v*_pi;
                _rankm += _pi;
                _pi *= SWIG_MAXCASTRANK;
                if (argc > 7) {
                  {
                    {
                      void * pt;    
                      int res=SWIG_ConvertPtr(argv[7],&pt,SWIGTYPE_p_cmf__math__Time,0);
                      _v=SWIG_IsOK(res) || PyDateTime_Check(argv[7]) || PyDelta_Check(argv[7]) || PyDate_Check(argv[7]);
                    }
                  }
                  if (!_v) goto check_1;
                  _ranki += _v*_pi;
                  _rankm += _pi;
                  _pi *= SWIG_MAXCASTRANK;
                }
              }
            }
          }
        }
      }
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if ((argc >= 3) && (argc <= 8)) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_cmf__atmosphere__MeteoStationList, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          cmf::geometry::point p;
          _v=convert_seq_to_point(argv[2],p) || convert_xyz_to_point(argv[2],p);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (argc > 3) {
        {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
        }
        if (!_v) goto check_2;
        _ranki += _v*_pi;
        _rankm += _pi;
        _pi *= SWIG_MAXCASTRANK;
        if (argc > 4) {
          {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
          }
          if (!_v) goto check_2;
          _ranki += _v*_pi;
          _rankm += _pi;
          _pi *= SWIG_MAXCASTRANK;
          if (argc > 5) {
            {
              {
                int res = SWIG_AsVal_double(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
            }
            if (!_v) goto check_2;
            _ranki += _v*_pi;
            _rankm += _pi;
            _pi *= SWIG_MAXCASTRANK;
            if (argc > 6) {
              {
                {
                  void * pt;    
                  int res=SWIG_ConvertPtr(argv[6],&pt,SWIGTYPE_p_cmf__math__Time,0);
                  _v=SWIG_IsOK(res) || PyDateTime_Check(argv[6]) || PyDelta_Check(argv[6]) || PyDate_Check(argv[6]);
                }
              }
              if (!_v) goto check_2;
              _ranki += _v*_pi;
              _rankm += _pi;
              _pi *= SWIG_MAXCASTRANK;
              if (argc > 7) {
                {
                  {
                    void * pt;    
                    int res=SWIG_ConvertPtr(argv[7],&pt,SWIGTYPE_p_cmf__math__Time,0);
                    _v=SWIG_IsOK(res) || PyDateTime_Check(argv[7]) || PyDelta_Check(argv[7]) || PyDate_Check(argv[7]);
                  }
                }
                if (!_v) goto check_2;
                _ranki += _v*_pi;
                _rankm += _pi;
                _pi *= SWIG_MAXCASTRANK;
              }
            }
          }
        }
      }
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      return _wrap_MeteoStationList_add_station__SWIG_0(self, argc, argv);
    case 2:
      return _wrap_MeteoStationList_add_station__SWIG_1(self, argc, argv);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'MeteoStationList_add_station'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    add_station(cmf::atmosphere::MeteoStationList *,std::string,double,double,double,double,cmf::math::Time,cmf::math::Time)\n"
    "    add_station(cmf::atmosphere::MeteoStationList *,std::string,cmf::geometry::point,double,double,double,cmf::math::Time,cmf::math::Time)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeteoStationList_remove_station(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::atmosphere::MeteoStationList *arg1 = (cmf::atmosphere::MeteoStationList *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args,"MeteoStationList_remove_station",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__atmosphere__MeteoStationList, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeteoStationList_remove_station" "', argument " "1"" of type '" "cmf::atmosphere::MeteoStationList *""'"); 
  }
  arg1 = reinterpret_cast< cmf::atmosphere::MeteoStationList * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MeteoStationList_remove_station" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (int)(arg1)->remove_station(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_MeteoStationList__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  cmf::atmosphere::MeteoStationList *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  {
    try {
      result = (cmf::atmosphere::MeteoStationList *)new cmf::atmosphere::MeteoStationList();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmf__atmosphere__MeteoStationList, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_MeteoStationList__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  cmf::atmosphere::MeteoStationList *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cmf::atmosphere::MeteoStationList *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cmf__atmosphere__MeteoStationList,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_MeteoStationList" "', argument " "1"" of type '" "cmf::atmosphere::MeteoStationList const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_MeteoStationList" "', argument " "1"" of type '" "cmf::atmosphere::MeteoStationList const &""'"); 
  }
  arg1 = reinterpret_cast< cmf::atmosphere::MeteoStationList * >(argp1);
  {
    try {
      result = (cmf::atmosphere::MeteoStationList *)new cmf::atmosphere::MeteoStationList((cmf::atmosphere::MeteoStationList const &)*arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmf__atmosphere__MeteoStationList, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_MeteoStationList(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"new_MeteoStationList",0,1,argv))) SWIG_fail;
  --argc;
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (argc == 0) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
    if (argc == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_cmf__atmosphere__MeteoStationList, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      return _wrap_new_MeteoStationList__SWIG_0(self, argc, argv);
    case 2:
      return _wrap_new_MeteoStationList__SWIG_1(self, argc, argv);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_MeteoStationList'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    cmf::atmosphere::MeteoStationList()\n"
    "    cmf::atmosphere::MeteoStationList(cmf::atmosphere::MeteoStationList const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeteoStationList_reference_to_nearest(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::atmosphere::MeteoStationList *arg1 = (cmf::atmosphere::MeteoStationList *) 0 ;
  cmf::geometry::Locatable *arg2 = 0 ;
  double arg3 = (double) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  SwigValueWrapper< cmf::atmosphere::MeteoStationReference > result;
  
  if (!SWIG_Python_UnpackTuple(args,"MeteoStationList_reference_to_nearest",2,3,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__atmosphere__MeteoStationList, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeteoStationList_reference_to_nearest" "', argument " "1"" of type '" "cmf::atmosphere::MeteoStationList const *""'"); 
  }
  arg1 = reinterpret_cast< cmf::atmosphere::MeteoStationList * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cmf__geometry__Locatable,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MeteoStationList_reference_to_nearest" "', argument " "2"" of type '" "cmf::geometry::Locatable const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MeteoStationList_reference_to_nearest" "', argument " "2"" of type '" "cmf::geometry::Locatable const &""'"); 
  }
  arg2 = reinterpret_cast< cmf::geometry::Locatable * >(argp2);
  if (swig_obj[2]) {
    ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "MeteoStationList_reference_to_nearest" "', argument " "3"" of type '" "double""'");
    } 
    arg3 = static_cast< double >(val3);
  }
  {
    try {
      result = ((cmf::atmosphere::MeteoStationList const *)arg1)->reference_to_nearest((cmf::geometry::Locatable const &)*arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj((new cmf::atmosphere::MeteoStationReference(static_cast< const cmf::atmosphere::MeteoStationReference& >(result))), SWIGTYPE_p_cmf__atmosphere__MeteoStationReference, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_MeteoStationList(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::atmosphere::MeteoStationList *arg1 = (cmf::atmosphere::MeteoStationList *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__atmosphere__MeteoStationList, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_MeteoStationList" "', argument " "1"" of type '" "cmf::atmosphere::MeteoStationList *""'"); 
  }
  arg1 = reinterpret_cast< cmf::atmosphere::MeteoStationList * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *MeteoStationList_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_cmf__atmosphere__MeteoStationList, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *MeteoStationList_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_RainCloud_get_cell(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::atmosphere::RainCloud *arg1 = (cmf::atmosphere::RainCloud *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< cmf::atmosphere::RainCloud const > tempshared1 ;
  std::tr1::shared_ptr< cmf::atmosphere::RainCloud const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  cmf::upslope::Cell *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__atmosphere__RainCloud_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RainCloud_get_cell" "', argument " "1"" of type '" "cmf::atmosphere::RainCloud const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr< const cmf::atmosphere::RainCloud > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr< const cmf::atmosphere::RainCloud > * >(argp1);
      arg1 = const_cast< cmf::atmosphere::RainCloud * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr< const cmf::atmosphere::RainCloud > * >(argp1);
      arg1 = const_cast< cmf::atmosphere::RainCloud * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      result = (cmf::upslope::Cell *) &((cmf::atmosphere::RainCloud const *)arg1)->get_cell();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmf__upslope__Cell, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RainCloud_SWIGSharedPtrUpcast(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::tr1::shared_ptr< cmf::atmosphere::RainCloud > arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::tr1::shared_ptr< cmf::water::NeumannBoundary > result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__atmosphere__RainCloud_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RainCloud_SWIGSharedPtrUpcast" "', argument " "1"" of type '" "std::tr1::shared_ptr< cmf::atmosphere::RainCloud >""'"); 
    }
    if (argp1) arg1 = *(reinterpret_cast< std::tr1::shared_ptr< cmf::atmosphere::RainCloud > * >(argp1));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< std::tr1::shared_ptr< cmf::atmosphere::RainCloud > * >(argp1);
  }
  {
    try {
      result = cmf_atmosphere_RainCloud_SWIGSharedPtrUpcast(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  {
    std::tr1::shared_ptr<  cmf::water::NeumannBoundary > *smartresult = result ? new std::tr1::shared_ptr<  cmf::water::NeumannBoundary >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__tr1__shared_ptrT_cmf__water__NeumannBoundary_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_RainCloud(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::atmosphere::RainCloud *arg1 = (cmf::atmosphere::RainCloud *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< cmf::atmosphere::RainCloud > tempshared1 ;
  std::tr1::shared_ptr< cmf::atmosphere::RainCloud > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__atmosphere__RainCloud_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_RainCloud" "', argument " "1"" of type '" "cmf::atmosphere::RainCloud *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  cmf::atmosphere::RainCloud > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  cmf::atmosphere::RainCloud > * >(argp1);
      arg1 = const_cast< cmf::atmosphere::RainCloud * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  cmf::atmosphere::RainCloud > * >(argp1);
      arg1 = const_cast< cmf::atmosphere::RainCloud * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *RainCloud_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__tr1__shared_ptrT_cmf__atmosphere__RainCloud_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_Vegetation_LAI_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::vegetation::Vegetation *arg1 = (cmf::upslope::vegetation::Vegetation *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"Vegetation_LAI_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__upslope__vegetation__Vegetation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vegetation_LAI_set" "', argument " "1"" of type '" "cmf::upslope::vegetation::Vegetation *""'"); 
  }
  arg1 = reinterpret_cast< cmf::upslope::vegetation::Vegetation * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Vegetation_LAI_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->LAI = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vegetation_LAI_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::vegetation::Vegetation *arg1 = (cmf::upslope::vegetation::Vegetation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__upslope__vegetation__Vegetation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vegetation_LAI_get" "', argument " "1"" of type '" "cmf::upslope::vegetation::Vegetation *""'"); 
  }
  arg1 = reinterpret_cast< cmf::upslope::vegetation::Vegetation * >(argp1);
  result = (double) ((arg1)->LAI);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vegetation_Height_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::vegetation::Vegetation *arg1 = (cmf::upslope::vegetation::Vegetation *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"Vegetation_Height_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__upslope__vegetation__Vegetation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vegetation_Height_set" "', argument " "1"" of type '" "cmf::upslope::vegetation::Vegetation *""'"); 
  }
  arg1 = reinterpret_cast< cmf::upslope::vegetation::Vegetation * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Vegetation_Height_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->Height = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vegetation_Height_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::vegetation::Vegetation *arg1 = (cmf::upslope::vegetation::Vegetation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__upslope__vegetation__Vegetation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vegetation_Height_get" "', argument " "1"" of type '" "cmf::upslope::vegetation::Vegetation *""'"); 
  }
  arg1 = reinterpret_cast< cmf::upslope::vegetation::Vegetation * >(argp1);
  result = (double) ((arg1)->Height);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vegetation_albedo_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::vegetation::Vegetation *arg1 = (cmf::upslope::vegetation::Vegetation *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"Vegetation_albedo_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__upslope__vegetation__Vegetation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vegetation_albedo_set" "', argument " "1"" of type '" "cmf::upslope::vegetation::Vegetation *""'"); 
  }
  arg1 = reinterpret_cast< cmf::upslope::vegetation::Vegetation * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Vegetation_albedo_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->albedo = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vegetation_albedo_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::vegetation::Vegetation *arg1 = (cmf::upslope::vegetation::Vegetation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__upslope__vegetation__Vegetation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vegetation_albedo_get" "', argument " "1"" of type '" "cmf::upslope::vegetation::Vegetation *""'"); 
  }
  arg1 = reinterpret_cast< cmf::upslope::vegetation::Vegetation * >(argp1);
  result = (double) ((arg1)->albedo);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vegetation_CanopyCapacityPerLAI_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::vegetation::Vegetation *arg1 = (cmf::upslope::vegetation::Vegetation *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"Vegetation_CanopyCapacityPerLAI_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__upslope__vegetation__Vegetation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vegetation_CanopyCapacityPerLAI_set" "', argument " "1"" of type '" "cmf::upslope::vegetation::Vegetation *""'"); 
  }
  arg1 = reinterpret_cast< cmf::upslope::vegetation::Vegetation * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Vegetation_CanopyCapacityPerLAI_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->CanopyCapacityPerLAI = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vegetation_CanopyCapacityPerLAI_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::vegetation::Vegetation *arg1 = (cmf::upslope::vegetation::Vegetation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__upslope__vegetation__Vegetation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vegetation_CanopyCapacityPerLAI_get" "', argument " "1"" of type '" "cmf::upslope::vegetation::Vegetation *""'"); 
  }
  arg1 = reinterpret_cast< cmf::upslope::vegetation::Vegetation * >(argp1);
  result = (double) ((arg1)->CanopyCapacityPerLAI);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vegetation_RootDepth_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::vegetation::Vegetation *arg1 = (cmf::upslope::vegetation::Vegetation *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"Vegetation_RootDepth_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__upslope__vegetation__Vegetation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vegetation_RootDepth_set" "', argument " "1"" of type '" "cmf::upslope::vegetation::Vegetation *""'"); 
  }
  arg1 = reinterpret_cast< cmf::upslope::vegetation::Vegetation * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Vegetation_RootDepth_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->RootDepth = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vegetation_RootDepth_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::vegetation::Vegetation *arg1 = (cmf::upslope::vegetation::Vegetation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__upslope__vegetation__Vegetation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vegetation_RootDepth_get" "', argument " "1"" of type '" "cmf::upslope::vegetation::Vegetation *""'"); 
  }
  arg1 = reinterpret_cast< cmf::upslope::vegetation::Vegetation * >(argp1);
  result = (double) ((arg1)->RootDepth);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vegetation_fraction_at_rootdepth_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::vegetation::Vegetation *arg1 = (cmf::upslope::vegetation::Vegetation *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"Vegetation_fraction_at_rootdepth_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__upslope__vegetation__Vegetation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vegetation_fraction_at_rootdepth_set" "', argument " "1"" of type '" "cmf::upslope::vegetation::Vegetation *""'"); 
  }
  arg1 = reinterpret_cast< cmf::upslope::vegetation::Vegetation * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Vegetation_fraction_at_rootdepth_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->fraction_at_rootdepth = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vegetation_fraction_at_rootdepth_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::vegetation::Vegetation *arg1 = (cmf::upslope::vegetation::Vegetation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__upslope__vegetation__Vegetation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vegetation_fraction_at_rootdepth_get" "', argument " "1"" of type '" "cmf::upslope::vegetation::Vegetation *""'"); 
  }
  arg1 = reinterpret_cast< cmf::upslope::vegetation::Vegetation * >(argp1);
  result = (double) ((arg1)->fraction_at_rootdepth);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vegetation_StomatalResistance_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::vegetation::Vegetation *arg1 = (cmf::upslope::vegetation::Vegetation *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"Vegetation_StomatalResistance_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__upslope__vegetation__Vegetation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vegetation_StomatalResistance_set" "', argument " "1"" of type '" "cmf::upslope::vegetation::Vegetation *""'"); 
  }
  arg1 = reinterpret_cast< cmf::upslope::vegetation::Vegetation * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Vegetation_StomatalResistance_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->StomatalResistance = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vegetation_StomatalResistance_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::vegetation::Vegetation *arg1 = (cmf::upslope::vegetation::Vegetation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__upslope__vegetation__Vegetation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vegetation_StomatalResistance_get" "', argument " "1"" of type '" "cmf::upslope::vegetation::Vegetation *""'"); 
  }
  arg1 = reinterpret_cast< cmf::upslope::vegetation::Vegetation * >(argp1);
  result = (double) ((arg1)->StomatalResistance);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vegetation_CanopyClosure_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::vegetation::Vegetation *arg1 = (cmf::upslope::vegetation::Vegetation *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"Vegetation_CanopyClosure_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__upslope__vegetation__Vegetation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vegetation_CanopyClosure_set" "', argument " "1"" of type '" "cmf::upslope::vegetation::Vegetation *""'"); 
  }
  arg1 = reinterpret_cast< cmf::upslope::vegetation::Vegetation * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Vegetation_CanopyClosure_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->CanopyClosure = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vegetation_CanopyClosure_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::vegetation::Vegetation *arg1 = (cmf::upslope::vegetation::Vegetation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__upslope__vegetation__Vegetation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vegetation_CanopyClosure_get" "', argument " "1"" of type '" "cmf::upslope::vegetation::Vegetation *""'"); 
  }
  arg1 = reinterpret_cast< cmf::upslope::vegetation::Vegetation * >(argp1);
  result = (double) ((arg1)->CanopyClosure);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vegetation_LeafWidth_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::vegetation::Vegetation *arg1 = (cmf::upslope::vegetation::Vegetation *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"Vegetation_LeafWidth_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__upslope__vegetation__Vegetation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vegetation_LeafWidth_set" "', argument " "1"" of type '" "cmf::upslope::vegetation::Vegetation *""'"); 
  }
  arg1 = reinterpret_cast< cmf::upslope::vegetation::Vegetation * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Vegetation_LeafWidth_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->LeafWidth = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vegetation_LeafWidth_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::vegetation::Vegetation *arg1 = (cmf::upslope::vegetation::Vegetation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__upslope__vegetation__Vegetation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vegetation_LeafWidth_get" "', argument " "1"" of type '" "cmf::upslope::vegetation::Vegetation *""'"); 
  }
  arg1 = reinterpret_cast< cmf::upslope::vegetation::Vegetation * >(argp1);
  result = (double) ((arg1)->LeafWidth);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vegetation_RootFraction(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::vegetation::Vegetation *arg1 = (cmf::upslope::vegetation::Vegetation *) 0 ;
  double arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  double result;
  
  if (!SWIG_Python_UnpackTuple(args,"Vegetation_RootFraction",3,3,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__upslope__vegetation__Vegetation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vegetation_RootFraction" "', argument " "1"" of type '" "cmf::upslope::vegetation::Vegetation const *""'"); 
  }
  arg1 = reinterpret_cast< cmf::upslope::vegetation::Vegetation * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Vegetation_RootFraction" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Vegetation_RootFraction" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (double)((cmf::upslope::vegetation::Vegetation const *)arg1)->RootFraction(arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Vegetation(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 = (double) 2.88 ;
  double arg2 = (double) 0.12 ;
  double arg3 = (double) 0.25 ;
  double arg4 = (double) 100 ;
  double arg5 = (double) 0.23 ;
  double arg6 = (double) 1 ;
  double arg7 = (double) 0.1 ;
  double arg8 = (double) 1.0 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  double val7 ;
  int ecode7 = 0 ;
  double val8 ;
  int ecode8 = 0 ;
  PyObject *swig_obj[8] ;
  cmf::upslope::vegetation::Vegetation *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args,"new_Vegetation",0,8,swig_obj)) SWIG_fail;
  if (swig_obj[0]) {
    ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Vegetation" "', argument " "1"" of type '" "double""'");
    } 
    arg1 = static_cast< double >(val1);
  }
  if (swig_obj[1]) {
    ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Vegetation" "', argument " "2"" of type '" "double""'");
    } 
    arg2 = static_cast< double >(val2);
  }
  if (swig_obj[2]) {
    ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_Vegetation" "', argument " "3"" of type '" "double""'");
    } 
    arg3 = static_cast< double >(val3);
  }
  if (swig_obj[3]) {
    ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_Vegetation" "', argument " "4"" of type '" "double""'");
    } 
    arg4 = static_cast< double >(val4);
  }
  if (swig_obj[4]) {
    ecode5 = SWIG_AsVal_double(swig_obj[4], &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_Vegetation" "', argument " "5"" of type '" "double""'");
    } 
    arg5 = static_cast< double >(val5);
  }
  if (swig_obj[5]) {
    ecode6 = SWIG_AsVal_double(swig_obj[5], &val6);
    if (!SWIG_IsOK(ecode6)) {
      SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "new_Vegetation" "', argument " "6"" of type '" "double""'");
    } 
    arg6 = static_cast< double >(val6);
  }
  if (swig_obj[6]) {
    ecode7 = SWIG_AsVal_double(swig_obj[6], &val7);
    if (!SWIG_IsOK(ecode7)) {
      SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "new_Vegetation" "', argument " "7"" of type '" "double""'");
    } 
    arg7 = static_cast< double >(val7);
  }
  if (swig_obj[7]) {
    ecode8 = SWIG_AsVal_double(swig_obj[7], &val8);
    if (!SWIG_IsOK(ecode8)) {
      SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "new_Vegetation" "', argument " "8"" of type '" "double""'");
    } 
    arg8 = static_cast< double >(val8);
  }
  {
    try {
      result = (cmf::upslope::vegetation::Vegetation *)new cmf::upslope::vegetation::Vegetation(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmf__upslope__vegetation__Vegetation, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Vegetation(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::vegetation::Vegetation *arg1 = (cmf::upslope::vegetation::Vegetation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__upslope__vegetation__Vegetation, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Vegetation" "', argument " "1"" of type '" "cmf::upslope::vegetation::Vegetation *""'"); 
  }
  arg1 = reinterpret_cast< cmf::upslope::vegetation::Vegetation * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Vegetation_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_cmf__upslope__vegetation__Vegetation, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *Vegetation_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_CellConnector_connect(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::CellConnector *arg1 = (cmf::upslope::CellConnector *) 0 ;
  cmf::upslope::Cell *arg2 = 0 ;
  cmf::upslope::Cell *arg3 = 0 ;
  int arg4 = (int) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject *swig_obj[4] ;
  
  if (!SWIG_Python_UnpackTuple(args,"CellConnector_connect",3,4,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__upslope__CellConnector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CellConnector_connect" "', argument " "1"" of type '" "cmf::upslope::CellConnector const *""'"); 
  }
  arg1 = reinterpret_cast< cmf::upslope::CellConnector * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cmf__upslope__Cell,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CellConnector_connect" "', argument " "2"" of type '" "cmf::upslope::Cell &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CellConnector_connect" "', argument " "2"" of type '" "cmf::upslope::Cell &""'"); 
  }
  arg2 = reinterpret_cast< cmf::upslope::Cell * >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_cmf__upslope__Cell,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CellConnector_connect" "', argument " "3"" of type '" "cmf::upslope::Cell &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CellConnector_connect" "', argument " "3"" of type '" "cmf::upslope::Cell &""'"); 
  }
  arg3 = reinterpret_cast< cmf::upslope::Cell * >(argp3);
  if (swig_obj[3]) {
    ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "CellConnector_connect" "', argument " "4"" of type '" "int""'");
    } 
    arg4 = static_cast< int >(val4);
  }
  {
    try {
      ((cmf::upslope::CellConnector const *)arg1)->connect(*arg2,*arg3,arg4);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_CellConnector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::CellConnector *arg1 = (cmf::upslope::CellConnector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__upslope__CellConnector, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_CellConnector" "', argument " "1"" of type '" "cmf::upslope::CellConnector *""'"); 
  }
  arg1 = reinterpret_cast< cmf::upslope::CellConnector * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *CellConnector_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_cmf__upslope__CellConnector, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_Cell_x_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::Cell *arg1 = (cmf::upslope::Cell *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"Cell_x_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__upslope__Cell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cell_x_set" "', argument " "1"" of type '" "cmf::upslope::Cell *""'"); 
  }
  arg1 = reinterpret_cast< cmf::upslope::Cell * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Cell_x_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->x = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cell_x_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::Cell *arg1 = (cmf::upslope::Cell *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__upslope__Cell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cell_x_get" "', argument " "1"" of type '" "cmf::upslope::Cell *""'"); 
  }
  arg1 = reinterpret_cast< cmf::upslope::Cell * >(argp1);
  result = (double) ((arg1)->x);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cell_y_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::Cell *arg1 = (cmf::upslope::Cell *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"Cell_y_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__upslope__Cell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cell_y_set" "', argument " "1"" of type '" "cmf::upslope::Cell *""'"); 
  }
  arg1 = reinterpret_cast< cmf::upslope::Cell * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Cell_y_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->y = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cell_y_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::Cell *arg1 = (cmf::upslope::Cell *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__upslope__Cell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cell_y_get" "', argument " "1"" of type '" "cmf::upslope::Cell *""'"); 
  }
  arg1 = reinterpret_cast< cmf::upslope::Cell * >(argp1);
  result = (double) ((arg1)->y);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cell_z_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::Cell *arg1 = (cmf::upslope::Cell *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"Cell_z_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__upslope__Cell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cell_z_set" "', argument " "1"" of type '" "cmf::upslope::Cell *""'"); 
  }
  arg1 = reinterpret_cast< cmf::upslope::Cell * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Cell_z_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->z = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cell_z_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::Cell *arg1 = (cmf::upslope::Cell *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__upslope__Cell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cell_z_get" "', argument " "1"" of type '" "cmf::upslope::Cell *""'"); 
  }
  arg1 = reinterpret_cast< cmf::upslope::Cell * >(argp1);
  result = (double) ((arg1)->z);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cell_get_area(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::Cell *arg1 = (cmf::upslope::Cell *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__upslope__Cell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cell_get_area" "', argument " "1"" of type '" "cmf::upslope::Cell const *""'"); 
  }
  arg1 = reinterpret_cast< cmf::upslope::Cell * >(argp1);
  {
    try {
      result = (double)((cmf::upslope::Cell const *)arg1)->get_area();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cell_InvalidateSatDepth(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::Cell *arg1 = (cmf::upslope::Cell *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__upslope__Cell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cell_InvalidateSatDepth" "', argument " "1"" of type '" "cmf::upslope::Cell *""'"); 
  }
  arg1 = reinterpret_cast< cmf::upslope::Cell * >(argp1);
  {
    try {
      (arg1)->InvalidateSatDepth();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cell_get_saturated_depth(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::Cell *arg1 = (cmf::upslope::Cell *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  real result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__upslope__Cell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cell_get_saturated_depth" "', argument " "1"" of type '" "cmf::upslope::Cell *""'"); 
  }
  arg1 = reinterpret_cast< cmf::upslope::Cell * >(argp1);
  {
    try {
      result = (real)(arg1)->get_saturated_depth();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cell_set_saturated_depth(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::Cell *arg1 = (cmf::upslope::Cell *) 0 ;
  real arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"Cell_set_saturated_depth",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__upslope__Cell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cell_set_saturated_depth" "', argument " "1"" of type '" "cmf::upslope::Cell *""'"); 
  }
  arg1 = reinterpret_cast< cmf::upslope::Cell * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Cell_set_saturated_depth" "', argument " "2"" of type '" "real""'");
  } 
  arg2 = static_cast< real >(val2);
  {
    try {
      (arg1)->set_saturated_depth(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cell_get_surfacewater(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::Cell *arg1 = (cmf::upslope::Cell *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  cmf::water::flux_node::ptr result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__upslope__Cell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cell_get_surfacewater" "', argument " "1"" of type '" "cmf::upslope::Cell *""'"); 
  }
  arg1 = reinterpret_cast< cmf::upslope::Cell * >(argp1);
  {
    try {
      result = (arg1)->get_surfacewater();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  {
    int dcast = 0;
    /*@SWIG:C:\\Programme\\swig\\Lib\\typemaps\\swigmacros.swg,200,%formacro@*//*@SWIG:C:\\Programme\\swig\\Lib\\typemaps\\swigmacros.swg,192,%_formacro_1@*//*@SWIG:cmf.i,113,%_node_down_cast@*/
    if (dcast==0 && result) /*check for cmf::river::OpenWaterStorage*/  {
      std::tr1::shared_ptr<cmf::river::OpenWaterStorage> output = std::tr1::dynamic_pointer_cast<cmf::river::OpenWaterStorage>(result);
      if (output) /*flux_node is cmf::river::OpenWaterStorage */ {
        dcast=1; 
        resultobj = SWIG_NewPointerObj(new std::tr1::shared_ptr<cmf::river::OpenWaterStorage>(output),SWIGTYPE_p_std__tr1__shared_ptrT_cmf__river__OpenWaterStorage_t, SWIG_POINTER_OWN); 
      }
    }
    /*@SWIG@*/
    
    /*@SWIG:C:\\Programme\\swig\\Lib\\typemaps\\swigmacros.swg,192,%_formacro_1@*//*@SWIG:cmf.i,113,%_node_down_cast@*/
    if (dcast==0 && result) /*check for cmf::water::DricheletBoundary*/  {
      std::tr1::shared_ptr<cmf::water::DricheletBoundary> output = std::tr1::dynamic_pointer_cast<cmf::water::DricheletBoundary>(result);
      if (output) /*flux_node is cmf::water::DricheletBoundary */ {
        dcast=1; 
        resultobj = SWIG_NewPointerObj(new std::tr1::shared_ptr<cmf::water::DricheletBoundary>(output),SWIGTYPE_p_std__tr1__shared_ptrT_cmf__water__DricheletBoundary_t, SWIG_POINTER_OWN); 
      }
    }
    /*@SWIG@*/
    
    
    
    /*@SWIG@*/
    
    /*@SWIG@*//*@SWIG@*/
    if (!dcast) resultobj = SWIG_NewPointerObj(result ? new std::tr1::shared_ptr<cmf::water::flux_node>(result) : 0,SWIGTYPE_p_std__tr1__shared_ptrT_cmf__water__flux_node_t, SWIG_POINTER_OWN);   
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cell_surfacewater_as_storage(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::Cell *arg1 = (cmf::upslope::Cell *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__upslope__Cell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cell_surfacewater_as_storage" "', argument " "1"" of type '" "cmf::upslope::Cell *""'"); 
  }
  arg1 = reinterpret_cast< cmf::upslope::Cell * >(argp1);
  {
    try {
      (arg1)->surfacewater_as_storage();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cell_add_storage(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::Cell *arg1 = (cmf::upslope::Cell *) 0 ;
  std::string arg2 ;
  char arg3 = (char) 'N' ;
  bool arg4 = (bool) false ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  PyObject *swig_obj[4] ;
  cmf::water::WaterStorage::ptr result;
  
  if (!SWIG_Python_UnpackTuple(args,"Cell_add_storage",2,4,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__upslope__Cell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cell_add_storage" "', argument " "1"" of type '" "cmf::upslope::Cell *""'"); 
  }
  arg1 = reinterpret_cast< cmf::upslope::Cell * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Cell_add_storage" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  if (swig_obj[2]) {
    ecode3 = SWIG_AsVal_char(swig_obj[2], &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Cell_add_storage" "', argument " "3"" of type '" "char""'");
    } 
    arg3 = static_cast< char >(val3);
  }
  if (swig_obj[3]) {
    ecode4 = SWIG_AsVal_bool(swig_obj[3], &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Cell_add_storage" "', argument " "4"" of type '" "bool""'");
    } 
    arg4 = static_cast< bool >(val4);
  }
  {
    try {
      result = (arg1)->add_storage(arg2,arg3,arg4);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  {
    std::tr1::shared_ptr<  cmf::water::WaterStorage > *smartresult = result ? new std::tr1::shared_ptr<  cmf::water::WaterStorage >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__tr1__shared_ptrT_cmf__water__WaterStorage_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cell_remove_storage(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::Cell *arg1 = (cmf::upslope::Cell *) 0 ;
  cmf::water::WaterStorage *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  std::tr1::shared_ptr< cmf::water::WaterStorage > tempshared2 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"Cell_remove_storage",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__upslope__Cell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cell_remove_storage" "', argument " "1"" of type '" "cmf::upslope::Cell *""'"); 
  }
  arg1 = reinterpret_cast< cmf::upslope::Cell * >(argp1);
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(swig_obj[1], &argp2, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__water__WaterStorage_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Cell_remove_storage" "', argument " "2"" of type '" "cmf::water::WaterStorage &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Cell_remove_storage" "', argument " "2"" of type '" "cmf::water::WaterStorage &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared2 = *reinterpret_cast< std::tr1::shared_ptr<  cmf::water::WaterStorage > * >(argp2);
      delete reinterpret_cast< std::tr1::shared_ptr<  cmf::water::WaterStorage > * >(argp2);
      arg2 = const_cast< cmf::water::WaterStorage * >(tempshared2.get());
    } else {
      arg2 = const_cast< cmf::water::WaterStorage * >(reinterpret_cast< std::tr1::shared_ptr<  cmf::water::WaterStorage > * >(argp2)->get());
    }
  }
  {
    try {
      (arg1)->remove_storage(*arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cell_storage_count(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::Cell *arg1 = (cmf::upslope::Cell *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__upslope__Cell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cell_storage_count" "', argument " "1"" of type '" "cmf::upslope::Cell const *""'"); 
  }
  arg1 = reinterpret_cast< cmf::upslope::Cell * >(argp1);
  {
    try {
      result = (int)((cmf::upslope::Cell const *)arg1)->storage_count();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cell_get_storage(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::Cell *arg1 = (cmf::upslope::Cell *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  cmf::water::WaterStorage::ptr result;
  
  if (!SWIG_Python_UnpackTuple(args,"Cell_get_storage",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__upslope__Cell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cell_get_storage" "', argument " "1"" of type '" "cmf::upslope::Cell const *""'"); 
  }
  arg1 = reinterpret_cast< cmf::upslope::Cell * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Cell_get_storage" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = ((cmf::upslope::Cell const *)arg1)->get_storage(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  {
    int dcast = 0;
    /*@SWIG:C:\\Programme\\swig\\Lib\\typemaps\\swigmacros.swg,200,%formacro@*//*@SWIG:C:\\Programme\\swig\\Lib\\typemaps\\swigmacros.swg,192,%_formacro_1@*//*@SWIG:cmf.i,113,%_node_down_cast@*/
    if (dcast==0 && result) /*check for cmf::river::OpenWaterStorage*/  {
      std::tr1::shared_ptr<cmf::river::OpenWaterStorage> output = std::tr1::dynamic_pointer_cast<cmf::river::OpenWaterStorage>(result);
      if (output) /*flux_node is cmf::river::OpenWaterStorage */ {
        dcast=1; 
        resultobj = SWIG_NewPointerObj(new std::tr1::shared_ptr<cmf::river::OpenWaterStorage>(output),SWIGTYPE_p_std__tr1__shared_ptrT_cmf__river__OpenWaterStorage_t, SWIG_POINTER_OWN); 
      }
    }
    /*@SWIG@*/
    
    /*@SWIG:C:\\Programme\\swig\\Lib\\typemaps\\swigmacros.swg,192,%_formacro_1@*//*@SWIG:cmf.i,113,%_node_down_cast@*/
    if (dcast==0 && result) /*check for cmf::water::WaterStorage*/  {
      std::tr1::shared_ptr<cmf::water::WaterStorage> output = std::tr1::dynamic_pointer_cast<cmf::water::WaterStorage>(result);
      if (output) /*flux_node is cmf::water::WaterStorage */ {
        dcast=1; 
        resultobj = SWIG_NewPointerObj(new std::tr1::shared_ptr<cmf::water::WaterStorage>(output),SWIGTYPE_p_std__tr1__shared_ptrT_cmf__water__WaterStorage_t, SWIG_POINTER_OWN); 
      }
    }
    /*@SWIG@*/
    
    
    
    /*@SWIG@*/
    
    /*@SWIG@*//*@SWIG@*/
    if (!dcast) resultobj = SWIG_NewPointerObj(result ? new std::tr1::shared_ptr<cmf::water::flux_node>(result) : 0,SWIGTYPE_p_std__tr1__shared_ptrT_cmf__water__flux_node_t, SWIG_POINTER_OWN);   
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cell_get_canopy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::Cell *arg1 = (cmf::upslope::Cell *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  cmf::water::WaterStorage::ptr result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__upslope__Cell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cell_get_canopy" "', argument " "1"" of type '" "cmf::upslope::Cell const *""'"); 
  }
  arg1 = reinterpret_cast< cmf::upslope::Cell * >(argp1);
  {
    try {
      result = ((cmf::upslope::Cell const *)arg1)->get_canopy();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  {
    std::tr1::shared_ptr<  cmf::water::WaterStorage > *smartresult = result ? new std::tr1::shared_ptr<  cmf::water::WaterStorage >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__tr1__shared_ptrT_cmf__water__WaterStorage_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cell_get_snow(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::Cell *arg1 = (cmf::upslope::Cell *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  cmf::water::WaterStorage::ptr result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__upslope__Cell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cell_get_snow" "', argument " "1"" of type '" "cmf::upslope::Cell const *""'"); 
  }
  arg1 = reinterpret_cast< cmf::upslope::Cell * >(argp1);
  {
    try {
      result = ((cmf::upslope::Cell const *)arg1)->get_snow();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  {
    std::tr1::shared_ptr<  cmf::water::WaterStorage > *smartresult = result ? new std::tr1::shared_ptr<  cmf::water::WaterStorage >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__tr1__shared_ptrT_cmf__water__WaterStorage_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cell_snow_coverage(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::Cell *arg1 = (cmf::upslope::Cell *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  real result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__upslope__Cell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cell_snow_coverage" "', argument " "1"" of type '" "cmf::upslope::Cell const *""'"); 
  }
  arg1 = reinterpret_cast< cmf::upslope::Cell * >(argp1);
  {
    try {
      result = (real)((cmf::upslope::Cell const *)arg1)->snow_coverage();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cell_has_wet_leaves(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::Cell *arg1 = (cmf::upslope::Cell *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__upslope__Cell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cell_has_wet_leaves" "', argument " "1"" of type '" "cmf::upslope::Cell const *""'"); 
  }
  arg1 = reinterpret_cast< cmf::upslope::Cell * >(argp1);
  {
    try {
      result = (bool)((cmf::upslope::Cell const *)arg1)->has_wet_leaves();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cell_has_surface_water(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::Cell *arg1 = (cmf::upslope::Cell *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__upslope__Cell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cell_has_surface_water" "', argument " "1"" of type '" "cmf::upslope::Cell const *""'"); 
  }
  arg1 = reinterpret_cast< cmf::upslope::Cell * >(argp1);
  {
    try {
      result = (bool)((cmf::upslope::Cell const *)arg1)->has_surface_water();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cell_get_vegetation(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::Cell *arg1 = (cmf::upslope::Cell *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  cmf::upslope::vegetation::Vegetation result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__upslope__Cell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cell_get_vegetation" "', argument " "1"" of type '" "cmf::upslope::Cell const *""'"); 
  }
  arg1 = reinterpret_cast< cmf::upslope::Cell * >(argp1);
  {
    try {
      result = ((cmf::upslope::Cell const *)arg1)->get_vegetation();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj((new cmf::upslope::vegetation::Vegetation(static_cast< const cmf::upslope::vegetation::Vegetation& >(result))), SWIGTYPE_p_cmf__upslope__vegetation__Vegetation, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cell_set_vegetation(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::Cell *arg1 = (cmf::upslope::Cell *) 0 ;
  cmf::upslope::vegetation::Vegetation arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"Cell_set_vegetation",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__upslope__Cell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cell_set_vegetation" "', argument " "1"" of type '" "cmf::upslope::Cell *""'"); 
  }
  arg1 = reinterpret_cast< cmf::upslope::Cell * >(argp1);
  {
    res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cmf__upslope__vegetation__Vegetation,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Cell_set_vegetation" "', argument " "2"" of type '" "cmf::upslope::vegetation::Vegetation""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Cell_set_vegetation" "', argument " "2"" of type '" "cmf::upslope::vegetation::Vegetation""'");
    } else {
      cmf::upslope::vegetation::Vegetation * temp = reinterpret_cast< cmf::upslope::vegetation::Vegetation * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      (arg1)->set_vegetation(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cell_Id_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::Cell *arg1 = (cmf::upslope::Cell *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"Cell_Id_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__upslope__Cell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cell_Id_set" "', argument " "1"" of type '" "cmf::upslope::Cell *""'"); 
  }
  arg1 = reinterpret_cast< cmf::upslope::Cell * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Cell_Id_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->Id = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cell_Id_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::Cell *arg1 = (cmf::upslope::Cell *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__upslope__Cell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cell_Id_get" "', argument " "1"" of type '" "cmf::upslope::Cell *""'"); 
  }
  arg1 = reinterpret_cast< cmf::upslope::Cell * >(argp1);
  result = (int) ((arg1)->Id);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cell_project(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::Cell *arg1 = (cmf::upslope::Cell *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  cmf::project *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__upslope__Cell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cell_project" "', argument " "1"" of type '" "cmf::upslope::Cell const *""'"); 
  }
  arg1 = reinterpret_cast< cmf::upslope::Cell * >(argp1);
  {
    try {
      result = (cmf::project *) &((cmf::upslope::Cell const *)arg1)->project();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmf__project, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cell_get_weather(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::Cell *arg1 = (cmf::upslope::Cell *) 0 ;
  cmf::math::Time arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  cmf::atmosphere::Weather result;
  
  if (!SWIG_Python_UnpackTuple(args,"Cell_get_weather",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__upslope__Cell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cell_get_weather" "', argument " "1"" of type '" "cmf::upslope::Cell const *""'"); 
  }
  arg1 = reinterpret_cast< cmf::upslope::Cell * >(argp1);
  {
    arg2 = convert_datetime_to_cmftime(swig_obj[1]);    
  }
  {
    try {
      result = ((cmf::upslope::Cell const *)arg1)->get_weather(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj((new cmf::atmosphere::Weather(static_cast< const cmf::atmosphere::Weather& >(result))), SWIGTYPE_p_cmf__atmosphere__Weather, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cell_layer_count(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::Cell *arg1 = (cmf::upslope::Cell *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__upslope__Cell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cell_layer_count" "', argument " "1"" of type '" "cmf::upslope::Cell const *""'"); 
  }
  arg1 = reinterpret_cast< cmf::upslope::Cell * >(argp1);
  {
    try {
      result = (int)((cmf::upslope::Cell const *)arg1)->layer_count();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cell_get_layer(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::Cell *arg1 = (cmf::upslope::Cell *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  cmf::upslope::layer_ptr result;
  
  if (!SWIG_Python_UnpackTuple(args,"Cell_get_layer",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__upslope__Cell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cell_get_layer" "', argument " "1"" of type '" "cmf::upslope::Cell const *""'"); 
  }
  arg1 = reinterpret_cast< cmf::upslope::Cell * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Cell_get_layer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = ((cmf::upslope::Cell const *)arg1)->get_layer(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  {
    std::tr1::shared_ptr<  cmf::upslope::SoilLayer > *smartresult = result ? new std::tr1::shared_ptr<  cmf::upslope::SoilLayer >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__tr1__shared_ptrT_cmf__upslope__SoilLayer_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cell_add_layer(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::Cell *arg1 = (cmf::upslope::Cell *) 0 ;
  real arg2 ;
  cmf::upslope::RetentionCurve *arg3 = 0 ;
  real arg4 = (real) 10 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject *swig_obj[4] ;
  
  if (!SWIG_Python_UnpackTuple(args,"Cell_add_layer",3,4,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__upslope__Cell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cell_add_layer" "', argument " "1"" of type '" "cmf::upslope::Cell *""'"); 
  }
  arg1 = reinterpret_cast< cmf::upslope::Cell * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Cell_add_layer" "', argument " "2"" of type '" "real""'");
  } 
  arg2 = static_cast< real >(val2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_cmf__upslope__RetentionCurve,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Cell_add_layer" "', argument " "3"" of type '" "cmf::upslope::RetentionCurve const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Cell_add_layer" "', argument " "3"" of type '" "cmf::upslope::RetentionCurve const &""'"); 
  }
  arg3 = reinterpret_cast< cmf::upslope::RetentionCurve * >(argp3);
  if (swig_obj[3]) {
    ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Cell_add_layer" "', argument " "4"" of type '" "real""'");
    } 
    arg4 = static_cast< real >(val4);
  }
  {
    try {
      (arg1)->add_layer(arg2,(cmf::upslope::RetentionCurve const &)*arg3,arg4);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cell_remove_last_layer(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::Cell *arg1 = (cmf::upslope::Cell *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__upslope__Cell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cell_remove_last_layer" "', argument " "1"" of type '" "cmf::upslope::Cell *""'"); 
  }
  arg1 = reinterpret_cast< cmf::upslope::Cell * >(argp1);
  {
    try {
      (arg1)->remove_last_layer();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cell_remove_layers(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::Cell *arg1 = (cmf::upslope::Cell *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__upslope__Cell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cell_remove_layers" "', argument " "1"" of type '" "cmf::upslope::Cell *""'"); 
  }
  arg1 = reinterpret_cast< cmf::upslope::Cell * >(argp1);
  {
    try {
      (arg1)->remove_layers();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Cell(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::Cell *arg1 = (cmf::upslope::Cell *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__upslope__Cell, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Cell" "', argument " "1"" of type '" "cmf::upslope::Cell *""'"); 
  }
  arg1 = reinterpret_cast< cmf::upslope::Cell * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Cell(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  cmf::project *arg5 = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject *swig_obj[5] ;
  cmf::upslope::Cell *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args,"new_Cell",5,5,swig_obj)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Cell" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Cell" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_Cell" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_Cell" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  res5 = SWIG_ConvertPtr(swig_obj[4], &argp5, SWIGTYPE_p_cmf__project,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "new_Cell" "', argument " "5"" of type '" "cmf::project &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Cell" "', argument " "5"" of type '" "cmf::project &""'"); 
  }
  arg5 = reinterpret_cast< cmf::project * >(argp5);
  {
    try {
      result = (cmf::upslope::Cell *)new cmf::upslope::Cell(arg1,arg2,arg3,arg4,*arg5);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmf__upslope__Cell, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cell_to_string(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::Cell *arg1 = (cmf::upslope::Cell *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__upslope__Cell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cell_to_string" "', argument " "1"" of type '" "cmf::upslope::Cell *""'"); 
  }
  arg1 = reinterpret_cast< cmf::upslope::Cell * >(argp1);
  {
    try {
      result = (arg1)->to_string();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cell_topology_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::Cell *arg1 = (cmf::upslope::Cell *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  cmf::upslope::Topology *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__upslope__Cell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cell_topology_get" "', argument " "1"" of type '" "cmf::upslope::Cell *""'"); 
  }
  arg1 = reinterpret_cast< cmf::upslope::Cell * >(argp1);
  {
    try {
      result = (cmf::upslope::Topology *)cmf_upslope_Cell_topology_get(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmf__upslope__Topology, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cell_evaporation_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::Cell *arg1 = (cmf::upslope::Cell *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  cmf::water::flux_node::ptr *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__upslope__Cell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cell_evaporation_get" "', argument " "1"" of type '" "cmf::upslope::Cell *""'"); 
  }
  arg1 = reinterpret_cast< cmf::upslope::Cell * >(argp1);
  {
    try {
      result = (cmf::water::flux_node::ptr *) &cmf_upslope_Cell_evaporation_get(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  {
    std::tr1::shared_ptr<  cmf::water::flux_node > *smartresult = *result ? new std::tr1::shared_ptr<  cmf::water::flux_node >(*result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__tr1__shared_ptrT_cmf__water__flux_node_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cell_transpiration_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::Cell *arg1 = (cmf::upslope::Cell *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  cmf::water::flux_node::ptr *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__upslope__Cell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cell_transpiration_get" "', argument " "1"" of type '" "cmf::upslope::Cell *""'"); 
  }
  arg1 = reinterpret_cast< cmf::upslope::Cell * >(argp1);
  {
    try {
      result = (cmf::water::flux_node::ptr *) &cmf_upslope_Cell_transpiration_get(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  {
    std::tr1::shared_ptr<  cmf::water::flux_node > *smartresult = *result ? new std::tr1::shared_ptr<  cmf::water::flux_node >(*result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__tr1__shared_ptrT_cmf__water__flux_node_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cell_meteorology_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::Cell *arg1 = (cmf::upslope::Cell *) 0 ;
  cmf::atmosphere::Meteorology *arg2 = (cmf::atmosphere::Meteorology *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"Cell_meteorology_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__upslope__Cell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cell_meteorology_set" "', argument " "1"" of type '" "cmf::upslope::Cell *""'"); 
  }
  arg1 = reinterpret_cast< cmf::upslope::Cell * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cmf__atmosphere__Meteorology, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Cell_meteorology_set" "', argument " "2"" of type '" "cmf::atmosphere::Meteorology *""'"); 
  }
  arg2 = reinterpret_cast< cmf::atmosphere::Meteorology * >(argp2);
  {
    try {
      cmf_upslope_Cell_meteorology_set(arg1,arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cell_meteorology_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::Cell *arg1 = (cmf::upslope::Cell *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  cmf::atmosphere::Meteorology *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__upslope__Cell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cell_meteorology_get" "', argument " "1"" of type '" "cmf::upslope::Cell *""'"); 
  }
  arg1 = reinterpret_cast< cmf::upslope::Cell * >(argp1);
  {
    try {
      result = (cmf::atmosphere::Meteorology *)cmf_upslope_Cell_meteorology_get(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmf__atmosphere__Meteorology, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cell_rain_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::Cell *arg1 = (cmf::upslope::Cell *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::tr1::shared_ptr< cmf::atmosphere::RainCloud > *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__upslope__Cell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cell_rain_get" "', argument " "1"" of type '" "cmf::upslope::Cell *""'"); 
  }
  arg1 = reinterpret_cast< cmf::upslope::Cell * >(argp1);
  {
    try {
      result = (std::tr1::shared_ptr< cmf::atmosphere::RainCloud > *) &cmf_upslope_Cell_rain_get(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  {
    std::tr1::shared_ptr<  cmf::atmosphere::RainCloud > *smartresult = *result ? new std::tr1::shared_ptr<  cmf::atmosphere::RainCloud >(*result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__tr1__shared_ptrT_cmf__atmosphere__RainCloud_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Cell_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_cmf__upslope__Cell, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *Cell_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_Topology_cell_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::Topology *arg1 = (cmf::upslope::Topology *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  cmf::upslope::Cell *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__upslope__Topology, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Topology_cell_get" "', argument " "1"" of type '" "cmf::upslope::Topology *""'"); 
  }
  arg1 = reinterpret_cast< cmf::upslope::Topology * >(argp1);
  result = (cmf::upslope::Cell *)(cmf::upslope::Cell *) ((arg1)->cell);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmf__upslope__Cell, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Topology_x_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::Topology *arg1 = (cmf::upslope::Topology *) 0 ;
  double *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"Topology_x_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__upslope__Topology, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Topology_x_set" "', argument " "1"" of type '" "cmf::upslope::Topology *""'"); 
  }
  arg1 = reinterpret_cast< cmf::upslope::Topology * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Topology_x_set" "', argument " "2"" of type '" "double &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Topology_x_set" "', argument " "2"" of type '" "double &""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  if (arg1) (arg1)->x = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Topology_x_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::Topology *arg1 = (cmf::upslope::Topology *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__upslope__Topology, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Topology_x_get" "', argument " "1"" of type '" "cmf::upslope::Topology *""'"); 
  }
  arg1 = reinterpret_cast< cmf::upslope::Topology * >(argp1);
  result = (double *) &(double &) ((arg1)->x);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Topology_y_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::Topology *arg1 = (cmf::upslope::Topology *) 0 ;
  double *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"Topology_y_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__upslope__Topology, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Topology_y_set" "', argument " "1"" of type '" "cmf::upslope::Topology *""'"); 
  }
  arg1 = reinterpret_cast< cmf::upslope::Topology * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Topology_y_set" "', argument " "2"" of type '" "double &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Topology_y_set" "', argument " "2"" of type '" "double &""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  if (arg1) (arg1)->y = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Topology_y_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::Topology *arg1 = (cmf::upslope::Topology *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__upslope__Topology, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Topology_y_get" "', argument " "1"" of type '" "cmf::upslope::Topology *""'"); 
  }
  arg1 = reinterpret_cast< cmf::upslope::Topology * >(argp1);
  result = (double *) &(double &) ((arg1)->y);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Topology_z_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::Topology *arg1 = (cmf::upslope::Topology *) 0 ;
  double *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"Topology_z_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__upslope__Topology, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Topology_z_set" "', argument " "1"" of type '" "cmf::upslope::Topology *""'"); 
  }
  arg1 = reinterpret_cast< cmf::upslope::Topology * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Topology_z_set" "', argument " "2"" of type '" "double &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Topology_z_set" "', argument " "2"" of type '" "double &""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  if (arg1) (arg1)->z = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Topology_z_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::Topology *arg1 = (cmf::upslope::Topology *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__upslope__Topology, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Topology_z_get" "', argument " "1"" of type '" "cmf::upslope::Topology *""'"); 
  }
  arg1 = reinterpret_cast< cmf::upslope::Topology * >(argp1);
  result = (double *) &(double &) ((arg1)->z);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Topology_flowwidth__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  cmf::upslope::Topology *arg1 = (cmf::upslope::Topology *) 0 ;
  cmf::upslope::Cell *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__upslope__Topology, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Topology_flowwidth" "', argument " "1"" of type '" "cmf::upslope::Topology *""'"); 
  }
  arg1 = reinterpret_cast< cmf::upslope::Topology * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cmf__upslope__Cell,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Topology_flowwidth" "', argument " "2"" of type '" "cmf::upslope::Cell &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Topology_flowwidth" "', argument " "2"" of type '" "cmf::upslope::Cell &""'"); 
  }
  arg2 = reinterpret_cast< cmf::upslope::Cell * >(argp2);
  {
    try {
      result = (double)(arg1)->flowwidth(*arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Topology_flowwidth__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  cmf::upslope::Topology *arg1 = (cmf::upslope::Topology *) 0 ;
  cmf::upslope::Topology *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__upslope__Topology, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Topology_flowwidth" "', argument " "1"" of type '" "cmf::upslope::Topology *""'"); 
  }
  arg1 = reinterpret_cast< cmf::upslope::Topology * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cmf__upslope__Topology,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Topology_flowwidth" "', argument " "2"" of type '" "cmf::upslope::Topology &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Topology_flowwidth" "', argument " "2"" of type '" "cmf::upslope::Topology &""'"); 
  }
  arg2 = reinterpret_cast< cmf::upslope::Topology * >(argp2);
  {
    try {
      result = (double)(arg1)->flowwidth(*arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Topology_flowwidth(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Topology_flowwidth",0,2,argv))) SWIG_fail;
  --argc;
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (argc == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_cmf__upslope__Topology, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_cmf__upslope__Cell, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (argc == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_cmf__upslope__Topology, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_cmf__upslope__Topology, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      return _wrap_Topology_flowwidth__SWIG_0(self, argc, argv);
    case 2:
      return _wrap_Topology_flowwidth__SWIG_1(self, argc, argv);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'Topology_flowwidth'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    flowwidth(cmf::upslope::Topology *,cmf::upslope::Cell &)\n"
    "    flowwidth(cmf::upslope::Topology *,cmf::upslope::Topology &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Topology_AddNeighbor__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  cmf::upslope::Topology *arg1 = (cmf::upslope::Topology *) 0 ;
  cmf::upslope::Cell *arg2 = 0 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__upslope__Topology, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Topology_AddNeighbor" "', argument " "1"" of type '" "cmf::upslope::Topology *""'"); 
  }
  arg1 = reinterpret_cast< cmf::upslope::Topology * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cmf__upslope__Cell,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Topology_AddNeighbor" "', argument " "2"" of type '" "cmf::upslope::Cell &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Topology_AddNeighbor" "', argument " "2"" of type '" "cmf::upslope::Cell &""'"); 
  }
  arg2 = reinterpret_cast< cmf::upslope::Cell * >(argp2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Topology_AddNeighbor" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      (arg1)->AddNeighbor(*arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Topology_AddNeighbor__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  cmf::upslope::Topology *arg1 = (cmf::upslope::Topology *) 0 ;
  cmf::upslope::Topology *arg2 = 0 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__upslope__Topology, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Topology_AddNeighbor" "', argument " "1"" of type '" "cmf::upslope::Topology *""'"); 
  }
  arg1 = reinterpret_cast< cmf::upslope::Topology * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cmf__upslope__Topology,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Topology_AddNeighbor" "', argument " "2"" of type '" "cmf::upslope::Topology &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Topology_AddNeighbor" "', argument " "2"" of type '" "cmf::upslope::Topology &""'"); 
  }
  arg2 = reinterpret_cast< cmf::upslope::Topology * >(argp2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Topology_AddNeighbor" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      (arg1)->AddNeighbor(*arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Topology_AddNeighbor(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Topology_AddNeighbor",0,3,argv))) SWIG_fail;
  --argc;
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (argc == 3) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_cmf__upslope__Topology, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_cmf__upslope__Cell, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (argc == 3) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_cmf__upslope__Topology, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_cmf__upslope__Topology, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      return _wrap_Topology_AddNeighbor__SWIG_0(self, argc, argv);
    case 2:
      return _wrap_Topology_AddNeighbor__SWIG_1(self, argc, argv);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'Topology_AddNeighbor'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    AddNeighbor(cmf::upslope::Topology *,cmf::upslope::Cell &,double)\n"
    "    AddNeighbor(cmf::upslope::Topology *,cmf::upslope::Topology &,double)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Topology_RemoveNeighbor(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::Topology *arg1 = (cmf::upslope::Topology *) 0 ;
  cmf::upslope::Topology *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"Topology_RemoveNeighbor",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__upslope__Topology, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Topology_RemoveNeighbor" "', argument " "1"" of type '" "cmf::upslope::Topology *""'"); 
  }
  arg1 = reinterpret_cast< cmf::upslope::Topology * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cmf__upslope__Topology,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Topology_RemoveNeighbor" "', argument " "2"" of type '" "cmf::upslope::Topology &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Topology_RemoveNeighbor" "', argument " "2"" of type '" "cmf::upslope::Topology &""'"); 
  }
  arg2 = reinterpret_cast< cmf::upslope::Topology * >(argp2);
  {
    try {
      (arg1)->RemoveNeighbor(*arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Topology_neighbor_count(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::Topology *arg1 = (cmf::upslope::Topology *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  size_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__upslope__Topology, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Topology_neighbor_count" "', argument " "1"" of type '" "cmf::upslope::Topology const *""'"); 
  }
  arg1 = reinterpret_cast< cmf::upslope::Topology * >(argp1);
  {
    try {
      result = ((cmf::upslope::Topology const *)arg1)->neighbor_count();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Topology_MainOutlet(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::Topology *arg1 = (cmf::upslope::Topology *) 0 ;
  bool arg2 = (bool) false ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  cmf::upslope::Cell *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args,"Topology_MainOutlet",1,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__upslope__Topology, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Topology_MainOutlet" "', argument " "1"" of type '" "cmf::upslope::Topology *""'"); 
  }
  arg1 = reinterpret_cast< cmf::upslope::Topology * >(argp1);
  if (swig_obj[1]) {
    ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Topology_MainOutlet" "', argument " "2"" of type '" "bool""'");
    } 
    arg2 = static_cast< bool >(val2);
  }
  {
    try {
      result = (cmf::upslope::Cell *)(arg1)->MainOutlet(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmf__upslope__Cell, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Topology_ContributingArea(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::Topology *arg1 = (cmf::upslope::Topology *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__upslope__Topology, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Topology_ContributingArea" "', argument " "1"" of type '" "cmf::upslope::Topology const *""'"); 
  }
  arg1 = reinterpret_cast< cmf::upslope::Topology * >(argp1);
  {
    try {
      result = (double)((cmf::upslope::Topology const *)arg1)->ContributingArea();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Topology_calculate_contributing_area(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::cell_vector *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__vectorT_cmf__upslope__Cell_p_std__allocatorT_cmf__upslope__Cell_p_t_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Topology_calculate_contributing_area" "', argument " "1"" of type '" "cmf::upslope::cell_vector const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Topology_calculate_contributing_area" "', argument " "1"" of type '" "cmf::upslope::cell_vector const &""'"); 
  }
  arg1 = reinterpret_cast< cmf::upslope::cell_vector * >(argp1);
  {
    try {
      cmf::upslope::Topology::calculate_contributing_area((std::vector< cmf::upslope::Cell *,std::allocator< cmf::upslope::Cell * > > const &)*arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Topology___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::Topology *arg1 = (cmf::upslope::Topology *) 0 ;
  cmf::upslope::Topology *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args,"Topology___eq__",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__upslope__Topology, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Topology___eq__" "', argument " "1"" of type '" "cmf::upslope::Topology *""'"); 
  }
  arg1 = reinterpret_cast< cmf::upslope::Topology * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cmf__upslope__Topology,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Topology___eq__" "', argument " "2"" of type '" "cmf::upslope::Topology const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Topology___eq__" "', argument " "2"" of type '" "cmf::upslope::Topology const &""'"); 
  }
  arg2 = reinterpret_cast< cmf::upslope::Topology * >(argp2);
  {
    try {
      result = (bool)(arg1)->operator ==((cmf::upslope::Topology const &)*arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Topology(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::Topology *arg1 = (cmf::upslope::Topology *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__upslope__Topology, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Topology" "', argument " "1"" of type '" "cmf::upslope::Topology *""'"); 
  }
  arg1 = reinterpret_cast< cmf::upslope::Topology * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Topology_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_cmf__upslope__Topology, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_NeighborIterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::Cell *arg1 = (cmf::upslope::Cell *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  cmf::upslope::NeighborIterator *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__upslope__Cell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_NeighborIterator" "', argument " "1"" of type '" "cmf::upslope::Cell *""'"); 
  }
  arg1 = reinterpret_cast< cmf::upslope::Cell * >(argp1);
  {
    try {
      result = (cmf::upslope::NeighborIterator *)new cmf::upslope::NeighborIterator(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmf__upslope__NeighborIterator, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NeighborIterator_cell(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::NeighborIterator *arg1 = (cmf::upslope::NeighborIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  cmf::upslope::Cell *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__upslope__NeighborIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NeighborIterator_cell" "', argument " "1"" of type '" "cmf::upslope::NeighborIterator *""'"); 
  }
  arg1 = reinterpret_cast< cmf::upslope::NeighborIterator * >(argp1);
  {
    try {
      result = (cmf::upslope::Cell *) &(arg1)->cell();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmf__upslope__Cell, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NeighborIterator_flowwidth(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::NeighborIterator *arg1 = (cmf::upslope::NeighborIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__upslope__NeighborIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NeighborIterator_flowwidth" "', argument " "1"" of type '" "cmf::upslope::NeighborIterator *""'"); 
  }
  arg1 = reinterpret_cast< cmf::upslope::NeighborIterator * >(argp1);
  {
    try {
      result = (double)(arg1)->flowwidth();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NeighborIterator_valid(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::NeighborIterator *arg1 = (cmf::upslope::NeighborIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__upslope__NeighborIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NeighborIterator_valid" "', argument " "1"" of type '" "cmf::upslope::NeighborIterator const *""'"); 
  }
  arg1 = reinterpret_cast< cmf::upslope::NeighborIterator * >(argp1);
  {
    try {
      result = (bool)((cmf::upslope::NeighborIterator const *)arg1)->valid();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NeighborIterator_next(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::NeighborIterator *arg1 = (cmf::upslope::NeighborIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  cmf::upslope::NeighborIterator *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__upslope__NeighborIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NeighborIterator_next" "', argument " "1"" of type '" "cmf::upslope::NeighborIterator *""'"); 
  }
  arg1 = reinterpret_cast< cmf::upslope::NeighborIterator * >(argp1);
  {
    try {
      result = (cmf::upslope::NeighborIterator *) &(arg1)->next();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmf__upslope__NeighborIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NeighborIterator___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::NeighborIterator *arg1 = (cmf::upslope::NeighborIterator *) 0 ;
  cmf::upslope::NeighborIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args,"NeighborIterator___eq__",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__upslope__NeighborIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NeighborIterator___eq__" "', argument " "1"" of type '" "cmf::upslope::NeighborIterator *""'"); 
  }
  arg1 = reinterpret_cast< cmf::upslope::NeighborIterator * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cmf__upslope__NeighborIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NeighborIterator___eq__" "', argument " "2"" of type '" "cmf::upslope::NeighborIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NeighborIterator___eq__" "', argument " "2"" of type '" "cmf::upslope::NeighborIterator const &""'"); 
  }
  arg2 = reinterpret_cast< cmf::upslope::NeighborIterator * >(argp2);
  {
    try {
      result = (bool)cmf_upslope_NeighborIterator___eq__(arg1,(cmf::upslope::NeighborIterator const &)*arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NeighborIterator___neq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::NeighborIterator *arg1 = (cmf::upslope::NeighborIterator *) 0 ;
  cmf::upslope::NeighborIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args,"NeighborIterator___neq__",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__upslope__NeighborIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NeighborIterator___neq__" "', argument " "1"" of type '" "cmf::upslope::NeighborIterator *""'"); 
  }
  arg1 = reinterpret_cast< cmf::upslope::NeighborIterator * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cmf__upslope__NeighborIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NeighborIterator___neq__" "', argument " "2"" of type '" "cmf::upslope::NeighborIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NeighborIterator___neq__" "', argument " "2"" of type '" "cmf::upslope::NeighborIterator const &""'"); 
  }
  arg2 = reinterpret_cast< cmf::upslope::NeighborIterator * >(argp2);
  {
    try {
      result = (bool)cmf_upslope_NeighborIterator___neq__(arg1,(cmf::upslope::NeighborIterator const &)*arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_NeighborIterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::NeighborIterator *arg1 = (cmf::upslope::NeighborIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__upslope__NeighborIterator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_NeighborIterator" "', argument " "1"" of type '" "cmf::upslope::NeighborIterator *""'"); 
  }
  arg1 = reinterpret_cast< cmf::upslope::NeighborIterator * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *NeighborIterator_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_cmf__upslope__NeighborIterator, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *NeighborIterator_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_cell_vector_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< cmf::upslope::Cell * > *arg1 = (std::vector< cmf::upslope::Cell * > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &swig_obj[0];
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_cmf__upslope__Cell_p_std__allocatorT_cmf__upslope__Cell_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cell_vector_iterator" "', argument " "1"" of type '" "std::vector< cmf::upslope::Cell * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< cmf::upslope::Cell * > * >(argp1);
  {
    try {
      result = (swig::SwigPyIterator *)std_vector_Sl_cmf_upslope_Cell_Sm__Sg__iterator(arg1,arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cell_vector___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< cmf::upslope::Cell * > *arg1 = (std::vector< cmf::upslope::Cell * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_cmf__upslope__Cell_p_std__allocatorT_cmf__upslope__Cell_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cell_vector___nonzero__" "', argument " "1"" of type '" "std::vector< cmf::upslope::Cell * > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< cmf::upslope::Cell * > * >(argp1);
  {
    try {
      result = (bool)std_vector_Sl_cmf_upslope_Cell_Sm__Sg____nonzero__((std::vector< cmf::upslope::Cell * > const *)arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cell_vector___bool__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< cmf::upslope::Cell * > *arg1 = (std::vector< cmf::upslope::Cell * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_cmf__upslope__Cell_p_std__allocatorT_cmf__upslope__Cell_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cell_vector___bool__" "', argument " "1"" of type '" "std::vector< cmf::upslope::Cell * > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< cmf::upslope::Cell * > * >(argp1);
  {
    try {
      result = (bool)std_vector_Sl_cmf_upslope_Cell_Sm__Sg____bool__((std::vector< cmf::upslope::Cell * > const *)arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cell_vector___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< cmf::upslope::Cell * > *arg1 = (std::vector< cmf::upslope::Cell * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< cmf::upslope::Cell * >::size_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_cmf__upslope__Cell_p_std__allocatorT_cmf__upslope__Cell_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cell_vector___len__" "', argument " "1"" of type '" "std::vector< cmf::upslope::Cell * > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< cmf::upslope::Cell * > * >(argp1);
  {
    try {
      result = std_vector_Sl_cmf_upslope_Cell_Sm__Sg____len__((std::vector< cmf::upslope::Cell * > const *)arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cell_vector_pop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< cmf::upslope::Cell * > *arg1 = (std::vector< cmf::upslope::Cell * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< cmf::upslope::Cell * >::value_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_cmf__upslope__Cell_p_std__allocatorT_cmf__upslope__Cell_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cell_vector_pop" "', argument " "1"" of type '" "std::vector< cmf::upslope::Cell * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< cmf::upslope::Cell * > * >(argp1);
  {
    try {
      try {
        result = (std::vector< cmf::upslope::Cell * >::value_type)std_vector_Sl_cmf_upslope_Cell_Sm__Sg__pop(arg1);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_std__vectorT_cmf__upslope__Cell_p_std__allocatorT_cmf__upslope__Cell_p_t_t__value_type, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cell_vector___getslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< cmf::upslope::Cell * > *arg1 = (std::vector< cmf::upslope::Cell * > *) 0 ;
  std::vector< cmf::upslope::Cell * >::difference_type arg2 ;
  std::vector< cmf::upslope::Cell * >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  std::vector< cmf::upslope::Cell *,std::allocator< cmf::upslope::Cell * > > *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args,"cell_vector___getslice__",3,3,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_cmf__upslope__Cell_p_std__allocatorT_cmf__upslope__Cell_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cell_vector___getslice__" "', argument " "1"" of type '" "std::vector< cmf::upslope::Cell * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< cmf::upslope::Cell * > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cell_vector___getslice__" "', argument " "2"" of type '" "std::vector< cmf::upslope::Cell * >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< cmf::upslope::Cell * >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "cell_vector___getslice__" "', argument " "3"" of type '" "std::vector< cmf::upslope::Cell * >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< cmf::upslope::Cell * >::difference_type >(val3);
  {
    try {
      try {
        result = (std::vector< cmf::upslope::Cell *,std::allocator< cmf::upslope::Cell * > > *)std_vector_Sl_cmf_upslope_Cell_Sm__Sg____getslice__(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_cmf__upslope__Cell_p_std__allocatorT_cmf__upslope__Cell_p_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cell_vector___setslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< cmf::upslope::Cell * > *arg1 = (std::vector< cmf::upslope::Cell * > *) 0 ;
  std::vector< cmf::upslope::Cell * >::difference_type arg2 ;
  std::vector< cmf::upslope::Cell * >::difference_type arg3 ;
  std::vector< cmf::upslope::Cell *,std::allocator< cmf::upslope::Cell * > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject *swig_obj[4] ;
  
  if (!SWIG_Python_UnpackTuple(args,"cell_vector___setslice__",4,4,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_cmf__upslope__Cell_p_std__allocatorT_cmf__upslope__Cell_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cell_vector___setslice__" "', argument " "1"" of type '" "std::vector< cmf::upslope::Cell * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< cmf::upslope::Cell * > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cell_vector___setslice__" "', argument " "2"" of type '" "std::vector< cmf::upslope::Cell * >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< cmf::upslope::Cell * >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "cell_vector___setslice__" "', argument " "3"" of type '" "std::vector< cmf::upslope::Cell * >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< cmf::upslope::Cell * >::difference_type >(val3);
  {
    std::vector<cmf::upslope::Cell*,std::allocator< cmf::upslope::Cell * > > *ptr = (std::vector<cmf::upslope::Cell*,std::allocator< cmf::upslope::Cell * > > *)0;
    res4 = swig::asptr(swig_obj[3], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "cell_vector___setslice__" "', argument " "4"" of type '" "std::vector< cmf::upslope::Cell *,std::allocator< cmf::upslope::Cell * > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cell_vector___setslice__" "', argument " "4"" of type '" "std::vector< cmf::upslope::Cell *,std::allocator< cmf::upslope::Cell * > > const &""'"); 
    }
    arg4 = ptr;
  }
  {
    try {
      try {
        std_vector_Sl_cmf_upslope_Cell_Sm__Sg____setslice__(arg1,arg2,arg3,(std::vector< cmf::upslope::Cell *,std::allocator< cmf::upslope::Cell * > > const &)*arg4);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_cell_vector___delslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< cmf::upslope::Cell * > *arg1 = (std::vector< cmf::upslope::Cell * > *) 0 ;
  std::vector< cmf::upslope::Cell * >::difference_type arg2 ;
  std::vector< cmf::upslope::Cell * >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  
  if (!SWIG_Python_UnpackTuple(args,"cell_vector___delslice__",3,3,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_cmf__upslope__Cell_p_std__allocatorT_cmf__upslope__Cell_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cell_vector___delslice__" "', argument " "1"" of type '" "std::vector< cmf::upslope::Cell * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< cmf::upslope::Cell * > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cell_vector___delslice__" "', argument " "2"" of type '" "std::vector< cmf::upslope::Cell * >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< cmf::upslope::Cell * >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "cell_vector___delslice__" "', argument " "3"" of type '" "std::vector< cmf::upslope::Cell * >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< cmf::upslope::Cell * >::difference_type >(val3);
  {
    try {
      try {
        std_vector_Sl_cmf_upslope_Cell_Sm__Sg____delslice__(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cell_vector___delitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< cmf::upslope::Cell * > *arg1 = (std::vector< cmf::upslope::Cell * > *) 0 ;
  std::vector< cmf::upslope::Cell * >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_cmf__upslope__Cell_p_std__allocatorT_cmf__upslope__Cell_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cell_vector___delitem__" "', argument " "1"" of type '" "std::vector< cmf::upslope::Cell * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< cmf::upslope::Cell * > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cell_vector___delitem__" "', argument " "2"" of type '" "std::vector< cmf::upslope::Cell * >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< cmf::upslope::Cell * >::difference_type >(val2);
  {
    try {
      try {
        std_vector_Sl_cmf_upslope_Cell_Sm__Sg____delitem____SWIG_0(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cell_vector___getitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< cmf::upslope::Cell * > *arg1 = (std::vector< cmf::upslope::Cell * > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< cmf::upslope::Cell *,std::allocator< cmf::upslope::Cell * > > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_cmf__upslope__Cell_p_std__allocatorT_cmf__upslope__Cell_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cell_vector___getitem__" "', argument " "1"" of type '" "std::vector< cmf::upslope::Cell * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< cmf::upslope::Cell * > * >(argp1);
  {
    arg2 = (PySliceObject *) swig_obj[1];
  }
  {
    try {
      try {
        result = (std::vector< cmf::upslope::Cell *,std::allocator< cmf::upslope::Cell * > > *)std_vector_Sl_cmf_upslope_Cell_Sm__Sg____getitem____SWIG_0(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_cmf__upslope__Cell_p_std__allocatorT_cmf__upslope__Cell_p_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cell_vector___setitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< cmf::upslope::Cell * > *arg1 = (std::vector< cmf::upslope::Cell * > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  std::vector< cmf::upslope::Cell *,std::allocator< cmf::upslope::Cell * > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_cmf__upslope__Cell_p_std__allocatorT_cmf__upslope__Cell_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cell_vector___setitem__" "', argument " "1"" of type '" "std::vector< cmf::upslope::Cell * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< cmf::upslope::Cell * > * >(argp1);
  {
    arg2 = (PySliceObject *) swig_obj[1];
  }
  {
    std::vector<cmf::upslope::Cell*,std::allocator< cmf::upslope::Cell * > > *ptr = (std::vector<cmf::upslope::Cell*,std::allocator< cmf::upslope::Cell * > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "cell_vector___setitem__" "', argument " "3"" of type '" "std::vector< cmf::upslope::Cell *,std::allocator< cmf::upslope::Cell * > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cell_vector___setitem__" "', argument " "3"" of type '" "std::vector< cmf::upslope::Cell *,std::allocator< cmf::upslope::Cell * > > const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      try {
        std_vector_Sl_cmf_upslope_Cell_Sm__Sg____setitem____SWIG_0(arg1,arg2,(std::vector< cmf::upslope::Cell *,std::allocator< cmf::upslope::Cell * > > const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_cell_vector___delitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< cmf::upslope::Cell * > *arg1 = (std::vector< cmf::upslope::Cell * > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_cmf__upslope__Cell_p_std__allocatorT_cmf__upslope__Cell_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cell_vector___delitem__" "', argument " "1"" of type '" "std::vector< cmf::upslope::Cell * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< cmf::upslope::Cell * > * >(argp1);
  {
    arg2 = (PySliceObject *) swig_obj[1];
  }
  {
    try {
      try {
        std_vector_Sl_cmf_upslope_Cell_Sm__Sg____delitem____SWIG_1(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cell_vector___delitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"cell_vector___delitem__",0,2,argv))) SWIG_fail;
  --argc;
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (argc == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = swig::asptr(argv[0], (std::vector<cmf::upslope::Cell*,std::allocator< cmf::upslope::Cell * > >**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          _v = PySlice_Check(argv[1]);
        }
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (argc == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = swig::asptr(argv[0], (std::vector<cmf::upslope::Cell*,std::allocator< cmf::upslope::Cell * > >**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      return _wrap_cell_vector___delitem____SWIG_1(self, argc, argv);
    case 2:
      return _wrap_cell_vector___delitem____SWIG_0(self, argc, argv);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'cell_vector___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    __delitem__(std::vector< cmf::upslope::Cell * > *,std::vector< cmf::upslope::Cell * >::difference_type)\n"
    "    __delitem__(std::vector< cmf::upslope::Cell * > *,PySliceObject *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_cell_vector___getitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< cmf::upslope::Cell * > *arg1 = (std::vector< cmf::upslope::Cell * > *) 0 ;
  std::vector< cmf::upslope::Cell * >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  std::vector< cmf::upslope::Cell * >::value_type result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_cmf__upslope__Cell_p_std__allocatorT_cmf__upslope__Cell_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cell_vector___getitem__" "', argument " "1"" of type '" "std::vector< cmf::upslope::Cell * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< cmf::upslope::Cell * > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cell_vector___getitem__" "', argument " "2"" of type '" "std::vector< cmf::upslope::Cell * >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< cmf::upslope::Cell * >::difference_type >(val2);
  {
    try {
      try {
        result = (std::vector< cmf::upslope::Cell * >::value_type)std_vector_Sl_cmf_upslope_Cell_Sm__Sg____getitem____SWIG_1(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_std__vectorT_cmf__upslope__Cell_p_std__allocatorT_cmf__upslope__Cell_p_t_t__value_type, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cell_vector___getitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"cell_vector___getitem__",0,2,argv))) SWIG_fail;
  --argc;
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (argc == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = swig::asptr(argv[0], (std::vector<cmf::upslope::Cell*,std::allocator< cmf::upslope::Cell * > >**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          _v = PySlice_Check(argv[1]);
        }
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (argc == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = swig::asptr(argv[0], (std::vector<cmf::upslope::Cell*,std::allocator< cmf::upslope::Cell * > >**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      return _wrap_cell_vector___getitem____SWIG_0(self, argc, argv);
    case 2:
      return _wrap_cell_vector___getitem____SWIG_1(self, argc, argv);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'cell_vector___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    __getitem__(std::vector< cmf::upslope::Cell * > *,PySliceObject *)\n"
    "    __getitem__(std::vector< cmf::upslope::Cell * > *,std::vector< cmf::upslope::Cell * >::difference_type)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_cell_vector___setitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< cmf::upslope::Cell * > *arg1 = (std::vector< cmf::upslope::Cell * > *) 0 ;
  std::vector< cmf::upslope::Cell * >::difference_type arg2 ;
  std::vector< cmf::upslope::Cell * >::value_type arg3 = (std::vector< cmf::upslope::Cell * >::value_type) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_cmf__upslope__Cell_p_std__allocatorT_cmf__upslope__Cell_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cell_vector___setitem__" "', argument " "1"" of type '" "std::vector< cmf::upslope::Cell * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< cmf::upslope::Cell * > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cell_vector___setitem__" "', argument " "2"" of type '" "std::vector< cmf::upslope::Cell * >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< cmf::upslope::Cell * >::difference_type >(val2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_std__vectorT_cmf__upslope__Cell_p_std__allocatorT_cmf__upslope__Cell_p_t_t__value_type, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "cell_vector___setitem__" "', argument " "3"" of type '" "std::vector< cmf::upslope::Cell * >::value_type""'"); 
  }
  arg3 = reinterpret_cast< std::vector< cmf::upslope::Cell * >::value_type >(argp3);
  {
    try {
      try {
        std_vector_Sl_cmf_upslope_Cell_Sm__Sg____setitem____SWIG_1(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cell_vector___setitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"cell_vector___setitem__",0,3,argv))) SWIG_fail;
  --argc;
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (argc == 3) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = swig::asptr(argv[0], (std::vector<cmf::upslope::Cell*,std::allocator< cmf::upslope::Cell * > >**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          _v = PySlice_Check(argv[1]);
        }
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = swig::asptr(argv[2], (std::vector<cmf::upslope::Cell*,std::allocator< cmf::upslope::Cell * > >**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (argc == 3) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = swig::asptr(argv[0], (std::vector<cmf::upslope::Cell*,std::allocator< cmf::upslope::Cell * > >**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_std__vectorT_cmf__upslope__Cell_p_std__allocatorT_cmf__upslope__Cell_p_t_t__value_type, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      return _wrap_cell_vector___setitem____SWIG_0(self, argc, argv);
    case 2:
      return _wrap_cell_vector___setitem____SWIG_1(self, argc, argv);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'cell_vector___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    __setitem__(std::vector< cmf::upslope::Cell * > *,PySliceObject *,std::vector< cmf::upslope::Cell *,std::allocator< cmf::upslope::Cell * > > const &)\n"
    "    __setitem__(std::vector< cmf::upslope::Cell * > *,std::vector< cmf::upslope::Cell * >::difference_type,std::vector< cmf::upslope::Cell * >::value_type)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_cell_vector_append(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< cmf::upslope::Cell * > *arg1 = (std::vector< cmf::upslope::Cell * > *) 0 ;
  std::vector< cmf::upslope::Cell * >::value_type arg2 = (std::vector< cmf::upslope::Cell * >::value_type) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"cell_vector_append",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_cmf__upslope__Cell_p_std__allocatorT_cmf__upslope__Cell_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cell_vector_append" "', argument " "1"" of type '" "std::vector< cmf::upslope::Cell * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< cmf::upslope::Cell * > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_std__vectorT_cmf__upslope__Cell_p_std__allocatorT_cmf__upslope__Cell_p_t_t__value_type, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cell_vector_append" "', argument " "2"" of type '" "std::vector< cmf::upslope::Cell * >::value_type""'"); 
  }
  arg2 = reinterpret_cast< std::vector< cmf::upslope::Cell * >::value_type >(argp2);
  {
    try {
      std_vector_Sl_cmf_upslope_Cell_Sm__Sg__append(arg1,arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_cell_vector__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  std::vector< cmf::upslope::Cell * > *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  {
    try {
      result = (std::vector< cmf::upslope::Cell * > *)new std::vector< cmf::upslope::Cell * >();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_cmf__upslope__Cell_p_std__allocatorT_cmf__upslope__Cell_p_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_cell_vector__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< cmf::upslope::Cell * > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  std::vector< cmf::upslope::Cell * > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    std::vector<cmf::upslope::Cell*,std::allocator< cmf::upslope::Cell * > > *ptr = (std::vector<cmf::upslope::Cell*,std::allocator< cmf::upslope::Cell * > > *)0;
    res1 = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_cell_vector" "', argument " "1"" of type '" "std::vector< cmf::upslope::Cell * > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_cell_vector" "', argument " "1"" of type '" "std::vector< cmf::upslope::Cell * > const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try {
      result = (std::vector< cmf::upslope::Cell * > *)new std::vector< cmf::upslope::Cell * >((std::vector< cmf::upslope::Cell * > const &)*arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_cmf__upslope__Cell_p_std__allocatorT_cmf__upslope__Cell_p_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_cell_vector_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< cmf::upslope::Cell * > *arg1 = (std::vector< cmf::upslope::Cell * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_cmf__upslope__Cell_p_std__allocatorT_cmf__upslope__Cell_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cell_vector_empty" "', argument " "1"" of type '" "std::vector< cmf::upslope::Cell * > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< cmf::upslope::Cell * > * >(argp1);
  {
    try {
      result = (bool)((std::vector< cmf::upslope::Cell * > const *)arg1)->empty();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cell_vector_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< cmf::upslope::Cell * > *arg1 = (std::vector< cmf::upslope::Cell * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< cmf::upslope::Cell * >::size_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_cmf__upslope__Cell_p_std__allocatorT_cmf__upslope__Cell_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cell_vector_size" "', argument " "1"" of type '" "std::vector< cmf::upslope::Cell * > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< cmf::upslope::Cell * > * >(argp1);
  {
    try {
      result = ((std::vector< cmf::upslope::Cell * > const *)arg1)->size();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cell_vector_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< cmf::upslope::Cell * > *arg1 = (std::vector< cmf::upslope::Cell * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_cmf__upslope__Cell_p_std__allocatorT_cmf__upslope__Cell_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cell_vector_clear" "', argument " "1"" of type '" "std::vector< cmf::upslope::Cell * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< cmf::upslope::Cell * > * >(argp1);
  {
    try {
      (arg1)->clear();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cell_vector_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< cmf::upslope::Cell * > *arg1 = (std::vector< cmf::upslope::Cell * > *) 0 ;
  std::vector< cmf::upslope::Cell * > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"cell_vector_swap",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_cmf__upslope__Cell_p_std__allocatorT_cmf__upslope__Cell_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cell_vector_swap" "', argument " "1"" of type '" "std::vector< cmf::upslope::Cell * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< cmf::upslope::Cell * > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__vectorT_cmf__upslope__Cell_p_std__allocatorT_cmf__upslope__Cell_p_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cell_vector_swap" "', argument " "2"" of type '" "std::vector< cmf::upslope::Cell * > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cell_vector_swap" "', argument " "2"" of type '" "std::vector< cmf::upslope::Cell * > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< cmf::upslope::Cell * > * >(argp2);
  {
    try {
      (arg1)->swap(*arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cell_vector_get_allocator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< cmf::upslope::Cell * > *arg1 = (std::vector< cmf::upslope::Cell * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  SwigValueWrapper< std::allocator< cmf::upslope::Cell * > > result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_cmf__upslope__Cell_p_std__allocatorT_cmf__upslope__Cell_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cell_vector_get_allocator" "', argument " "1"" of type '" "std::vector< cmf::upslope::Cell * > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< cmf::upslope::Cell * > * >(argp1);
  {
    try {
      result = ((std::vector< cmf::upslope::Cell * > const *)arg1)->get_allocator();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj((new std::vector< cmf::upslope::Cell * >::allocator_type(static_cast< const std::vector< cmf::upslope::Cell * >::allocator_type& >(result))), SWIGTYPE_p_std__vectorT_cmf__upslope__Cell_p_std__allocatorT_cmf__upslope__Cell_p_t_t__allocator_type, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cell_vector_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< cmf::upslope::Cell * > *arg1 = (std::vector< cmf::upslope::Cell * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< cmf::upslope::Cell * >::const_iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_cmf__upslope__Cell_p_std__allocatorT_cmf__upslope__Cell_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cell_vector_begin" "', argument " "1"" of type '" "std::vector< cmf::upslope::Cell * > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< cmf::upslope::Cell * > * >(argp1);
  {
    try {
      result = ((std::vector< cmf::upslope::Cell * > const *)arg1)->begin();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< cmf::upslope::Cell * >::const_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cell_vector_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< cmf::upslope::Cell * > *arg1 = (std::vector< cmf::upslope::Cell * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< cmf::upslope::Cell * >::const_iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_cmf__upslope__Cell_p_std__allocatorT_cmf__upslope__Cell_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cell_vector_end" "', argument " "1"" of type '" "std::vector< cmf::upslope::Cell * > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< cmf::upslope::Cell * > * >(argp1);
  {
    try {
      result = ((std::vector< cmf::upslope::Cell * > const *)arg1)->end();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< cmf::upslope::Cell * >::const_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cell_vector_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< cmf::upslope::Cell * > *arg1 = (std::vector< cmf::upslope::Cell * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< cmf::upslope::Cell * >::const_reverse_iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_cmf__upslope__Cell_p_std__allocatorT_cmf__upslope__Cell_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cell_vector_rbegin" "', argument " "1"" of type '" "std::vector< cmf::upslope::Cell * > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< cmf::upslope::Cell * > * >(argp1);
  {
    try {
      result = ((std::vector< cmf::upslope::Cell * > const *)arg1)->rbegin();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< cmf::upslope::Cell * >::const_reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cell_vector_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< cmf::upslope::Cell * > *arg1 = (std::vector< cmf::upslope::Cell * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< cmf::upslope::Cell * >::const_reverse_iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_cmf__upslope__Cell_p_std__allocatorT_cmf__upslope__Cell_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cell_vector_rend" "', argument " "1"" of type '" "std::vector< cmf::upslope::Cell * > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< cmf::upslope::Cell * > * >(argp1);
  {
    try {
      result = ((std::vector< cmf::upslope::Cell * > const *)arg1)->rend();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< cmf::upslope::Cell * >::const_reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_cell_vector__SWIG_2(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< cmf::upslope::Cell * >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  std::vector< cmf::upslope::Cell * > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_cell_vector" "', argument " "1"" of type '" "std::vector< cmf::upslope::Cell * >::size_type""'");
  } 
  arg1 = static_cast< std::vector< cmf::upslope::Cell * >::size_type >(val1);
  {
    try {
      result = (std::vector< cmf::upslope::Cell * > *)new std::vector< cmf::upslope::Cell * >(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_cmf__upslope__Cell_p_std__allocatorT_cmf__upslope__Cell_p_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cell_vector_pop_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< cmf::upslope::Cell * > *arg1 = (std::vector< cmf::upslope::Cell * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_cmf__upslope__Cell_p_std__allocatorT_cmf__upslope__Cell_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cell_vector_pop_back" "', argument " "1"" of type '" "std::vector< cmf::upslope::Cell * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< cmf::upslope::Cell * > * >(argp1);
  {
    try {
      (arg1)->pop_back();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cell_vector_resize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< cmf::upslope::Cell * > *arg1 = (std::vector< cmf::upslope::Cell * > *) 0 ;
  std::vector< cmf::upslope::Cell * >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_cmf__upslope__Cell_p_std__allocatorT_cmf__upslope__Cell_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cell_vector_resize" "', argument " "1"" of type '" "std::vector< cmf::upslope::Cell * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< cmf::upslope::Cell * > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cell_vector_resize" "', argument " "2"" of type '" "std::vector< cmf::upslope::Cell * >::size_type""'");
  } 
  arg2 = static_cast< std::vector< cmf::upslope::Cell * >::size_type >(val2);
  {
    try {
      (arg1)->resize(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cell_vector_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< cmf::upslope::Cell * > *arg1 = (std::vector< cmf::upslope::Cell * > *) 0 ;
  std::vector< cmf::upslope::Cell * >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  std::vector< cmf::upslope::Cell * >::iterator result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_cmf__upslope__Cell_p_std__allocatorT_cmf__upslope__Cell_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cell_vector_erase" "', argument " "1"" of type '" "std::vector< cmf::upslope::Cell * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< cmf::upslope::Cell * > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "cell_vector_erase" "', argument " "2"" of type '" "std::vector< cmf::upslope::Cell * >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< cmf::upslope::Cell * >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< cmf::upslope::Cell * >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "cell_vector_erase" "', argument " "2"" of type '" "std::vector< cmf::upslope::Cell * >::iterator""'");
    }
  }
  {
    try {
      result = (arg1)->erase(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< cmf::upslope::Cell * >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cell_vector_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< cmf::upslope::Cell * > *arg1 = (std::vector< cmf::upslope::Cell * > *) 0 ;
  std::vector< cmf::upslope::Cell * >::iterator arg2 ;
  std::vector< cmf::upslope::Cell * >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  std::vector< cmf::upslope::Cell * >::iterator result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_cmf__upslope__Cell_p_std__allocatorT_cmf__upslope__Cell_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cell_vector_erase" "', argument " "1"" of type '" "std::vector< cmf::upslope::Cell * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< cmf::upslope::Cell * > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "cell_vector_erase" "', argument " "2"" of type '" "std::vector< cmf::upslope::Cell * >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< cmf::upslope::Cell * >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< cmf::upslope::Cell * >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "cell_vector_erase" "', argument " "2"" of type '" "std::vector< cmf::upslope::Cell * >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "cell_vector_erase" "', argument " "3"" of type '" "std::vector< cmf::upslope::Cell * >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< cmf::upslope::Cell * >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< cmf::upslope::Cell * >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "cell_vector_erase" "', argument " "3"" of type '" "std::vector< cmf::upslope::Cell * >::iterator""'");
    }
  }
  {
    try {
      result = (arg1)->erase(arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< cmf::upslope::Cell * >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cell_vector_erase(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"cell_vector_erase",0,3,argv))) SWIG_fail;
  --argc;
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (argc == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = swig::asptr(argv[0], (std::vector<cmf::upslope::Cell*,std::allocator< cmf::upslope::Cell * > >**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< cmf::upslope::Cell * >::iterator > *>(iter) != 0));
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (argc == 3) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = swig::asptr(argv[0], (std::vector<cmf::upslope::Cell*,std::allocator< cmf::upslope::Cell * > >**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< cmf::upslope::Cell * >::iterator > *>(iter) != 0));
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< cmf::upslope::Cell * >::iterator > *>(iter) != 0));
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      return _wrap_cell_vector_erase__SWIG_0(self, argc, argv);
    case 2:
      return _wrap_cell_vector_erase__SWIG_1(self, argc, argv);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'cell_vector_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    erase(std::vector< cmf::upslope::Cell * > *,std::vector< cmf::upslope::Cell * >::iterator)\n"
    "    erase(std::vector< cmf::upslope::Cell * > *,std::vector< cmf::upslope::Cell * >::iterator,std::vector< cmf::upslope::Cell * >::iterator)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_cell_vector__SWIG_3(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< cmf::upslope::Cell * >::size_type arg1 ;
  std::vector< cmf::upslope::Cell * >::value_type arg2 = (std::vector< cmf::upslope::Cell * >::value_type) 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  std::vector< cmf::upslope::Cell * > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_cell_vector" "', argument " "1"" of type '" "std::vector< cmf::upslope::Cell * >::size_type""'");
  } 
  arg1 = static_cast< std::vector< cmf::upslope::Cell * >::size_type >(val1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_std__vectorT_cmf__upslope__Cell_p_std__allocatorT_cmf__upslope__Cell_p_t_t__value_type, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_cell_vector" "', argument " "2"" of type '" "std::vector< cmf::upslope::Cell * >::value_type""'"); 
  }
  arg2 = reinterpret_cast< std::vector< cmf::upslope::Cell * >::value_type >(argp2);
  {
    try {
      result = (std::vector< cmf::upslope::Cell * > *)new std::vector< cmf::upslope::Cell * >(arg1,arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_cmf__upslope__Cell_p_std__allocatorT_cmf__upslope__Cell_p_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_cell_vector(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"new_cell_vector",0,2,argv))) SWIG_fail;
  --argc;
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (argc == 0) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
    if (argc == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          int res = SWIG_AsVal_size_t(argv[0], NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
    if (argc == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = swig::asptr(argv[0], (std::vector<cmf::upslope::Cell*,std::allocator< cmf::upslope::Cell * > >**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 3;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_3:
    
    if (argc == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          int res = SWIG_AsVal_size_t(argv[0], NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_std__vectorT_cmf__upslope__Cell_p_std__allocatorT_cmf__upslope__Cell_p_t_t__value_type, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 4;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_4:
    
  dispatch:
    switch(_index) {
    case 1:
      return _wrap_new_cell_vector__SWIG_0(self, argc, argv);
    case 2:
      return _wrap_new_cell_vector__SWIG_2(self, argc, argv);
    case 3:
      return _wrap_new_cell_vector__SWIG_1(self, argc, argv);
    case 4:
      return _wrap_new_cell_vector__SWIG_3(self, argc, argv);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_cell_vector'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< cmf::upslope::Cell * >()\n"
    "    std::vector< cmf::upslope::Cell * >(std::vector< cmf::upslope::Cell * > const &)\n"
    "    std::vector< cmf::upslope::Cell * >(std::vector< cmf::upslope::Cell * >::size_type)\n"
    "    std::vector< cmf::upslope::Cell * >(std::vector< cmf::upslope::Cell * >::size_type,std::vector< cmf::upslope::Cell * >::value_type)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_cell_vector_push_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< cmf::upslope::Cell * > *arg1 = (std::vector< cmf::upslope::Cell * > *) 0 ;
  std::vector< cmf::upslope::Cell * >::value_type arg2 = (std::vector< cmf::upslope::Cell * >::value_type) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"cell_vector_push_back",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_cmf__upslope__Cell_p_std__allocatorT_cmf__upslope__Cell_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cell_vector_push_back" "', argument " "1"" of type '" "std::vector< cmf::upslope::Cell * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< cmf::upslope::Cell * > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_std__vectorT_cmf__upslope__Cell_p_std__allocatorT_cmf__upslope__Cell_p_t_t__value_type, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cell_vector_push_back" "', argument " "2"" of type '" "std::vector< cmf::upslope::Cell * >::value_type""'"); 
  }
  arg2 = reinterpret_cast< std::vector< cmf::upslope::Cell * >::value_type >(argp2);
  {
    try {
      (arg1)->push_back(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cell_vector_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< cmf::upslope::Cell * > *arg1 = (std::vector< cmf::upslope::Cell * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< cmf::upslope::Cell * >::value_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_cmf__upslope__Cell_p_std__allocatorT_cmf__upslope__Cell_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cell_vector_front" "', argument " "1"" of type '" "std::vector< cmf::upslope::Cell * > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< cmf::upslope::Cell * > * >(argp1);
  {
    try {
      result = (std::vector< cmf::upslope::Cell * >::value_type)((std::vector< cmf::upslope::Cell * > const *)arg1)->front();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_std__vectorT_cmf__upslope__Cell_p_std__allocatorT_cmf__upslope__Cell_p_t_t__value_type, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cell_vector_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< cmf::upslope::Cell * > *arg1 = (std::vector< cmf::upslope::Cell * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< cmf::upslope::Cell * >::value_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_cmf__upslope__Cell_p_std__allocatorT_cmf__upslope__Cell_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cell_vector_back" "', argument " "1"" of type '" "std::vector< cmf::upslope::Cell * > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< cmf::upslope::Cell * > * >(argp1);
  {
    try {
      result = (std::vector< cmf::upslope::Cell * >::value_type)((std::vector< cmf::upslope::Cell * > const *)arg1)->back();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_std__vectorT_cmf__upslope__Cell_p_std__allocatorT_cmf__upslope__Cell_p_t_t__value_type, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cell_vector_assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< cmf::upslope::Cell * > *arg1 = (std::vector< cmf::upslope::Cell * > *) 0 ;
  std::vector< cmf::upslope::Cell * >::size_type arg2 ;
  std::vector< cmf::upslope::Cell * >::value_type arg3 = (std::vector< cmf::upslope::Cell * >::value_type) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  
  if (!SWIG_Python_UnpackTuple(args,"cell_vector_assign",3,3,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_cmf__upslope__Cell_p_std__allocatorT_cmf__upslope__Cell_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cell_vector_assign" "', argument " "1"" of type '" "std::vector< cmf::upslope::Cell * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< cmf::upslope::Cell * > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cell_vector_assign" "', argument " "2"" of type '" "std::vector< cmf::upslope::Cell * >::size_type""'");
  } 
  arg2 = static_cast< std::vector< cmf::upslope::Cell * >::size_type >(val2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_std__vectorT_cmf__upslope__Cell_p_std__allocatorT_cmf__upslope__Cell_p_t_t__value_type, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "cell_vector_assign" "', argument " "3"" of type '" "std::vector< cmf::upslope::Cell * >::value_type""'"); 
  }
  arg3 = reinterpret_cast< std::vector< cmf::upslope::Cell * >::value_type >(argp3);
  {
    try {
      (arg1)->assign(arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cell_vector_resize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< cmf::upslope::Cell * > *arg1 = (std::vector< cmf::upslope::Cell * > *) 0 ;
  std::vector< cmf::upslope::Cell * >::size_type arg2 ;
  std::vector< cmf::upslope::Cell * >::value_type arg3 = (std::vector< cmf::upslope::Cell * >::value_type) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_cmf__upslope__Cell_p_std__allocatorT_cmf__upslope__Cell_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cell_vector_resize" "', argument " "1"" of type '" "std::vector< cmf::upslope::Cell * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< cmf::upslope::Cell * > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cell_vector_resize" "', argument " "2"" of type '" "std::vector< cmf::upslope::Cell * >::size_type""'");
  } 
  arg2 = static_cast< std::vector< cmf::upslope::Cell * >::size_type >(val2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_std__vectorT_cmf__upslope__Cell_p_std__allocatorT_cmf__upslope__Cell_p_t_t__value_type, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "cell_vector_resize" "', argument " "3"" of type '" "std::vector< cmf::upslope::Cell * >::value_type""'"); 
  }
  arg3 = reinterpret_cast< std::vector< cmf::upslope::Cell * >::value_type >(argp3);
  {
    try {
      (arg1)->resize(arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cell_vector_resize(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"cell_vector_resize",0,3,argv))) SWIG_fail;
  --argc;
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (argc == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = swig::asptr(argv[0], (std::vector<cmf::upslope::Cell*,std::allocator< cmf::upslope::Cell * > >**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_size_t(argv[1], NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (argc == 3) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = swig::asptr(argv[0], (std::vector<cmf::upslope::Cell*,std::allocator< cmf::upslope::Cell * > >**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_size_t(argv[1], NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_std__vectorT_cmf__upslope__Cell_p_std__allocatorT_cmf__upslope__Cell_p_t_t__value_type, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      return _wrap_cell_vector_resize__SWIG_0(self, argc, argv);
    case 2:
      return _wrap_cell_vector_resize__SWIG_1(self, argc, argv);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'cell_vector_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    resize(std::vector< cmf::upslope::Cell * > *,std::vector< cmf::upslope::Cell * >::size_type)\n"
    "    resize(std::vector< cmf::upslope::Cell * > *,std::vector< cmf::upslope::Cell * >::size_type,std::vector< cmf::upslope::Cell * >::value_type)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_cell_vector_insert__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< cmf::upslope::Cell * > *arg1 = (std::vector< cmf::upslope::Cell * > *) 0 ;
  std::vector< cmf::upslope::Cell * >::iterator arg2 ;
  std::vector< cmf::upslope::Cell * >::value_type arg3 = (std::vector< cmf::upslope::Cell * >::value_type) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  std::vector< cmf::upslope::Cell * >::iterator result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_cmf__upslope__Cell_p_std__allocatorT_cmf__upslope__Cell_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cell_vector_insert" "', argument " "1"" of type '" "std::vector< cmf::upslope::Cell * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< cmf::upslope::Cell * > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "cell_vector_insert" "', argument " "2"" of type '" "std::vector< cmf::upslope::Cell * >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< cmf::upslope::Cell * >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< cmf::upslope::Cell * >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "cell_vector_insert" "', argument " "2"" of type '" "std::vector< cmf::upslope::Cell * >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_std__vectorT_cmf__upslope__Cell_p_std__allocatorT_cmf__upslope__Cell_p_t_t__value_type, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "cell_vector_insert" "', argument " "3"" of type '" "std::vector< cmf::upslope::Cell * >::value_type""'"); 
  }
  arg3 = reinterpret_cast< std::vector< cmf::upslope::Cell * >::value_type >(argp3);
  {
    try {
      result = (arg1)->insert(arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< cmf::upslope::Cell * >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cell_vector_insert__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< cmf::upslope::Cell * > *arg1 = (std::vector< cmf::upslope::Cell * > *) 0 ;
  std::vector< cmf::upslope::Cell * >::iterator arg2 ;
  std::vector< cmf::upslope::Cell * >::size_type arg3 ;
  std::vector< cmf::upslope::Cell * >::value_type arg4 = (std::vector< cmf::upslope::Cell * >::value_type) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_cmf__upslope__Cell_p_std__allocatorT_cmf__upslope__Cell_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cell_vector_insert" "', argument " "1"" of type '" "std::vector< cmf::upslope::Cell * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< cmf::upslope::Cell * > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "cell_vector_insert" "', argument " "2"" of type '" "std::vector< cmf::upslope::Cell * >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< cmf::upslope::Cell * >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< cmf::upslope::Cell * >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "cell_vector_insert" "', argument " "2"" of type '" "std::vector< cmf::upslope::Cell * >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "cell_vector_insert" "', argument " "3"" of type '" "std::vector< cmf::upslope::Cell * >::size_type""'");
  } 
  arg3 = static_cast< std::vector< cmf::upslope::Cell * >::size_type >(val3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4,SWIGTYPE_std__vectorT_cmf__upslope__Cell_p_std__allocatorT_cmf__upslope__Cell_p_t_t__value_type, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "cell_vector_insert" "', argument " "4"" of type '" "std::vector< cmf::upslope::Cell * >::value_type""'"); 
  }
  arg4 = reinterpret_cast< std::vector< cmf::upslope::Cell * >::value_type >(argp4);
  {
    try {
      (arg1)->insert(arg2,arg3,arg4);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cell_vector_insert(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"cell_vector_insert",0,4,argv))) SWIG_fail;
  --argc;
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (argc == 3) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = swig::asptr(argv[0], (std::vector<cmf::upslope::Cell*,std::allocator< cmf::upslope::Cell * > >**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< cmf::upslope::Cell * >::iterator > *>(iter) != 0));
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_std__vectorT_cmf__upslope__Cell_p_std__allocatorT_cmf__upslope__Cell_p_t_t__value_type, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (argc == 4) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = swig::asptr(argv[0], (std::vector<cmf::upslope::Cell*,std::allocator< cmf::upslope::Cell * > >**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< cmf::upslope::Cell * >::iterator > *>(iter) != 0));
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_std__vectorT_cmf__upslope__Cell_p_std__allocatorT_cmf__upslope__Cell_p_t_t__value_type, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      return _wrap_cell_vector_insert__SWIG_0(self, argc, argv);
    case 2:
      return _wrap_cell_vector_insert__SWIG_1(self, argc, argv);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'cell_vector_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    insert(std::vector< cmf::upslope::Cell * > *,std::vector< cmf::upslope::Cell * >::iterator,std::vector< cmf::upslope::Cell * >::value_type)\n"
    "    insert(std::vector< cmf::upslope::Cell * > *,std::vector< cmf::upslope::Cell * >::iterator,std::vector< cmf::upslope::Cell * >::size_type,std::vector< cmf::upslope::Cell * >::value_type)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_cell_vector_reserve(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< cmf::upslope::Cell * > *arg1 = (std::vector< cmf::upslope::Cell * > *) 0 ;
  std::vector< cmf::upslope::Cell * >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"cell_vector_reserve",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_cmf__upslope__Cell_p_std__allocatorT_cmf__upslope__Cell_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cell_vector_reserve" "', argument " "1"" of type '" "std::vector< cmf::upslope::Cell * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< cmf::upslope::Cell * > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cell_vector_reserve" "', argument " "2"" of type '" "std::vector< cmf::upslope::Cell * >::size_type""'");
  } 
  arg2 = static_cast< std::vector< cmf::upslope::Cell * >::size_type >(val2);
  {
    try {
      (arg1)->reserve(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cell_vector_capacity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< cmf::upslope::Cell * > *arg1 = (std::vector< cmf::upslope::Cell * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< cmf::upslope::Cell * >::size_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_cmf__upslope__Cell_p_std__allocatorT_cmf__upslope__Cell_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cell_vector_capacity" "', argument " "1"" of type '" "std::vector< cmf::upslope::Cell * > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< cmf::upslope::Cell * > * >(argp1);
  {
    try {
      result = ((std::vector< cmf::upslope::Cell * > const *)arg1)->capacity();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_cell_vector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< cmf::upslope::Cell * > *arg1 = (std::vector< cmf::upslope::Cell * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_cmf__upslope__Cell_p_std__allocatorT_cmf__upslope__Cell_p_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_cell_vector" "', argument " "1"" of type '" "std::vector< cmf::upslope::Cell * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< cmf::upslope::Cell * > * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *cell_vector_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_cmf__upslope__Cell_p_std__allocatorT_cmf__upslope__Cell_p_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *cell_vector_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_find_cell(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::cell_vector *arg1 = 0 ;
  cmf::geometry::point arg2 ;
  double arg3 = (double) 1e20 ;
  int res1 = SWIG_OLDOBJ ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  cmf::upslope::Cell *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args,"find_cell",2,3,swig_obj)) SWIG_fail;
  {
    std::vector<cmf::upslope::Cell*,std::allocator< cmf::upslope::Cell * > > *ptr = (std::vector<cmf::upslope::Cell*,std::allocator< cmf::upslope::Cell * > > *)0;
    res1 = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "find_cell" "', argument " "1"" of type '" "cmf::upslope::cells_ref""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "find_cell" "', argument " "1"" of type '" "cmf::upslope::cells_ref""'"); 
    }
    arg1 = ptr;
  }
  {
    cmf::geometry::point p;
    if (((!convert_xyz_to_point(swig_obj[1],p)) || !convert_seq_to_point(swig_obj[1],p)))
    {
      PyErr_SetString(PyExc_ValueError,"The object to convert needs to be either a sequence of length 2 or 3 or an object exposing an x and y attribute of type float(z is used if present)");
    }
    arg2=p;
  }
  if (swig_obj[2]) {
    ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "find_cell" "', argument " "3"" of type '" "double""'");
    } 
    arg3 = static_cast< double >(val3);
  }
  {
    try {
      result = (cmf::upslope::Cell *)cmf::upslope::find_cell((std::vector< cmf::upslope::Cell *,std::allocator< cmf::upslope::Cell * > > const &)*arg1,arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmf__upslope__Cell, 0 |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_get_boundary_cells(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::cell_vector *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject *swig_obj[1] ;
  cmf::upslope::cell_vector result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    std::vector<cmf::upslope::Cell*,std::allocator< cmf::upslope::Cell * > > *ptr = (std::vector<cmf::upslope::Cell*,std::allocator< cmf::upslope::Cell * > > *)0;
    res1 = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "get_boundary_cells" "', argument " "1"" of type '" "cmf::upslope::cells_ref""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "get_boundary_cells" "', argument " "1"" of type '" "cmf::upslope::cells_ref""'"); 
    }
    arg1 = ptr;
  }
  {
    try {
      result = cmf::upslope::get_boundary_cells((std::vector< cmf::upslope::Cell *,std::allocator< cmf::upslope::Cell * > > const &)*arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<cmf::upslope::Cell*,std::allocator< cmf::upslope::Cell * > > >(result));
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_get_connections(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::cell_vector *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject *swig_obj[1] ;
  cmf::water::connection_set result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    std::vector<cmf::upslope::Cell*,std::allocator< cmf::upslope::Cell * > > *ptr = (std::vector<cmf::upslope::Cell*,std::allocator< cmf::upslope::Cell * > > *)0;
    res1 = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "get_connections" "', argument " "1"" of type '" "cmf::upslope::cells_ref""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "get_connections" "', argument " "1"" of type '" "cmf::upslope::cells_ref""'"); 
    }
    arg1 = ptr;
  }
  {
    try {
      result = cmf::upslope::get_connections((std::vector< cmf::upslope::Cell *,std::allocator< cmf::upslope::Cell * > > const &)*arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = swig::from(static_cast< std::set<cmf::water::flux_connection *,std::less< cmf::water::flux_connection * >,std::allocator< cmf::water::flux_connection * > > >(result));
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_connect_cells_with_flux(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::cell_vector *arg1 = 0 ;
  cmf::upslope::CellConnector *arg2 = 0 ;
  int arg3 = (int) 0 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  
  if (!SWIG_Python_UnpackTuple(args,"connect_cells_with_flux",2,3,swig_obj)) SWIG_fail;
  {
    std::vector<cmf::upslope::Cell*,std::allocator< cmf::upslope::Cell * > > *ptr = (std::vector<cmf::upslope::Cell*,std::allocator< cmf::upslope::Cell * > > *)0;
    res1 = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "connect_cells_with_flux" "', argument " "1"" of type '" "cmf::upslope::cells_ref""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "connect_cells_with_flux" "', argument " "1"" of type '" "cmf::upslope::cells_ref""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cmf__upslope__CellConnector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "connect_cells_with_flux" "', argument " "2"" of type '" "cmf::upslope::CellConnector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "connect_cells_with_flux" "', argument " "2"" of type '" "cmf::upslope::CellConnector const &""'"); 
  }
  arg2 = reinterpret_cast< cmf::upslope::CellConnector * >(argp2);
  if (swig_obj[2]) {
    ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "connect_cells_with_flux" "', argument " "3"" of type '" "int""'");
    } 
    arg3 = static_cast< int >(val3);
  }
  {
    try {
      cmf::upslope::connect_cells_with_flux((std::vector< cmf::upslope::Cell *,std::allocator< cmf::upslope::Cell * > > const &)*arg1,(cmf::upslope::CellConnector const &)*arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_fill_sinks(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::cell_vector *arg1 = 0 ;
  double arg2 = (double) 0.001 ;
  int res1 = SWIG_OLDOBJ ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args,"fill_sinks",1,2,swig_obj)) SWIG_fail;
  {
    std::vector<cmf::upslope::Cell*,std::allocator< cmf::upslope::Cell * > > *ptr = (std::vector<cmf::upslope::Cell*,std::allocator< cmf::upslope::Cell * > > *)0;
    res1 = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fill_sinks" "', argument " "1"" of type '" "cmf::upslope::cells_ref""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fill_sinks" "', argument " "1"" of type '" "cmf::upslope::cells_ref""'"); 
    }
    arg1 = ptr;
  }
  if (swig_obj[1]) {
    ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "fill_sinks" "', argument " "2"" of type '" "double""'");
    } 
    arg2 = static_cast< double >(val2);
  }
  {
    try {
      result = (int)cmf::upslope::fill_sinks((std::vector< cmf::upslope::Cell *,std::allocator< cmf::upslope::Cell * > > const &)*arg1,arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_area(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::cell_vector *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    std::vector<cmf::upslope::Cell*,std::allocator< cmf::upslope::Cell * > > *ptr = (std::vector<cmf::upslope::Cell*,std::allocator< cmf::upslope::Cell * > > *)0;
    res1 = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "area" "', argument " "1"" of type '" "cmf::upslope::cells_ref""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "area" "', argument " "1"" of type '" "cmf::upslope::cells_ref""'"); 
    }
    arg1 = ptr;
  }
  {
    try {
      result = (double)cmf::upslope::area((std::vector< cmf::upslope::Cell *,std::allocator< cmf::upslope::Cell * > > const &)*arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_set_meteo_station(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::cell_vector *arg1 = 0 ;
  cmf::atmosphere::meteo_station_pointer arg2 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"set_meteo_station",2,2,swig_obj)) SWIG_fail;
  {
    std::vector<cmf::upslope::Cell*,std::allocator< cmf::upslope::Cell * > > *ptr = (std::vector<cmf::upslope::Cell*,std::allocator< cmf::upslope::Cell * > > *)0;
    res1 = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "set_meteo_station" "', argument " "1"" of type '" "cmf::upslope::cells_ref""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "set_meteo_station" "', argument " "1"" of type '" "cmf::upslope::cells_ref""'"); 
    }
    arg1 = ptr;
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(swig_obj[1], &argp2, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__atmosphere__MeteoStation_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "set_meteo_station" "', argument " "2"" of type '" "cmf::atmosphere::meteo_station_pointer""'"); 
    }
    if (argp2) arg2 = *(reinterpret_cast< cmf::atmosphere::meteo_station_pointer * >(argp2));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< cmf::atmosphere::meteo_station_pointer * >(argp2);
  }
  {
    try {
      cmf::upslope::set_meteo_station((std::vector< cmf::upslope::Cell *,std::allocator< cmf::upslope::Cell * > > const &)*arg1,arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_set_precipitation(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::cell_vector *arg1 = 0 ;
  cmf::math::timeseries arg2 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"set_precipitation",2,2,swig_obj)) SWIG_fail;
  {
    std::vector<cmf::upslope::Cell*,std::allocator< cmf::upslope::Cell * > > *ptr = (std::vector<cmf::upslope::Cell*,std::allocator< cmf::upslope::Cell * > > *)0;
    res1 = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "set_precipitation" "', argument " "1"" of type '" "cmf::upslope::cells_ref""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "set_precipitation" "', argument " "1"" of type '" "cmf::upslope::cells_ref""'"); 
    }
    arg1 = ptr;
  }
  {
    res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cmf__math__timeseries,  0  | SWIG_POINTER_IMPLICIT_CONV);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "set_precipitation" "', argument " "2"" of type '" "cmf::math::timeseries""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "set_precipitation" "', argument " "2"" of type '" "cmf::math::timeseries""'");
    } else {
      cmf::math::timeseries * temp = reinterpret_cast< cmf::math::timeseries * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      cmf::upslope::set_precipitation((std::vector< cmf::upslope::Cell *,std::allocator< cmf::upslope::Cell * > > const &)*arg1,arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_cell_positions(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::cell_vector *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject *swig_obj[1] ;
  SwigValueWrapper< cmf::geometry::point_vector > result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    std::vector<cmf::upslope::Cell*,std::allocator< cmf::upslope::Cell * > > *ptr = (std::vector<cmf::upslope::Cell*,std::allocator< cmf::upslope::Cell * > > *)0;
    res1 = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cell_positions" "', argument " "1"" of type '" "cmf::upslope::cells_ref""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cell_positions" "', argument " "1"" of type '" "cmf::upslope::cells_ref""'"); 
    }
    arg1 = ptr;
  }
  {
    try {
      result = cmf::upslope::cell_positions((std::vector< cmf::upslope::Cell *,std::allocator< cmf::upslope::Cell * > > const &)*arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj((new cmf::geometry::point_vector(static_cast< const cmf::geometry::point_vector& >(result))), SWIGTYPE_p_cmf__geometry__point_vector, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_cell_flux_directions(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::cell_vector *arg1 = 0 ;
  cmf::math::Time arg2 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  SwigValueWrapper< cmf::geometry::point_vector > result;
  
  if (!SWIG_Python_UnpackTuple(args,"cell_flux_directions",2,2,swig_obj)) SWIG_fail;
  {
    std::vector<cmf::upslope::Cell*,std::allocator< cmf::upslope::Cell * > > *ptr = (std::vector<cmf::upslope::Cell*,std::allocator< cmf::upslope::Cell * > > *)0;
    res1 = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cell_flux_directions" "', argument " "1"" of type '" "cmf::upslope::cells_ref""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cell_flux_directions" "', argument " "1"" of type '" "cmf::upslope::cells_ref""'"); 
    }
    arg1 = ptr;
  }
  {
    arg2 = convert_datetime_to_cmftime(swig_obj[1]);    
  }
  {
    try {
      result = cmf::upslope::cell_flux_directions((std::vector< cmf::upslope::Cell *,std::allocator< cmf::upslope::Cell * > > const &)*arg1,arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj((new cmf::geometry::point_vector(static_cast< const cmf::geometry::point_vector& >(result))), SWIGTYPE_p_cmf__geometry__point_vector, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN int Swig_var_rho_wg_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable rho_wg is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_rho_wg_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_double(static_cast< double >(cmf::upslope::rho_wg));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_pressure_to_waterhead(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "pressure_to_waterhead" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  {
    try {
      result = (double)cmf::upslope::pressure_to_waterhead(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_waterhead_to_pressure(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "waterhead_to_pressure" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  {
    try {
      result = (double)cmf::upslope::waterhead_to_pressure(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pF_to_waterhead(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "pF_to_waterhead" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  {
    try {
      result = (double)cmf::upslope::pF_to_waterhead(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_waterhead_to_pF(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "waterhead_to_pF" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  {
    try {
      result = (double)cmf::upslope::waterhead_to_pF(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RetentionCurve_K(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::RetentionCurve *arg1 = (cmf::upslope::RetentionCurve *) 0 ;
  real arg2 ;
  real arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  real result;
  
  if (!SWIG_Python_UnpackTuple(args,"RetentionCurve_K",3,3,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__upslope__RetentionCurve, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RetentionCurve_K" "', argument " "1"" of type '" "cmf::upslope::RetentionCurve const *""'"); 
  }
  arg1 = reinterpret_cast< cmf::upslope::RetentionCurve * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RetentionCurve_K" "', argument " "2"" of type '" "real""'");
  } 
  arg2 = static_cast< real >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RetentionCurve_K" "', argument " "3"" of type '" "real""'");
  } 
  arg3 = static_cast< real >(val3);
  {
    try {
      result = (real)((cmf::upslope::RetentionCurve const *)arg1)->K(arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RetentionCurve_Wetness_eff(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::RetentionCurve *arg1 = (cmf::upslope::RetentionCurve *) 0 ;
  real arg2 ;
  real arg3 = (real) 4.2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  real result;
  
  if (!SWIG_Python_UnpackTuple(args,"RetentionCurve_Wetness_eff",2,3,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__upslope__RetentionCurve, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RetentionCurve_Wetness_eff" "', argument " "1"" of type '" "cmf::upslope::RetentionCurve const *""'"); 
  }
  arg1 = reinterpret_cast< cmf::upslope::RetentionCurve * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RetentionCurve_Wetness_eff" "', argument " "2"" of type '" "real""'");
  } 
  arg2 = static_cast< real >(val2);
  if (swig_obj[2]) {
    ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RetentionCurve_Wetness_eff" "', argument " "3"" of type '" "real""'");
    } 
    arg3 = static_cast< real >(val3);
  }
  {
    try {
      result = (real)((cmf::upslope::RetentionCurve const *)arg1)->Wetness_eff(arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RetentionCurve_Porosity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::RetentionCurve *arg1 = (cmf::upslope::RetentionCurve *) 0 ;
  real arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  real result;
  
  if (!SWIG_Python_UnpackTuple(args,"RetentionCurve_Porosity",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__upslope__RetentionCurve, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RetentionCurve_Porosity" "', argument " "1"" of type '" "cmf::upslope::RetentionCurve const *""'"); 
  }
  arg1 = reinterpret_cast< cmf::upslope::RetentionCurve * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RetentionCurve_Porosity" "', argument " "2"" of type '" "real""'");
  } 
  arg2 = static_cast< real >(val2);
  {
    try {
      result = (real)((cmf::upslope::RetentionCurve const *)arg1)->Porosity(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RetentionCurve_VoidVolume(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::RetentionCurve *arg1 = (cmf::upslope::RetentionCurve *) 0 ;
  real arg2 ;
  real arg3 ;
  real arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject *swig_obj[4] ;
  real result;
  
  if (!SWIG_Python_UnpackTuple(args,"RetentionCurve_VoidVolume",4,4,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__upslope__RetentionCurve, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RetentionCurve_VoidVolume" "', argument " "1"" of type '" "cmf::upslope::RetentionCurve const *""'"); 
  }
  arg1 = reinterpret_cast< cmf::upslope::RetentionCurve * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RetentionCurve_VoidVolume" "', argument " "2"" of type '" "real""'");
  } 
  arg2 = static_cast< real >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RetentionCurve_VoidVolume" "', argument " "3"" of type '" "real""'");
  } 
  arg3 = static_cast< real >(val3);
  ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "RetentionCurve_VoidVolume" "', argument " "4"" of type '" "real""'");
  } 
  arg4 = static_cast< real >(val4);
  {
    try {
      result = (real)((cmf::upslope::RetentionCurve const *)arg1)->VoidVolume(arg2,arg3,arg4);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RetentionCurve_FillHeight(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::RetentionCurve *arg1 = (cmf::upslope::RetentionCurve *) 0 ;
  real arg2 ;
  real arg3 ;
  real arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject *swig_obj[4] ;
  real result;
  
  if (!SWIG_Python_UnpackTuple(args,"RetentionCurve_FillHeight",4,4,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__upslope__RetentionCurve, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RetentionCurve_FillHeight" "', argument " "1"" of type '" "cmf::upslope::RetentionCurve const *""'"); 
  }
  arg1 = reinterpret_cast< cmf::upslope::RetentionCurve * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RetentionCurve_FillHeight" "', argument " "2"" of type '" "real""'");
  } 
  arg2 = static_cast< real >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RetentionCurve_FillHeight" "', argument " "3"" of type '" "real""'");
  } 
  arg3 = static_cast< real >(val3);
  ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "RetentionCurve_FillHeight" "', argument " "4"" of type '" "real""'");
  } 
  arg4 = static_cast< real >(val4);
  {
    try {
      result = (real)((cmf::upslope::RetentionCurve const *)arg1)->FillHeight(arg2,arg3,arg4);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RetentionCurve_Transmissivity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::RetentionCurve *arg1 = (cmf::upslope::RetentionCurve *) 0 ;
  real arg2 ;
  real arg3 ;
  real arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject *swig_obj[4] ;
  real result;
  
  if (!SWIG_Python_UnpackTuple(args,"RetentionCurve_Transmissivity",4,4,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__upslope__RetentionCurve, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RetentionCurve_Transmissivity" "', argument " "1"" of type '" "cmf::upslope::RetentionCurve const *""'"); 
  }
  arg1 = reinterpret_cast< cmf::upslope::RetentionCurve * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RetentionCurve_Transmissivity" "', argument " "2"" of type '" "real""'");
  } 
  arg2 = static_cast< real >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RetentionCurve_Transmissivity" "', argument " "3"" of type '" "real""'");
  } 
  arg3 = static_cast< real >(val3);
  ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "RetentionCurve_Transmissivity" "', argument " "4"" of type '" "real""'");
  } 
  arg4 = static_cast< real >(val4);
  {
    try {
      result = (real)((cmf::upslope::RetentionCurve const *)arg1)->Transmissivity(arg2,arg3,arg4);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RetentionCurve_Wetness(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::RetentionCurve *arg1 = (cmf::upslope::RetentionCurve *) 0 ;
  real arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  real result;
  
  if (!SWIG_Python_UnpackTuple(args,"RetentionCurve_Wetness",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__upslope__RetentionCurve, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RetentionCurve_Wetness" "', argument " "1"" of type '" "cmf::upslope::RetentionCurve const *""'"); 
  }
  arg1 = reinterpret_cast< cmf::upslope::RetentionCurve * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RetentionCurve_Wetness" "', argument " "2"" of type '" "real""'");
  } 
  arg2 = static_cast< real >(val2);
  {
    try {
      result = (real)((cmf::upslope::RetentionCurve const *)arg1)->Wetness(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RetentionCurve_Wetness_pF(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::RetentionCurve *arg1 = (cmf::upslope::RetentionCurve *) 0 ;
  real arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  real result;
  
  if (!SWIG_Python_UnpackTuple(args,"RetentionCurve_Wetness_pF",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__upslope__RetentionCurve, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RetentionCurve_Wetness_pF" "', argument " "1"" of type '" "cmf::upslope::RetentionCurve const *""'"); 
  }
  arg1 = reinterpret_cast< cmf::upslope::RetentionCurve * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RetentionCurve_Wetness_pF" "', argument " "2"" of type '" "real""'");
  } 
  arg2 = static_cast< real >(val2);
  {
    try {
      result = (real)((cmf::upslope::RetentionCurve const *)arg1)->Wetness_pF(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RetentionCurve_MatricPotential(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::RetentionCurve *arg1 = (cmf::upslope::RetentionCurve *) 0 ;
  real arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  real result;
  
  if (!SWIG_Python_UnpackTuple(args,"RetentionCurve_MatricPotential",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__upslope__RetentionCurve, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RetentionCurve_MatricPotential" "', argument " "1"" of type '" "cmf::upslope::RetentionCurve const *""'"); 
  }
  arg1 = reinterpret_cast< cmf::upslope::RetentionCurve * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RetentionCurve_MatricPotential" "', argument " "2"" of type '" "real""'");
  } 
  arg2 = static_cast< real >(val2);
  {
    try {
      result = (real)((cmf::upslope::RetentionCurve const *)arg1)->MatricPotential(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RetentionCurve_copy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::RetentionCurve *arg1 = (cmf::upslope::RetentionCurve *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  cmf::upslope::RetentionCurve *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__upslope__RetentionCurve, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RetentionCurve_copy" "', argument " "1"" of type '" "cmf::upslope::RetentionCurve const *""'"); 
  }
  arg1 = reinterpret_cast< cmf::upslope::RetentionCurve * >(argp1);
  {
    try {
      result = (cmf::upslope::RetentionCurve *)((cmf::upslope::RetentionCurve const *)arg1)->copy();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmf__upslope__RetentionCurve, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_RetentionCurve(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::RetentionCurve *arg1 = (cmf::upslope::RetentionCurve *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__upslope__RetentionCurve, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_RetentionCurve" "', argument " "1"" of type '" "cmf::upslope::RetentionCurve *""'"); 
  }
  arg1 = reinterpret_cast< cmf::upslope::RetentionCurve * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *RetentionCurve_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_cmf__upslope__RetentionCurve, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_BrooksCoreyRetentionCurve_SetKsat(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::BrooksCoreyRetentionCurve *arg1 = (cmf::upslope::BrooksCoreyRetentionCurve *) 0 ;
  real arg2 ;
  real arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  
  if (!SWIG_Python_UnpackTuple(args,"BrooksCoreyRetentionCurve_SetKsat",3,3,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__upslope__BrooksCoreyRetentionCurve, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BrooksCoreyRetentionCurve_SetKsat" "', argument " "1"" of type '" "cmf::upslope::BrooksCoreyRetentionCurve *""'"); 
  }
  arg1 = reinterpret_cast< cmf::upslope::BrooksCoreyRetentionCurve * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BrooksCoreyRetentionCurve_SetKsat" "', argument " "2"" of type '" "real""'");
  } 
  arg2 = static_cast< real >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BrooksCoreyRetentionCurve_SetKsat" "', argument " "3"" of type '" "real""'");
  } 
  arg3 = static_cast< real >(val3);
  {
    try {
      (arg1)->SetKsat(arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BrooksCoreyRetentionCurve_SetPorosity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::BrooksCoreyRetentionCurve *arg1 = (cmf::upslope::BrooksCoreyRetentionCurve *) 0 ;
  real arg2 ;
  real arg3 = (real) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  
  if (!SWIG_Python_UnpackTuple(args,"BrooksCoreyRetentionCurve_SetPorosity",2,3,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__upslope__BrooksCoreyRetentionCurve, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BrooksCoreyRetentionCurve_SetPorosity" "', argument " "1"" of type '" "cmf::upslope::BrooksCoreyRetentionCurve *""'"); 
  }
  arg1 = reinterpret_cast< cmf::upslope::BrooksCoreyRetentionCurve * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BrooksCoreyRetentionCurve_SetPorosity" "', argument " "2"" of type '" "real""'");
  } 
  arg2 = static_cast< real >(val2);
  if (swig_obj[2]) {
    ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BrooksCoreyRetentionCurve_SetPorosity" "', argument " "3"" of type '" "real""'");
    } 
    arg3 = static_cast< real >(val3);
  }
  {
    try {
      (arg1)->SetPorosity(arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BrooksCoreyRetentionCurve_wetness_X_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::BrooksCoreyRetentionCurve *arg1 = (cmf::upslope::BrooksCoreyRetentionCurve *) 0 ;
  real arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"BrooksCoreyRetentionCurve_wetness_X_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__upslope__BrooksCoreyRetentionCurve, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BrooksCoreyRetentionCurve_wetness_X_set" "', argument " "1"" of type '" "cmf::upslope::BrooksCoreyRetentionCurve *""'"); 
  }
  arg1 = reinterpret_cast< cmf::upslope::BrooksCoreyRetentionCurve * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BrooksCoreyRetentionCurve_wetness_X_set" "', argument " "2"" of type '" "real""'");
  } 
  arg2 = static_cast< real >(val2);
  if (arg1) (arg1)->wetness_X = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BrooksCoreyRetentionCurve_wetness_X_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::BrooksCoreyRetentionCurve *arg1 = (cmf::upslope::BrooksCoreyRetentionCurve *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  real result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__upslope__BrooksCoreyRetentionCurve, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BrooksCoreyRetentionCurve_wetness_X_get" "', argument " "1"" of type '" "cmf::upslope::BrooksCoreyRetentionCurve *""'"); 
  }
  arg1 = reinterpret_cast< cmf::upslope::BrooksCoreyRetentionCurve * >(argp1);
  result = (real) ((arg1)->wetness_X);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BrooksCoreyRetentionCurve_Psi_X_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::BrooksCoreyRetentionCurve *arg1 = (cmf::upslope::BrooksCoreyRetentionCurve *) 0 ;
  real arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"BrooksCoreyRetentionCurve_Psi_X_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__upslope__BrooksCoreyRetentionCurve, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BrooksCoreyRetentionCurve_Psi_X_set" "', argument " "1"" of type '" "cmf::upslope::BrooksCoreyRetentionCurve *""'"); 
  }
  arg1 = reinterpret_cast< cmf::upslope::BrooksCoreyRetentionCurve * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BrooksCoreyRetentionCurve_Psi_X_set" "', argument " "2"" of type '" "real""'");
  } 
  arg2 = static_cast< real >(val2);
  if (arg1) (arg1)->Psi_X = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BrooksCoreyRetentionCurve_Psi_X_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::BrooksCoreyRetentionCurve *arg1 = (cmf::upslope::BrooksCoreyRetentionCurve *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  real result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__upslope__BrooksCoreyRetentionCurve, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BrooksCoreyRetentionCurve_Psi_X_get" "', argument " "1"" of type '" "cmf::upslope::BrooksCoreyRetentionCurve *""'"); 
  }
  arg1 = reinterpret_cast< cmf::upslope::BrooksCoreyRetentionCurve * >(argp1);
  result = (real) ((arg1)->Psi_X);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BrooksCoreyRetentionCurve_b(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::BrooksCoreyRetentionCurve *arg1 = (cmf::upslope::BrooksCoreyRetentionCurve *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  real result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__upslope__BrooksCoreyRetentionCurve, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BrooksCoreyRetentionCurve_b" "', argument " "1"" of type '" "cmf::upslope::BrooksCoreyRetentionCurve const *""'"); 
  }
  arg1 = reinterpret_cast< cmf::upslope::BrooksCoreyRetentionCurve * >(argp1);
  {
    try {
      result = (real)((cmf::upslope::BrooksCoreyRetentionCurve const *)arg1)->b();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BrooksCoreyRetentionCurve_Set_b(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::BrooksCoreyRetentionCurve *arg1 = (cmf::upslope::BrooksCoreyRetentionCurve *) 0 ;
  real arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"BrooksCoreyRetentionCurve_Set_b",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__upslope__BrooksCoreyRetentionCurve, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BrooksCoreyRetentionCurve_Set_b" "', argument " "1"" of type '" "cmf::upslope::BrooksCoreyRetentionCurve *""'"); 
  }
  arg1 = reinterpret_cast< cmf::upslope::BrooksCoreyRetentionCurve * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BrooksCoreyRetentionCurve_Set_b" "', argument " "2"" of type '" "real""'");
  } 
  arg2 = static_cast< real >(val2);
  {
    try {
      (arg1)->Set_b(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_BrooksCoreyRetentionCurve(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  real arg1 = (real) 15 ;
  real arg2 = (real) 0.5 ;
  real arg3 = (real) 5 ;
  real arg4 = (real) 0.2 ;
  real arg5 = (real) cmf::upslope::pF_to_waterhead(2.5) ;
  real arg6 = (real) 0 ;
  real arg7 = (real) 0 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  double val7 ;
  int ecode7 = 0 ;
  PyObject *swig_obj[7] ;
  cmf::upslope::BrooksCoreyRetentionCurve *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args,"new_BrooksCoreyRetentionCurve",0,7,swig_obj)) SWIG_fail;
  if (swig_obj[0]) {
    ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_BrooksCoreyRetentionCurve" "', argument " "1"" of type '" "real""'");
    } 
    arg1 = static_cast< real >(val1);
  }
  if (swig_obj[1]) {
    ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_BrooksCoreyRetentionCurve" "', argument " "2"" of type '" "real""'");
    } 
    arg2 = static_cast< real >(val2);
  }
  if (swig_obj[2]) {
    ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_BrooksCoreyRetentionCurve" "', argument " "3"" of type '" "real""'");
    } 
    arg3 = static_cast< real >(val3);
  }
  if (swig_obj[3]) {
    ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_BrooksCoreyRetentionCurve" "', argument " "4"" of type '" "real""'");
    } 
    arg4 = static_cast< real >(val4);
  }
  if (swig_obj[4]) {
    ecode5 = SWIG_AsVal_double(swig_obj[4], &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_BrooksCoreyRetentionCurve" "', argument " "5"" of type '" "real""'");
    } 
    arg5 = static_cast< real >(val5);
  }
  if (swig_obj[5]) {
    ecode6 = SWIG_AsVal_double(swig_obj[5], &val6);
    if (!SWIG_IsOK(ecode6)) {
      SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "new_BrooksCoreyRetentionCurve" "', argument " "6"" of type '" "real""'");
    } 
    arg6 = static_cast< real >(val6);
  }
  if (swig_obj[6]) {
    ecode7 = SWIG_AsVal_double(swig_obj[6], &val7);
    if (!SWIG_IsOK(ecode7)) {
      SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "new_BrooksCoreyRetentionCurve" "', argument " "7"" of type '" "real""'");
    } 
    arg7 = static_cast< real >(val7);
  }
  {
    try {
      result = (cmf::upslope::BrooksCoreyRetentionCurve *)new cmf::upslope::BrooksCoreyRetentionCurve(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmf__upslope__BrooksCoreyRetentionCurve, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BrooksCoreyRetentionCurve_CreateFrom2Points(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  real arg1 ;
  real arg2 ;
  real arg3 ;
  real arg4 ;
  real arg5 = (real) cmf::upslope::pF_to_waterhead(2.5) ;
  real arg6 = (real) cmf::upslope::pF_to_waterhead(4.2) ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  PyObject *swig_obj[6] ;
  cmf::upslope::BrooksCoreyRetentionCurve result;
  
  if (!SWIG_Python_UnpackTuple(args,"BrooksCoreyRetentionCurve_CreateFrom2Points",4,6,swig_obj)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "BrooksCoreyRetentionCurve_CreateFrom2Points" "', argument " "1"" of type '" "real""'");
  } 
  arg1 = static_cast< real >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BrooksCoreyRetentionCurve_CreateFrom2Points" "', argument " "2"" of type '" "real""'");
  } 
  arg2 = static_cast< real >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BrooksCoreyRetentionCurve_CreateFrom2Points" "', argument " "3"" of type '" "real""'");
  } 
  arg3 = static_cast< real >(val3);
  ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "BrooksCoreyRetentionCurve_CreateFrom2Points" "', argument " "4"" of type '" "real""'");
  } 
  arg4 = static_cast< real >(val4);
  if (swig_obj[4]) {
    ecode5 = SWIG_AsVal_double(swig_obj[4], &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "BrooksCoreyRetentionCurve_CreateFrom2Points" "', argument " "5"" of type '" "real""'");
    } 
    arg5 = static_cast< real >(val5);
  }
  if (swig_obj[5]) {
    ecode6 = SWIG_AsVal_double(swig_obj[5], &val6);
    if (!SWIG_IsOK(ecode6)) {
      SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "BrooksCoreyRetentionCurve_CreateFrom2Points" "', argument " "6"" of type '" "real""'");
    } 
    arg6 = static_cast< real >(val6);
  }
  {
    try {
      result = cmf::upslope::BrooksCoreyRetentionCurve::CreateFrom2Points(arg1,arg2,arg3,arg4,arg5,arg6);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj((new cmf::upslope::BrooksCoreyRetentionCurve(static_cast< const cmf::upslope::BrooksCoreyRetentionCurve& >(result))), SWIGTYPE_p_cmf__upslope__BrooksCoreyRetentionCurve, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BrooksCoreyRetentionCurve_copy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::BrooksCoreyRetentionCurve *arg1 = (cmf::upslope::BrooksCoreyRetentionCurve *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  cmf::upslope::BrooksCoreyRetentionCurve *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__upslope__BrooksCoreyRetentionCurve, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BrooksCoreyRetentionCurve_copy" "', argument " "1"" of type '" "cmf::upslope::BrooksCoreyRetentionCurve const *""'"); 
  }
  arg1 = reinterpret_cast< cmf::upslope::BrooksCoreyRetentionCurve * >(argp1);
  {
    try {
      result = (cmf::upslope::BrooksCoreyRetentionCurve *)((cmf::upslope::BrooksCoreyRetentionCurve const *)arg1)->copy();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmf__upslope__BrooksCoreyRetentionCurve, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_BrooksCoreyRetentionCurve(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::BrooksCoreyRetentionCurve *arg1 = (cmf::upslope::BrooksCoreyRetentionCurve *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__upslope__BrooksCoreyRetentionCurve, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_BrooksCoreyRetentionCurve" "', argument " "1"" of type '" "cmf::upslope::BrooksCoreyRetentionCurve *""'"); 
  }
  arg1 = reinterpret_cast< cmf::upslope::BrooksCoreyRetentionCurve * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *BrooksCoreyRetentionCurve_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_cmf__upslope__BrooksCoreyRetentionCurve, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *BrooksCoreyRetentionCurve_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_VanGenuchtenMualem_alpha_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::VanGenuchtenMualem *arg1 = (cmf::upslope::VanGenuchtenMualem *) 0 ;
  real arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"VanGenuchtenMualem_alpha_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__upslope__VanGenuchtenMualem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VanGenuchtenMualem_alpha_set" "', argument " "1"" of type '" "cmf::upslope::VanGenuchtenMualem *""'"); 
  }
  arg1 = reinterpret_cast< cmf::upslope::VanGenuchtenMualem * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VanGenuchtenMualem_alpha_set" "', argument " "2"" of type '" "real""'");
  } 
  arg2 = static_cast< real >(val2);
  if (arg1) (arg1)->alpha = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VanGenuchtenMualem_alpha_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::VanGenuchtenMualem *arg1 = (cmf::upslope::VanGenuchtenMualem *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  real result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__upslope__VanGenuchtenMualem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VanGenuchtenMualem_alpha_get" "', argument " "1"" of type '" "cmf::upslope::VanGenuchtenMualem *""'"); 
  }
  arg1 = reinterpret_cast< cmf::upslope::VanGenuchtenMualem * >(argp1);
  result = (real) ((arg1)->alpha);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VanGenuchtenMualem_n_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::VanGenuchtenMualem *arg1 = (cmf::upslope::VanGenuchtenMualem *) 0 ;
  real arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"VanGenuchtenMualem_n_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__upslope__VanGenuchtenMualem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VanGenuchtenMualem_n_set" "', argument " "1"" of type '" "cmf::upslope::VanGenuchtenMualem *""'"); 
  }
  arg1 = reinterpret_cast< cmf::upslope::VanGenuchtenMualem * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VanGenuchtenMualem_n_set" "', argument " "2"" of type '" "real""'");
  } 
  arg2 = static_cast< real >(val2);
  if (arg1) (arg1)->n = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VanGenuchtenMualem_n_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::VanGenuchtenMualem *arg1 = (cmf::upslope::VanGenuchtenMualem *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  real result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__upslope__VanGenuchtenMualem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VanGenuchtenMualem_n_get" "', argument " "1"" of type '" "cmf::upslope::VanGenuchtenMualem *""'"); 
  }
  arg1 = reinterpret_cast< cmf::upslope::VanGenuchtenMualem * >(argp1);
  result = (real) ((arg1)->n);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VanGenuchtenMualem_Ksat_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::VanGenuchtenMualem *arg1 = (cmf::upslope::VanGenuchtenMualem *) 0 ;
  real arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"VanGenuchtenMualem_Ksat_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__upslope__VanGenuchtenMualem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VanGenuchtenMualem_Ksat_set" "', argument " "1"" of type '" "cmf::upslope::VanGenuchtenMualem *""'"); 
  }
  arg1 = reinterpret_cast< cmf::upslope::VanGenuchtenMualem * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VanGenuchtenMualem_Ksat_set" "', argument " "2"" of type '" "real""'");
  } 
  arg2 = static_cast< real >(val2);
  if (arg1) (arg1)->Ksat = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VanGenuchtenMualem_Ksat_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::VanGenuchtenMualem *arg1 = (cmf::upslope::VanGenuchtenMualem *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  real result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__upslope__VanGenuchtenMualem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VanGenuchtenMualem_Ksat_get" "', argument " "1"" of type '" "cmf::upslope::VanGenuchtenMualem *""'"); 
  }
  arg1 = reinterpret_cast< cmf::upslope::VanGenuchtenMualem * >(argp1);
  result = (real) ((arg1)->Ksat);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VanGenuchtenMualem_Phi_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::VanGenuchtenMualem *arg1 = (cmf::upslope::VanGenuchtenMualem *) 0 ;
  real arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"VanGenuchtenMualem_Phi_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__upslope__VanGenuchtenMualem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VanGenuchtenMualem_Phi_set" "', argument " "1"" of type '" "cmf::upslope::VanGenuchtenMualem *""'"); 
  }
  arg1 = reinterpret_cast< cmf::upslope::VanGenuchtenMualem * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VanGenuchtenMualem_Phi_set" "', argument " "2"" of type '" "real""'");
  } 
  arg2 = static_cast< real >(val2);
  if (arg1) (arg1)->Phi = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VanGenuchtenMualem_Phi_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::VanGenuchtenMualem *arg1 = (cmf::upslope::VanGenuchtenMualem *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  real result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__upslope__VanGenuchtenMualem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VanGenuchtenMualem_Phi_get" "', argument " "1"" of type '" "cmf::upslope::VanGenuchtenMualem *""'"); 
  }
  arg1 = reinterpret_cast< cmf::upslope::VanGenuchtenMualem * >(argp1);
  result = (real) ((arg1)->Phi);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VanGenuchtenMualem_Psi_full_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::VanGenuchtenMualem *arg1 = (cmf::upslope::VanGenuchtenMualem *) 0 ;
  real arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"VanGenuchtenMualem_Psi_full_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__upslope__VanGenuchtenMualem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VanGenuchtenMualem_Psi_full_set" "', argument " "1"" of type '" "cmf::upslope::VanGenuchtenMualem *""'"); 
  }
  arg1 = reinterpret_cast< cmf::upslope::VanGenuchtenMualem * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VanGenuchtenMualem_Psi_full_set" "', argument " "2"" of type '" "real""'");
  } 
  arg2 = static_cast< real >(val2);
  if (arg1) (arg1)->Psi_full = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VanGenuchtenMualem_Psi_full_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::VanGenuchtenMualem *arg1 = (cmf::upslope::VanGenuchtenMualem *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  real result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__upslope__VanGenuchtenMualem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VanGenuchtenMualem_Psi_full_get" "', argument " "1"" of type '" "cmf::upslope::VanGenuchtenMualem *""'"); 
  }
  arg1 = reinterpret_cast< cmf::upslope::VanGenuchtenMualem * >(argp1);
  result = (real) ((arg1)->Psi_full);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VanGenuchtenMualem_m_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::VanGenuchtenMualem *arg1 = (cmf::upslope::VanGenuchtenMualem *) 0 ;
  real arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"VanGenuchtenMualem_m_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__upslope__VanGenuchtenMualem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VanGenuchtenMualem_m_set" "', argument " "1"" of type '" "cmf::upslope::VanGenuchtenMualem *""'"); 
  }
  arg1 = reinterpret_cast< cmf::upslope::VanGenuchtenMualem * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VanGenuchtenMualem_m_set" "', argument " "2"" of type '" "real""'");
  } 
  arg2 = static_cast< real >(val2);
  if (arg1) (arg1)->m = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VanGenuchtenMualem_m_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::VanGenuchtenMualem *arg1 = (cmf::upslope::VanGenuchtenMualem *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  real result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__upslope__VanGenuchtenMualem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VanGenuchtenMualem_m_get" "', argument " "1"" of type '" "cmf::upslope::VanGenuchtenMualem *""'"); 
  }
  arg1 = reinterpret_cast< cmf::upslope::VanGenuchtenMualem * >(argp1);
  result = (real) ((arg1)->m);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VanGenuchtenMualem_copy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::VanGenuchtenMualem *arg1 = (cmf::upslope::VanGenuchtenMualem *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  cmf::upslope::VanGenuchtenMualem *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__upslope__VanGenuchtenMualem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VanGenuchtenMualem_copy" "', argument " "1"" of type '" "cmf::upslope::VanGenuchtenMualem const *""'"); 
  }
  arg1 = reinterpret_cast< cmf::upslope::VanGenuchtenMualem * >(argp1);
  {
    try {
      result = (cmf::upslope::VanGenuchtenMualem *)((cmf::upslope::VanGenuchtenMualem const *)arg1)->copy();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmf__upslope__VanGenuchtenMualem, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VanGenuchtenMualem__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  cmf::upslope::VanGenuchtenMualem *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  {
    try {
      result = (cmf::upslope::VanGenuchtenMualem *)new cmf::upslope::VanGenuchtenMualem();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmf__upslope__VanGenuchtenMualem, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VanGenuchtenMualem__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  real arg1 ;
  real arg2 ;
  real arg3 ;
  real arg4 ;
  real arg5 = (real) -1 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  cmf::upslope::VanGenuchtenMualem *result = 0 ;
  
  if ((nobjs < 4) || (nobjs > 5)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_VanGenuchtenMualem" "', argument " "1"" of type '" "real""'");
  } 
  arg1 = static_cast< real >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_VanGenuchtenMualem" "', argument " "2"" of type '" "real""'");
  } 
  arg2 = static_cast< real >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_VanGenuchtenMualem" "', argument " "3"" of type '" "real""'");
  } 
  arg3 = static_cast< real >(val3);
  ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_VanGenuchtenMualem" "', argument " "4"" of type '" "real""'");
  } 
  arg4 = static_cast< real >(val4);
  if (swig_obj[4]) {
    ecode5 = SWIG_AsVal_double(swig_obj[4], &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_VanGenuchtenMualem" "', argument " "5"" of type '" "real""'");
    } 
    arg5 = static_cast< real >(val5);
  }
  {
    try {
      result = (cmf::upslope::VanGenuchtenMualem *)new cmf::upslope::VanGenuchtenMualem(arg1,arg2,arg3,arg4,arg5);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmf__upslope__VanGenuchtenMualem, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VanGenuchtenMualem(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[6];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"new_VanGenuchtenMualem",0,5,argv))) SWIG_fail;
  --argc;
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (argc == 0) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
    if ((argc >= 4) && (argc <= 5)) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          int res = SWIG_AsVal_double(argv[0], NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_double(argv[1], NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_double(argv[3], NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (argc > 4) {
        {
          {
            int res = SWIG_AsVal_double(argv[4], NULL);
            _v = SWIG_CheckState(res);
          }
        }
        if (!_v) goto check_2;
        _ranki += _v*_pi;
        _rankm += _pi;
        _pi *= SWIG_MAXCASTRANK;
      }
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      return _wrap_new_VanGenuchtenMualem__SWIG_0(self, argc, argv);
    case 2:
      return _wrap_new_VanGenuchtenMualem__SWIG_1(self, argc, argv);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_VanGenuchtenMualem'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    cmf::upslope::VanGenuchtenMualem()\n"
    "    cmf::upslope::VanGenuchtenMualem(real,real,real,real,real)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_VanGenuchtenMualem(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::VanGenuchtenMualem *arg1 = (cmf::upslope::VanGenuchtenMualem *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__upslope__VanGenuchtenMualem, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_VanGenuchtenMualem" "', argument " "1"" of type '" "cmf::upslope::VanGenuchtenMualem *""'"); 
  }
  arg1 = reinterpret_cast< cmf::upslope::VanGenuchtenMualem * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *VanGenuchtenMualem_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_cmf__upslope__VanGenuchtenMualem, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *VanGenuchtenMualem_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_LinearRetention_Ksat_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::LinearRetention *arg1 = (cmf::upslope::LinearRetention *) 0 ;
  real arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"LinearRetention_Ksat_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__upslope__LinearRetention, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LinearRetention_Ksat_set" "', argument " "1"" of type '" "cmf::upslope::LinearRetention *""'"); 
  }
  arg1 = reinterpret_cast< cmf::upslope::LinearRetention * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LinearRetention_Ksat_set" "', argument " "2"" of type '" "real""'");
  } 
  arg2 = static_cast< real >(val2);
  if (arg1) (arg1)->Ksat = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LinearRetention_Ksat_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::LinearRetention *arg1 = (cmf::upslope::LinearRetention *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  real result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__upslope__LinearRetention, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LinearRetention_Ksat_get" "', argument " "1"" of type '" "cmf::upslope::LinearRetention *""'"); 
  }
  arg1 = reinterpret_cast< cmf::upslope::LinearRetention * >(argp1);
  result = (real) ((arg1)->Ksat);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LinearRetention_porosity_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::LinearRetention *arg1 = (cmf::upslope::LinearRetention *) 0 ;
  real arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"LinearRetention_porosity_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__upslope__LinearRetention, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LinearRetention_porosity_set" "', argument " "1"" of type '" "cmf::upslope::LinearRetention *""'"); 
  }
  arg1 = reinterpret_cast< cmf::upslope::LinearRetention * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LinearRetention_porosity_set" "', argument " "2"" of type '" "real""'");
  } 
  arg2 = static_cast< real >(val2);
  if (arg1) (arg1)->porosity = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LinearRetention_porosity_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::LinearRetention *arg1 = (cmf::upslope::LinearRetention *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  real result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__upslope__LinearRetention, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LinearRetention_porosity_get" "', argument " "1"" of type '" "cmf::upslope::LinearRetention *""'"); 
  }
  arg1 = reinterpret_cast< cmf::upslope::LinearRetention * >(argp1);
  result = (real) ((arg1)->porosity);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LinearRetention_thickness_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::LinearRetention *arg1 = (cmf::upslope::LinearRetention *) 0 ;
  real arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"LinearRetention_thickness_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__upslope__LinearRetention, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LinearRetention_thickness_set" "', argument " "1"" of type '" "cmf::upslope::LinearRetention *""'"); 
  }
  arg1 = reinterpret_cast< cmf::upslope::LinearRetention * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LinearRetention_thickness_set" "', argument " "2"" of type '" "real""'");
  } 
  arg2 = static_cast< real >(val2);
  if (arg1) (arg1)->thickness = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LinearRetention_thickness_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::LinearRetention *arg1 = (cmf::upslope::LinearRetention *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  real result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__upslope__LinearRetention, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LinearRetention_thickness_get" "', argument " "1"" of type '" "cmf::upslope::LinearRetention *""'"); 
  }
  arg1 = reinterpret_cast< cmf::upslope::LinearRetention * >(argp1);
  result = (real) ((arg1)->thickness);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LinearRetention_residual_wetness_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::LinearRetention *arg1 = (cmf::upslope::LinearRetention *) 0 ;
  real arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"LinearRetention_residual_wetness_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__upslope__LinearRetention, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LinearRetention_residual_wetness_set" "', argument " "1"" of type '" "cmf::upslope::LinearRetention *""'"); 
  }
  arg1 = reinterpret_cast< cmf::upslope::LinearRetention * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LinearRetention_residual_wetness_set" "', argument " "2"" of type '" "real""'");
  } 
  arg2 = static_cast< real >(val2);
  if (arg1) (arg1)->residual_wetness = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LinearRetention_residual_wetness_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::LinearRetention *arg1 = (cmf::upslope::LinearRetention *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  real result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__upslope__LinearRetention, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LinearRetention_residual_wetness_get" "', argument " "1"" of type '" "cmf::upslope::LinearRetention *""'"); 
  }
  arg1 = reinterpret_cast< cmf::upslope::LinearRetention * >(argp1);
  result = (real) ((arg1)->residual_wetness);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LinearRetention_porosity_decay_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::LinearRetention *arg1 = (cmf::upslope::LinearRetention *) 0 ;
  real arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"LinearRetention_porosity_decay_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__upslope__LinearRetention, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LinearRetention_porosity_decay_set" "', argument " "1"" of type '" "cmf::upslope::LinearRetention *""'"); 
  }
  arg1 = reinterpret_cast< cmf::upslope::LinearRetention * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LinearRetention_porosity_decay_set" "', argument " "2"" of type '" "real""'");
  } 
  arg2 = static_cast< real >(val2);
  if (arg1) (arg1)->porosity_decay = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LinearRetention_porosity_decay_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::LinearRetention *arg1 = (cmf::upslope::LinearRetention *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  real result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__upslope__LinearRetention, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LinearRetention_porosity_decay_get" "', argument " "1"" of type '" "cmf::upslope::LinearRetention *""'"); 
  }
  arg1 = reinterpret_cast< cmf::upslope::LinearRetention * >(argp1);
  result = (real) ((arg1)->porosity_decay);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LinearRetention_Ksat_decay_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::LinearRetention *arg1 = (cmf::upslope::LinearRetention *) 0 ;
  real arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"LinearRetention_Ksat_decay_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__upslope__LinearRetention, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LinearRetention_Ksat_decay_set" "', argument " "1"" of type '" "cmf::upslope::LinearRetention *""'"); 
  }
  arg1 = reinterpret_cast< cmf::upslope::LinearRetention * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LinearRetention_Ksat_decay_set" "', argument " "2"" of type '" "real""'");
  } 
  arg2 = static_cast< real >(val2);
  if (arg1) (arg1)->Ksat_decay = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LinearRetention_Ksat_decay_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::LinearRetention *arg1 = (cmf::upslope::LinearRetention *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  real result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__upslope__LinearRetention, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LinearRetention_Ksat_decay_get" "', argument " "1"" of type '" "cmf::upslope::LinearRetention *""'"); 
  }
  arg1 = reinterpret_cast< cmf::upslope::LinearRetention * >(argp1);
  result = (real) ((arg1)->Ksat_decay);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LinearRetention_beta_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::LinearRetention *arg1 = (cmf::upslope::LinearRetention *) 0 ;
  real arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"LinearRetention_beta_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__upslope__LinearRetention, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LinearRetention_beta_set" "', argument " "1"" of type '" "cmf::upslope::LinearRetention *""'"); 
  }
  arg1 = reinterpret_cast< cmf::upslope::LinearRetention * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LinearRetention_beta_set" "', argument " "2"" of type '" "real""'");
  } 
  arg2 = static_cast< real >(val2);
  if (arg1) (arg1)->beta = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LinearRetention_beta_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::LinearRetention *arg1 = (cmf::upslope::LinearRetention *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  real result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__upslope__LinearRetention, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LinearRetention_beta_get" "', argument " "1"" of type '" "cmf::upslope::LinearRetention *""'"); 
  }
  arg1 = reinterpret_cast< cmf::upslope::LinearRetention * >(argp1);
  result = (real) ((arg1)->beta);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LinearRetention_copy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::LinearRetention *arg1 = (cmf::upslope::LinearRetention *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  cmf::upslope::LinearRetention *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__upslope__LinearRetention, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LinearRetention_copy" "', argument " "1"" of type '" "cmf::upslope::LinearRetention const *""'"); 
  }
  arg1 = reinterpret_cast< cmf::upslope::LinearRetention * >(argp1);
  {
    try {
      result = (cmf::upslope::LinearRetention *)((cmf::upslope::LinearRetention const *)arg1)->copy();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmf__upslope__LinearRetention, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_LinearRetention(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  real arg1 ;
  real arg2 ;
  real arg3 ;
  real arg4 = (real) 1.0 ;
  real arg5 = (real) 1e-4 ;
  real arg6 = (real) 0.0 ;
  real arg7 = (real) 0.0 ;
  real arg8 = (real) 0.0 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  double val7 ;
  int ecode7 = 0 ;
  double val8 ;
  int ecode8 = 0 ;
  PyObject *swig_obj[8] ;
  cmf::upslope::LinearRetention *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args,"new_LinearRetention",3,8,swig_obj)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_LinearRetention" "', argument " "1"" of type '" "real""'");
  } 
  arg1 = static_cast< real >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_LinearRetention" "', argument " "2"" of type '" "real""'");
  } 
  arg2 = static_cast< real >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_LinearRetention" "', argument " "3"" of type '" "real""'");
  } 
  arg3 = static_cast< real >(val3);
  if (swig_obj[3]) {
    ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_LinearRetention" "', argument " "4"" of type '" "real""'");
    } 
    arg4 = static_cast< real >(val4);
  }
  if (swig_obj[4]) {
    ecode5 = SWIG_AsVal_double(swig_obj[4], &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_LinearRetention" "', argument " "5"" of type '" "real""'");
    } 
    arg5 = static_cast< real >(val5);
  }
  if (swig_obj[5]) {
    ecode6 = SWIG_AsVal_double(swig_obj[5], &val6);
    if (!SWIG_IsOK(ecode6)) {
      SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "new_LinearRetention" "', argument " "6"" of type '" "real""'");
    } 
    arg6 = static_cast< real >(val6);
  }
  if (swig_obj[6]) {
    ecode7 = SWIG_AsVal_double(swig_obj[6], &val7);
    if (!SWIG_IsOK(ecode7)) {
      SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "new_LinearRetention" "', argument " "7"" of type '" "real""'");
    } 
    arg7 = static_cast< real >(val7);
  }
  if (swig_obj[7]) {
    ecode8 = SWIG_AsVal_double(swig_obj[7], &val8);
    if (!SWIG_IsOK(ecode8)) {
      SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "new_LinearRetention" "', argument " "8"" of type '" "real""'");
    } 
    arg8 = static_cast< real >(val8);
  }
  {
    try {
      result = (cmf::upslope::LinearRetention *)new cmf::upslope::LinearRetention(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmf__upslope__LinearRetention, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_LinearRetention(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::LinearRetention *arg1 = (cmf::upslope::LinearRetention *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__upslope__LinearRetention, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_LinearRetention" "', argument " "1"" of type '" "cmf::upslope::LinearRetention *""'"); 
  }
  arg1 = reinterpret_cast< cmf::upslope::LinearRetention * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *LinearRetention_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_cmf__upslope__LinearRetention, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *LinearRetention_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_SoilLayer_Position_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::SoilLayer *arg1 = (cmf::upslope::SoilLayer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< cmf::upslope::SoilLayer > tempshared1 ;
  std::tr1::shared_ptr< cmf::upslope::SoilLayer > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__upslope__SoilLayer_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SoilLayer_Position_get" "', argument " "1"" of type '" "cmf::upslope::SoilLayer *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  cmf::upslope::SoilLayer > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  cmf::upslope::SoilLayer > * >(argp1);
      arg1 = const_cast< cmf::upslope::SoilLayer * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  cmf::upslope::SoilLayer > * >(argp1);
      arg1 = const_cast< cmf::upslope::SoilLayer * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (int)(int) ((arg1)->Position);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SoilLayer_cell_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::SoilLayer *arg1 = (cmf::upslope::SoilLayer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< cmf::upslope::SoilLayer > tempshared1 ;
  std::tr1::shared_ptr< cmf::upslope::SoilLayer > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  cmf::upslope::Cell *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__upslope__SoilLayer_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SoilLayer_cell_get" "', argument " "1"" of type '" "cmf::upslope::SoilLayer *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  cmf::upslope::SoilLayer > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  cmf::upslope::SoilLayer > * >(argp1);
      arg1 = const_cast< cmf::upslope::SoilLayer * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  cmf::upslope::SoilLayer > * >(argp1);
      arg1 = const_cast< cmf::upslope::SoilLayer * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (cmf::upslope::Cell *) &(cmf::upslope::Cell &) ((arg1)->cell);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmf__upslope__Cell, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SoilLayer_get_soil(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::SoilLayer *arg1 = (cmf::upslope::SoilLayer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< cmf::upslope::SoilLayer const > tempshared1 ;
  std::tr1::shared_ptr< cmf::upslope::SoilLayer const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  cmf::upslope::RetentionCurve *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__upslope__SoilLayer_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SoilLayer_get_soil" "', argument " "1"" of type '" "cmf::upslope::SoilLayer const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr< const cmf::upslope::SoilLayer > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr< const cmf::upslope::SoilLayer > * >(argp1);
      arg1 = const_cast< cmf::upslope::SoilLayer * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr< const cmf::upslope::SoilLayer > * >(argp1);
      arg1 = const_cast< cmf::upslope::SoilLayer * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      result = (cmf::upslope::RetentionCurve *) &((cmf::upslope::SoilLayer const *)arg1)->get_soil();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  {
    int dcast = 0;
    /*@SWIG:C:\\Programme\\swig\\Lib\\typemaps\\swigmacros.swg,200,%formacro@*//*@SWIG:C:\\Programme\\swig\\Lib\\typemaps\\swigmacros.swg,192,%_formacro_1@*//*@SWIG:C:\\Programme\\swig\\Lib\\typemaps\\factory.swg,72,%_factory_dispatch@*/ 
    if (!dcast) {
      cmf::upslope::BrooksCoreyRetentionCurve *dobj = dynamic_cast<cmf::upslope::BrooksCoreyRetentionCurve *>(result);
      if (dobj) {
        dcast = 1;
        resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(dobj),SWIGTYPE_p_cmf__upslope__BrooksCoreyRetentionCurve, 0 |  0 );
      }   
    }/*@SWIG@*/
    
    /*@SWIG:C:\\Programme\\swig\\Lib\\typemaps\\swigmacros.swg,192,%_formacro_1@*//*@SWIG:C:\\Programme\\swig\\Lib\\typemaps\\factory.swg,72,%_factory_dispatch@*/ 
    if (!dcast) {
      cmf::upslope::VanGenuchtenMualem *dobj = dynamic_cast<cmf::upslope::VanGenuchtenMualem *>(result);
      if (dobj) {
        dcast = 1;
        resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(dobj),SWIGTYPE_p_cmf__upslope__VanGenuchtenMualem, 0 |  0 );
      }   
    }/*@SWIG@*/
    
    
    
    /*@SWIG@*/
    
    /*@SWIG@*//*@SWIG@*/
    if (!dcast) {
      resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result),SWIGTYPE_p_cmf__upslope__RetentionCurve, 0 |  0 );
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SoilLayer_set_soil(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::SoilLayer *arg1 = (cmf::upslope::SoilLayer *) 0 ;
  cmf::upslope::RetentionCurve *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< cmf::upslope::SoilLayer > tempshared1 ;
  std::tr1::shared_ptr< cmf::upslope::SoilLayer > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"SoilLayer_set_soil",2,2,swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__upslope__SoilLayer_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SoilLayer_set_soil" "', argument " "1"" of type '" "cmf::upslope::SoilLayer *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  cmf::upslope::SoilLayer > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  cmf::upslope::SoilLayer > * >(argp1);
      arg1 = const_cast< cmf::upslope::SoilLayer * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  cmf::upslope::SoilLayer > * >(argp1);
      arg1 = const_cast< cmf::upslope::SoilLayer * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cmf__upslope__RetentionCurve,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SoilLayer_set_soil" "', argument " "2"" of type '" "cmf::upslope::RetentionCurve const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SoilLayer_set_soil" "', argument " "2"" of type '" "cmf::upslope::RetentionCurve const &""'"); 
  }
  arg2 = reinterpret_cast< cmf::upslope::RetentionCurve * >(argp2);
  {
    try {
      (arg1)->set_soil((cmf::upslope::RetentionCurve const &)*arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SoilLayer_get_theta(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::SoilLayer *arg1 = (cmf::upslope::SoilLayer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< cmf::upslope::SoilLayer const > tempshared1 ;
  std::tr1::shared_ptr< cmf::upslope::SoilLayer const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  real result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__upslope__SoilLayer_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SoilLayer_get_theta" "', argument " "1"" of type '" "cmf::upslope::SoilLayer const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr< const cmf::upslope::SoilLayer > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr< const cmf::upslope::SoilLayer > * >(argp1);
      arg1 = const_cast< cmf::upslope::SoilLayer * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr< const cmf::upslope::SoilLayer > * >(argp1);
      arg1 = const_cast< cmf::upslope::SoilLayer * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      result = (real)((cmf::upslope::SoilLayer const *)arg1)->get_theta();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SoilLayer_set_theta(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::SoilLayer *arg1 = (cmf::upslope::SoilLayer *) 0 ;
  real arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< cmf::upslope::SoilLayer > tempshared1 ;
  std::tr1::shared_ptr< cmf::upslope::SoilLayer > *smartarg1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"SoilLayer_set_theta",2,2,swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__upslope__SoilLayer_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SoilLayer_set_theta" "', argument " "1"" of type '" "cmf::upslope::SoilLayer *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  cmf::upslope::SoilLayer > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  cmf::upslope::SoilLayer > * >(argp1);
      arg1 = const_cast< cmf::upslope::SoilLayer * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  cmf::upslope::SoilLayer > * >(argp1);
      arg1 = const_cast< cmf::upslope::SoilLayer * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SoilLayer_set_theta" "', argument " "2"" of type '" "real""'");
  } 
  arg2 = static_cast< real >(val2);
  {
    try {
      (arg1)->set_theta(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SoilLayer_get_capacity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::SoilLayer *arg1 = (cmf::upslope::SoilLayer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< cmf::upslope::SoilLayer const > tempshared1 ;
  std::tr1::shared_ptr< cmf::upslope::SoilLayer const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  real result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__upslope__SoilLayer_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SoilLayer_get_capacity" "', argument " "1"" of type '" "cmf::upslope::SoilLayer const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr< const cmf::upslope::SoilLayer > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr< const cmf::upslope::SoilLayer > * >(argp1);
      arg1 = const_cast< cmf::upslope::SoilLayer * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr< const cmf::upslope::SoilLayer > * >(argp1);
      arg1 = const_cast< cmf::upslope::SoilLayer * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      result = (real)((cmf::upslope::SoilLayer const *)arg1)->get_capacity();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SoilLayer_get_saturated_depth(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::SoilLayer *arg1 = (cmf::upslope::SoilLayer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< cmf::upslope::SoilLayer const > tempshared1 ;
  std::tr1::shared_ptr< cmf::upslope::SoilLayer const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  real result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__upslope__SoilLayer_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SoilLayer_get_saturated_depth" "', argument " "1"" of type '" "cmf::upslope::SoilLayer const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr< const cmf::upslope::SoilLayer > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr< const cmf::upslope::SoilLayer > * >(argp1);
      arg1 = const_cast< cmf::upslope::SoilLayer * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr< const cmf::upslope::SoilLayer > * >(argp1);
      arg1 = const_cast< cmf::upslope::SoilLayer * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      result = (real)((cmf::upslope::SoilLayer const *)arg1)->get_saturated_depth();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SoilLayer_get_flow_crosssection(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::SoilLayer *arg1 = (cmf::upslope::SoilLayer *) 0 ;
  cmf::upslope::SoilLayer *arg2 = 0 ;
  bool arg3 = (bool) false ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< cmf::upslope::SoilLayer const > tempshared1 ;
  std::tr1::shared_ptr< cmf::upslope::SoilLayer const > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  std::tr1::shared_ptr< cmf::upslope::SoilLayer const > tempshared2 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  real result;
  
  if (!SWIG_Python_UnpackTuple(args,"SoilLayer_get_flow_crosssection",2,3,swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__upslope__SoilLayer_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SoilLayer_get_flow_crosssection" "', argument " "1"" of type '" "cmf::upslope::SoilLayer const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr< const cmf::upslope::SoilLayer > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr< const cmf::upslope::SoilLayer > * >(argp1);
      arg1 = const_cast< cmf::upslope::SoilLayer * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr< const cmf::upslope::SoilLayer > * >(argp1);
      arg1 = const_cast< cmf::upslope::SoilLayer * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(swig_obj[1], &argp2, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__upslope__SoilLayer_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SoilLayer_get_flow_crosssection" "', argument " "2"" of type '" "cmf::upslope::SoilLayer const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SoilLayer_get_flow_crosssection" "', argument " "2"" of type '" "cmf::upslope::SoilLayer const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared2 = *reinterpret_cast< std::tr1::shared_ptr< const cmf::upslope::SoilLayer > * >(argp2);
      delete reinterpret_cast< std::tr1::shared_ptr< const cmf::upslope::SoilLayer > * >(argp2);
      arg2 = const_cast< cmf::upslope::SoilLayer * >(tempshared2.get());
    } else {
      arg2 = const_cast< cmf::upslope::SoilLayer * >(reinterpret_cast< std::tr1::shared_ptr< const cmf::upslope::SoilLayer > * >(argp2)->get());
    }
  }
  if (swig_obj[2]) {
    ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SoilLayer_get_flow_crosssection" "', argument " "3"" of type '" "bool""'");
    } 
    arg3 = static_cast< bool >(val3);
  }
  {
    try {
      result = (real)((cmf::upslope::SoilLayer const *)arg1)->get_flow_crosssection((cmf::upslope::SoilLayer const &)*arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SoilLayer_cast(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::water::flux_node::ptr arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  cmf::upslope::SoilLayer::ptr result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__water__flux_node_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SoilLayer_cast" "', argument " "1"" of type '" "cmf::water::flux_node::ptr""'"); 
    }
    if (argp1) arg1 = *(reinterpret_cast< cmf::water::flux_node::ptr * >(argp1));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< cmf::water::flux_node::ptr * >(argp1);
  }
  {
    try {
      result = cmf::upslope::SoilLayer::cast(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  {
    std::tr1::shared_ptr<  cmf::upslope::SoilLayer > *smartresult = result ? new std::tr1::shared_ptr<  cmf::upslope::SoilLayer >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__tr1__shared_ptrT_cmf__upslope__SoilLayer_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SoilLayer_SWIGSharedPtrUpcast(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::tr1::shared_ptr< cmf::upslope::SoilLayer > arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::tr1::shared_ptr< cmf::water::WaterStorage > result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__upslope__SoilLayer_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SoilLayer_SWIGSharedPtrUpcast" "', argument " "1"" of type '" "std::tr1::shared_ptr< cmf::upslope::SoilLayer >""'"); 
    }
    if (argp1) arg1 = *(reinterpret_cast< std::tr1::shared_ptr< cmf::upslope::SoilLayer > * >(argp1));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< std::tr1::shared_ptr< cmf::upslope::SoilLayer > * >(argp1);
  }
  {
    try {
      result = cmf_upslope_SoilLayer_SWIGSharedPtrUpcast(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  {
    std::tr1::shared_ptr<  cmf::water::WaterStorage > *smartresult = result ? new std::tr1::shared_ptr<  cmf::water::WaterStorage >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__tr1__shared_ptrT_cmf__water__WaterStorage_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SoilLayer_gravitational_potential_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::SoilLayer *arg1 = (cmf::upslope::SoilLayer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< cmf::upslope::SoilLayer > tempshared1 ;
  std::tr1::shared_ptr< cmf::upslope::SoilLayer > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  real result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__upslope__SoilLayer_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SoilLayer_gravitational_potential_get" "', argument " "1"" of type '" "cmf::upslope::SoilLayer *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  cmf::upslope::SoilLayer > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  cmf::upslope::SoilLayer > * >(argp1);
      arg1 = const_cast< cmf::upslope::SoilLayer * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  cmf::upslope::SoilLayer > * >(argp1);
      arg1 = const_cast< cmf::upslope::SoilLayer * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      result = (real)cmf_upslope_SoilLayer_gravitational_potential_get(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SoilLayer_matrix_potential_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::SoilLayer *arg1 = (cmf::upslope::SoilLayer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< cmf::upslope::SoilLayer > tempshared1 ;
  std::tr1::shared_ptr< cmf::upslope::SoilLayer > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  real result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__upslope__SoilLayer_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SoilLayer_matrix_potential_get" "', argument " "1"" of type '" "cmf::upslope::SoilLayer *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  cmf::upslope::SoilLayer > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  cmf::upslope::SoilLayer > * >(argp1);
      arg1 = const_cast< cmf::upslope::SoilLayer * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  cmf::upslope::SoilLayer > * >(argp1);
      arg1 = const_cast< cmf::upslope::SoilLayer * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      result = (real)cmf_upslope_SoilLayer_matrix_potential_get(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SoilLayer_wetness_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::SoilLayer *arg1 = (cmf::upslope::SoilLayer *) 0 ;
  real arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< cmf::upslope::SoilLayer > tempshared1 ;
  std::tr1::shared_ptr< cmf::upslope::SoilLayer > *smartarg1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"SoilLayer_wetness_set",2,2,swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__upslope__SoilLayer_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SoilLayer_wetness_set" "', argument " "1"" of type '" "cmf::upslope::SoilLayer *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  cmf::upslope::SoilLayer > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  cmf::upslope::SoilLayer > * >(argp1);
      arg1 = const_cast< cmf::upslope::SoilLayer * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  cmf::upslope::SoilLayer > * >(argp1);
      arg1 = const_cast< cmf::upslope::SoilLayer * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SoilLayer_wetness_set" "', argument " "2"" of type '" "real""'");
  } 
  arg2 = static_cast< real >(val2);
  {
    try {
      cmf_upslope_SoilLayer_wetness_set(arg1,arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SoilLayer_wetness_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::SoilLayer *arg1 = (cmf::upslope::SoilLayer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< cmf::upslope::SoilLayer > tempshared1 ;
  std::tr1::shared_ptr< cmf::upslope::SoilLayer > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  real result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__upslope__SoilLayer_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SoilLayer_wetness_get" "', argument " "1"" of type '" "cmf::upslope::SoilLayer *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  cmf::upslope::SoilLayer > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  cmf::upslope::SoilLayer > * >(argp1);
      arg1 = const_cast< cmf::upslope::SoilLayer * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  cmf::upslope::SoilLayer > * >(argp1);
      arg1 = const_cast< cmf::upslope::SoilLayer * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      result = (real)cmf_upslope_SoilLayer_wetness_get(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SoilLayer_K_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::SoilLayer *arg1 = (cmf::upslope::SoilLayer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< cmf::upslope::SoilLayer > tempshared1 ;
  std::tr1::shared_ptr< cmf::upslope::SoilLayer > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  real result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__upslope__SoilLayer_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SoilLayer_K_get" "', argument " "1"" of type '" "cmf::upslope::SoilLayer *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  cmf::upslope::SoilLayer > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  cmf::upslope::SoilLayer > * >(argp1);
      arg1 = const_cast< cmf::upslope::SoilLayer * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  cmf::upslope::SoilLayer > * >(argp1);
      arg1 = const_cast< cmf::upslope::SoilLayer * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      result = (real)cmf_upslope_SoilLayer_K_get(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SoilLayer_Ksat_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::SoilLayer *arg1 = (cmf::upslope::SoilLayer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< cmf::upslope::SoilLayer > tempshared1 ;
  std::tr1::shared_ptr< cmf::upslope::SoilLayer > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  real result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__upslope__SoilLayer_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SoilLayer_Ksat_get" "', argument " "1"" of type '" "cmf::upslope::SoilLayer *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  cmf::upslope::SoilLayer > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  cmf::upslope::SoilLayer > * >(argp1);
      arg1 = const_cast< cmf::upslope::SoilLayer * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  cmf::upslope::SoilLayer > * >(argp1);
      arg1 = const_cast< cmf::upslope::SoilLayer * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      result = (real)cmf_upslope_SoilLayer_Ksat_get(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SoilLayer_thickness_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::SoilLayer *arg1 = (cmf::upslope::SoilLayer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< cmf::upslope::SoilLayer > tempshared1 ;
  std::tr1::shared_ptr< cmf::upslope::SoilLayer > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  real result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__upslope__SoilLayer_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SoilLayer_thickness_get" "', argument " "1"" of type '" "cmf::upslope::SoilLayer *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  cmf::upslope::SoilLayer > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  cmf::upslope::SoilLayer > * >(argp1);
      arg1 = const_cast< cmf::upslope::SoilLayer * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  cmf::upslope::SoilLayer > * >(argp1);
      arg1 = const_cast< cmf::upslope::SoilLayer * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      result = (real)cmf_upslope_SoilLayer_thickness_get(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SoilLayer_lower_boundary_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::SoilLayer *arg1 = (cmf::upslope::SoilLayer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< cmf::upslope::SoilLayer > tempshared1 ;
  std::tr1::shared_ptr< cmf::upslope::SoilLayer > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  real result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__upslope__SoilLayer_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SoilLayer_lower_boundary_get" "', argument " "1"" of type '" "cmf::upslope::SoilLayer *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  cmf::upslope::SoilLayer > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  cmf::upslope::SoilLayer > * >(argp1);
      arg1 = const_cast< cmf::upslope::SoilLayer * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  cmf::upslope::SoilLayer > * >(argp1);
      arg1 = const_cast< cmf::upslope::SoilLayer * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      result = (real)cmf_upslope_SoilLayer_lower_boundary_get(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SoilLayer_upper_boundary_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::SoilLayer *arg1 = (cmf::upslope::SoilLayer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< cmf::upslope::SoilLayer > tempshared1 ;
  std::tr1::shared_ptr< cmf::upslope::SoilLayer > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  real result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__upslope__SoilLayer_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SoilLayer_upper_boundary_get" "', argument " "1"" of type '" "cmf::upslope::SoilLayer *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  cmf::upslope::SoilLayer > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  cmf::upslope::SoilLayer > * >(argp1);
      arg1 = const_cast< cmf::upslope::SoilLayer * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  cmf::upslope::SoilLayer > * >(argp1);
      arg1 = const_cast< cmf::upslope::SoilLayer * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      result = (real)cmf_upslope_SoilLayer_upper_boundary_get(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SoilLayer_porosity_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::SoilLayer *arg1 = (cmf::upslope::SoilLayer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< cmf::upslope::SoilLayer > tempshared1 ;
  std::tr1::shared_ptr< cmf::upslope::SoilLayer > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  real result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__upslope__SoilLayer_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SoilLayer_porosity_get" "', argument " "1"" of type '" "cmf::upslope::SoilLayer *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  cmf::upslope::SoilLayer > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  cmf::upslope::SoilLayer > * >(argp1);
      arg1 = const_cast< cmf::upslope::SoilLayer * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  cmf::upslope::SoilLayer > * >(argp1);
      arg1 = const_cast< cmf::upslope::SoilLayer * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      result = (real)cmf_upslope_SoilLayer_porosity_get(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_SoilLayer(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::SoilLayer *arg1 = (cmf::upslope::SoilLayer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< cmf::upslope::SoilLayer > tempshared1 ;
  std::tr1::shared_ptr< cmf::upslope::SoilLayer > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__upslope__SoilLayer_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SoilLayer" "', argument " "1"" of type '" "cmf::upslope::SoilLayer *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  cmf::upslope::SoilLayer > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  cmf::upslope::SoilLayer > * >(argp1);
      arg1 = const_cast< cmf::upslope::SoilLayer * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  cmf::upslope::SoilLayer > * >(argp1);
      arg1 = const_cast< cmf::upslope::SoilLayer * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *SoilLayer_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__tr1__shared_ptrT_cmf__upslope__SoilLayer_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_IVolumeHeightFunction_h(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::river::IVolumeHeightFunction *arg1 = (cmf::river::IVolumeHeightFunction *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  double result;
  
  if (!SWIG_Python_UnpackTuple(args,"IVolumeHeightFunction_h",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__river__IVolumeHeightFunction, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IVolumeHeightFunction_h" "', argument " "1"" of type '" "cmf::river::IVolumeHeightFunction const *""'"); 
  }
  arg1 = reinterpret_cast< cmf::river::IVolumeHeightFunction * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IVolumeHeightFunction_h" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (double)((cmf::river::IVolumeHeightFunction const *)arg1)->h(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IVolumeHeightFunction_A(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::river::IVolumeHeightFunction *arg1 = (cmf::river::IVolumeHeightFunction *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  double result;
  
  if (!SWIG_Python_UnpackTuple(args,"IVolumeHeightFunction_A",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__river__IVolumeHeightFunction, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IVolumeHeightFunction_A" "', argument " "1"" of type '" "cmf::river::IVolumeHeightFunction const *""'"); 
  }
  arg1 = reinterpret_cast< cmf::river::IVolumeHeightFunction * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IVolumeHeightFunction_A" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (double)((cmf::river::IVolumeHeightFunction const *)arg1)->A(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IVolumeHeightFunction_V(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::river::IVolumeHeightFunction *arg1 = (cmf::river::IVolumeHeightFunction *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  double result;
  
  if (!SWIG_Python_UnpackTuple(args,"IVolumeHeightFunction_V",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__river__IVolumeHeightFunction, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IVolumeHeightFunction_V" "', argument " "1"" of type '" "cmf::river::IVolumeHeightFunction const *""'"); 
  }
  arg1 = reinterpret_cast< cmf::river::IVolumeHeightFunction * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IVolumeHeightFunction_V" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (double)((cmf::river::IVolumeHeightFunction const *)arg1)->V(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IVolumeHeightFunction_copy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::river::IVolumeHeightFunction *arg1 = (cmf::river::IVolumeHeightFunction *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  cmf::river::IVolumeHeightFunction *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__river__IVolumeHeightFunction, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IVolumeHeightFunction_copy" "', argument " "1"" of type '" "cmf::river::IVolumeHeightFunction const *""'"); 
  }
  arg1 = reinterpret_cast< cmf::river::IVolumeHeightFunction * >(argp1);
  {
    try {
      result = (cmf::river::IVolumeHeightFunction *)((cmf::river::IVolumeHeightFunction const *)arg1)->copy();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmf__river__IVolumeHeightFunction, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IVolumeHeightFunction___call__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::river::IVolumeHeightFunction *arg1 = (cmf::river::IVolumeHeightFunction *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  double result;
  
  if (!SWIG_Python_UnpackTuple(args,"IVolumeHeightFunction___call__",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__river__IVolumeHeightFunction, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IVolumeHeightFunction___call__" "', argument " "1"" of type '" "cmf::river::IVolumeHeightFunction *""'"); 
  }
  arg1 = reinterpret_cast< cmf::river::IVolumeHeightFunction * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IVolumeHeightFunction___call__" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (double)(arg1)->operator ()(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_IVolumeHeightFunction(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::river::IVolumeHeightFunction *arg1 = (cmf::river::IVolumeHeightFunction *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__river__IVolumeHeightFunction, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_IVolumeHeightFunction" "', argument " "1"" of type '" "cmf::river::IVolumeHeightFunction *""'"); 
  }
  arg1 = reinterpret_cast< cmf::river::IVolumeHeightFunction * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *IVolumeHeightFunction_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_cmf__river__IVolumeHeightFunction, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_Prism_Area_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::river::Prism *arg1 = (cmf::river::Prism *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"Prism_Area_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__river__Prism, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Prism_Area_set" "', argument " "1"" of type '" "cmf::river::Prism *""'"); 
  }
  arg1 = reinterpret_cast< cmf::river::Prism * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Prism_Area_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->Area = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Prism_Area_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::river::Prism *arg1 = (cmf::river::Prism *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__river__Prism, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Prism_Area_get" "', argument " "1"" of type '" "cmf::river::Prism *""'"); 
  }
  arg1 = reinterpret_cast< cmf::river::Prism * >(argp1);
  result = (double) ((arg1)->Area);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Prism(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject *swig_obj[1] ;
  cmf::river::Prism *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Prism" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  {
    try {
      result = (cmf::river::Prism *)new cmf::river::Prism(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmf__river__Prism, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Prism_copy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::river::Prism *arg1 = (cmf::river::Prism *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  cmf::river::Prism *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__river__Prism, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Prism_copy" "', argument " "1"" of type '" "cmf::river::Prism const *""'"); 
  }
  arg1 = reinterpret_cast< cmf::river::Prism * >(argp1);
  {
    try {
      result = (cmf::river::Prism *)((cmf::river::Prism const *)arg1)->copy();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmf__river__Prism, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Prism(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::river::Prism *arg1 = (cmf::river::Prism *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__river__Prism, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Prism" "', argument " "1"" of type '" "cmf::river::Prism *""'"); 
  }
  arg1 = reinterpret_cast< cmf::river::Prism * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Prism_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_cmf__river__Prism, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *Prism_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_volume_height_function__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  cmf::river::volume_height_function *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cmf::river::volume_height_function *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cmf__river__volume_height_function,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_volume_height_function" "', argument " "1"" of type '" "cmf::river::volume_height_function const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_volume_height_function" "', argument " "1"" of type '" "cmf::river::volume_height_function const &""'"); 
  }
  arg1 = reinterpret_cast< cmf::river::volume_height_function * >(argp1);
  {
    try {
      result = (cmf::river::volume_height_function *)new cmf::river::volume_height_function((cmf::river::volume_height_function const &)*arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmf__river__volume_height_function, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_volume_height_function__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  cmf::river::IVolumeHeightFunction *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cmf::river::volume_height_function *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cmf__river__IVolumeHeightFunction,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_volume_height_function" "', argument " "1"" of type '" "cmf::river::IVolumeHeightFunction const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_volume_height_function" "', argument " "1"" of type '" "cmf::river::IVolumeHeightFunction const &""'"); 
  }
  arg1 = reinterpret_cast< cmf::river::IVolumeHeightFunction * >(argp1);
  {
    try {
      result = (cmf::river::volume_height_function *)new cmf::river::volume_height_function((cmf::river::IVolumeHeightFunction const &)*arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmf__river__volume_height_function, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_volume_height_function(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"new_volume_height_function",0,1,argv))) SWIG_fail;
  --argc;
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (argc == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_cmf__river__volume_height_function, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (argc == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_cmf__river__IVolumeHeightFunction, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      return _wrap_new_volume_height_function__SWIG_0(self, argc, argv);
    case 2:
      return _wrap_new_volume_height_function__SWIG_1(self, argc, argv);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_volume_height_function'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    cmf::river::volume_height_function(cmf::river::volume_height_function const &)\n"
    "    cmf::river::volume_height_function(cmf::river::IVolumeHeightFunction const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_volume_height_function_copy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::river::volume_height_function *arg1 = (cmf::river::volume_height_function *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  cmf::river::volume_height_function *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__river__volume_height_function, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "volume_height_function_copy" "', argument " "1"" of type '" "cmf::river::volume_height_function const *""'"); 
  }
  arg1 = reinterpret_cast< cmf::river::volume_height_function * >(argp1);
  {
    try {
      result = (cmf::river::volume_height_function *)((cmf::river::volume_height_function const *)arg1)->copy();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmf__river__volume_height_function, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_volume_height_function(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::river::volume_height_function *arg1 = (cmf::river::volume_height_function *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__river__volume_height_function, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_volume_height_function" "', argument " "1"" of type '" "cmf::river::volume_height_function *""'"); 
  }
  arg1 = reinterpret_cast< cmf::river::volume_height_function * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *volume_height_function_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_cmf__river__volume_height_function, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *volume_height_function_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_IChannel_get_nManning(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::river::IChannel *arg1 = (cmf::river::IChannel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__river__IChannel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IChannel_get_nManning" "', argument " "1"" of type '" "cmf::river::IChannel const *""'"); 
  }
  arg1 = reinterpret_cast< cmf::river::IChannel * >(argp1);
  {
    try {
      result = (double)((cmf::river::IChannel const *)arg1)->get_nManning();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IChannel_set_nManning(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::river::IChannel *arg1 = (cmf::river::IChannel *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"IChannel_set_nManning",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__river__IChannel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IChannel_set_nManning" "', argument " "1"" of type '" "cmf::river::IChannel *""'"); 
  }
  arg1 = reinterpret_cast< cmf::river::IChannel * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IChannel_set_nManning" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->set_nManning(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IChannel_length_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::river::IChannel *arg1 = (cmf::river::IChannel *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"IChannel_length_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__river__IChannel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IChannel_length_set" "', argument " "1"" of type '" "cmf::river::IChannel *""'"); 
  }
  arg1 = reinterpret_cast< cmf::river::IChannel * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IChannel_length_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->length = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IChannel_length_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::river::IChannel *arg1 = (cmf::river::IChannel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__river__IChannel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IChannel_length_get" "', argument " "1"" of type '" "cmf::river::IChannel *""'"); 
  }
  arg1 = reinterpret_cast< cmf::river::IChannel * >(argp1);
  result = (double) ((arg1)->length);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IChannel_typecode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::river::IChannel *arg1 = (cmf::river::IChannel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  char result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__river__IChannel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IChannel_typecode" "', argument " "1"" of type '" "cmf::river::IChannel const *""'"); 
  }
  arg1 = reinterpret_cast< cmf::river::IChannel * >(argp1);
  {
    try {
      result = (char)((cmf::river::IChannel const *)arg1)->typecode();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_char(static_cast< char >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IChannel_get_channel_width(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::river::IChannel *arg1 = (cmf::river::IChannel *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  double result;
  
  if (!SWIG_Python_UnpackTuple(args,"IChannel_get_channel_width",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__river__IChannel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IChannel_get_channel_width" "', argument " "1"" of type '" "cmf::river::IChannel const *""'"); 
  }
  arg1 = reinterpret_cast< cmf::river::IChannel * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IChannel_get_channel_width" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (double)((cmf::river::IChannel const *)arg1)->get_channel_width(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IChannel_get_wetted_perimeter(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::river::IChannel *arg1 = (cmf::river::IChannel *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  double result;
  
  if (!SWIG_Python_UnpackTuple(args,"IChannel_get_wetted_perimeter",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__river__IChannel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IChannel_get_wetted_perimeter" "', argument " "1"" of type '" "cmf::river::IChannel const *""'"); 
  }
  arg1 = reinterpret_cast< cmf::river::IChannel * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IChannel_get_wetted_perimeter" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (double)((cmf::river::IChannel const *)arg1)->get_wetted_perimeter(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IChannel_get_depth(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::river::IChannel *arg1 = (cmf::river::IChannel *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  double result;
  
  if (!SWIG_Python_UnpackTuple(args,"IChannel_get_depth",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__river__IChannel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IChannel_get_depth" "', argument " "1"" of type '" "cmf::river::IChannel const *""'"); 
  }
  arg1 = reinterpret_cast< cmf::river::IChannel * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IChannel_get_depth" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (double)((cmf::river::IChannel const *)arg1)->get_depth(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IChannel_get_flux_crossection(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::river::IChannel *arg1 = (cmf::river::IChannel *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  double result;
  
  if (!SWIG_Python_UnpackTuple(args,"IChannel_get_flux_crossection",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__river__IChannel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IChannel_get_flux_crossection" "', argument " "1"" of type '" "cmf::river::IChannel const *""'"); 
  }
  arg1 = reinterpret_cast< cmf::river::IChannel * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IChannel_get_flux_crossection" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (double)((cmf::river::IChannel const *)arg1)->get_flux_crossection(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IChannel_copy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::river::IChannel *arg1 = (cmf::river::IChannel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  cmf::river::IChannel *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__river__IChannel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IChannel_copy" "', argument " "1"" of type '" "cmf::river::IChannel const *""'"); 
  }
  arg1 = reinterpret_cast< cmf::river::IChannel * >(argp1);
  {
    try {
      result = (cmf::river::IChannel *)((cmf::river::IChannel const *)arg1)->copy();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmf__river__IChannel, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IChannel_qManning(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::river::IChannel *arg1 = (cmf::river::IChannel *) 0 ;
  double arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  double result;
  
  if (!SWIG_Python_UnpackTuple(args,"IChannel_qManning",3,3,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__river__IChannel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IChannel_qManning" "', argument " "1"" of type '" "cmf::river::IChannel const *""'"); 
  }
  arg1 = reinterpret_cast< cmf::river::IChannel * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IChannel_qManning" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IChannel_qManning" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (double)((cmf::river::IChannel const *)arg1)->qManning(arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_IChannel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::river::IChannel *arg1 = (cmf::river::IChannel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__river__IChannel, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_IChannel" "', argument " "1"" of type '" "cmf::river::IChannel *""'"); 
  }
  arg1 = reinterpret_cast< cmf::river::IChannel * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *IChannel_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_cmf__river__IChannel, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_SWATReachType_BottomWidth_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::river::SWATReachType *arg1 = (cmf::river::SWATReachType *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"SWATReachType_BottomWidth_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__river__SWATReachType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SWATReachType_BottomWidth_set" "', argument " "1"" of type '" "cmf::river::SWATReachType *""'"); 
  }
  arg1 = reinterpret_cast< cmf::river::SWATReachType * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SWATReachType_BottomWidth_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->BottomWidth = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SWATReachType_BottomWidth_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::river::SWATReachType *arg1 = (cmf::river::SWATReachType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__river__SWATReachType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SWATReachType_BottomWidth_get" "', argument " "1"" of type '" "cmf::river::SWATReachType *""'"); 
  }
  arg1 = reinterpret_cast< cmf::river::SWATReachType * >(argp1);
  result = (double) ((arg1)->BottomWidth);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SWATReachType_ChannelDepth_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::river::SWATReachType *arg1 = (cmf::river::SWATReachType *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"SWATReachType_ChannelDepth_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__river__SWATReachType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SWATReachType_ChannelDepth_set" "', argument " "1"" of type '" "cmf::river::SWATReachType *""'"); 
  }
  arg1 = reinterpret_cast< cmf::river::SWATReachType * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SWATReachType_ChannelDepth_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->ChannelDepth = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SWATReachType_ChannelDepth_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::river::SWATReachType *arg1 = (cmf::river::SWATReachType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__river__SWATReachType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SWATReachType_ChannelDepth_get" "', argument " "1"" of type '" "cmf::river::SWATReachType *""'"); 
  }
  arg1 = reinterpret_cast< cmf::river::SWATReachType * >(argp1);
  result = (double) ((arg1)->ChannelDepth);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SWATReachType_BankSlope_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::river::SWATReachType *arg1 = (cmf::river::SWATReachType *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"SWATReachType_BankSlope_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__river__SWATReachType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SWATReachType_BankSlope_set" "', argument " "1"" of type '" "cmf::river::SWATReachType *""'"); 
  }
  arg1 = reinterpret_cast< cmf::river::SWATReachType * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SWATReachType_BankSlope_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->BankSlope = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SWATReachType_BankSlope_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::river::SWATReachType *arg1 = (cmf::river::SWATReachType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__river__SWATReachType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SWATReachType_BankSlope_get" "', argument " "1"" of type '" "cmf::river::SWATReachType *""'"); 
  }
  arg1 = reinterpret_cast< cmf::river::SWATReachType * >(argp1);
  result = (double) ((arg1)->BankSlope);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SWATReachType_FloodPlainSlope_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::river::SWATReachType *arg1 = (cmf::river::SWATReachType *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"SWATReachType_FloodPlainSlope_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__river__SWATReachType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SWATReachType_FloodPlainSlope_set" "', argument " "1"" of type '" "cmf::river::SWATReachType *""'"); 
  }
  arg1 = reinterpret_cast< cmf::river::SWATReachType * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SWATReachType_FloodPlainSlope_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->FloodPlainSlope = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SWATReachType_FloodPlainSlope_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::river::SWATReachType *arg1 = (cmf::river::SWATReachType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__river__SWATReachType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SWATReachType_FloodPlainSlope_get" "', argument " "1"" of type '" "cmf::river::SWATReachType *""'"); 
  }
  arg1 = reinterpret_cast< cmf::river::SWATReachType * >(argp1);
  result = (double) ((arg1)->FloodPlainSlope);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SWATReachType__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  cmf::river::SWATReachType *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_SWATReachType" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  {
    try {
      result = (cmf::river::SWATReachType *)new cmf::river::SWATReachType(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmf__river__SWATReachType, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SWATReachType__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  cmf::river::SWATReachType *result = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_SWATReachType" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_SWATReachType" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_SWATReachType" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (cmf::river::SWATReachType *)new cmf::river::SWATReachType(arg1,arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmf__river__SWATReachType, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SWATReachType(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"new_SWATReachType",0,3,argv))) SWIG_fail;
  --argc;
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (argc == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          int res = SWIG_AsVal_double(argv[0], NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (argc == 3) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          int res = SWIG_AsVal_double(argv[0], NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_double(argv[1], NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      return _wrap_new_SWATReachType__SWIG_0(self, argc, argv);
    case 2:
      return _wrap_new_SWATReachType__SWIG_1(self, argc, argv);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_SWATReachType'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    cmf::river::SWATReachType(double)\n"
    "    cmf::river::SWATReachType(double,double,double)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_SWATReachType_copy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::river::SWATReachType *arg1 = (cmf::river::SWATReachType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  cmf::river::SWATReachType *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__river__SWATReachType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SWATReachType_copy" "', argument " "1"" of type '" "cmf::river::SWATReachType const *""'"); 
  }
  arg1 = reinterpret_cast< cmf::river::SWATReachType * >(argp1);
  {
    try {
      result = (cmf::river::SWATReachType *)((cmf::river::SWATReachType const *)arg1)->copy();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmf__river__SWATReachType, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_SWATReachType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::river::SWATReachType *arg1 = (cmf::river::SWATReachType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__river__SWATReachType, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SWATReachType" "', argument " "1"" of type '" "cmf::river::SWATReachType *""'"); 
  }
  arg1 = reinterpret_cast< cmf::river::SWATReachType * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *SWATReachType_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_cmf__river__SWATReachType, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *SWATReachType_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_TriangularReach_BankSlope_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::river::TriangularReach *arg1 = (cmf::river::TriangularReach *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"TriangularReach_BankSlope_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__river__TriangularReach, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TriangularReach_BankSlope_set" "', argument " "1"" of type '" "cmf::river::TriangularReach *""'"); 
  }
  arg1 = reinterpret_cast< cmf::river::TriangularReach * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TriangularReach_BankSlope_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->BankSlope = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TriangularReach_BankSlope_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::river::TriangularReach *arg1 = (cmf::river::TriangularReach *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__river__TriangularReach, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TriangularReach_BankSlope_get" "', argument " "1"" of type '" "cmf::river::TriangularReach *""'"); 
  }
  arg1 = reinterpret_cast< cmf::river::TriangularReach * >(argp1);
  result = (double) ((arg1)->BankSlope);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TriangularReach(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 = (double) 2 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  cmf::river::TriangularReach *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args,"new_TriangularReach",1,2,swig_obj)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_TriangularReach" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  if (swig_obj[1]) {
    ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_TriangularReach" "', argument " "2"" of type '" "double""'");
    } 
    arg2 = static_cast< double >(val2);
  }
  {
    try {
      result = (cmf::river::TriangularReach *)new cmf::river::TriangularReach(arg1,arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmf__river__TriangularReach, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TriangularReach_copy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::river::TriangularReach *arg1 = (cmf::river::TriangularReach *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  cmf::river::TriangularReach *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__river__TriangularReach, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TriangularReach_copy" "', argument " "1"" of type '" "cmf::river::TriangularReach const *""'"); 
  }
  arg1 = reinterpret_cast< cmf::river::TriangularReach * >(argp1);
  {
    try {
      result = (cmf::river::TriangularReach *)((cmf::river::TriangularReach const *)arg1)->copy();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmf__river__TriangularReach, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_TriangularReach(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::river::TriangularReach *arg1 = (cmf::river::TriangularReach *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__river__TriangularReach, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_TriangularReach" "', argument " "1"" of type '" "cmf::river::TriangularReach *""'"); 
  }
  arg1 = reinterpret_cast< cmf::river::TriangularReach * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *TriangularReach_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_cmf__river__TriangularReach, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *TriangularReach_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_RectangularReach(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  cmf::river::RectangularReach *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args,"new_RectangularReach",2,2,swig_obj)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_RectangularReach" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_RectangularReach" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (cmf::river::RectangularReach *)new cmf::river::RectangularReach(arg1,arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmf__river__RectangularReach, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RectangularReach_copy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::river::RectangularReach *arg1 = (cmf::river::RectangularReach *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  cmf::river::RectangularReach *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__river__RectangularReach, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RectangularReach_copy" "', argument " "1"" of type '" "cmf::river::RectangularReach const *""'"); 
  }
  arg1 = reinterpret_cast< cmf::river::RectangularReach * >(argp1);
  {
    try {
      result = (cmf::river::RectangularReach *)((cmf::river::RectangularReach const *)arg1)->copy();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmf__river__RectangularReach, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_RectangularReach(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::river::RectangularReach *arg1 = (cmf::river::RectangularReach *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__river__RectangularReach, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_RectangularReach" "', argument " "1"" of type '" "cmf::river::RectangularReach *""'"); 
  }
  arg1 = reinterpret_cast< cmf::river::RectangularReach * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *RectangularReach_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_cmf__river__RectangularReach, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *RectangularReach_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_PipeReach_radius_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::river::PipeReach *arg1 = (cmf::river::PipeReach *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"PipeReach_radius_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__river__PipeReach, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PipeReach_radius_set" "', argument " "1"" of type '" "cmf::river::PipeReach *""'"); 
  }
  arg1 = reinterpret_cast< cmf::river::PipeReach * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PipeReach_radius_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->radius = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PipeReach_radius_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::river::PipeReach *arg1 = (cmf::river::PipeReach *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__river__PipeReach, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PipeReach_radius_get" "', argument " "1"" of type '" "cmf::river::PipeReach *""'"); 
  }
  arg1 = reinterpret_cast< cmf::river::PipeReach * >(argp1);
  result = (double) ((arg1)->radius);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PipeReach(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  cmf::river::PipeReach *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args,"new_PipeReach",2,2,swig_obj)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_PipeReach" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_PipeReach" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (cmf::river::PipeReach *)new cmf::river::PipeReach(arg1,arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmf__river__PipeReach, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PipeReach_copy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::river::PipeReach *arg1 = (cmf::river::PipeReach *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  cmf::river::PipeReach *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__river__PipeReach, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PipeReach_copy" "', argument " "1"" of type '" "cmf::river::PipeReach const *""'"); 
  }
  arg1 = reinterpret_cast< cmf::river::PipeReach * >(argp1);
  {
    try {
      result = (cmf::river::PipeReach *)((cmf::river::PipeReach const *)arg1)->copy();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmf__river__PipeReach, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_PipeReach(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::river::PipeReach *arg1 = (cmf::river::PipeReach *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__river__PipeReach, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_PipeReach" "', argument " "1"" of type '" "cmf::river::PipeReach *""'"); 
  }
  arg1 = reinterpret_cast< cmf::river::PipeReach * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *PipeReach_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_cmf__river__PipeReach, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *PipeReach_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_Channel__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  double arg1 = (double) 1.0 ;
  double val1 ;
  int ecode1 = 0 ;
  cmf::river::Channel *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 1)) SWIG_fail;
  if (swig_obj[0]) {
    ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Channel" "', argument " "1"" of type '" "double""'");
    } 
    arg1 = static_cast< double >(val1);
  }
  {
    try {
      result = (cmf::river::Channel *)new cmf::river::Channel(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmf__river__Channel, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Channel__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  cmf::river::IChannel *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cmf::river::Channel *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cmf__river__IChannel,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Channel" "', argument " "1"" of type '" "cmf::river::IChannel const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Channel" "', argument " "1"" of type '" "cmf::river::IChannel const &""'"); 
  }
  arg1 = reinterpret_cast< cmf::river::IChannel * >(argp1);
  {
    try {
      result = (cmf::river::Channel *)new cmf::river::Channel((cmf::river::IChannel const &)*arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmf__river__Channel, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Channel__SWIG_2(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  cmf::river::IVolumeHeightFunction *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cmf::river::Channel *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cmf__river__IVolumeHeightFunction,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Channel" "', argument " "1"" of type '" "cmf::river::IVolumeHeightFunction const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Channel" "', argument " "1"" of type '" "cmf::river::IVolumeHeightFunction const &""'"); 
  }
  arg1 = reinterpret_cast< cmf::river::IVolumeHeightFunction * >(argp1);
  {
    try {
      result = (cmf::river::Channel *)new cmf::river::Channel((cmf::river::IVolumeHeightFunction const &)*arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmf__river__Channel, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Channel__SWIG_3(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  cmf::river::Channel *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cmf::river::Channel *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cmf__river__Channel,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Channel" "', argument " "1"" of type '" "cmf::river::Channel const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Channel" "', argument " "1"" of type '" "cmf::river::Channel const &""'"); 
  }
  arg1 = reinterpret_cast< cmf::river::Channel * >(argp1);
  {
    try {
      result = (cmf::river::Channel *)new cmf::river::Channel((cmf::river::Channel const &)*arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmf__river__Channel, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Channel__SWIG_4(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  char arg1 ;
  double arg2 ;
  double arg3 = (double) 1. ;
  double arg4 = (double) 0.25 ;
  char val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  cmf::river::Channel *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 4)) SWIG_fail;
  ecode1 = SWIG_AsVal_char(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Channel" "', argument " "1"" of type '" "char""'");
  } 
  arg1 = static_cast< char >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Channel" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (swig_obj[2]) {
    ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_Channel" "', argument " "3"" of type '" "double""'");
    } 
    arg3 = static_cast< double >(val3);
  }
  if (swig_obj[3]) {
    ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_Channel" "', argument " "4"" of type '" "double""'");
    } 
    arg4 = static_cast< double >(val4);
  }
  {
    try {
      result = (cmf::river::Channel *)new cmf::river::Channel(arg1,arg2,arg3,arg4);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmf__river__Channel, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Channel(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"new_Channel",0,4,argv))) SWIG_fail;
  --argc;
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if ((argc >= 0) && (argc <= 1)) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      if (argc > 0) {
        {
          {
            int res = SWIG_AsVal_double(argv[0], NULL);
            _v = SWIG_CheckState(res);
          }
        }
        if (!_v) goto check_1;
        _ranki += _v*_pi;
        _rankm += _pi;
        _pi *= SWIG_MAXCASTRANK;
      }
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (argc == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_cmf__river__Channel, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
    if (argc == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_cmf__river__IChannel, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 3;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_3:
    
    if (argc == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_cmf__river__IVolumeHeightFunction, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 4;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_4:
    
    if ((argc >= 2) && (argc <= 4)) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          int res = SWIG_AsVal_char(argv[0], NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_5;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_double(argv[1], NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_5;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (argc > 2) {
        {
          {
            int res = SWIG_AsVal_double(argv[2], NULL);
            _v = SWIG_CheckState(res);
          }
        }
        if (!_v) goto check_5;
        _ranki += _v*_pi;
        _rankm += _pi;
        _pi *= SWIG_MAXCASTRANK;
        if (argc > 3) {
          {
            {
              int res = SWIG_AsVal_double(argv[3], NULL);
              _v = SWIG_CheckState(res);
            }
          }
          if (!_v) goto check_5;
          _ranki += _v*_pi;
          _rankm += _pi;
          _pi *= SWIG_MAXCASTRANK;
        }
      }
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 5;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_5:
    
  dispatch:
    switch(_index) {
    case 1:
      return _wrap_new_Channel__SWIG_0(self, argc, argv);
    case 2:
      return _wrap_new_Channel__SWIG_3(self, argc, argv);
    case 3:
      return _wrap_new_Channel__SWIG_1(self, argc, argv);
    case 4:
      return _wrap_new_Channel__SWIG_2(self, argc, argv);
    case 5:
      return _wrap_new_Channel__SWIG_4(self, argc, argv);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_Channel'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    cmf::river::Channel(double)\n"
    "    cmf::river::Channel(cmf::river::IChannel const &)\n"
    "    cmf::river::Channel(cmf::river::IVolumeHeightFunction const &)\n"
    "    cmf::river::Channel(cmf::river::Channel const &)\n"
    "    cmf::river::Channel(char,double,double,double)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Channel_copy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::river::Channel *arg1 = (cmf::river::Channel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  cmf::river::Channel *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__river__Channel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Channel_copy" "', argument " "1"" of type '" "cmf::river::Channel const *""'"); 
  }
  arg1 = reinterpret_cast< cmf::river::Channel * >(argp1);
  {
    try {
      result = (cmf::river::Channel *)((cmf::river::Channel const *)arg1)->copy();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmf__river__Channel, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Channel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::river::Channel *arg1 = (cmf::river::Channel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__river__Channel, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Channel" "', argument " "1"" of type '" "cmf::river::Channel *""'"); 
  }
  arg1 = reinterpret_cast< cmf::river::Channel * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Channel_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_cmf__river__Channel, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *Channel_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_MeanChannel__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  cmf::river::IChannel *arg1 = 0 ;
  cmf::river::IChannel *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  cmf::river::MeanChannel *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cmf__river__IChannel,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_MeanChannel" "', argument " "1"" of type '" "cmf::river::IChannel const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_MeanChannel" "', argument " "1"" of type '" "cmf::river::IChannel const &""'"); 
  }
  arg1 = reinterpret_cast< cmf::river::IChannel * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cmf__river__IChannel,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_MeanChannel" "', argument " "2"" of type '" "cmf::river::IChannel const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_MeanChannel" "', argument " "2"" of type '" "cmf::river::IChannel const &""'"); 
  }
  arg2 = reinterpret_cast< cmf::river::IChannel * >(argp2);
  {
    try {
      result = (cmf::river::MeanChannel *)new cmf::river::MeanChannel((cmf::river::IChannel const &)*arg1,(cmf::river::IChannel const &)*arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmf__river__MeanChannel, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_MeanChannel__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  cmf::river::MeanChannel *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cmf::river::MeanChannel *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cmf__river__MeanChannel,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_MeanChannel" "', argument " "1"" of type '" "cmf::river::MeanChannel const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_MeanChannel" "', argument " "1"" of type '" "cmf::river::MeanChannel const &""'"); 
  }
  arg1 = reinterpret_cast< cmf::river::MeanChannel * >(argp1);
  {
    try {
      result = (cmf::river::MeanChannel *)new cmf::river::MeanChannel((cmf::river::MeanChannel const &)*arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmf__river__MeanChannel, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_MeanChannel(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"new_MeanChannel",0,2,argv))) SWIG_fail;
  --argc;
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (argc == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_cmf__river__MeanChannel, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (argc == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_cmf__river__IChannel, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_cmf__river__IChannel, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      return _wrap_new_MeanChannel__SWIG_1(self, argc, argv);
    case 2:
      return _wrap_new_MeanChannel__SWIG_0(self, argc, argv);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_MeanChannel'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    cmf::river::MeanChannel(cmf::river::IChannel const &,cmf::river::IChannel const &)\n"
    "    cmf::river::MeanChannel(cmf::river::MeanChannel const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeanChannel_copy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::river::MeanChannel *arg1 = (cmf::river::MeanChannel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  cmf::river::MeanChannel *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__river__MeanChannel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeanChannel_copy" "', argument " "1"" of type '" "cmf::river::MeanChannel const *""'"); 
  }
  arg1 = reinterpret_cast< cmf::river::MeanChannel * >(argp1);
  {
    try {
      result = (cmf::river::MeanChannel *)((cmf::river::MeanChannel const *)arg1)->copy();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmf__river__MeanChannel, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_MeanChannel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::river::MeanChannel *arg1 = (cmf::river::MeanChannel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__river__MeanChannel, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_MeanChannel" "', argument " "1"" of type '" "cmf::river::MeanChannel *""'"); 
  }
  arg1 = reinterpret_cast< cmf::river::MeanChannel * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *MeanChannel_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_cmf__river__MeanChannel, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *MeanChannel_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_OpenWaterStorage_get_height_function(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::river::OpenWaterStorage *arg1 = (cmf::river::OpenWaterStorage *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< cmf::river::OpenWaterStorage const > tempshared1 ;
  std::tr1::shared_ptr< cmf::river::OpenWaterStorage const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  cmf::river::IVolumeHeightFunction *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__river__OpenWaterStorage_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpenWaterStorage_get_height_function" "', argument " "1"" of type '" "cmf::river::OpenWaterStorage const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr< const cmf::river::OpenWaterStorage > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr< const cmf::river::OpenWaterStorage > * >(argp1);
      arg1 = const_cast< cmf::river::OpenWaterStorage * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr< const cmf::river::OpenWaterStorage > * >(argp1);
      arg1 = const_cast< cmf::river::OpenWaterStorage * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      result = (cmf::river::IVolumeHeightFunction *) &((cmf::river::OpenWaterStorage const *)arg1)->get_height_function();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmf__river__IVolumeHeightFunction, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_OpenWaterStorage_set_height_function(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::river::OpenWaterStorage *arg1 = (cmf::river::OpenWaterStorage *) 0 ;
  cmf::river::IVolumeHeightFunction *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< cmf::river::OpenWaterStorage > tempshared1 ;
  std::tr1::shared_ptr< cmf::river::OpenWaterStorage > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"OpenWaterStorage_set_height_function",2,2,swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__river__OpenWaterStorage_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpenWaterStorage_set_height_function" "', argument " "1"" of type '" "cmf::river::OpenWaterStorage *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  cmf::river::OpenWaterStorage > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  cmf::river::OpenWaterStorage > * >(argp1);
      arg1 = const_cast< cmf::river::OpenWaterStorage * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  cmf::river::OpenWaterStorage > * >(argp1);
      arg1 = const_cast< cmf::river::OpenWaterStorage * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cmf__river__IVolumeHeightFunction,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "OpenWaterStorage_set_height_function" "', argument " "2"" of type '" "cmf::river::IVolumeHeightFunction const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "OpenWaterStorage_set_height_function" "', argument " "2"" of type '" "cmf::river::IVolumeHeightFunction const &""'"); 
  }
  arg2 = reinterpret_cast< cmf::river::IVolumeHeightFunction * >(argp2);
  {
    try {
      (arg1)->set_height_function((cmf::river::IVolumeHeightFunction const &)*arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_OpenWaterStorage_wet_area(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::river::OpenWaterStorage *arg1 = (cmf::river::OpenWaterStorage *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< cmf::river::OpenWaterStorage const > tempshared1 ;
  std::tr1::shared_ptr< cmf::river::OpenWaterStorage const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  real result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__river__OpenWaterStorage_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpenWaterStorage_wet_area" "', argument " "1"" of type '" "cmf::river::OpenWaterStorage const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr< const cmf::river::OpenWaterStorage > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr< const cmf::river::OpenWaterStorage > * >(argp1);
      arg1 = const_cast< cmf::river::OpenWaterStorage * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr< const cmf::river::OpenWaterStorage > * >(argp1);
      arg1 = const_cast< cmf::river::OpenWaterStorage * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      result = (real)((cmf::river::OpenWaterStorage const *)arg1)->wet_area();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_OpenWaterStorage_create__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  cmf::project *arg1 = 0 ;
  real arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  cmf::river::OpenWaterStorage::ptr result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cmf__project,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpenWaterStorage_create" "', argument " "1"" of type '" "cmf::project const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "OpenWaterStorage_create" "', argument " "1"" of type '" "cmf::project const &""'"); 
  }
  arg1 = reinterpret_cast< cmf::project * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "OpenWaterStorage_create" "', argument " "2"" of type '" "real""'");
  } 
  arg2 = static_cast< real >(val2);
  {
    try {
      result = cmf::river::OpenWaterStorage::create((cmf::project const &)*arg1,arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  {
    std::tr1::shared_ptr<  cmf::river::OpenWaterStorage > *smartresult = result ? new std::tr1::shared_ptr<  cmf::river::OpenWaterStorage >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__tr1__shared_ptrT_cmf__river__OpenWaterStorage_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_OpenWaterStorage_create__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  cmf::project *arg1 = 0 ;
  cmf::river::IVolumeHeightFunction *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  cmf::river::OpenWaterStorage::ptr result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cmf__project,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpenWaterStorage_create" "', argument " "1"" of type '" "cmf::project const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "OpenWaterStorage_create" "', argument " "1"" of type '" "cmf::project const &""'"); 
  }
  arg1 = reinterpret_cast< cmf::project * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cmf__river__IVolumeHeightFunction,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "OpenWaterStorage_create" "', argument " "2"" of type '" "cmf::river::IVolumeHeightFunction const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "OpenWaterStorage_create" "', argument " "2"" of type '" "cmf::river::IVolumeHeightFunction const &""'"); 
  }
  arg2 = reinterpret_cast< cmf::river::IVolumeHeightFunction * >(argp2);
  {
    try {
      result = cmf::river::OpenWaterStorage::create((cmf::project const &)*arg1,(cmf::river::IVolumeHeightFunction const &)*arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  {
    std::tr1::shared_ptr<  cmf::river::OpenWaterStorage > *smartresult = result ? new std::tr1::shared_ptr<  cmf::river::OpenWaterStorage >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__tr1__shared_ptrT_cmf__river__OpenWaterStorage_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_OpenWaterStorage_create(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"OpenWaterStorage_create",0,2,argv))) SWIG_fail;
  --argc;
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (argc == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_cmf__project, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_cmf__river__IVolumeHeightFunction, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (argc == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_cmf__project, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_double(argv[1], NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      return _wrap_OpenWaterStorage_create__SWIG_1(self, argc, argv);
    case 2:
      return _wrap_OpenWaterStorage_create__SWIG_0(self, argc, argv);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'OpenWaterStorage_create'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    create(cmf::project const &,real)\n"
    "    cmf::river::OpenWaterStorage::create(cmf::project const &,cmf::river::IVolumeHeightFunction const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_OpenWaterStorage_from_node(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::water::flux_node::ptr arg1 ;
  real arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  cmf::river::OpenWaterStorage::ptr result;
  
  if (!SWIG_Python_UnpackTuple(args,"OpenWaterStorage_from_node",2,2,swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__water__flux_node_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpenWaterStorage_from_node" "', argument " "1"" of type '" "cmf::water::flux_node::ptr""'"); 
    }
    if (argp1) arg1 = *(reinterpret_cast< cmf::water::flux_node::ptr * >(argp1));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< cmf::water::flux_node::ptr * >(argp1);
  }
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "OpenWaterStorage_from_node" "', argument " "2"" of type '" "real""'");
  } 
  arg2 = static_cast< real >(val2);
  {
    try {
      result = cmf::river::OpenWaterStorage::from_node(arg1,arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  {
    std::tr1::shared_ptr<  cmf::river::OpenWaterStorage > *smartresult = result ? new std::tr1::shared_ptr<  cmf::river::OpenWaterStorage >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__tr1__shared_ptrT_cmf__river__OpenWaterStorage_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_OpenWaterStorage_cast(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::water::flux_node::ptr arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  cmf::river::OpenWaterStorage::ptr result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__water__flux_node_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpenWaterStorage_cast" "', argument " "1"" of type '" "cmf::water::flux_node::ptr""'"); 
    }
    if (argp1) arg1 = *(reinterpret_cast< cmf::water::flux_node::ptr * >(argp1));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< cmf::water::flux_node::ptr * >(argp1);
  }
  {
    try {
      result = cmf::river::OpenWaterStorage::cast(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  {
    std::tr1::shared_ptr<  cmf::river::OpenWaterStorage > *smartresult = result ? new std::tr1::shared_ptr<  cmf::river::OpenWaterStorage >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__tr1__shared_ptrT_cmf__river__OpenWaterStorage_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_OpenWaterStorage_SWIGSharedPtrUpcast(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::tr1::shared_ptr< cmf::river::OpenWaterStorage > arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::tr1::shared_ptr< cmf::water::WaterStorage > result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__river__OpenWaterStorage_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpenWaterStorage_SWIGSharedPtrUpcast" "', argument " "1"" of type '" "std::tr1::shared_ptr< cmf::river::OpenWaterStorage >""'"); 
    }
    if (argp1) arg1 = *(reinterpret_cast< std::tr1::shared_ptr< cmf::river::OpenWaterStorage > * >(argp1));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< std::tr1::shared_ptr< cmf::river::OpenWaterStorage > * >(argp1);
  }
  {
    try {
      result = cmf_river_OpenWaterStorage_SWIGSharedPtrUpcast(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  {
    std::tr1::shared_ptr<  cmf::water::WaterStorage > *smartresult = result ? new std::tr1::shared_ptr<  cmf::water::WaterStorage >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__tr1__shared_ptrT_cmf__water__WaterStorage_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_OpenWaterStorage_depth_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::river::OpenWaterStorage *arg1 = (cmf::river::OpenWaterStorage *) 0 ;
  real arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< cmf::river::OpenWaterStorage > tempshared1 ;
  std::tr1::shared_ptr< cmf::river::OpenWaterStorage > *smartarg1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"OpenWaterStorage_depth_set",2,2,swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__river__OpenWaterStorage_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpenWaterStorage_depth_set" "', argument " "1"" of type '" "cmf::river::OpenWaterStorage *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  cmf::river::OpenWaterStorage > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  cmf::river::OpenWaterStorage > * >(argp1);
      arg1 = const_cast< cmf::river::OpenWaterStorage * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  cmf::river::OpenWaterStorage > * >(argp1);
      arg1 = const_cast< cmf::river::OpenWaterStorage * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "OpenWaterStorage_depth_set" "', argument " "2"" of type '" "real""'");
  } 
  arg2 = static_cast< real >(val2);
  {
    try {
      cmf_river_OpenWaterStorage_depth_set(arg1,arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_OpenWaterStorage_depth_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::river::OpenWaterStorage *arg1 = (cmf::river::OpenWaterStorage *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< cmf::river::OpenWaterStorage > tempshared1 ;
  std::tr1::shared_ptr< cmf::river::OpenWaterStorage > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  real result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__river__OpenWaterStorage_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpenWaterStorage_depth_get" "', argument " "1"" of type '" "cmf::river::OpenWaterStorage *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  cmf::river::OpenWaterStorage > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  cmf::river::OpenWaterStorage > * >(argp1);
      arg1 = const_cast< cmf::river::OpenWaterStorage * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  cmf::river::OpenWaterStorage > * >(argp1);
      arg1 = const_cast< cmf::river::OpenWaterStorage * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      result = (real)cmf_river_OpenWaterStorage_depth_get(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_OpenWaterStorage(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::river::OpenWaterStorage *arg1 = (cmf::river::OpenWaterStorage *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< cmf::river::OpenWaterStorage > tempshared1 ;
  std::tr1::shared_ptr< cmf::river::OpenWaterStorage > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__river__OpenWaterStorage_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_OpenWaterStorage" "', argument " "1"" of type '" "cmf::river::OpenWaterStorage *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  cmf::river::OpenWaterStorage > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  cmf::river::OpenWaterStorage > * >(argp1);
      arg1 = const_cast< cmf::river::OpenWaterStorage * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  cmf::river::OpenWaterStorage > * >(argp1);
      arg1 = const_cast< cmf::river::OpenWaterStorage * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *OpenWaterStorage_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__tr1__shared_ptrT_cmf__river__OpenWaterStorage_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_Reach_get_height_function(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::river::Reach *arg1 = (cmf::river::Reach *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< cmf::river::Reach const > tempshared1 ;
  std::tr1::shared_ptr< cmf::river::Reach const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  cmf::river::IChannel *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__river__Reach_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Reach_get_height_function" "', argument " "1"" of type '" "cmf::river::Reach const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr< const cmf::river::Reach > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr< const cmf::river::Reach > * >(argp1);
      arg1 = const_cast< cmf::river::Reach * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr< const cmf::river::Reach > * >(argp1);
      arg1 = const_cast< cmf::river::Reach * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      result = (cmf::river::IChannel *) &((cmf::river::Reach const *)arg1)->get_height_function();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmf__river__IChannel, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Reach_set_height_function(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::river::Reach *arg1 = (cmf::river::Reach *) 0 ;
  cmf::river::IChannel *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< cmf::river::Reach > tempshared1 ;
  std::tr1::shared_ptr< cmf::river::Reach > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"Reach_set_height_function",2,2,swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__river__Reach_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Reach_set_height_function" "', argument " "1"" of type '" "cmf::river::Reach *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  cmf::river::Reach > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  cmf::river::Reach > * >(argp1);
      arg1 = const_cast< cmf::river::Reach * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  cmf::river::Reach > * >(argp1);
      arg1 = const_cast< cmf::river::Reach * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cmf__river__IChannel,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Reach_set_height_function" "', argument " "2"" of type '" "cmf::river::IChannel const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Reach_set_height_function" "', argument " "2"" of type '" "cmf::river::IChannel const &""'"); 
  }
  arg2 = reinterpret_cast< cmf::river::IChannel * >(argp2);
  {
    try {
      (arg1)->set_height_function((cmf::river::IChannel const &)*arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Reach_get_length(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::river::Reach *arg1 = (cmf::river::Reach *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< cmf::river::Reach const > tempshared1 ;
  std::tr1::shared_ptr< cmf::river::Reach const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  real result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__river__Reach_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Reach_get_length" "', argument " "1"" of type '" "cmf::river::Reach const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr< const cmf::river::Reach > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr< const cmf::river::Reach > * >(argp1);
      arg1 = const_cast< cmf::river::Reach * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr< const cmf::river::Reach > * >(argp1);
      arg1 = const_cast< cmf::river::Reach * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      result = (real)((cmf::river::Reach const *)arg1)->get_length();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Reach_set_outlet(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::river::Reach *arg1 = (cmf::river::Reach *) 0 ;
  cmf::water::flux_node::ptr arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< cmf::river::Reach > tempshared1 ;
  std::tr1::shared_ptr< cmf::river::Reach > *smartarg1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"Reach_set_outlet",2,2,swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__river__Reach_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Reach_set_outlet" "', argument " "1"" of type '" "cmf::river::Reach *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  cmf::river::Reach > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  cmf::river::Reach > * >(argp1);
      arg1 = const_cast< cmf::river::Reach * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  cmf::river::Reach > * >(argp1);
      arg1 = const_cast< cmf::river::Reach * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(swig_obj[1], &argp2, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__water__flux_node_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Reach_set_outlet" "', argument " "2"" of type '" "cmf::water::flux_node::ptr""'"); 
    }
    if (argp2) arg2 = *(reinterpret_cast< cmf::water::flux_node::ptr * >(argp2));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< cmf::water::flux_node::ptr * >(argp2);
  }
  {
    try {
      (arg1)->set_outlet(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Reach_set_dead_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::river::Reach *arg1 = (cmf::river::Reach *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< cmf::river::Reach > tempshared1 ;
  std::tr1::shared_ptr< cmf::river::Reach > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__river__Reach_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Reach_set_dead_end" "', argument " "1"" of type '" "cmf::river::Reach *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  cmf::river::Reach > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  cmf::river::Reach > * >(argp1);
      arg1 = const_cast< cmf::river::Reach * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  cmf::river::Reach > * >(argp1);
      arg1 = const_cast< cmf::river::Reach * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      (arg1)->set_dead_end();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Reach_set_downstream(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::river::Reach *arg1 = (cmf::river::Reach *) 0 ;
  cmf::river::Reach_ptr arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< cmf::river::Reach > tempshared1 ;
  std::tr1::shared_ptr< cmf::river::Reach > *smartarg1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"Reach_set_downstream",2,2,swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__river__Reach_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Reach_set_downstream" "', argument " "1"" of type '" "cmf::river::Reach *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  cmf::river::Reach > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  cmf::river::Reach > * >(argp1);
      arg1 = const_cast< cmf::river::Reach * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  cmf::river::Reach > * >(argp1);
      arg1 = const_cast< cmf::river::Reach * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(swig_obj[1], &argp2, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__river__Reach_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Reach_set_downstream" "', argument " "2"" of type '" "cmf::river::Reach_ptr""'"); 
    }
    if (argp2) arg2 = *(reinterpret_cast< cmf::river::Reach_ptr * >(argp2));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< cmf::river::Reach_ptr * >(argp2);
  }
  {
    try {
      (arg1)->set_downstream(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Reach_get_upstream(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::river::Reach *arg1 = (cmf::river::Reach *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< cmf::river::Reach const > tempshared1 ;
  std::tr1::shared_ptr< cmf::river::Reach const > *smartarg1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  cmf::river::Reach_ptr result;
  
  if (!SWIG_Python_UnpackTuple(args,"Reach_get_upstream",2,2,swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__river__Reach_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Reach_get_upstream" "', argument " "1"" of type '" "cmf::river::Reach const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr< const cmf::river::Reach > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr< const cmf::river::Reach > * >(argp1);
      arg1 = const_cast< cmf::river::Reach * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr< const cmf::river::Reach > * >(argp1);
      arg1 = const_cast< cmf::river::Reach * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Reach_get_upstream" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = ((cmf::river::Reach const *)arg1)->get_upstream(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  {
    std::tr1::shared_ptr<  cmf::river::Reach > *smartresult = result ? new std::tr1::shared_ptr<  cmf::river::Reach >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__tr1__shared_ptrT_cmf__river__Reach_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Reach_add_cell(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::river::Reach *arg1 = (cmf::river::Reach *) 0 ;
  cmf::upslope::Cell *arg2 = (cmf::upslope::Cell *) 0 ;
  bool arg3 ;
  real arg4 ;
  real arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< cmf::river::Reach > tempshared1 ;
  std::tr1::shared_ptr< cmf::river::Reach > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  PyObject *swig_obj[5] ;
  
  if (!SWIG_Python_UnpackTuple(args,"Reach_add_cell",5,5,swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__river__Reach_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Reach_add_cell" "', argument " "1"" of type '" "cmf::river::Reach *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  cmf::river::Reach > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  cmf::river::Reach > * >(argp1);
      arg1 = const_cast< cmf::river::Reach * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  cmf::river::Reach > * >(argp1);
      arg1 = const_cast< cmf::river::Reach * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cmf__upslope__Cell, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Reach_add_cell" "', argument " "2"" of type '" "cmf::upslope::Cell *""'"); 
  }
  arg2 = reinterpret_cast< cmf::upslope::Cell * >(argp2);
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Reach_add_cell" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Reach_add_cell" "', argument " "4"" of type '" "real""'");
  } 
  arg4 = static_cast< real >(val4);
  ecode5 = SWIG_AsVal_double(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Reach_add_cell" "', argument " "5"" of type '" "real""'");
  } 
  arg5 = static_cast< real >(val5);
  {
    try {
      (arg1)->add_cell(arg2,arg3,arg4,arg5);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Reach_cuts_soil_of(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::river::Reach *arg1 = (cmf::river::Reach *) 0 ;
  cmf::upslope::Cell *arg2 = (cmf::upslope::Cell *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< cmf::river::Reach const > tempshared1 ;
  std::tr1::shared_ptr< cmf::river::Reach const > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args,"Reach_cuts_soil_of",2,2,swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__river__Reach_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Reach_cuts_soil_of" "', argument " "1"" of type '" "cmf::river::Reach const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr< const cmf::river::Reach > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr< const cmf::river::Reach > * >(argp1);
      arg1 = const_cast< cmf::river::Reach * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr< const cmf::river::Reach > * >(argp1);
      arg1 = const_cast< cmf::river::Reach * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cmf__upslope__Cell, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Reach_cuts_soil_of" "', argument " "2"" of type '" "cmf::upslope::Cell *""'"); 
  }
  arg2 = reinterpret_cast< cmf::upslope::Cell * >(argp2);
  {
    try {
      result = (bool)((cmf::river::Reach const *)arg1)->cuts_soil_of(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Reach_get_distance_to(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::river::Reach *arg1 = (cmf::river::Reach *) 0 ;
  cmf::upslope::Cell *arg2 = (cmf::upslope::Cell *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< cmf::river::Reach const > tempshared1 ;
  std::tr1::shared_ptr< cmf::river::Reach const > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  real result;
  
  if (!SWIG_Python_UnpackTuple(args,"Reach_get_distance_to",2,2,swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__river__Reach_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Reach_get_distance_to" "', argument " "1"" of type '" "cmf::river::Reach const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr< const cmf::river::Reach > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr< const cmf::river::Reach > * >(argp1);
      arg1 = const_cast< cmf::river::Reach * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr< const cmf::river::Reach > * >(argp1);
      arg1 = const_cast< cmf::river::Reach * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cmf__upslope__Cell, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Reach_get_distance_to" "', argument " "2"" of type '" "cmf::upslope::Cell *""'"); 
  }
  arg2 = reinterpret_cast< cmf::upslope::Cell * >(argp2);
  {
    try {
      result = (real)((cmf::river::Reach const *)arg1)->get_distance_to(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Reach_get_bank_length_with(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::river::Reach *arg1 = (cmf::river::Reach *) 0 ;
  cmf::upslope::Cell *arg2 = (cmf::upslope::Cell *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< cmf::river::Reach const > tempshared1 ;
  std::tr1::shared_ptr< cmf::river::Reach const > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  real result;
  
  if (!SWIG_Python_UnpackTuple(args,"Reach_get_bank_length_with",2,2,swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__river__Reach_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Reach_get_bank_length_with" "', argument " "1"" of type '" "cmf::river::Reach const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr< const cmf::river::Reach > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr< const cmf::river::Reach > * >(argp1);
      arg1 = const_cast< cmf::river::Reach * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr< const cmf::river::Reach > * >(argp1);
      arg1 = const_cast< cmf::river::Reach * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cmf__upslope__Cell, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Reach_get_bank_length_with" "', argument " "2"" of type '" "cmf::upslope::Cell *""'"); 
  }
  arg2 = reinterpret_cast< cmf::upslope::Cell * >(argp2);
  {
    try {
      result = (real)((cmf::river::Reach const *)arg1)->get_bank_length_with(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Reach_get_diffusive(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::river::Reach *arg1 = (cmf::river::Reach *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< cmf::river::Reach const > tempshared1 ;
  std::tr1::shared_ptr< cmf::river::Reach const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__river__Reach_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Reach_get_diffusive" "', argument " "1"" of type '" "cmf::river::Reach const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr< const cmf::river::Reach > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr< const cmf::river::Reach > * >(argp1);
      arg1 = const_cast< cmf::river::Reach * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr< const cmf::river::Reach > * >(argp1);
      arg1 = const_cast< cmf::river::Reach * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      result = (bool)((cmf::river::Reach const *)arg1)->get_diffusive();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Reach_set_diffusive(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::river::Reach *arg1 = (cmf::river::Reach *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< cmf::river::Reach > tempshared1 ;
  std::tr1::shared_ptr< cmf::river::Reach > *smartarg1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"Reach_set_diffusive",2,2,swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__river__Reach_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Reach_set_diffusive" "', argument " "1"" of type '" "cmf::river::Reach *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  cmf::river::Reach > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  cmf::river::Reach > * >(argp1);
      arg1 = const_cast< cmf::river::Reach * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  cmf::river::Reach > * >(argp1);
      arg1 = const_cast< cmf::river::Reach * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Reach_set_diffusive" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      (arg1)->set_diffusive(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Reach(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::river::Reach *arg1 = (cmf::river::Reach *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< cmf::river::Reach > tempshared1 ;
  std::tr1::shared_ptr< cmf::river::Reach > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__river__Reach_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Reach" "', argument " "1"" of type '" "cmf::river::Reach *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  cmf::river::Reach > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  cmf::river::Reach > * >(argp1);
      arg1 = const_cast< cmf::river::Reach * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  cmf::river::Reach > * >(argp1);
      arg1 = const_cast< cmf::river::Reach * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Reach_create(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::project *arg1 = 0 ;
  cmf::river::Channel arg2 ;
  bool arg3 = (bool) false ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  cmf::river::OpenWaterStorage::ptr result;
  
  if (!SWIG_Python_UnpackTuple(args,"Reach_create",2,3,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cmf__project,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Reach_create" "', argument " "1"" of type '" "cmf::project const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Reach_create" "', argument " "1"" of type '" "cmf::project const &""'"); 
  }
  arg1 = reinterpret_cast< cmf::project * >(argp1);
  {
    res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cmf__river__Channel,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Reach_create" "', argument " "2"" of type '" "cmf::river::Channel""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Reach_create" "', argument " "2"" of type '" "cmf::river::Channel""'");
    } else {
      cmf::river::Channel * temp = reinterpret_cast< cmf::river::Channel * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (swig_obj[2]) {
    ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Reach_create" "', argument " "3"" of type '" "bool""'");
    } 
    arg3 = static_cast< bool >(val3);
  }
  {
    try {
      result = cmf::river::Reach::create((cmf::project const &)*arg1,arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  {
    std::tr1::shared_ptr<  cmf::river::OpenWaterStorage > *smartresult = result ? new std::tr1::shared_ptr<  cmf::river::OpenWaterStorage >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__tr1__shared_ptrT_cmf__river__OpenWaterStorage_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Reach_SWIGSharedPtrUpcast(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::tr1::shared_ptr< cmf::river::Reach > arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::tr1::shared_ptr< cmf::river::OpenWaterStorage > result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__river__Reach_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Reach_SWIGSharedPtrUpcast" "', argument " "1"" of type '" "std::tr1::shared_ptr< cmf::river::Reach >""'"); 
    }
    if (argp1) arg1 = *(reinterpret_cast< std::tr1::shared_ptr< cmf::river::Reach > * >(argp1));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< std::tr1::shared_ptr< cmf::river::Reach > * >(argp1);
  }
  {
    try {
      result = cmf_river_Reach_SWIGSharedPtrUpcast(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  {
    std::tr1::shared_ptr<  cmf::river::OpenWaterStorage > *smartresult = result ? new std::tr1::shared_ptr<  cmf::river::OpenWaterStorage >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__tr1__shared_ptrT_cmf__river__OpenWaterStorage_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Reach_cells_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::river::Reach *arg1 = (cmf::river::Reach *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< cmf::river::Reach > tempshared1 ;
  std::tr1::shared_ptr< cmf::river::Reach > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  cmf::upslope::cell_vector *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__river__Reach_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Reach_cells_get" "', argument " "1"" of type '" "cmf::river::Reach *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  cmf::river::Reach > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  cmf::river::Reach > * >(argp1);
      arg1 = const_cast< cmf::river::Reach * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  cmf::river::Reach > * >(argp1);
      arg1 = const_cast< cmf::river::Reach * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      result = (cmf::upslope::cell_vector *)cmf_river_Reach_cells_get(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_cmf__upslope__Cell_p_std__allocatorT_cmf__upslope__Cell_p_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Reach_downstream_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::river::Reach *arg1 = (cmf::river::Reach *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< cmf::river::Reach > tempshared1 ;
  std::tr1::shared_ptr< cmf::river::Reach > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  cmf::river::Reach *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__river__Reach_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Reach_downstream_get" "', argument " "1"" of type '" "cmf::river::Reach *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  cmf::river::Reach > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  cmf::river::Reach > * >(argp1);
      arg1 = const_cast< cmf::river::Reach * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  cmf::river::Reach > * >(argp1);
      arg1 = const_cast< cmf::river::Reach * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      result = (cmf::river::Reach *) &cmf_river_Reach_downstream_get(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  {
    std::tr1::shared_ptr< const cmf::river::Reach > *smartresult = new std::tr1::shared_ptr< const cmf::river::Reach >(result SWIG_NO_NULL_DELETER_0);
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__tr1__shared_ptrT_cmf__river__Reach_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Reach_root_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::river::Reach *arg1 = (cmf::river::Reach *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< cmf::river::Reach > tempshared1 ;
  std::tr1::shared_ptr< cmf::river::Reach > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  cmf::river::Reach *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__river__Reach_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Reach_root_get" "', argument " "1"" of type '" "cmf::river::Reach *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  cmf::river::Reach > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  cmf::river::Reach > * >(argp1);
      arg1 = const_cast< cmf::river::Reach * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  cmf::river::Reach > * >(argp1);
      arg1 = const_cast< cmf::river::Reach * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      result = (cmf::river::Reach *) &cmf_river_Reach_root_get(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  {
    std::tr1::shared_ptr< const cmf::river::Reach > *smartresult = new std::tr1::shared_ptr< const cmf::river::Reach >(result SWIG_NO_NULL_DELETER_0);
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__tr1__shared_ptrT_cmf__river__Reach_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Reach_upstream_count_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::river::Reach *arg1 = (cmf::river::Reach *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< cmf::river::Reach > tempshared1 ;
  std::tr1::shared_ptr< cmf::river::Reach > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__river__Reach_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Reach_upstream_count_get" "', argument " "1"" of type '" "cmf::river::Reach *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  cmf::river::Reach > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  cmf::river::Reach > * >(argp1);
      arg1 = const_cast< cmf::river::Reach * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  cmf::river::Reach > * >(argp1);
      arg1 = const_cast< cmf::river::Reach * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      result = (int)cmf_river_Reach_upstream_count_get(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Reach_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__tr1__shared_ptrT_cmf__river__Reach_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_ReachIterator_next(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::river::ReachIterator *arg1 = (cmf::river::ReachIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  cmf::river::Reach_ptr result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__river__ReachIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ReachIterator_next" "', argument " "1"" of type '" "cmf::river::ReachIterator *""'"); 
  }
  arg1 = reinterpret_cast< cmf::river::ReachIterator * >(argp1);
  {
    try {
      result = (arg1)->next();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  {
    std::tr1::shared_ptr<  cmf::river::Reach > *smartresult = result ? new std::tr1::shared_ptr<  cmf::river::Reach >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__tr1__shared_ptrT_cmf__river__Reach_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ReachIterator_valid(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::river::ReachIterator *arg1 = (cmf::river::ReachIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__river__ReachIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ReachIterator_valid" "', argument " "1"" of type '" "cmf::river::ReachIterator const *""'"); 
  }
  arg1 = reinterpret_cast< cmf::river::ReachIterator * >(argp1);
  {
    try {
      result = (bool)((cmf::river::ReachIterator const *)arg1)->valid();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ReachIterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::river::Reach_ptr arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  cmf::river::ReachIterator *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__river__Reach_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ReachIterator" "', argument " "1"" of type '" "cmf::river::Reach_ptr""'"); 
    }
    if (argp1) arg1 = *(reinterpret_cast< cmf::river::Reach_ptr * >(argp1));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< cmf::river::Reach_ptr * >(argp1);
  }
  {
    try {
      result = (cmf::river::ReachIterator *)new cmf::river::ReachIterator(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmf__river__ReachIterator, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ReachIterator_reach_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::river::ReachIterator *arg1 = (cmf::river::ReachIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  cmf::river::Reach *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__river__ReachIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ReachIterator_reach_get" "', argument " "1"" of type '" "cmf::river::ReachIterator *""'"); 
  }
  arg1 = reinterpret_cast< cmf::river::ReachIterator * >(argp1);
  {
    try {
      result = (cmf::river::Reach *) &cmf_river_ReachIterator_reach_get(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  {
    std::tr1::shared_ptr< const cmf::river::Reach > *smartresult = new std::tr1::shared_ptr< const cmf::river::Reach >(result SWIG_NO_NULL_DELETER_0);
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__tr1__shared_ptrT_cmf__river__Reach_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ReachIterator_position_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::river::ReachIterator *arg1 = (cmf::river::ReachIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__river__ReachIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ReachIterator_position_get" "', argument " "1"" of type '" "cmf::river::ReachIterator *""'"); 
  }
  arg1 = reinterpret_cast< cmf::river::ReachIterator * >(argp1);
  {
    try {
      result = (double)cmf_river_ReachIterator_position_get(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ReachIterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::river::ReachIterator *arg1 = (cmf::river::ReachIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__river__ReachIterator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ReachIterator" "', argument " "1"" of type '" "cmf::river::ReachIterator *""'"); 
  }
  arg1 = reinterpret_cast< cmf::river::ReachIterator * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ReachIterator_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_cmf__river__ReachIterator, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *ReachIterator_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_make_river_gap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::river::Reach_ptr arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__river__Reach_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "make_river_gap" "', argument " "1"" of type '" "cmf::river::Reach_ptr""'"); 
    }
    if (argp1) arg1 = *(reinterpret_cast< cmf::river::Reach_ptr * >(argp1));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< cmf::river::Reach_ptr * >(argp1);
  }
  {
    try {
      result = (double)cmf::river::make_river_gap(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_lateral_sub_surface_flux(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::connections::lateral_sub_surface_flux *arg1 = (cmf::upslope::connections::lateral_sub_surface_flux *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__upslope__connections__lateral_sub_surface_flux, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_lateral_sub_surface_flux" "', argument " "1"" of type '" "cmf::upslope::connections::lateral_sub_surface_flux *""'"); 
  }
  arg1 = reinterpret_cast< cmf::upslope::connections::lateral_sub_surface_flux * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *lateral_sub_surface_flux_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_cmf__upslope__connections__lateral_sub_surface_flux, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN int Swig_var_Darcy_cell_connector_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Darcy_cell_connector is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Darcy_cell_connector_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&cmf::upslope::connections::Darcy::cell_connector), SWIGTYPE_p_cmf__upslope__CellConnector,  0 );
  return pyobj;
}


SWIGINTERN PyObject *_wrap_new_Darcy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::SoilLayer::ptr arg1 ;
  cmf::water::flux_node::ptr arg2 ;
  real arg3 ;
  real arg4 = (real) 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject *swig_obj[4] ;
  cmf::upslope::connections::Darcy *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args,"new_Darcy",3,4,swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__upslope__SoilLayer_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Darcy" "', argument " "1"" of type '" "cmf::upslope::SoilLayer::ptr""'"); 
    }
    if (argp1) arg1 = *(reinterpret_cast< cmf::upslope::SoilLayer::ptr * >(argp1));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< cmf::upslope::SoilLayer::ptr * >(argp1);
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(swig_obj[1], &argp2, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__water__flux_node_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_Darcy" "', argument " "2"" of type '" "cmf::water::flux_node::ptr""'"); 
    }
    if (argp2) arg2 = *(reinterpret_cast< cmf::water::flux_node::ptr * >(argp2));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< cmf::water::flux_node::ptr * >(argp2);
  }
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_Darcy" "', argument " "3"" of type '" "real""'");
  } 
  arg3 = static_cast< real >(val3);
  if (swig_obj[3]) {
    ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_Darcy" "', argument " "4"" of type '" "real""'");
    } 
    arg4 = static_cast< real >(val4);
  }
  {
    try {
      result = (cmf::upslope::connections::Darcy *)new cmf::upslope::connections::Darcy(arg1,arg2,arg3,arg4);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmf__upslope__connections__Darcy, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Darcy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::connections::Darcy *arg1 = (cmf::upslope::connections::Darcy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__upslope__connections__Darcy, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Darcy" "', argument " "1"" of type '" "cmf::upslope::connections::Darcy *""'"); 
  }
  arg1 = reinterpret_cast< cmf::upslope::connections::Darcy * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Darcy_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_cmf__upslope__connections__Darcy, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *Darcy_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN int Swig_var_TopographicGradientDarcy_cell_connector_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable TopographicGradientDarcy_cell_connector is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_TopographicGradientDarcy_cell_connector_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&cmf::upslope::connections::TopographicGradientDarcy::cell_connector), SWIGTYPE_p_cmf__upslope__CellConnector,  0 );
  return pyobj;
}


SWIGINTERN PyObject *_wrap_new_TopographicGradientDarcy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::SoilLayer::ptr arg1 ;
  cmf::water::flux_node::ptr arg2 ;
  real arg3 ;
  real arg4 = (real) 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject *swig_obj[4] ;
  cmf::upslope::connections::TopographicGradientDarcy *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args,"new_TopographicGradientDarcy",3,4,swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__upslope__SoilLayer_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_TopographicGradientDarcy" "', argument " "1"" of type '" "cmf::upslope::SoilLayer::ptr""'"); 
    }
    if (argp1) arg1 = *(reinterpret_cast< cmf::upslope::SoilLayer::ptr * >(argp1));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< cmf::upslope::SoilLayer::ptr * >(argp1);
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(swig_obj[1], &argp2, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__water__flux_node_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_TopographicGradientDarcy" "', argument " "2"" of type '" "cmf::water::flux_node::ptr""'"); 
    }
    if (argp2) arg2 = *(reinterpret_cast< cmf::water::flux_node::ptr * >(argp2));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< cmf::water::flux_node::ptr * >(argp2);
  }
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_TopographicGradientDarcy" "', argument " "3"" of type '" "real""'");
  } 
  arg3 = static_cast< real >(val3);
  if (swig_obj[3]) {
    ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_TopographicGradientDarcy" "', argument " "4"" of type '" "real""'");
    } 
    arg4 = static_cast< real >(val4);
  }
  {
    try {
      result = (cmf::upslope::connections::TopographicGradientDarcy *)new cmf::upslope::connections::TopographicGradientDarcy(arg1,arg2,arg3,arg4);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmf__upslope__connections__TopographicGradientDarcy, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_TopographicGradientDarcy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::connections::TopographicGradientDarcy *arg1 = (cmf::upslope::connections::TopographicGradientDarcy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__upslope__connections__TopographicGradientDarcy, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_TopographicGradientDarcy" "', argument " "1"" of type '" "cmf::upslope::connections::TopographicGradientDarcy *""'"); 
  }
  arg1 = reinterpret_cast< cmf::upslope::connections::TopographicGradientDarcy * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *TopographicGradientDarcy_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_cmf__upslope__connections__TopographicGradientDarcy, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *TopographicGradientDarcy_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_OHDISflow(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::SoilLayer::ptr arg1 ;
  cmf::water::flux_node::ptr arg2 ;
  real arg3 ;
  real arg4 = (real) 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject *swig_obj[4] ;
  cmf::upslope::connections::OHDISflow *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args,"new_OHDISflow",3,4,swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__upslope__SoilLayer_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_OHDISflow" "', argument " "1"" of type '" "cmf::upslope::SoilLayer::ptr""'"); 
    }
    if (argp1) arg1 = *(reinterpret_cast< cmf::upslope::SoilLayer::ptr * >(argp1));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< cmf::upslope::SoilLayer::ptr * >(argp1);
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(swig_obj[1], &argp2, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__water__flux_node_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_OHDISflow" "', argument " "2"" of type '" "cmf::water::flux_node::ptr""'"); 
    }
    if (argp2) arg2 = *(reinterpret_cast< cmf::water::flux_node::ptr * >(argp2));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< cmf::water::flux_node::ptr * >(argp2);
  }
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_OHDISflow" "', argument " "3"" of type '" "real""'");
  } 
  arg3 = static_cast< real >(val3);
  if (swig_obj[3]) {
    ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_OHDISflow" "', argument " "4"" of type '" "real""'");
    } 
    arg4 = static_cast< real >(val4);
  }
  {
    try {
      result = (cmf::upslope::connections::OHDISflow *)new cmf::upslope::connections::OHDISflow(arg1,arg2,arg3,arg4);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmf__upslope__connections__OHDISflow, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int Swig_var_OHDISflow_cell_connector_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable OHDISflow_cell_connector is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_OHDISflow_cell_connector_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&cmf::upslope::connections::OHDISflow::cell_connector), SWIGTYPE_p_cmf__upslope__CellConnector,  0 );
  return pyobj;
}


SWIGINTERN PyObject *_wrap_delete_OHDISflow(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::connections::OHDISflow *arg1 = (cmf::upslope::connections::OHDISflow *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__upslope__connections__OHDISflow, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_OHDISflow" "', argument " "1"" of type '" "cmf::upslope::connections::OHDISflow *""'"); 
  }
  arg1 = reinterpret_cast< cmf::upslope::connections::OHDISflow * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *OHDISflow_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_cmf__upslope__connections__OHDISflow, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *OHDISflow_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_Richards_lateral(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::SoilLayer::ptr arg1 ;
  cmf::water::flux_node::ptr arg2 ;
  real arg3 = (real) 0 ;
  real arg4 = (real) 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject *swig_obj[4] ;
  cmf::upslope::connections::Richards_lateral *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args,"new_Richards_lateral",2,4,swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__upslope__SoilLayer_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Richards_lateral" "', argument " "1"" of type '" "cmf::upslope::SoilLayer::ptr""'"); 
    }
    if (argp1) arg1 = *(reinterpret_cast< cmf::upslope::SoilLayer::ptr * >(argp1));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< cmf::upslope::SoilLayer::ptr * >(argp1);
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(swig_obj[1], &argp2, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__water__flux_node_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_Richards_lateral" "', argument " "2"" of type '" "cmf::water::flux_node::ptr""'"); 
    }
    if (argp2) arg2 = *(reinterpret_cast< cmf::water::flux_node::ptr * >(argp2));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< cmf::water::flux_node::ptr * >(argp2);
  }
  if (swig_obj[2]) {
    ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_Richards_lateral" "', argument " "3"" of type '" "real""'");
    } 
    arg3 = static_cast< real >(val3);
  }
  if (swig_obj[3]) {
    ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_Richards_lateral" "', argument " "4"" of type '" "real""'");
    } 
    arg4 = static_cast< real >(val4);
  }
  {
    try {
      result = (cmf::upslope::connections::Richards_lateral *)new cmf::upslope::connections::Richards_lateral(arg1,arg2,arg3,arg4);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmf__upslope__connections__Richards_lateral, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int Swig_var_Richards_lateral_cell_connector_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Richards_lateral_cell_connector is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Richards_lateral_cell_connector_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&cmf::upslope::connections::Richards_lateral::cell_connector), SWIGTYPE_p_cmf__upslope__CellConnector,  0 );
  return pyobj;
}


SWIGINTERN PyObject *_wrap_delete_Richards_lateral(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::connections::Richards_lateral *arg1 = (cmf::upslope::connections::Richards_lateral *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__upslope__connections__Richards_lateral, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Richards_lateral" "', argument " "1"" of type '" "cmf::upslope::connections::Richards_lateral *""'"); 
  }
  arg1 = reinterpret_cast< cmf::upslope::connections::Richards_lateral * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Richards_lateral_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_cmf__upslope__connections__Richards_lateral, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *Richards_lateral_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_Manning_is_diffusive_wave_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::river::Manning *arg1 = (cmf::river::Manning *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"Manning_is_diffusive_wave_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__river__Manning, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Manning_is_diffusive_wave_set" "', argument " "1"" of type '" "cmf::river::Manning *""'"); 
  }
  arg1 = reinterpret_cast< cmf::river::Manning * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Manning_is_diffusive_wave_set" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  if (arg1) (arg1)->is_diffusive_wave = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Manning_is_diffusive_wave_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::river::Manning *arg1 = (cmf::river::Manning *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__river__Manning, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Manning_is_diffusive_wave_get" "', argument " "1"" of type '" "cmf::river::Manning *""'"); 
  }
  arg1 = reinterpret_cast< cmf::river::Manning * >(argp1);
  result = (bool) ((arg1)->is_diffusive_wave);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Manning_flux_geometry_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::river::Manning *arg1 = (cmf::river::Manning *) 0 ;
  cmf::river::Channel *arg2 = (cmf::river::Channel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"Manning_flux_geometry_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__river__Manning, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Manning_flux_geometry_set" "', argument " "1"" of type '" "cmf::river::Manning *""'"); 
  }
  arg1 = reinterpret_cast< cmf::river::Manning * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cmf__river__Channel, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Manning_flux_geometry_set" "', argument " "2"" of type '" "cmf::river::Channel *""'"); 
  }
  arg2 = reinterpret_cast< cmf::river::Channel * >(argp2);
  if (arg1) (arg1)->flux_geometry = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Manning_flux_geometry_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::river::Manning *arg1 = (cmf::river::Manning *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  cmf::river::Channel *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__river__Manning, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Manning_flux_geometry_get" "', argument " "1"" of type '" "cmf::river::Manning *""'"); 
  }
  arg1 = reinterpret_cast< cmf::river::Manning * >(argp1);
  result = (cmf::river::Channel *)& ((arg1)->flux_geometry);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmf__river__Channel, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Manning(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::river::Manning *arg1 = (cmf::river::Manning *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__river__Manning, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Manning" "', argument " "1"" of type '" "cmf::river::Manning *""'"); 
  }
  arg1 = reinterpret_cast< cmf::river::Manning * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Manning_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_cmf__river__Manning, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN int Swig_var_Manning_Diffusive_cell_connector_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Manning_Diffusive_cell_connector is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Manning_Diffusive_cell_connector_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&cmf::river::Manning_Diffusive::cell_connector), SWIGTYPE_p_cmf__upslope__CellConnector,  0 );
  return pyobj;
}


SWIGINTERN PyObject *_wrap_new_Manning_Diffusive(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::river::OpenWaterStorage::ptr arg1 ;
  cmf::water::flux_node::ptr arg2 ;
  cmf::river::Channel arg3 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  cmf::river::Manning_Diffusive *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args,"new_Manning_Diffusive",3,3,swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__river__OpenWaterStorage_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Manning_Diffusive" "', argument " "1"" of type '" "cmf::river::OpenWaterStorage::ptr""'"); 
    }
    if (argp1) arg1 = *(reinterpret_cast< cmf::river::OpenWaterStorage::ptr * >(argp1));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< cmf::river::OpenWaterStorage::ptr * >(argp1);
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(swig_obj[1], &argp2, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__water__flux_node_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_Manning_Diffusive" "', argument " "2"" of type '" "cmf::water::flux_node::ptr""'"); 
    }
    if (argp2) arg2 = *(reinterpret_cast< cmf::water::flux_node::ptr * >(argp2));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< cmf::water::flux_node::ptr * >(argp2);
  }
  {
    res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_cmf__river__Channel,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_Manning_Diffusive" "', argument " "3"" of type '" "cmf::river::Channel""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Manning_Diffusive" "', argument " "3"" of type '" "cmf::river::Channel""'");
    } else {
      cmf::river::Channel * temp = reinterpret_cast< cmf::river::Channel * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    try {
      result = (cmf::river::Manning_Diffusive *)new cmf::river::Manning_Diffusive(arg1,arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmf__river__Manning_Diffusive, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Manning_Diffusive(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::river::Manning_Diffusive *arg1 = (cmf::river::Manning_Diffusive *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__river__Manning_Diffusive, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Manning_Diffusive" "', argument " "1"" of type '" "cmf::river::Manning_Diffusive *""'"); 
  }
  arg1 = reinterpret_cast< cmf::river::Manning_Diffusive * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Manning_Diffusive_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_cmf__river__Manning_Diffusive, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *Manning_Diffusive_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN int Swig_var_Manning_Kinematic_cell_connector_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Manning_Kinematic_cell_connector is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Manning_Kinematic_cell_connector_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&cmf::river::Manning_Kinematic::cell_connector), SWIGTYPE_p_cmf__upslope__CellConnector,  0 );
  return pyobj;
}


SWIGINTERN PyObject *_wrap_new_Manning_Kinematic(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::river::OpenWaterStorage::ptr arg1 ;
  cmf::water::flux_node::ptr arg2 ;
  cmf::river::Channel arg3 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  cmf::river::Manning_Kinematic *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args,"new_Manning_Kinematic",3,3,swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__river__OpenWaterStorage_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Manning_Kinematic" "', argument " "1"" of type '" "cmf::river::OpenWaterStorage::ptr""'"); 
    }
    if (argp1) arg1 = *(reinterpret_cast< cmf::river::OpenWaterStorage::ptr * >(argp1));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< cmf::river::OpenWaterStorage::ptr * >(argp1);
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(swig_obj[1], &argp2, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__water__flux_node_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_Manning_Kinematic" "', argument " "2"" of type '" "cmf::water::flux_node::ptr""'"); 
    }
    if (argp2) arg2 = *(reinterpret_cast< cmf::water::flux_node::ptr * >(argp2));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< cmf::water::flux_node::ptr * >(argp2);
  }
  {
    res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_cmf__river__Channel,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_Manning_Kinematic" "', argument " "3"" of type '" "cmf::river::Channel""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Manning_Kinematic" "', argument " "3"" of type '" "cmf::river::Channel""'");
    } else {
      cmf::river::Channel * temp = reinterpret_cast< cmf::river::Channel * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    try {
      result = (cmf::river::Manning_Kinematic *)new cmf::river::Manning_Kinematic(arg1,arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmf__river__Manning_Kinematic, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Manning_Kinematic(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::river::Manning_Kinematic *arg1 = (cmf::river::Manning_Kinematic *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__river__Manning_Kinematic, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Manning_Kinematic" "', argument " "1"" of type '" "cmf::river::Manning_Kinematic *""'"); 
  }
  arg1 = reinterpret_cast< cmf::river::Manning_Kinematic * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Manning_Kinematic_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_cmf__river__Manning_Kinematic, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *Manning_Kinematic_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_CanopyOverflow(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::water::WaterStorage::ptr arg1 ;
  cmf::water::flux_node::ptr arg2 ;
  cmf::upslope::Cell *arg3 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  cmf::upslope::connections::CanopyOverflow *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args,"new_CanopyOverflow",3,3,swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__water__WaterStorage_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_CanopyOverflow" "', argument " "1"" of type '" "cmf::water::WaterStorage::ptr""'"); 
    }
    if (argp1) arg1 = *(reinterpret_cast< cmf::water::WaterStorage::ptr * >(argp1));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< cmf::water::WaterStorage::ptr * >(argp1);
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(swig_obj[1], &argp2, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__water__flux_node_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_CanopyOverflow" "', argument " "2"" of type '" "cmf::water::flux_node::ptr""'"); 
    }
    if (argp2) arg2 = *(reinterpret_cast< cmf::water::flux_node::ptr * >(argp2));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< cmf::water::flux_node::ptr * >(argp2);
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_cmf__upslope__Cell,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_CanopyOverflow" "', argument " "3"" of type '" "cmf::upslope::Cell &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_CanopyOverflow" "', argument " "3"" of type '" "cmf::upslope::Cell &""'"); 
  }
  arg3 = reinterpret_cast< cmf::upslope::Cell * >(argp3);
  {
    try {
      result = (cmf::upslope::connections::CanopyOverflow *)new cmf::upslope::connections::CanopyOverflow(arg1,arg2,*arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmf__upslope__connections__CanopyOverflow, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CanopyOverflow_use_for_cell(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::Cell *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  cmf::upslope::connections::CanopyOverflow *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cmf__upslope__Cell,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CanopyOverflow_use_for_cell" "', argument " "1"" of type '" "cmf::upslope::Cell &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CanopyOverflow_use_for_cell" "', argument " "1"" of type '" "cmf::upslope::Cell &""'"); 
  }
  arg1 = reinterpret_cast< cmf::upslope::Cell * >(argp1);
  {
    try {
      result = (cmf::upslope::connections::CanopyOverflow *)cmf::upslope::connections::CanopyOverflow::use_for_cell(*arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmf__upslope__connections__CanopyOverflow, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_CanopyOverflow(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::connections::CanopyOverflow *arg1 = (cmf::upslope::connections::CanopyOverflow *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__upslope__connections__CanopyOverflow, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_CanopyOverflow" "', argument " "1"" of type '" "cmf::upslope::connections::CanopyOverflow *""'"); 
  }
  arg1 = reinterpret_cast< cmf::upslope::connections::CanopyOverflow * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *CanopyOverflow_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_cmf__upslope__connections__CanopyOverflow, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *CanopyOverflow_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_SimpleTindexSnowMelt_SnowMeltRate_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::connections::SimpleTindexSnowMelt *arg1 = (cmf::upslope::connections::SimpleTindexSnowMelt *) 0 ;
  real arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"SimpleTindexSnowMelt_SnowMeltRate_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__upslope__connections__SimpleTindexSnowMelt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimpleTindexSnowMelt_SnowMeltRate_set" "', argument " "1"" of type '" "cmf::upslope::connections::SimpleTindexSnowMelt *""'"); 
  }
  arg1 = reinterpret_cast< cmf::upslope::connections::SimpleTindexSnowMelt * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SimpleTindexSnowMelt_SnowMeltRate_set" "', argument " "2"" of type '" "real""'");
  } 
  arg2 = static_cast< real >(val2);
  if (arg1) (arg1)->SnowMeltRate = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimpleTindexSnowMelt_SnowMeltRate_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::connections::SimpleTindexSnowMelt *arg1 = (cmf::upslope::connections::SimpleTindexSnowMelt *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  real result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__upslope__connections__SimpleTindexSnowMelt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimpleTindexSnowMelt_SnowMeltRate_get" "', argument " "1"" of type '" "cmf::upslope::connections::SimpleTindexSnowMelt *""'"); 
  }
  arg1 = reinterpret_cast< cmf::upslope::connections::SimpleTindexSnowMelt * >(argp1);
  result = (real) ((arg1)->SnowMeltRate);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SimpleTindexSnowMelt(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::water::WaterStorage::ptr arg1 ;
  cmf::water::flux_node::ptr arg2 ;
  cmf::upslope::Cell *arg3 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  cmf::upslope::connections::SimpleTindexSnowMelt *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args,"new_SimpleTindexSnowMelt",3,3,swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__water__WaterStorage_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SimpleTindexSnowMelt" "', argument " "1"" of type '" "cmf::water::WaterStorage::ptr""'"); 
    }
    if (argp1) arg1 = *(reinterpret_cast< cmf::water::WaterStorage::ptr * >(argp1));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< cmf::water::WaterStorage::ptr * >(argp1);
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(swig_obj[1], &argp2, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__water__flux_node_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_SimpleTindexSnowMelt" "', argument " "2"" of type '" "cmf::water::flux_node::ptr""'"); 
    }
    if (argp2) arg2 = *(reinterpret_cast< cmf::water::flux_node::ptr * >(argp2));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< cmf::water::flux_node::ptr * >(argp2);
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_cmf__upslope__Cell,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_SimpleTindexSnowMelt" "', argument " "3"" of type '" "cmf::upslope::Cell &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SimpleTindexSnowMelt" "', argument " "3"" of type '" "cmf::upslope::Cell &""'"); 
  }
  arg3 = reinterpret_cast< cmf::upslope::Cell * >(argp3);
  {
    try {
      result = (cmf::upslope::connections::SimpleTindexSnowMelt *)new cmf::upslope::connections::SimpleTindexSnowMelt(arg1,arg2,*arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmf__upslope__connections__SimpleTindexSnowMelt, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimpleTindexSnowMelt_use_for_cell(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::Cell *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cmf__upslope__Cell,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimpleTindexSnowMelt_use_for_cell" "', argument " "1"" of type '" "cmf::upslope::Cell &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SimpleTindexSnowMelt_use_for_cell" "', argument " "1"" of type '" "cmf::upslope::Cell &""'"); 
  }
  arg1 = reinterpret_cast< cmf::upslope::Cell * >(argp1);
  {
    try {
      cmf::upslope::connections::SimpleTindexSnowMelt::use_for_cell(*arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_SimpleTindexSnowMelt(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::connections::SimpleTindexSnowMelt *arg1 = (cmf::upslope::connections::SimpleTindexSnowMelt *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__upslope__connections__SimpleTindexSnowMelt, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SimpleTindexSnowMelt" "', argument " "1"" of type '" "cmf::upslope::connections::SimpleTindexSnowMelt *""'"); 
  }
  arg1 = reinterpret_cast< cmf::upslope::connections::SimpleTindexSnowMelt * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *SimpleTindexSnowMelt_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_cmf__upslope__connections__SimpleTindexSnowMelt, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *SimpleTindexSnowMelt_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_Rainfall_Throughfall_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::connections::Rainfall *arg1 = (cmf::upslope::connections::Rainfall *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"Rainfall_Throughfall_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__upslope__connections__Rainfall, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rainfall_Throughfall_set" "', argument " "1"" of type '" "cmf::upslope::connections::Rainfall *""'"); 
  }
  arg1 = reinterpret_cast< cmf::upslope::connections::Rainfall * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Rainfall_Throughfall_set" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  if (arg1) (arg1)->Throughfall = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Rainfall_Throughfall_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::connections::Rainfall *arg1 = (cmf::upslope::connections::Rainfall *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__upslope__connections__Rainfall, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rainfall_Throughfall_get" "', argument " "1"" of type '" "cmf::upslope::connections::Rainfall *""'"); 
  }
  arg1 = reinterpret_cast< cmf::upslope::connections::Rainfall * >(argp1);
  result = (bool) ((arg1)->Throughfall);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Rainfall_InterceptedRainfall_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::connections::Rainfall *arg1 = (cmf::upslope::connections::Rainfall *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"Rainfall_InterceptedRainfall_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__upslope__connections__Rainfall, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rainfall_InterceptedRainfall_set" "', argument " "1"" of type '" "cmf::upslope::connections::Rainfall *""'"); 
  }
  arg1 = reinterpret_cast< cmf::upslope::connections::Rainfall * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Rainfall_InterceptedRainfall_set" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  if (arg1) (arg1)->InterceptedRainfall = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Rainfall_InterceptedRainfall_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::connections::Rainfall *arg1 = (cmf::upslope::connections::Rainfall *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__upslope__connections__Rainfall, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rainfall_InterceptedRainfall_get" "', argument " "1"" of type '" "cmf::upslope::connections::Rainfall *""'"); 
  }
  arg1 = reinterpret_cast< cmf::upslope::connections::Rainfall * >(argp1);
  result = (bool) ((arg1)->InterceptedRainfall);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Rainfall(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::water::flux_node::ptr arg1 ;
  cmf::upslope::Cell *arg2 = 0 ;
  bool arg3 = (bool) true ;
  bool arg4 = (bool) true ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  PyObject *swig_obj[4] ;
  cmf::upslope::connections::Rainfall *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args,"new_Rainfall",2,4,swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__water__flux_node_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Rainfall" "', argument " "1"" of type '" "cmf::water::flux_node::ptr""'"); 
    }
    if (argp1) arg1 = *(reinterpret_cast< cmf::water::flux_node::ptr * >(argp1));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< cmf::water::flux_node::ptr * >(argp1);
  }
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cmf__upslope__Cell,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_Rainfall" "', argument " "2"" of type '" "cmf::upslope::Cell &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Rainfall" "', argument " "2"" of type '" "cmf::upslope::Cell &""'"); 
  }
  arg2 = reinterpret_cast< cmf::upslope::Cell * >(argp2);
  if (swig_obj[2]) {
    ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_Rainfall" "', argument " "3"" of type '" "bool""'");
    } 
    arg3 = static_cast< bool >(val3);
  }
  if (swig_obj[3]) {
    ecode4 = SWIG_AsVal_bool(swig_obj[3], &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_Rainfall" "', argument " "4"" of type '" "bool""'");
    } 
    arg4 = static_cast< bool >(val4);
  }
  {
    try {
      result = (cmf::upslope::connections::Rainfall *)new cmf::upslope::connections::Rainfall(arg1,*arg2,arg3,arg4);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmf__upslope__connections__Rainfall, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Rainfall(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::connections::Rainfall *arg1 = (cmf::upslope::connections::Rainfall *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__upslope__connections__Rainfall, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Rainfall" "', argument " "1"" of type '" "cmf::upslope::connections::Rainfall *""'"); 
  }
  arg1 = reinterpret_cast< cmf::upslope::connections::Rainfall * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Rainfall_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_cmf__upslope__connections__Rainfall, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *Rainfall_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_Snowfall(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::water::flux_node::ptr arg1 ;
  cmf::upslope::Cell *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  cmf::upslope::connections::Snowfall *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args,"new_Snowfall",2,2,swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__water__flux_node_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Snowfall" "', argument " "1"" of type '" "cmf::water::flux_node::ptr""'"); 
    }
    if (argp1) arg1 = *(reinterpret_cast< cmf::water::flux_node::ptr * >(argp1));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< cmf::water::flux_node::ptr * >(argp1);
  }
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cmf__upslope__Cell,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_Snowfall" "', argument " "2"" of type '" "cmf::upslope::Cell &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Snowfall" "', argument " "2"" of type '" "cmf::upslope::Cell &""'"); 
  }
  arg2 = reinterpret_cast< cmf::upslope::Cell * >(argp2);
  {
    try {
      result = (cmf::upslope::connections::Snowfall *)new cmf::upslope::connections::Snowfall(arg1,*arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmf__upslope__connections__Snowfall, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Snowfall(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::connections::Snowfall *arg1 = (cmf::upslope::connections::Snowfall *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__upslope__connections__Snowfall, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Snowfall" "', argument " "1"" of type '" "cmf::upslope::connections::Snowfall *""'"); 
  }
  arg1 = reinterpret_cast< cmf::upslope::connections::Snowfall * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Snowfall_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_cmf__upslope__connections__Snowfall, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *Snowfall_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_MatrixInfiltration(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::SoilLayer::ptr arg1 ;
  cmf::water::flux_node::ptr arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  cmf::upslope::connections::MatrixInfiltration *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args,"new_MatrixInfiltration",2,2,swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__upslope__SoilLayer_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_MatrixInfiltration" "', argument " "1"" of type '" "cmf::upslope::SoilLayer::ptr""'"); 
    }
    if (argp1) arg1 = *(reinterpret_cast< cmf::upslope::SoilLayer::ptr * >(argp1));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< cmf::upslope::SoilLayer::ptr * >(argp1);
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(swig_obj[1], &argp2, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__water__flux_node_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_MatrixInfiltration" "', argument " "2"" of type '" "cmf::water::flux_node::ptr""'"); 
    }
    if (argp2) arg2 = *(reinterpret_cast< cmf::water::flux_node::ptr * >(argp2));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< cmf::water::flux_node::ptr * >(argp2);
  }
  {
    try {
      result = (cmf::upslope::connections::MatrixInfiltration *)new cmf::upslope::connections::MatrixInfiltration(arg1,arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmf__upslope__connections__MatrixInfiltration, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MatrixInfiltration_use_for_cell(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::Cell *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cmf__upslope__Cell,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatrixInfiltration_use_for_cell" "', argument " "1"" of type '" "cmf::upslope::Cell &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MatrixInfiltration_use_for_cell" "', argument " "1"" of type '" "cmf::upslope::Cell &""'"); 
  }
  arg1 = reinterpret_cast< cmf::upslope::Cell * >(argp1);
  {
    try {
      cmf::upslope::connections::MatrixInfiltration::use_for_cell(*arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_MatrixInfiltration(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::connections::MatrixInfiltration *arg1 = (cmf::upslope::connections::MatrixInfiltration *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__upslope__connections__MatrixInfiltration, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_MatrixInfiltration" "', argument " "1"" of type '" "cmf::upslope::connections::MatrixInfiltration *""'"); 
  }
  arg1 = reinterpret_cast< cmf::upslope::connections::MatrixInfiltration * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *MatrixInfiltration_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_cmf__upslope__connections__MatrixInfiltration, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *MatrixInfiltration_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_CompleteInfiltration(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::SoilLayer::ptr arg1 ;
  cmf::water::flux_node::ptr arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  cmf::upslope::connections::CompleteInfiltration *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args,"new_CompleteInfiltration",2,2,swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__upslope__SoilLayer_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_CompleteInfiltration" "', argument " "1"" of type '" "cmf::upslope::SoilLayer::ptr""'"); 
    }
    if (argp1) arg1 = *(reinterpret_cast< cmf::upslope::SoilLayer::ptr * >(argp1));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< cmf::upslope::SoilLayer::ptr * >(argp1);
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(swig_obj[1], &argp2, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__water__flux_node_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_CompleteInfiltration" "', argument " "2"" of type '" "cmf::water::flux_node::ptr""'"); 
    }
    if (argp2) arg2 = *(reinterpret_cast< cmf::water::flux_node::ptr * >(argp2));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< cmf::water::flux_node::ptr * >(argp2);
  }
  {
    try {
      result = (cmf::upslope::connections::CompleteInfiltration *)new cmf::upslope::connections::CompleteInfiltration(arg1,arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmf__upslope__connections__CompleteInfiltration, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_CompleteInfiltration(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::connections::CompleteInfiltration *arg1 = (cmf::upslope::connections::CompleteInfiltration *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__upslope__connections__CompleteInfiltration, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_CompleteInfiltration" "', argument " "1"" of type '" "cmf::upslope::connections::CompleteInfiltration *""'"); 
  }
  arg1 = reinterpret_cast< cmf::upslope::connections::CompleteInfiltration * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *CompleteInfiltration_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_cmf__upslope__connections__CompleteInfiltration, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *CompleteInfiltration_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_SWATPercolation_use_for_cell(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::Cell *arg1 = 0 ;
  bool arg2 = (bool) true ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"SWATPercolation_use_for_cell",1,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cmf__upslope__Cell,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SWATPercolation_use_for_cell" "', argument " "1"" of type '" "cmf::upslope::Cell &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SWATPercolation_use_for_cell" "', argument " "1"" of type '" "cmf::upslope::Cell &""'"); 
  }
  arg1 = reinterpret_cast< cmf::upslope::Cell * >(argp1);
  if (swig_obj[1]) {
    ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SWATPercolation_use_for_cell" "', argument " "2"" of type '" "bool""'");
    } 
    arg2 = static_cast< bool >(val2);
  }
  {
    try {
      cmf::upslope::connections::SWATPercolation::use_for_cell(*arg1,arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SWATPercolation(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::SoilLayer::ptr arg1 ;
  cmf::upslope::SoilLayer::ptr arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  cmf::upslope::connections::SWATPercolation *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args,"new_SWATPercolation",2,2,swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__upslope__SoilLayer_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SWATPercolation" "', argument " "1"" of type '" "cmf::upslope::SoilLayer::ptr""'"); 
    }
    if (argp1) arg1 = *(reinterpret_cast< cmf::upslope::SoilLayer::ptr * >(argp1));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< cmf::upslope::SoilLayer::ptr * >(argp1);
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(swig_obj[1], &argp2, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__upslope__SoilLayer_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_SWATPercolation" "', argument " "2"" of type '" "cmf::upslope::SoilLayer::ptr""'"); 
    }
    if (argp2) arg2 = *(reinterpret_cast< cmf::upslope::SoilLayer::ptr * >(argp2));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< cmf::upslope::SoilLayer::ptr * >(argp2);
  }
  {
    try {
      result = (cmf::upslope::connections::SWATPercolation *)new cmf::upslope::connections::SWATPercolation(arg1,arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmf__upslope__connections__SWATPercolation, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_SWATPercolation(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::connections::SWATPercolation *arg1 = (cmf::upslope::connections::SWATPercolation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__upslope__connections__SWATPercolation, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SWATPercolation" "', argument " "1"" of type '" "cmf::upslope::connections::SWATPercolation *""'"); 
  }
  arg1 = reinterpret_cast< cmf::upslope::connections::SWATPercolation * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *SWATPercolation_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_cmf__upslope__connections__SWATPercolation, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *SWATPercolation_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_Richards(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::SoilLayer::ptr arg1 ;
  cmf::water::flux_node::ptr arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  cmf::upslope::connections::Richards *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args,"new_Richards",2,2,swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__upslope__SoilLayer_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Richards" "', argument " "1"" of type '" "cmf::upslope::SoilLayer::ptr""'"); 
    }
    if (argp1) arg1 = *(reinterpret_cast< cmf::upslope::SoilLayer::ptr * >(argp1));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< cmf::upslope::SoilLayer::ptr * >(argp1);
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(swig_obj[1], &argp2, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__water__flux_node_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_Richards" "', argument " "2"" of type '" "cmf::water::flux_node::ptr""'"); 
    }
    if (argp2) arg2 = *(reinterpret_cast< cmf::water::flux_node::ptr * >(argp2));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< cmf::water::flux_node::ptr * >(argp2);
  }
  {
    try {
      result = (cmf::upslope::connections::Richards *)new cmf::upslope::connections::Richards(arg1,arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmf__upslope__connections__Richards, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Richards_use_for_cell(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::Cell *arg1 = 0 ;
  bool arg2 = (bool) true ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"Richards_use_for_cell",1,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cmf__upslope__Cell,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Richards_use_for_cell" "', argument " "1"" of type '" "cmf::upslope::Cell &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Richards_use_for_cell" "', argument " "1"" of type '" "cmf::upslope::Cell &""'"); 
  }
  arg1 = reinterpret_cast< cmf::upslope::Cell * >(argp1);
  if (swig_obj[1]) {
    ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Richards_use_for_cell" "', argument " "2"" of type '" "bool""'");
    } 
    arg2 = static_cast< bool >(val2);
  }
  {
    try {
      cmf::upslope::connections::Richards::use_for_cell(*arg1,arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Richards(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::connections::Richards *arg1 = (cmf::upslope::connections::Richards *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__upslope__connections__Richards, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Richards" "', argument " "1"" of type '" "cmf::upslope::connections::Richards *""'"); 
  }
  arg1 = reinterpret_cast< cmf::upslope::connections::Richards * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Richards_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_cmf__upslope__connections__Richards, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *Richards_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_HBVparameters_cfmax_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::connections::HBVparameters *arg1 = (cmf::upslope::connections::HBVparameters *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"HBVparameters_cfmax_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__upslope__connections__HBVparameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HBVparameters_cfmax_set" "', argument " "1"" of type '" "cmf::upslope::connections::HBVparameters *""'"); 
  }
  arg1 = reinterpret_cast< cmf::upslope::connections::HBVparameters * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HBVparameters_cfmax_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->cfmax = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HBVparameters_cfmax_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::connections::HBVparameters *arg1 = (cmf::upslope::connections::HBVparameters *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__upslope__connections__HBVparameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HBVparameters_cfmax_get" "', argument " "1"" of type '" "cmf::upslope::connections::HBVparameters *""'"); 
  }
  arg1 = reinterpret_cast< cmf::upslope::connections::HBVparameters * >(argp1);
  result = (double) ((arg1)->cfmax);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HBVparameters_sfcf_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::connections::HBVparameters *arg1 = (cmf::upslope::connections::HBVparameters *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"HBVparameters_sfcf_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__upslope__connections__HBVparameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HBVparameters_sfcf_set" "', argument " "1"" of type '" "cmf::upslope::connections::HBVparameters *""'"); 
  }
  arg1 = reinterpret_cast< cmf::upslope::connections::HBVparameters * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HBVparameters_sfcf_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->sfcf = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HBVparameters_sfcf_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::connections::HBVparameters *arg1 = (cmf::upslope::connections::HBVparameters *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__upslope__connections__HBVparameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HBVparameters_sfcf_get" "', argument " "1"" of type '" "cmf::upslope::connections::HBVparameters *""'"); 
  }
  arg1 = reinterpret_cast< cmf::upslope::connections::HBVparameters * >(argp1);
  result = (double) ((arg1)->sfcf);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HBVparameters_cfr_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::connections::HBVparameters *arg1 = (cmf::upslope::connections::HBVparameters *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"HBVparameters_cfr_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__upslope__connections__HBVparameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HBVparameters_cfr_set" "', argument " "1"" of type '" "cmf::upslope::connections::HBVparameters *""'"); 
  }
  arg1 = reinterpret_cast< cmf::upslope::connections::HBVparameters * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HBVparameters_cfr_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->cfr = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HBVparameters_cfr_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::connections::HBVparameters *arg1 = (cmf::upslope::connections::HBVparameters *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__upslope__connections__HBVparameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HBVparameters_cfr_get" "', argument " "1"" of type '" "cmf::upslope::connections::HBVparameters *""'"); 
  }
  arg1 = reinterpret_cast< cmf::upslope::connections::HBVparameters * >(argp1);
  result = (double) ((arg1)->cfr);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HBVparameters_cwh_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::connections::HBVparameters *arg1 = (cmf::upslope::connections::HBVparameters *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"HBVparameters_cwh_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__upslope__connections__HBVparameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HBVparameters_cwh_set" "', argument " "1"" of type '" "cmf::upslope::connections::HBVparameters *""'"); 
  }
  arg1 = reinterpret_cast< cmf::upslope::connections::HBVparameters * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HBVparameters_cwh_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->cwh = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HBVparameters_cwh_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::connections::HBVparameters *arg1 = (cmf::upslope::connections::HBVparameters *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__upslope__connections__HBVparameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HBVparameters_cwh_get" "', argument " "1"" of type '" "cmf::upslope::connections::HBVparameters *""'"); 
  }
  arg1 = reinterpret_cast< cmf::upslope::connections::HBVparameters * >(argp1);
  result = (double) ((arg1)->cwh);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HBVparameters_k0_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::connections::HBVparameters *arg1 = (cmf::upslope::connections::HBVparameters *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"HBVparameters_k0_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__upslope__connections__HBVparameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HBVparameters_k0_set" "', argument " "1"" of type '" "cmf::upslope::connections::HBVparameters *""'"); 
  }
  arg1 = reinterpret_cast< cmf::upslope::connections::HBVparameters * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HBVparameters_k0_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->k0 = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HBVparameters_k0_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::connections::HBVparameters *arg1 = (cmf::upslope::connections::HBVparameters *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__upslope__connections__HBVparameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HBVparameters_k0_get" "', argument " "1"" of type '" "cmf::upslope::connections::HBVparameters *""'"); 
  }
  arg1 = reinterpret_cast< cmf::upslope::connections::HBVparameters * >(argp1);
  result = (double) ((arg1)->k0);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HBVparameters_k1_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::connections::HBVparameters *arg1 = (cmf::upslope::connections::HBVparameters *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"HBVparameters_k1_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__upslope__connections__HBVparameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HBVparameters_k1_set" "', argument " "1"" of type '" "cmf::upslope::connections::HBVparameters *""'"); 
  }
  arg1 = reinterpret_cast< cmf::upslope::connections::HBVparameters * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HBVparameters_k1_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->k1 = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HBVparameters_k1_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::connections::HBVparameters *arg1 = (cmf::upslope::connections::HBVparameters *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__upslope__connections__HBVparameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HBVparameters_k1_get" "', argument " "1"" of type '" "cmf::upslope::connections::HBVparameters *""'"); 
  }
  arg1 = reinterpret_cast< cmf::upslope::connections::HBVparameters * >(argp1);
  result = (double) ((arg1)->k1);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HBVparameters_k2_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::connections::HBVparameters *arg1 = (cmf::upslope::connections::HBVparameters *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"HBVparameters_k2_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__upslope__connections__HBVparameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HBVparameters_k2_set" "', argument " "1"" of type '" "cmf::upslope::connections::HBVparameters *""'"); 
  }
  arg1 = reinterpret_cast< cmf::upslope::connections::HBVparameters * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HBVparameters_k2_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->k2 = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HBVparameters_k2_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::connections::HBVparameters *arg1 = (cmf::upslope::connections::HBVparameters *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__upslope__connections__HBVparameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HBVparameters_k2_get" "', argument " "1"" of type '" "cmf::upslope::connections::HBVparameters *""'"); 
  }
  arg1 = reinterpret_cast< cmf::upslope::connections::HBVparameters * >(argp1);
  result = (double) ((arg1)->k2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HBVparameters_perc_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::connections::HBVparameters *arg1 = (cmf::upslope::connections::HBVparameters *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"HBVparameters_perc_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__upslope__connections__HBVparameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HBVparameters_perc_set" "', argument " "1"" of type '" "cmf::upslope::connections::HBVparameters *""'"); 
  }
  arg1 = reinterpret_cast< cmf::upslope::connections::HBVparameters * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HBVparameters_perc_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->perc = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HBVparameters_perc_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::connections::HBVparameters *arg1 = (cmf::upslope::connections::HBVparameters *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__upslope__connections__HBVparameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HBVparameters_perc_get" "', argument " "1"" of type '" "cmf::upslope::connections::HBVparameters *""'"); 
  }
  arg1 = reinterpret_cast< cmf::upslope::connections::HBVparameters * >(argp1);
  result = (double) ((arg1)->perc);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HBVparameters_fc_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::connections::HBVparameters *arg1 = (cmf::upslope::connections::HBVparameters *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"HBVparameters_fc_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__upslope__connections__HBVparameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HBVparameters_fc_set" "', argument " "1"" of type '" "cmf::upslope::connections::HBVparameters *""'"); 
  }
  arg1 = reinterpret_cast< cmf::upslope::connections::HBVparameters * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HBVparameters_fc_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->fc = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HBVparameters_fc_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::connections::HBVparameters *arg1 = (cmf::upslope::connections::HBVparameters *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__upslope__connections__HBVparameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HBVparameters_fc_get" "', argument " "1"" of type '" "cmf::upslope::connections::HBVparameters *""'"); 
  }
  arg1 = reinterpret_cast< cmf::upslope::connections::HBVparameters * >(argp1);
  result = (double) ((arg1)->fc);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HBVparameters_uplim_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::connections::HBVparameters *arg1 = (cmf::upslope::connections::HBVparameters *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"HBVparameters_uplim_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__upslope__connections__HBVparameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HBVparameters_uplim_set" "', argument " "1"" of type '" "cmf::upslope::connections::HBVparameters *""'"); 
  }
  arg1 = reinterpret_cast< cmf::upslope::connections::HBVparameters * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HBVparameters_uplim_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->uplim = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HBVparameters_uplim_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::connections::HBVparameters *arg1 = (cmf::upslope::connections::HBVparameters *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__upslope__connections__HBVparameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HBVparameters_uplim_get" "', argument " "1"" of type '" "cmf::upslope::connections::HBVparameters *""'"); 
  }
  arg1 = reinterpret_cast< cmf::upslope::connections::HBVparameters * >(argp1);
  result = (double) ((arg1)->uplim);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HBVparameters_lowlim_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::connections::HBVparameters *arg1 = (cmf::upslope::connections::HBVparameters *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"HBVparameters_lowlim_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__upslope__connections__HBVparameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HBVparameters_lowlim_set" "', argument " "1"" of type '" "cmf::upslope::connections::HBVparameters *""'"); 
  }
  arg1 = reinterpret_cast< cmf::upslope::connections::HBVparameters * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HBVparameters_lowlim_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->lowlim = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HBVparameters_lowlim_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::connections::HBVparameters *arg1 = (cmf::upslope::connections::HBVparameters *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__upslope__connections__HBVparameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HBVparameters_lowlim_get" "', argument " "1"" of type '" "cmf::upslope::connections::HBVparameters *""'"); 
  }
  arg1 = reinterpret_cast< cmf::upslope::connections::HBVparameters * >(argp1);
  result = (double) ((arg1)->lowlim);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HBVparameters_beta_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::connections::HBVparameters *arg1 = (cmf::upslope::connections::HBVparameters *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"HBVparameters_beta_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__upslope__connections__HBVparameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HBVparameters_beta_set" "', argument " "1"" of type '" "cmf::upslope::connections::HBVparameters *""'"); 
  }
  arg1 = reinterpret_cast< cmf::upslope::connections::HBVparameters * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HBVparameters_beta_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->beta = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HBVparameters_beta_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::connections::HBVparameters *arg1 = (cmf::upslope::connections::HBVparameters *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__upslope__connections__HBVparameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HBVparameters_beta_get" "', argument " "1"" of type '" "cmf::upslope::connections::HBVparameters *""'"); 
  }
  arg1 = reinterpret_cast< cmf::upslope::connections::HBVparameters * >(argp1);
  result = (double) ((arg1)->beta);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_HBVparameters(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 = (double) 1 ;
  double arg2 = (double) 0.25 ;
  double arg3 = (double) 0.005 ;
  double arg4 = (double) 0.05 ;
  double arg5 = (double) 0.3 ;
  double arg6 = (double) 4.0 ;
  double arg7 = (double) .35 ;
  double arg8 = (double) 1.0 ;
  double arg9 = (double) 2 ;
  double arg10 = (double) 0.6 ;
  double arg11 = (double) 0.1 ;
  double arg12 = (double) 0.05 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  double val7 ;
  int ecode7 = 0 ;
  double val8 ;
  int ecode8 = 0 ;
  double val9 ;
  int ecode9 = 0 ;
  double val10 ;
  int ecode10 = 0 ;
  double val11 ;
  int ecode11 = 0 ;
  double val12 ;
  int ecode12 = 0 ;
  PyObject *swig_obj[12] ;
  cmf::upslope::connections::HBVparameters *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args,"new_HBVparameters",0,12,swig_obj)) SWIG_fail;
  if (swig_obj[0]) {
    ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_HBVparameters" "', argument " "1"" of type '" "double""'");
    } 
    arg1 = static_cast< double >(val1);
  }
  if (swig_obj[1]) {
    ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_HBVparameters" "', argument " "2"" of type '" "double""'");
    } 
    arg2 = static_cast< double >(val2);
  }
  if (swig_obj[2]) {
    ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_HBVparameters" "', argument " "3"" of type '" "double""'");
    } 
    arg3 = static_cast< double >(val3);
  }
  if (swig_obj[3]) {
    ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_HBVparameters" "', argument " "4"" of type '" "double""'");
    } 
    arg4 = static_cast< double >(val4);
  }
  if (swig_obj[4]) {
    ecode5 = SWIG_AsVal_double(swig_obj[4], &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_HBVparameters" "', argument " "5"" of type '" "double""'");
    } 
    arg5 = static_cast< double >(val5);
  }
  if (swig_obj[5]) {
    ecode6 = SWIG_AsVal_double(swig_obj[5], &val6);
    if (!SWIG_IsOK(ecode6)) {
      SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "new_HBVparameters" "', argument " "6"" of type '" "double""'");
    } 
    arg6 = static_cast< double >(val6);
  }
  if (swig_obj[6]) {
    ecode7 = SWIG_AsVal_double(swig_obj[6], &val7);
    if (!SWIG_IsOK(ecode7)) {
      SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "new_HBVparameters" "', argument " "7"" of type '" "double""'");
    } 
    arg7 = static_cast< double >(val7);
  }
  if (swig_obj[7]) {
    ecode8 = SWIG_AsVal_double(swig_obj[7], &val8);
    if (!SWIG_IsOK(ecode8)) {
      SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "new_HBVparameters" "', argument " "8"" of type '" "double""'");
    } 
    arg8 = static_cast< double >(val8);
  }
  if (swig_obj[8]) {
    ecode9 = SWIG_AsVal_double(swig_obj[8], &val9);
    if (!SWIG_IsOK(ecode9)) {
      SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "new_HBVparameters" "', argument " "9"" of type '" "double""'");
    } 
    arg9 = static_cast< double >(val9);
  }
  if (swig_obj[9]) {
    ecode10 = SWIG_AsVal_double(swig_obj[9], &val10);
    if (!SWIG_IsOK(ecode10)) {
      SWIG_exception_fail(SWIG_ArgError(ecode10), "in method '" "new_HBVparameters" "', argument " "10"" of type '" "double""'");
    } 
    arg10 = static_cast< double >(val10);
  }
  if (swig_obj[10]) {
    ecode11 = SWIG_AsVal_double(swig_obj[10], &val11);
    if (!SWIG_IsOK(ecode11)) {
      SWIG_exception_fail(SWIG_ArgError(ecode11), "in method '" "new_HBVparameters" "', argument " "11"" of type '" "double""'");
    } 
    arg11 = static_cast< double >(val11);
  }
  if (swig_obj[11]) {
    ecode12 = SWIG_AsVal_double(swig_obj[11], &val12);
    if (!SWIG_IsOK(ecode12)) {
      SWIG_exception_fail(SWIG_ArgError(ecode12), "in method '" "new_HBVparameters" "', argument " "12"" of type '" "double""'");
    } 
    arg12 = static_cast< double >(val12);
  }
  {
    try {
      result = (cmf::upslope::connections::HBVparameters *)new cmf::upslope::connections::HBVparameters(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmf__upslope__connections__HBVparameters, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HBVparameters_copy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::connections::HBVparameters *arg1 = (cmf::upslope::connections::HBVparameters *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  cmf::upslope::connections::HBVparameters *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__upslope__connections__HBVparameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HBVparameters_copy" "', argument " "1"" of type '" "cmf::upslope::connections::HBVparameters const *""'"); 
  }
  arg1 = reinterpret_cast< cmf::upslope::connections::HBVparameters * >(argp1);
  {
    try {
      result = (cmf::upslope::connections::HBVparameters *)((cmf::upslope::connections::HBVparameters const *)arg1)->copy();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmf__upslope__connections__HBVparameters, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HBVparameters_cast(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::RetentionCurve *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  cmf::upslope::connections::HBVparameters *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cmf__upslope__RetentionCurve,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HBVparameters_cast" "', argument " "1"" of type '" "cmf::upslope::RetentionCurve &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HBVparameters_cast" "', argument " "1"" of type '" "cmf::upslope::RetentionCurve &""'"); 
  }
  arg1 = reinterpret_cast< cmf::upslope::RetentionCurve * >(argp1);
  {
    try {
      result = (cmf::upslope::connections::HBVparameters *)cmf::upslope::connections::HBVparameters::cast(*arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmf__upslope__connections__HBVparameters, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_HBVparameters(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::connections::HBVparameters *arg1 = (cmf::upslope::connections::HBVparameters *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__upslope__connections__HBVparameters, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_HBVparameters" "', argument " "1"" of type '" "cmf::upslope::connections::HBVparameters *""'"); 
  }
  arg1 = reinterpret_cast< cmf::upslope::connections::HBVparameters * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *HBVparameters_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_cmf__upslope__connections__HBVparameters, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *HBVparameters_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_HBVpercolation(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::SoilLayer::ptr arg1 ;
  cmf::water::flux_node::ptr arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  cmf::upslope::connections::HBVpercolation *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args,"new_HBVpercolation",2,2,swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__upslope__SoilLayer_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_HBVpercolation" "', argument " "1"" of type '" "cmf::upslope::SoilLayer::ptr""'"); 
    }
    if (argp1) arg1 = *(reinterpret_cast< cmf::upslope::SoilLayer::ptr * >(argp1));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< cmf::upslope::SoilLayer::ptr * >(argp1);
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(swig_obj[1], &argp2, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__water__flux_node_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_HBVpercolation" "', argument " "2"" of type '" "cmf::water::flux_node::ptr""'"); 
    }
    if (argp2) arg2 = *(reinterpret_cast< cmf::water::flux_node::ptr * >(argp2));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< cmf::water::flux_node::ptr * >(argp2);
  }
  {
    try {
      result = (cmf::upslope::connections::HBVpercolation *)new cmf::upslope::connections::HBVpercolation(arg1,arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmf__upslope__connections__HBVpercolation, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_HBVpercolation(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::connections::HBVpercolation *arg1 = (cmf::upslope::connections::HBVpercolation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__upslope__connections__HBVpercolation, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_HBVpercolation" "', argument " "1"" of type '" "cmf::upslope::connections::HBVpercolation *""'"); 
  }
  arg1 = reinterpret_cast< cmf::upslope::connections::HBVpercolation * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *HBVpercolation_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_cmf__upslope__connections__HBVpercolation, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *HBVpercolation_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN int Swig_var_HBVlateral_cell_connector_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable HBVlateral_cell_connector is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_HBVlateral_cell_connector_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&cmf::upslope::connections::HBVlateral::cell_connector), SWIGTYPE_p_cmf__upslope__CellConnector,  0 );
  return pyobj;
}


SWIGINTERN PyObject *_wrap_new_HBVlateral(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::SoilLayer::ptr arg1 ;
  cmf::water::flux_node::ptr arg2 ;
  real arg3 ;
  real arg4 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject *swig_obj[4] ;
  cmf::upslope::connections::HBVlateral *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args,"new_HBVlateral",4,4,swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__upslope__SoilLayer_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_HBVlateral" "', argument " "1"" of type '" "cmf::upslope::SoilLayer::ptr""'"); 
    }
    if (argp1) arg1 = *(reinterpret_cast< cmf::upslope::SoilLayer::ptr * >(argp1));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< cmf::upslope::SoilLayer::ptr * >(argp1);
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(swig_obj[1], &argp2, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__water__flux_node_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_HBVlateral" "', argument " "2"" of type '" "cmf::water::flux_node::ptr""'"); 
    }
    if (argp2) arg2 = *(reinterpret_cast< cmf::water::flux_node::ptr * >(argp2));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< cmf::water::flux_node::ptr * >(argp2);
  }
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_HBVlateral" "', argument " "3"" of type '" "real""'");
  } 
  arg3 = static_cast< real >(val3);
  ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_HBVlateral" "', argument " "4"" of type '" "real""'");
  } 
  arg4 = static_cast< real >(val4);
  {
    try {
      result = (cmf::upslope::connections::HBVlateral *)new cmf::upslope::connections::HBVlateral(arg1,arg2,arg3,arg4);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmf__upslope__connections__HBVlateral, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_HBVlateral(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::connections::HBVlateral *arg1 = (cmf::upslope::connections::HBVlateral *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__upslope__connections__HBVlateral, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_HBVlateral" "', argument " "1"" of type '" "cmf::upslope::connections::HBVlateral *""'"); 
  }
  arg1 = reinterpret_cast< cmf::upslope::connections::HBVlateral * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *HBVlateral_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_cmf__upslope__connections__HBVlateral, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *HBVlateral_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_HBVinstall(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::connections::HBVparameters arg1 ;
  cmf::upslope::Cell *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"HBVinstall",2,2,swig_obj)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cmf__upslope__connections__HBVparameters,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HBVinstall" "', argument " "1"" of type '" "cmf::upslope::connections::HBVparameters""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HBVinstall" "', argument " "1"" of type '" "cmf::upslope::connections::HBVparameters""'");
    } else {
      cmf::upslope::connections::HBVparameters * temp = reinterpret_cast< cmf::upslope::connections::HBVparameters * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cmf__upslope__Cell,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HBVinstall" "', argument " "2"" of type '" "cmf::upslope::Cell &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HBVinstall" "', argument " "2"" of type '" "cmf::upslope::Cell &""'"); 
  }
  arg2 = reinterpret_cast< cmf::upslope::Cell * >(argp2);
  {
    try {
      cmf::upslope::connections::HBVinstall(arg1,*arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PenmanMonteith__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  real arg1 ;
  real arg2 ;
  real arg3 ;
  real arg4 ;
  real arg5 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  real result;
  
  if ((nobjs < 5) || (nobjs > 5)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "PenmanMonteith" "', argument " "1"" of type '" "real""'");
  } 
  arg1 = static_cast< real >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PenmanMonteith" "', argument " "2"" of type '" "real""'");
  } 
  arg2 = static_cast< real >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "PenmanMonteith" "', argument " "3"" of type '" "real""'");
  } 
  arg3 = static_cast< real >(val3);
  ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "PenmanMonteith" "', argument " "4"" of type '" "real""'");
  } 
  arg4 = static_cast< real >(val4);
  ecode5 = SWIG_AsVal_double(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "PenmanMonteith" "', argument " "5"" of type '" "real""'");
  } 
  arg5 = static_cast< real >(val5);
  {
    try {
      result = (real)cmf::upslope::ET::PenmanMonteith(arg1,arg2,arg3,arg4,arg5);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PenmanMonteith__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  cmf::atmosphere::Weather arg1 ;
  cmf::upslope::vegetation::Vegetation *arg2 = 0 ;
  double arg3 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  real result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cmf__atmosphere__Weather,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PenmanMonteith" "', argument " "1"" of type '" "cmf::atmosphere::Weather""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PenmanMonteith" "', argument " "1"" of type '" "cmf::atmosphere::Weather""'");
    } else {
      cmf::atmosphere::Weather * temp = reinterpret_cast< cmf::atmosphere::Weather * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cmf__upslope__vegetation__Vegetation,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PenmanMonteith" "', argument " "2"" of type '" "cmf::upslope::vegetation::Vegetation const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PenmanMonteith" "', argument " "2"" of type '" "cmf::upslope::vegetation::Vegetation const &""'"); 
  }
  arg2 = reinterpret_cast< cmf::upslope::vegetation::Vegetation * >(argp2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "PenmanMonteith" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (real)cmf::upslope::ET::PenmanMonteith(arg1,(cmf::upslope::vegetation::Vegetation const &)*arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PenmanMonteith(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[6];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"PenmanMonteith",0,5,argv))) SWIG_fail;
  --argc;
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (argc == 3) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_cmf__atmosphere__Weather, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_cmf__upslope__vegetation__Vegetation, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (argc == 5) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          int res = SWIG_AsVal_double(argv[0], NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_double(argv[1], NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_double(argv[3], NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_double(argv[4], NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      return _wrap_PenmanMonteith__SWIG_1(self, argc, argv);
    case 2:
      return _wrap_PenmanMonteith__SWIG_0(self, argc, argv);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'PenmanMonteith'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    cmf::upslope::ET::PenmanMonteith(real,real,real,real,real)\n"
    "    cmf::upslope::ET::PenmanMonteith(cmf::atmosphere::Weather,cmf::upslope::vegetation::Vegetation const &,double)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Tact(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  real arg1 ;
  cmf::upslope::SoilLayer *arg2 = 0 ;
  cmf::upslope::vegetation::Vegetation *arg3 = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  std::tr1::shared_ptr< cmf::upslope::SoilLayer const > tempshared2 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  real result;
  
  if (!SWIG_Python_UnpackTuple(args,"Tact",3,3,swig_obj)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Tact" "', argument " "1"" of type '" "real""'");
  } 
  arg1 = static_cast< real >(val1);
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(swig_obj[1], &argp2, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__upslope__SoilLayer_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Tact" "', argument " "2"" of type '" "cmf::upslope::SoilLayer const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Tact" "', argument " "2"" of type '" "cmf::upslope::SoilLayer const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared2 = *reinterpret_cast< std::tr1::shared_ptr< const cmf::upslope::SoilLayer > * >(argp2);
      delete reinterpret_cast< std::tr1::shared_ptr< const cmf::upslope::SoilLayer > * >(argp2);
      arg2 = const_cast< cmf::upslope::SoilLayer * >(tempshared2.get());
    } else {
      arg2 = const_cast< cmf::upslope::SoilLayer * >(reinterpret_cast< std::tr1::shared_ptr< const cmf::upslope::SoilLayer > * >(argp2)->get());
    }
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_cmf__upslope__vegetation__Vegetation,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Tact" "', argument " "3"" of type '" "cmf::upslope::vegetation::Vegetation const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Tact" "', argument " "3"" of type '" "cmf::upslope::vegetation::Vegetation const &""'"); 
  }
  arg3 = reinterpret_cast< cmf::upslope::vegetation::Vegetation * >(argp3);
  {
    try {
      result = (real)cmf::upslope::ET::Tact(arg1,(cmf::upslope::SoilLayer const &)*arg2,(cmf::upslope::vegetation::Vegetation const &)*arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_constantETpot_ETpot_value_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::ET::constantETpot *arg1 = (cmf::upslope::ET::constantETpot *) 0 ;
  real arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"constantETpot_ETpot_value_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__upslope__ET__constantETpot, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "constantETpot_ETpot_value_set" "', argument " "1"" of type '" "cmf::upslope::ET::constantETpot *""'"); 
  }
  arg1 = reinterpret_cast< cmf::upslope::ET::constantETpot * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "constantETpot_ETpot_value_set" "', argument " "2"" of type '" "real""'");
  } 
  arg2 = static_cast< real >(val2);
  if (arg1) (arg1)->ETpot_value = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_constantETpot_ETpot_value_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::ET::constantETpot *arg1 = (cmf::upslope::ET::constantETpot *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  real result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__upslope__ET__constantETpot, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "constantETpot_ETpot_value_get" "', argument " "1"" of type '" "cmf::upslope::ET::constantETpot *""'"); 
  }
  arg1 = reinterpret_cast< cmf::upslope::ET::constantETpot * >(argp1);
  result = (real) ((arg1)->ETpot_value);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_constantETpot_GetETpot(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::ET::constantETpot *arg1 = (cmf::upslope::ET::constantETpot *) 0 ;
  cmf::math::Time arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  real result;
  
  if (!SWIG_Python_UnpackTuple(args,"constantETpot_GetETpot",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__upslope__ET__constantETpot, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "constantETpot_GetETpot" "', argument " "1"" of type '" "cmf::upslope::ET::constantETpot const *""'"); 
  }
  arg1 = reinterpret_cast< cmf::upslope::ET::constantETpot * >(argp1);
  {
    arg2 = convert_datetime_to_cmftime(swig_obj[1]);    
  }
  {
    try {
      result = (real)((cmf::upslope::ET::constantETpot const *)arg1)->GetETpot(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_constantETpot(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::SoilLayer::ptr arg1 ;
  cmf::water::flux_node::ptr arg2 ;
  double arg3 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  cmf::upslope::ET::constantETpot *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args,"new_constantETpot",3,3,swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__upslope__SoilLayer_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_constantETpot" "', argument " "1"" of type '" "cmf::upslope::SoilLayer::ptr""'"); 
    }
    if (argp1) arg1 = *(reinterpret_cast< cmf::upslope::SoilLayer::ptr * >(argp1));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< cmf::upslope::SoilLayer::ptr * >(argp1);
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(swig_obj[1], &argp2, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__water__flux_node_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_constantETpot" "', argument " "2"" of type '" "cmf::water::flux_node::ptr""'"); 
    }
    if (argp2) arg2 = *(reinterpret_cast< cmf::water::flux_node::ptr * >(argp2));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< cmf::water::flux_node::ptr * >(argp2);
  }
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_constantETpot" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (cmf::upslope::ET::constantETpot *)new cmf::upslope::ET::constantETpot(arg1,arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmf__upslope__ET__constantETpot, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_constantETpot(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::ET::constantETpot *arg1 = (cmf::upslope::ET::constantETpot *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__upslope__ET__constantETpot, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_constantETpot" "', argument " "1"" of type '" "cmf::upslope::ET::constantETpot *""'"); 
  }
  arg1 = reinterpret_cast< cmf::upslope::ET::constantETpot * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *constantETpot_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_cmf__upslope__ET__constantETpot, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *constantETpot_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_PenmanMonteithET_daily_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::ET::PenmanMonteithET *arg1 = (cmf::upslope::ET::PenmanMonteithET *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"PenmanMonteithET_daily_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__upslope__ET__PenmanMonteithET, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PenmanMonteithET_daily_set" "', argument " "1"" of type '" "cmf::upslope::ET::PenmanMonteithET *""'"); 
  }
  arg1 = reinterpret_cast< cmf::upslope::ET::PenmanMonteithET * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PenmanMonteithET_daily_set" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  if (arg1) (arg1)->daily = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PenmanMonteithET_daily_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::ET::PenmanMonteithET *arg1 = (cmf::upslope::ET::PenmanMonteithET *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__upslope__ET__PenmanMonteithET, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PenmanMonteithET_daily_get" "', argument " "1"" of type '" "cmf::upslope::ET::PenmanMonteithET *""'"); 
  }
  arg1 = reinterpret_cast< cmf::upslope::ET::PenmanMonteithET * >(argp1);
  result = (bool) ((arg1)->daily);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PenmanMonteithET(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::SoilLayer::ptr arg1 ;
  cmf::water::flux_node::ptr arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  cmf::upslope::ET::PenmanMonteithET *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args,"new_PenmanMonteithET",2,2,swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__upslope__SoilLayer_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_PenmanMonteithET" "', argument " "1"" of type '" "cmf::upslope::SoilLayer::ptr""'"); 
    }
    if (argp1) arg1 = *(reinterpret_cast< cmf::upslope::SoilLayer::ptr * >(argp1));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< cmf::upslope::SoilLayer::ptr * >(argp1);
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(swig_obj[1], &argp2, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__water__flux_node_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_PenmanMonteithET" "', argument " "2"" of type '" "cmf::water::flux_node::ptr""'"); 
    }
    if (argp2) arg2 = *(reinterpret_cast< cmf::water::flux_node::ptr * >(argp2));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< cmf::water::flux_node::ptr * >(argp2);
  }
  {
    try {
      result = (cmf::upslope::ET::PenmanMonteithET *)new cmf::upslope::ET::PenmanMonteithET(arg1,arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmf__upslope__ET__PenmanMonteithET, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PenmanMonteithET_r_s(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::vegetation::Vegetation *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  real result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cmf__upslope__vegetation__Vegetation,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PenmanMonteithET_r_s" "', argument " "1"" of type '" "cmf::upslope::vegetation::Vegetation const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PenmanMonteithET_r_s" "', argument " "1"" of type '" "cmf::upslope::vegetation::Vegetation const &""'"); 
  }
  arg1 = reinterpret_cast< cmf::upslope::vegetation::Vegetation * >(argp1);
  {
    try {
      result = (real)cmf::upslope::ET::PenmanMonteithET::r_s((cmf::upslope::vegetation::Vegetation const &)*arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PenmanMonteithET_r_a(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::atmosphere::Weather arg1 ;
  real arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  real result;
  
  if (!SWIG_Python_UnpackTuple(args,"PenmanMonteithET_r_a",2,2,swig_obj)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cmf__atmosphere__Weather,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PenmanMonteithET_r_a" "', argument " "1"" of type '" "cmf::atmosphere::Weather""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PenmanMonteithET_r_a" "', argument " "1"" of type '" "cmf::atmosphere::Weather""'");
    } else {
      cmf::atmosphere::Weather * temp = reinterpret_cast< cmf::atmosphere::Weather * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PenmanMonteithET_r_a" "', argument " "2"" of type '" "real""'");
  } 
  arg2 = static_cast< real >(val2);
  {
    try {
      result = (real)cmf::upslope::ET::PenmanMonteithET::r_a(arg1,arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PenmanMonteithET_use_for_cell(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::Cell *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cmf__upslope__Cell,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PenmanMonteithET_use_for_cell" "', argument " "1"" of type '" "cmf::upslope::Cell &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PenmanMonteithET_use_for_cell" "', argument " "1"" of type '" "cmf::upslope::Cell &""'"); 
  }
  arg1 = reinterpret_cast< cmf::upslope::Cell * >(argp1);
  {
    try {
      cmf::upslope::ET::PenmanMonteithET::use_for_cell(*arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_PenmanMonteithET(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::ET::PenmanMonteithET *arg1 = (cmf::upslope::ET::PenmanMonteithET *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__upslope__ET__PenmanMonteithET, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_PenmanMonteithET" "', argument " "1"" of type '" "cmf::upslope::ET::PenmanMonteithET *""'"); 
  }
  arg1 = reinterpret_cast< cmf::upslope::ET::PenmanMonteithET * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *PenmanMonteithET_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_cmf__upslope__ET__PenmanMonteithET, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *PenmanMonteithET_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_ShuttleworthWallaceET(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::water::WaterStorage::ptr arg1 ;
  cmf::water::flux_node::ptr arg2 ;
  cmf::upslope::Cell *arg3 = 0 ;
  std::string arg4 = (std::string) "Shuttleworth Wallace get_evaporation" ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[4] ;
  cmf::upslope::ET::ShuttleworthWallaceET *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args,"new_ShuttleworthWallaceET",3,4,swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__water__WaterStorage_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ShuttleworthWallaceET" "', argument " "1"" of type '" "cmf::water::WaterStorage::ptr""'"); 
    }
    if (argp1) arg1 = *(reinterpret_cast< cmf::water::WaterStorage::ptr * >(argp1));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< cmf::water::WaterStorage::ptr * >(argp1);
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(swig_obj[1], &argp2, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__water__flux_node_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_ShuttleworthWallaceET" "', argument " "2"" of type '" "cmf::water::flux_node::ptr""'"); 
    }
    if (argp2) arg2 = *(reinterpret_cast< cmf::water::flux_node::ptr * >(argp2));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< cmf::water::flux_node::ptr * >(argp2);
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_cmf__upslope__Cell,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_ShuttleworthWallaceET" "', argument " "3"" of type '" "cmf::upslope::Cell &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ShuttleworthWallaceET" "', argument " "3"" of type '" "cmf::upslope::Cell &""'"); 
  }
  arg3 = reinterpret_cast< cmf::upslope::Cell * >(argp3);
  if (swig_obj[3]) {
    {
      std::string *ptr = (std::string *)0;
      int res = SWIG_AsPtr_std_string(swig_obj[3], &ptr);
      if (!SWIG_IsOK(res) || !ptr) {
        SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_ShuttleworthWallaceET" "', argument " "4"" of type '" "std::string""'"); 
      }
      arg4 = *ptr;
      if (SWIG_IsNewObj(res)) delete ptr;
    }
  }
  {
    try {
      result = (cmf::upslope::ET::ShuttleworthWallaceET *)new cmf::upslope::ET::ShuttleworthWallaceET(arg1,arg2,*arg3,arg4);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmf__upslope__ET__ShuttleworthWallaceET, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShuttleworthWallaceET_use_for_cell(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::Cell *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cmf__upslope__Cell,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShuttleworthWallaceET_use_for_cell" "', argument " "1"" of type '" "cmf::upslope::Cell &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ShuttleworthWallaceET_use_for_cell" "', argument " "1"" of type '" "cmf::upslope::Cell &""'"); 
  }
  arg1 = reinterpret_cast< cmf::upslope::Cell * >(argp1);
  {
    try {
      cmf::upslope::ET::ShuttleworthWallaceET::use_for_cell(*arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ShuttleworthWallaceET(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::ET::ShuttleworthWallaceET *arg1 = (cmf::upslope::ET::ShuttleworthWallaceET *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__upslope__ET__ShuttleworthWallaceET, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ShuttleworthWallaceET" "', argument " "1"" of type '" "cmf::upslope::ET::ShuttleworthWallaceET *""'"); 
  }
  arg1 = reinterpret_cast< cmf::upslope::ET::ShuttleworthWallaceET * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ShuttleworthWallaceET_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_cmf__upslope__ET__ShuttleworthWallaceET, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *ShuttleworthWallaceET_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_HargreaveET(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::SoilLayer::ptr arg1 ;
  cmf::water::flux_node::ptr arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  cmf::upslope::ET::HargreaveET *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args,"new_HargreaveET",2,2,swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__upslope__SoilLayer_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_HargreaveET" "', argument " "1"" of type '" "cmf::upslope::SoilLayer::ptr""'"); 
    }
    if (argp1) arg1 = *(reinterpret_cast< cmf::upslope::SoilLayer::ptr * >(argp1));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< cmf::upslope::SoilLayer::ptr * >(argp1);
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(swig_obj[1], &argp2, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__water__flux_node_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_HargreaveET" "', argument " "2"" of type '" "cmf::water::flux_node::ptr""'"); 
    }
    if (argp2) arg2 = *(reinterpret_cast< cmf::water::flux_node::ptr * >(argp2));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< cmf::water::flux_node::ptr * >(argp2);
  }
  {
    try {
      result = (cmf::upslope::ET::HargreaveET *)new cmf::upslope::ET::HargreaveET(arg1,arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmf__upslope__ET__HargreaveET, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HargreaveET_use_for_cell(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::Cell *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cmf__upslope__Cell,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HargreaveET_use_for_cell" "', argument " "1"" of type '" "cmf::upslope::Cell &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HargreaveET_use_for_cell" "', argument " "1"" of type '" "cmf::upslope::Cell &""'"); 
  }
  arg1 = reinterpret_cast< cmf::upslope::Cell * >(argp1);
  {
    try {
      cmf::upslope::ET::HargreaveET::use_for_cell(*arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_HargreaveET(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::ET::HargreaveET *arg1 = (cmf::upslope::ET::HargreaveET *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__upslope__ET__HargreaveET, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_HargreaveET" "', argument " "1"" of type '" "cmf::upslope::ET::HargreaveET *""'"); 
  }
  arg1 = reinterpret_cast< cmf::upslope::ET::HargreaveET * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *HargreaveET_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_cmf__upslope__ET__HargreaveET, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *HargreaveET_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_CanopyStorageEvaporation(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::water::WaterStorage::ptr arg1 ;
  cmf::water::flux_node::ptr arg2 ;
  cmf::upslope::Cell *arg3 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  cmf::upslope::ET::CanopyStorageEvaporation *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args,"new_CanopyStorageEvaporation",3,3,swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__water__WaterStorage_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_CanopyStorageEvaporation" "', argument " "1"" of type '" "cmf::water::WaterStorage::ptr""'"); 
    }
    if (argp1) arg1 = *(reinterpret_cast< cmf::water::WaterStorage::ptr * >(argp1));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< cmf::water::WaterStorage::ptr * >(argp1);
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(swig_obj[1], &argp2, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__water__flux_node_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_CanopyStorageEvaporation" "', argument " "2"" of type '" "cmf::water::flux_node::ptr""'"); 
    }
    if (argp2) arg2 = *(reinterpret_cast< cmf::water::flux_node::ptr * >(argp2));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< cmf::water::flux_node::ptr * >(argp2);
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_cmf__upslope__Cell,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_CanopyStorageEvaporation" "', argument " "3"" of type '" "cmf::upslope::Cell &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_CanopyStorageEvaporation" "', argument " "3"" of type '" "cmf::upslope::Cell &""'"); 
  }
  arg3 = reinterpret_cast< cmf::upslope::Cell * >(argp3);
  {
    try {
      result = (cmf::upslope::ET::CanopyStorageEvaporation *)new cmf::upslope::ET::CanopyStorageEvaporation(arg1,arg2,*arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmf__upslope__ET__CanopyStorageEvaporation, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_CanopyStorageEvaporation(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::ET::CanopyStorageEvaporation *arg1 = (cmf::upslope::ET::CanopyStorageEvaporation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__upslope__ET__CanopyStorageEvaporation, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_CanopyStorageEvaporation" "', argument " "1"" of type '" "cmf::upslope::ET::CanopyStorageEvaporation *""'"); 
  }
  arg1 = reinterpret_cast< cmf::upslope::ET::CanopyStorageEvaporation * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *CanopyStorageEvaporation_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_cmf__upslope__ET__CanopyStorageEvaporation, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *CanopyStorageEvaporation_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_PenmanEvaporation(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::river::OpenWaterStorage::ptr arg1 ;
  cmf::water::flux_node::ptr arg2 ;
  cmf::atmosphere::Meteorology *arg3 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  cmf::upslope::ET::PenmanEvaporation *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args,"new_PenmanEvaporation",3,3,swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__river__OpenWaterStorage_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_PenmanEvaporation" "', argument " "1"" of type '" "cmf::river::OpenWaterStorage::ptr""'"); 
    }
    if (argp1) arg1 = *(reinterpret_cast< cmf::river::OpenWaterStorage::ptr * >(argp1));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< cmf::river::OpenWaterStorage::ptr * >(argp1);
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(swig_obj[1], &argp2, SWIGTYPE_p_std__tr1__shared_ptrT_cmf__water__flux_node_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_PenmanEvaporation" "', argument " "2"" of type '" "cmf::water::flux_node::ptr""'"); 
    }
    if (argp2) arg2 = *(reinterpret_cast< cmf::water::flux_node::ptr * >(argp2));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< cmf::water::flux_node::ptr * >(argp2);
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_cmf__atmosphere__Meteorology,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_PenmanEvaporation" "', argument " "3"" of type '" "cmf::atmosphere::Meteorology const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_PenmanEvaporation" "', argument " "3"" of type '" "cmf::atmosphere::Meteorology const &""'"); 
  }
  arg3 = reinterpret_cast< cmf::atmosphere::Meteorology * >(argp3);
  {
    try {
      result = (cmf::upslope::ET::PenmanEvaporation *)new cmf::upslope::ET::PenmanEvaporation(arg1,arg2,(cmf::atmosphere::Meteorology const &)*arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmf__upslope__ET__PenmanEvaporation, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_PenmanEvaporation(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::upslope::ET::PenmanEvaporation *arg1 = (cmf::upslope::ET::PenmanEvaporation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__upslope__ET__PenmanEvaporation, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_PenmanEvaporation" "', argument " "1"" of type '" "cmf::upslope::ET::PenmanEvaporation *""'"); 
  }
  arg1 = reinterpret_cast< cmf::upslope::ET::PenmanEvaporation * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *PenmanEvaporation_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_cmf__upslope__ET__PenmanEvaporation, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *PenmanEvaporation_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_project_solutes_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::project *arg1 = (cmf::project *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  cmf::water::solute_vector *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__project, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "project_solutes_get" "', argument " "1"" of type '" "cmf::project *""'"); 
  }
  arg1 = reinterpret_cast< cmf::project * >(argp1);
  result = (cmf::water::solute_vector *)& ((arg1)->solutes);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmf__water__solute_vector, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_project_meteo_stations_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::project *arg1 = (cmf::project *) 0 ;
  cmf::atmosphere::MeteoStationList *arg2 = (cmf::atmosphere::MeteoStationList *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"project_meteo_stations_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__project, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "project_meteo_stations_set" "', argument " "1"" of type '" "cmf::project *""'"); 
  }
  arg1 = reinterpret_cast< cmf::project * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cmf__atmosphere__MeteoStationList, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "project_meteo_stations_set" "', argument " "2"" of type '" "cmf::atmosphere::MeteoStationList *""'"); 
  }
  arg2 = reinterpret_cast< cmf::atmosphere::MeteoStationList * >(argp2);
  if (arg1) (arg1)->meteo_stations = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_project_meteo_stations_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::project *arg1 = (cmf::project *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  cmf::atmosphere::MeteoStationList *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__project, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "project_meteo_stations_get" "', argument " "1"" of type '" "cmf::project *""'"); 
  }
  arg1 = reinterpret_cast< cmf::project * >(argp1);
  result = (cmf::atmosphere::MeteoStationList *)& ((arg1)->meteo_stations);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmf__atmosphere__MeteoStationList, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_project_outlets_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::project *arg1 = (cmf::project *) 0 ;
  cmf::water::node_list *arg2 = (cmf::water::node_list *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"project_outlets_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__project, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "project_outlets_set" "', argument " "1"" of type '" "cmf::project *""'"); 
  }
  arg1 = reinterpret_cast< cmf::project * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cmf__water__node_list, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "project_outlets_set" "', argument " "2"" of type '" "cmf::water::node_list *""'"); 
  }
  arg2 = reinterpret_cast< cmf::water::node_list * >(argp2);
  if (arg1) (arg1)->outlets = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_project_outlets_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::project *arg1 = (cmf::project *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  cmf::water::node_list *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__project, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "project_outlets_get" "', argument " "1"" of type '" "cmf::project *""'"); 
  }
  arg1 = reinterpret_cast< cmf::project * >(argp1);
  result = (cmf::water::node_list *)& ((arg1)->outlets);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmf__water__node_list, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_project_get_cell(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::project *arg1 = (cmf::project *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  cmf::upslope::Cell *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args,"project_get_cell",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__project, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "project_get_cell" "', argument " "1"" of type '" "cmf::project *""'"); 
  }
  arg1 = reinterpret_cast< cmf::project * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "project_get_cell" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (cmf::upslope::Cell *) &(arg1)->get_cell(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmf__upslope__Cell, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_project_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::project *arg1 = (cmf::project *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__project, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "project_size" "', argument " "1"" of type '" "cmf::project const *""'"); 
  }
  arg1 = reinterpret_cast< cmf::project * >(argp1);
  {
    try {
      result = (int)((cmf::project const *)arg1)->size();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_project_debug_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::project *arg1 = (cmf::project *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"project_debug_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__project, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "project_debug_set" "', argument " "1"" of type '" "cmf::project *""'"); 
  }
  arg1 = reinterpret_cast< cmf::project * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "project_debug_set" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  if (arg1) (arg1)->debug = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_project_debug_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::project *arg1 = (cmf::project *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__project, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "project_debug_get" "', argument " "1"" of type '" "cmf::project *""'"); 
  }
  arg1 = reinterpret_cast< cmf::project * >(argp1);
  result = (bool) ((arg1)->debug);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_project(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 = (std::string) "" ;
  PyObject *swig_obj[1] ;
  cmf::project *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args,"new_project",0,1,swig_obj)) SWIG_fail;
  if (swig_obj[0]) {
    {
      std::string *ptr = (std::string *)0;
      int res = SWIG_AsPtr_std_string(swig_obj[0], &ptr);
      if (!SWIG_IsOK(res) || !ptr) {
        SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_project" "', argument " "1"" of type '" "std::string""'"); 
      }
      arg1 = *ptr;
      if (SWIG_IsNewObj(res)) delete ptr;
    }
  }
  {
    try {
      result = (cmf::project *)new cmf::project(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmf__project, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_project(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::project *arg1 = (cmf::project *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__project, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_project" "', argument " "1"" of type '" "cmf::project *""'"); 
  }
  arg1 = reinterpret_cast< cmf::project * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_project_NewCell__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  cmf::project *arg1 = (cmf::project *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  cmf::upslope::Cell *result = 0 ;
  
  if ((nobjs < 5) || (nobjs > 5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__project, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "project_NewCell" "', argument " "1"" of type '" "cmf::project *""'"); 
  }
  arg1 = reinterpret_cast< cmf::project * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "project_NewCell" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "project_NewCell" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "project_NewCell" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "project_NewCell" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  {
    try {
      result = (cmf::upslope::Cell *)(arg1)->NewCell(arg2,arg3,arg4,arg5);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmf__upslope__Cell, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_project_NewCell__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  cmf::project *arg1 = (cmf::project *) 0 ;
  cmf::geometry::point arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  cmf::upslope::Cell *result = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__project, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "project_NewCell" "', argument " "1"" of type '" "cmf::project *""'"); 
  }
  arg1 = reinterpret_cast< cmf::project * >(argp1);
  {
    cmf::geometry::point p;
    if (((!convert_xyz_to_point(swig_obj[1],p)) || !convert_seq_to_point(swig_obj[1],p)))
    {
      PyErr_SetString(PyExc_ValueError,"The object to convert needs to be either a sequence of length 2 or 3 or an object exposing an x and y attribute of type float(z is used if present)");
    }
    arg2=p;
  }
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "project_NewCell" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (cmf::upslope::Cell *)(arg1)->NewCell(arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmf__upslope__Cell, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_project_NewCell(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[6];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"project_NewCell",0,5,argv))) SWIG_fail;
  --argc;
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (argc == 3) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_cmf__project, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          cmf::geometry::point p;
          _v=convert_seq_to_point(argv[1],p) || convert_xyz_to_point(argv[1],p);
        }
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (argc == 5) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_cmf__project, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_double(argv[1], NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_double(argv[3], NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_double(argv[4], NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      return _wrap_project_NewCell__SWIG_1(self, argc, argv);
    case 2:
      return _wrap_project_NewCell__SWIG_0(self, argc, argv);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'project_NewCell'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    NewCell(cmf::project *,double,double,double,double)\n"
    "    NewCell(cmf::project *,cmf::geometry::point,double)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_project_get_reach(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::project *arg1 = (cmf::project *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  cmf::river::Reach_ptr result;
  
  if (!SWIG_Python_UnpackTuple(args,"project_get_reach",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__project, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "project_get_reach" "', argument " "1"" of type '" "cmf::project *""'"); 
  }
  arg1 = reinterpret_cast< cmf::project * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "project_get_reach" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (arg1)->get_reach(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  {
    std::tr1::shared_ptr<  cmf::river::Reach > *smartresult = result ? new std::tr1::shared_ptr<  cmf::river::Reach >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__tr1__shared_ptrT_cmf__river__Reach_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_project_reach_count(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::project *arg1 = (cmf::project *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__project, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "project_reach_count" "', argument " "1"" of type '" "cmf::project const *""'"); 
  }
  arg1 = reinterpret_cast< cmf::project * >(argp1);
  {
    try {
      result = (int)((cmf::project const *)arg1)->reach_count();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_project_get_storages(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::project *arg1 = (cmf::project *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  cmf::water::node_list result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__project, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "project_get_storages" "', argument " "1"" of type '" "cmf::project *""'"); 
  }
  arg1 = reinterpret_cast< cmf::project * >(argp1);
  {
    try {
      result = (arg1)->get_storages();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj((new cmf::water::node_list(static_cast< const cmf::water::node_list& >(result))), SWIGTYPE_p_cmf__water__node_list, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_project_NewReach(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::project *arg1 = (cmf::project *) 0 ;
  cmf::river::Channel arg2 ;
  bool arg3 = (bool) false ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  cmf::river::Reach_ptr result;
  
  if (!SWIG_Python_UnpackTuple(args,"project_NewReach",2,3,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__project, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "project_NewReach" "', argument " "1"" of type '" "cmf::project *""'"); 
  }
  arg1 = reinterpret_cast< cmf::project * >(argp1);
  {
    res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cmf__river__Channel,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "project_NewReach" "', argument " "2"" of type '" "cmf::river::Channel""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "project_NewReach" "', argument " "2"" of type '" "cmf::river::Channel""'");
    } else {
      cmf::river::Channel * temp = reinterpret_cast< cmf::river::Channel * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (swig_obj[2]) {
    ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "project_NewReach" "', argument " "3"" of type '" "bool""'");
    } 
    arg3 = static_cast< bool >(val3);
  }
  {
    try {
      result = (arg1)->NewReach(arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  {
    std::tr1::shared_ptr<  cmf::river::Reach > *smartresult = result ? new std::tr1::shared_ptr<  cmf::river::Reach >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__tr1__shared_ptrT_cmf__river__Reach_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_project_cells_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::project *arg1 = (cmf::project *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  cmf::upslope::cell_vector *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__project, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "project_cells_get" "', argument " "1"" of type '" "cmf::project *""'"); 
  }
  arg1 = reinterpret_cast< cmf::project * >(argp1);
  {
    try {
      result = (cmf::upslope::cell_vector *)cmf_project_cells_get(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_cmf__upslope__Cell_p_std__allocatorT_cmf__upslope__Cell_p_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *project_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_cmf__project, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *project_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_SoluteWaterIntegrator_Copy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::math::SoluteWaterIntegrator *arg1 = (cmf::math::SoluteWaterIntegrator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  cmf::math::SoluteWaterIntegrator *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__math__SoluteWaterIntegrator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SoluteWaterIntegrator_Copy" "', argument " "1"" of type '" "cmf::math::SoluteWaterIntegrator const *""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::SoluteWaterIntegrator * >(argp1);
  {
    try {
      result = (cmf::math::SoluteWaterIntegrator *)((cmf::math::SoluteWaterIntegrator const *)arg1)->Copy();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmf__math__SoluteWaterIntegrator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SoluteWaterIntegrator__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  cmf::math::Integrator *arg1 = 0 ;
  cmf::math::Integrator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  cmf::math::SoluteWaterIntegrator *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cmf__math__Integrator,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SoluteWaterIntegrator" "', argument " "1"" of type '" "cmf::math::Integrator const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SoluteWaterIntegrator" "', argument " "1"" of type '" "cmf::math::Integrator const &""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::Integrator * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cmf__math__Integrator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_SoluteWaterIntegrator" "', argument " "2"" of type '" "cmf::math::Integrator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SoluteWaterIntegrator" "', argument " "2"" of type '" "cmf::math::Integrator const &""'"); 
  }
  arg2 = reinterpret_cast< cmf::math::Integrator * >(argp2);
  {
    try {
      result = (cmf::math::SoluteWaterIntegrator *)new cmf::math::SoluteWaterIntegrator((cmf::math::Integrator const &)*arg1,(cmf::math::Integrator const &)*arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmf__math__SoluteWaterIntegrator, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SoluteWaterIntegrator__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  cmf::math::Integrator *arg1 = 0 ;
  cmf::math::Integrator *arg2 = 0 ;
  cmf::math::StateVariableOwner *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  cmf::math::SoluteWaterIntegrator *result = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cmf__math__Integrator,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SoluteWaterIntegrator" "', argument " "1"" of type '" "cmf::math::Integrator const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SoluteWaterIntegrator" "', argument " "1"" of type '" "cmf::math::Integrator const &""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::Integrator * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cmf__math__Integrator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_SoluteWaterIntegrator" "', argument " "2"" of type '" "cmf::math::Integrator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SoluteWaterIntegrator" "', argument " "2"" of type '" "cmf::math::Integrator const &""'"); 
  }
  arg2 = reinterpret_cast< cmf::math::Integrator * >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_cmf__math__StateVariableOwner,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_SoluteWaterIntegrator" "', argument " "3"" of type '" "cmf::math::StateVariableOwner &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SoluteWaterIntegrator" "', argument " "3"" of type '" "cmf::math::StateVariableOwner &""'"); 
  }
  arg3 = reinterpret_cast< cmf::math::StateVariableOwner * >(argp3);
  {
    try {
      result = (cmf::math::SoluteWaterIntegrator *)new cmf::math::SoluteWaterIntegrator((cmf::math::Integrator const &)*arg1,(cmf::math::Integrator const &)*arg2,*arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmf__math__SoluteWaterIntegrator, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SoluteWaterIntegrator(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"new_SoluteWaterIntegrator",0,3,argv))) SWIG_fail;
  --argc;
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (argc == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_cmf__math__Integrator, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_cmf__math__Integrator, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (argc == 3) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_cmf__math__Integrator, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_cmf__math__Integrator, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_cmf__math__StateVariableOwner, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      return _wrap_new_SoluteWaterIntegrator__SWIG_0(self, argc, argv);
    case 2:
      return _wrap_new_SoluteWaterIntegrator__SWIG_1(self, argc, argv);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_SoluteWaterIntegrator'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    cmf::math::SoluteWaterIntegrator(cmf::math::Integrator const &,cmf::math::Integrator const &)\n"
    "    cmf::math::SoluteWaterIntegrator(cmf::math::Integrator const &,cmf::math::Integrator const &,cmf::math::StateVariableOwner &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_SoluteWaterIntegrator_solute_integrator_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::math::SoluteWaterIntegrator *arg1 = (cmf::math::SoluteWaterIntegrator *) 0 ;
  cmf::math::Integrator *arg2 = (cmf::math::Integrator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"SoluteWaterIntegrator_solute_integrator_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__math__SoluteWaterIntegrator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SoluteWaterIntegrator_solute_integrator_set" "', argument " "1"" of type '" "cmf::math::SoluteWaterIntegrator *""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::SoluteWaterIntegrator * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cmf__math__Integrator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SoluteWaterIntegrator_solute_integrator_set" "', argument " "2"" of type '" "cmf::math::Integrator *""'"); 
  }
  arg2 = reinterpret_cast< cmf::math::Integrator * >(argp2);
  {
    try {
      cmf_math_SoluteWaterIntegrator_solute_integrator_set(arg1,arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SoluteWaterIntegrator_solute_integrator_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::math::SoluteWaterIntegrator *arg1 = (cmf::math::SoluteWaterIntegrator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  cmf::math::Integrator *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__math__SoluteWaterIntegrator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SoluteWaterIntegrator_solute_integrator_get" "', argument " "1"" of type '" "cmf::math::SoluteWaterIntegrator *""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::SoluteWaterIntegrator * >(argp1);
  {
    try {
      result = (cmf::math::Integrator *)cmf_math_SoluteWaterIntegrator_solute_integrator_get(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmf__math__Integrator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SoluteWaterIntegrator_water_integrator_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::math::SoluteWaterIntegrator *arg1 = (cmf::math::SoluteWaterIntegrator *) 0 ;
  cmf::math::Integrator *arg2 = (cmf::math::Integrator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"SoluteWaterIntegrator_water_integrator_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__math__SoluteWaterIntegrator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SoluteWaterIntegrator_water_integrator_set" "', argument " "1"" of type '" "cmf::math::SoluteWaterIntegrator *""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::SoluteWaterIntegrator * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cmf__math__Integrator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SoluteWaterIntegrator_water_integrator_set" "', argument " "2"" of type '" "cmf::math::Integrator *""'"); 
  }
  arg2 = reinterpret_cast< cmf::math::Integrator * >(argp2);
  {
    try {
      cmf_math_SoluteWaterIntegrator_water_integrator_set(arg1,arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SoluteWaterIntegrator_water_integrator_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::math::SoluteWaterIntegrator *arg1 = (cmf::math::SoluteWaterIntegrator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  cmf::math::Integrator *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__math__SoluteWaterIntegrator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SoluteWaterIntegrator_water_integrator_get" "', argument " "1"" of type '" "cmf::math::SoluteWaterIntegrator *""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::SoluteWaterIntegrator * >(argp1);
  {
    try {
      result = (cmf::math::Integrator *)cmf_math_SoluteWaterIntegrator_water_integrator_get(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmf__math__Integrator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_SoluteWaterIntegrator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmf::math::SoluteWaterIntegrator *arg1 = (cmf::math::SoluteWaterIntegrator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cmf__math__SoluteWaterIntegrator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SoluteWaterIntegrator" "', argument " "1"" of type '" "cmf::math::SoluteWaterIntegrator *""'"); 
  }
  arg1 = reinterpret_cast< cmf::math::SoluteWaterIntegrator * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *SoluteWaterIntegrator_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_cmf__math__SoluteWaterIntegrator, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *SoluteWaterIntegrator_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

static PyMethodDef SwigMethods[] = {
	 { (char *)"SWIG_PyInstanceMethod_New", (PyCFunction)SWIG_PyInstanceMethod_New, METH_O, NULL},
	 { (char *)"delete_SwigPyIterator", (PyCFunction)_wrap_delete_SwigPyIterator, METH_O, (char *)"delete_SwigPyIterator(SwigPyIterator self)"},
	 { (char *)"SwigPyIterator_value", (PyCFunction)_wrap_SwigPyIterator_value, METH_O, (char *)"SwigPyIterator_value(SwigPyIterator self) -> PyObject"},
	 { (char *)"SwigPyIterator_incr", _wrap_SwigPyIterator_incr, METH_VARARGS, (char *)"SwigPyIterator_incr(SwigPyIterator self, size_t n = 1) -> SwigPyIterator"},
	 { (char *)"SwigPyIterator_decr", _wrap_SwigPyIterator_decr, METH_VARARGS, (char *)"SwigPyIterator_decr(SwigPyIterator self, size_t n = 1) -> SwigPyIterator"},
	 { (char *)"SwigPyIterator_distance", _wrap_SwigPyIterator_distance, METH_VARARGS, (char *)"SwigPyIterator_distance(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t"},
	 { (char *)"SwigPyIterator_equal", _wrap_SwigPyIterator_equal, METH_VARARGS, (char *)"SwigPyIterator_equal(SwigPyIterator self, SwigPyIterator x) -> bool"},
	 { (char *)"SwigPyIterator_copy", (PyCFunction)_wrap_SwigPyIterator_copy, METH_O, (char *)"SwigPyIterator_copy(SwigPyIterator self) -> SwigPyIterator"},
	 { (char *)"SwigPyIterator_next", (PyCFunction)_wrap_SwigPyIterator_next, METH_O, (char *)"SwigPyIterator_next(SwigPyIterator self) -> PyObject"},
	 { (char *)"SwigPyIterator___next__", (PyCFunction)_wrap_SwigPyIterator___next__, METH_O, (char *)"SwigPyIterator___next__(SwigPyIterator self) -> PyObject"},
	 { (char *)"SwigPyIterator_previous", (PyCFunction)_wrap_SwigPyIterator_previous, METH_O, (char *)"SwigPyIterator_previous(SwigPyIterator self) -> PyObject"},
	 { (char *)"SwigPyIterator_advance", _wrap_SwigPyIterator_advance, METH_VARARGS, (char *)"SwigPyIterator_advance(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"},
	 { (char *)"SwigPyIterator___eq__", _wrap_SwigPyIterator___eq__, METH_VARARGS, (char *)"SwigPyIterator___eq__(SwigPyIterator self, SwigPyIterator x) -> bool"},
	 { (char *)"SwigPyIterator___ne__", _wrap_SwigPyIterator___ne__, METH_VARARGS, (char *)"SwigPyIterator___ne__(SwigPyIterator self, SwigPyIterator x) -> bool"},
	 { (char *)"SwigPyIterator___iadd__", _wrap_SwigPyIterator___iadd__, METH_VARARGS, (char *)"SwigPyIterator___iadd__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"},
	 { (char *)"SwigPyIterator___isub__", _wrap_SwigPyIterator___isub__, METH_VARARGS, (char *)"SwigPyIterator___isub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"},
	 { (char *)"SwigPyIterator___add__", _wrap_SwigPyIterator___add__, METH_VARARGS, (char *)"SwigPyIterator___add__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"},
	 { (char *)"SwigPyIterator___sub__", _wrap_SwigPyIterator___sub__, METH_VARARGS, (char *)"\n"
		"__sub__(ptrdiff_t n) -> SwigPyIterator\n"
		"SwigPyIterator___sub__(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t\n"
		""},
	 { (char *)"SwigPyIterator_swigregister", SwigPyIterator_swigregister, METH_VARARGS, NULL},
	 { (char *)"point_x_set", _wrap_point_x_set, METH_VARARGS, (char *)"point_x_set(point self, double x)"},
	 { (char *)"point_x_get", (PyCFunction)_wrap_point_x_get, METH_O, (char *)"point_x_get(point self) -> double"},
	 { (char *)"point_y_set", _wrap_point_y_set, METH_VARARGS, (char *)"point_y_set(point self, double y)"},
	 { (char *)"point_y_get", (PyCFunction)_wrap_point_y_get, METH_O, (char *)"point_y_get(point self) -> double"},
	 { (char *)"point_z_set", _wrap_point_z_set, METH_VARARGS, (char *)"point_z_set(point self, double z)"},
	 { (char *)"point_z_get", (PyCFunction)_wrap_point_z_get, METH_O, (char *)"point_z_get(point self) -> double"},
	 { (char *)"point_Center", (PyCFunction)_wrap_point_Center, METH_O, (char *)"\n"
		"point_Center(point self) -> point\n"
		"\n"
		"point Center()\n"
		"const \n"
		""},
	 { (char *)"new_point", _wrap_new_point, METH_VARARGS, (char *)"\n"
		"point()\n"
		"point(point p)\n"
		"new_point(double x_, double y_, double z_ = 0.0) -> point\n"
		"\n"
		"point(double x_,\n"
		"double y_, double z_=0.0)\n"
		"\n"
		"Creates a point from two doubles. \n"
		""},
	 { (char *)"point_distanceTo", _wrap_point_distanceTo, METH_VARARGS, (char *)"\n"
		"point_distanceTo(point self, point p) -> double\n"
		"\n"
		"double\n"
		"distanceTo(point p) const\n"
		"\n"
		"Returns the euclidian distance to another point. (see Formula in C++\n"
		"documentation) . \n"
		""},
	 { (char *)"point_distance3DTo", _wrap_point_distance3DTo, METH_VARARGS, (char *)"\n"
		"point_distance3DTo(point self, point p) -> double\n"
		"\n"
		"double\n"
		"distance3DTo(point p) const \n"
		""},
	 { (char *)"point_distance", _wrap_point_distance, METH_VARARGS, (char *)"point_distance(point p1, point p2) -> double"},
	 { (char *)"point_distance_max", _wrap_point_distance_max, METH_VARARGS, (char *)"\n"
		"point_distance_max(point self, point p) -> double\n"
		"\n"
		"double\n"
		"distance_max(point p) const\n"
		"\n"
		"Returns the distance by the maximum orthogonal offset. \n"
		""},
	 { (char *)"point_azimuth", _wrap_point_azimuth, METH_VARARGS, (char *)"\n"
		"point_azimuth(point self, point p) -> double\n"
		"\n"
		"double\n"
		"azimuth(point p) const\n"
		"\n"
		"Returns the azimuth angle of the line (see Formula in C++\n"
		"documentation)  to the Azimuth in degrees. \n"
		""},
	 { (char *)"point_angleToXAxis", _wrap_point_angleToXAxis, METH_VARARGS, (char *)"\n"
		"point_angleToXAxis(point self, point p) -> double\n"
		"\n"
		"double\n"
		"angleToXAxis(point p) const\n"
		"\n"
		"Returns the angle between the line (see Formula in C++ documentation)\n"
		"to the x-Axis in degrees. \n"
		""},
	 { (char *)"point___add__", _wrap_point___add__, METH_VARARGS, (char *)"point___add__(point self, point p) -> point"},
	 { (char *)"point___sub__", _wrap_point___sub__, METH_VARARGS, (char *)"point___sub__(point self, point p) -> point"},
	 { (char *)"point___mul__", _wrap_point___mul__, METH_VARARGS, (char *)"\n"
		"__mul__(double left) -> point\n"
		"point___mul__(point self, point p) -> point\n"
		""},
	 { (char *)"point___div__", _wrap_point___div__, METH_VARARGS, (char *)"\n"
		"__div__(double left) -> point\n"
		"point___div__(point self, point p) -> point\n"
		""},
	 { (char *)"point___iadd__", _wrap_point___iadd__, METH_VARARGS, (char *)"point___iadd__(point self, point p) -> point"},
	 { (char *)"point___isub__", _wrap_point___isub__, METH_VARARGS, (char *)"point___isub__(point self, point p) -> point"},
	 { (char *)"point___eq__", _wrap_point___eq__, METH_VARARGS, (char *)"point___eq__(point self, point p) -> bool"},
	 { (char *)"point___ne__", _wrap_point___ne__, METH_VARARGS, (char *)"point___ne__(point self, point p) -> bool"},
	 { (char *)"point___len__", (PyCFunction)_wrap_point___len__, METH_O, (char *)"point___len__(point self) -> int"},
	 { (char *)"point___rmul__", _wrap_point___rmul__, METH_VARARGS, (char *)"point___rmul__(point self, double val) -> point"},
	 { (char *)"point___rdiv__", _wrap_point___rdiv__, METH_VARARGS, (char *)"point___rdiv__(point self, double val) -> point"},
	 { (char *)"delete_point", (PyCFunction)_wrap_delete_point, METH_O, (char *)"delete_point(point self)"},
	 { (char *)"point_swigregister", point_swigregister, METH_VARARGS, NULL},
	 { (char *)"point_swiginit", point_swiginit, METH_VARARGS, NULL},
	 { (char *)"Locatable_get_position", (PyCFunction)_wrap_Locatable_get_position, METH_O, (char *)"\n"
		"Locatable_get_position(Locatable self) -> point\n"
		"\n"
		"virtual cmf::geometry::point get_position() const =0\n"
		"\n"
		"Pure virtual function. Should return the position of the locatable. \n"
		""},
	 { (char *)"Locatable_set_position", _wrap_Locatable_set_position, METH_VARARGS, (char *)"\n"
		"Locatable_set_position(Locatable self, point p)\n"
		"\n"
		"virtual void set_position(cmf::geometry::point p)\n"
		"\n"
		"Sets the location. If not implemented by the child class, an exception\n"
		"is thrown. \n"
		""},
	 { (char *)"Locatable_get_distance_to", _wrap_Locatable_get_distance_to, METH_VARARGS, (char *)"\n"
		"Locatable_get_distance_to(Locatable self, Locatable cmp) -> double\n"
		"\n"
		"double get_distance_to(const Locatable &cmp)\n"
		"\n"
		"Returns the distance between two locatable objects. \n"
		""},
	 { (char *)"Locatable_get_direction_to", _wrap_Locatable_get_direction_to, METH_VARARGS, (char *)"\n"
		"Locatable_get_direction_to(Locatable self, Locatable cmp) -> point\n"
		"\n"
		"cmf::geometry::point get_direction_to(const Locatable &cmp)\n"
		"\n"
		"Returns a vector with length=1 pointing in the direction of another\n"
		"Locatable. \n"
		""},
	 { (char *)"delete_Locatable", (PyCFunction)_wrap_delete_Locatable, METH_O, (char *)"delete_Locatable(Locatable self)"},
	 { (char *)"Locatable_swigregister", Locatable_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_Location", _wrap_new_Location, METH_VARARGS, (char *)"\n"
		"Location(point position)\n"
		"new_Location(double x, double y, double z) -> Location\n"
		"\n"
		"Location(double x, double y, double z) \n"
		""},
	 { (char *)"delete_Location", (PyCFunction)_wrap_delete_Location, METH_O, (char *)"delete_Location(Location self)"},
	 { (char *)"Location_swigregister", Location_swigregister, METH_VARARGS, NULL},
	 { (char *)"Location_swiginit", Location_swiginit, METH_VARARGS, NULL},
	 { (char *)"point_vector_X_set", _wrap_point_vector_X_set, METH_VARARGS, (char *)"point_vector_X_set(point_vector self, num_array X)"},
	 { (char *)"point_vector_X_get", (PyCFunction)_wrap_point_vector_X_get, METH_O, (char *)"point_vector_X_get(point_vector self) -> num_array"},
	 { (char *)"point_vector_Y_set", _wrap_point_vector_Y_set, METH_VARARGS, (char *)"point_vector_Y_set(point_vector self, num_array Y)"},
	 { (char *)"point_vector_Y_get", (PyCFunction)_wrap_point_vector_Y_get, METH_O, (char *)"point_vector_Y_get(point_vector self) -> num_array"},
	 { (char *)"point_vector_Z_set", _wrap_point_vector_Z_set, METH_VARARGS, (char *)"point_vector_Z_set(point_vector self, num_array Z)"},
	 { (char *)"point_vector_Z_get", (PyCFunction)_wrap_point_vector_Z_get, METH_O, (char *)"point_vector_Z_get(point_vector self) -> num_array"},
	 { (char *)"new_point_vector", (PyCFunction)_wrap_new_point_vector, METH_O, (char *)"\n"
		"new_point_vector(int size) -> point_vector\n"
		"\n"
		"point_vector(int size) \n"
		""},
	 { (char *)"point_vector_get", _wrap_point_vector_get, METH_VARARGS, (char *)"\n"
		"point_vector_get(point_vector self, int index) -> point\n"
		"\n"
		"point\n"
		"get(int index) const \n"
		""},
	 { (char *)"point_vector_set", _wrap_point_vector_set, METH_VARARGS, (char *)"\n"
		"point_vector_set(point_vector self, int index, point p)\n"
		"\n"
		"void set(int\n"
		"index, cmf::geometry::point p) \n"
		""},
	 { (char *)"point_vector_size", (PyCFunction)_wrap_point_vector_size, METH_O, (char *)"\n"
		"point_vector_size(point_vector self) -> int\n"
		"\n"
		"int size()\n"
		"const \n"
		""},
	 { (char *)"delete_point_vector", (PyCFunction)_wrap_delete_point_vector, METH_O, (char *)"delete_point_vector(point_vector self)"},
	 { (char *)"point_vector_swigregister", point_vector_swigregister, METH_VARARGS, NULL},
	 { (char *)"point_vector_swiginit", point_vector_swiginit, METH_VARARGS, NULL},
	 { (char *)"minimum", _wrap_minimum, METH_VARARGS, (char *)"\n"
		"minimum(real a, real b) -> real\n"
		"\n"
		"real minimum(real a, real b)\n"
		"\n"
		"Returns the minimum of two values. \n"
		""},
	 { (char *)"maximum", _wrap_maximum, METH_VARARGS, (char *)"\n"
		"maximum(real a, real b) -> real\n"
		"\n"
		"real maximum(real a, real b) \n"
		""},
	 { (char *)"minmax", _wrap_minmax, METH_VARARGS, (char *)"\n"
		"minmax(real x, real min, real max) -> real\n"
		"\n"
		"real minmax(real x, real min, real\n"
		"max) \n"
		""},
	 { (char *)"mean", _wrap_mean, METH_VARARGS, (char *)"\n"
		"mean(real a, real b) -> real\n"
		"\n"
		"real mean(real a, real b) \n"
		""},
	 { (char *)"geo_mean", _wrap_geo_mean, METH_VARARGS, (char *)"\n"
		"geo_mean(real a, real b) -> real\n"
		"\n"
		"real geo_mean(real a, real b) \n"
		""},
	 { (char *)"harmonic_mean", _wrap_harmonic_mean, METH_VARARGS, (char *)"\n"
		"harmonic_mean(real a, real b) -> real\n"
		"\n"
		"real harmonic_mean(real a, real\n"
		"b) \n"
		""},
	 { (char *)"piecewise_linear", _wrap_piecewise_linear, METH_VARARGS, (char *)"\n"
		"piecewise_linear(real x, real xmin, real xmax, real ymin = 0, real ymax = 1) -> real\n"
		"\n"
		"real piecewise_linear(real\n"
		"x, real xmin, real xmax, real ymin=0, real ymax=1) \n"
		""},
	 { (char *)"boltzmann", _wrap_boltzmann, METH_VARARGS, (char *)"\n"
		"boltzmann(real x, real tau, real x_half) -> real\n"
		"\n"
		"real boltzmann(real x, real tau,\n"
		"real x_half) \n"
		""},
	 { (char *)"sign", (PyCFunction)_wrap_sign, METH_O, (char *)"\n"
		"sign(real x) -> real\n"
		"\n"
		"real sign(real x) \n"
		""},
	 { (char *)"square", (PyCFunction)_wrap_square, METH_O, (char *)"\n"
		"square(real x) -> real\n"
		"\n"
		"real square(real x) \n"
		""},
	 { (char *)"new_Time", _wrap_new_Time, METH_VARARGS, (char *)"\n"
		"Time(double days)\n"
		"Time(int day, int month, int year = 2001, int hour = 0, \n"
		"    int minute = 0, int second = 0, int ms = 0)\n"
		"Time(Date date)\n"
		"Time(Time t)\n"
		"new_Time() -> Time\n"
		"\n"
		"Time()\n"
		"\n"
		"Standard constructor. \n"
		""},
	 { (char *)"Time_AsDays", (PyCFunction)_wrap_Time_AsDays, METH_O, (char *)"\n"
		"Time_AsDays(Time self) -> double\n"
		"\n"
		"double AsDays() const\n"
		"\n"
		"Time in days. \n"
		""},
	 { (char *)"Time_AsHours", (PyCFunction)_wrap_Time_AsHours, METH_O, (char *)"\n"
		"Time_AsHours(Time self) -> double\n"
		"\n"
		"double AsHours()\n"
		"const\n"
		"\n"
		"Time in hours. \n"
		""},
	 { (char *)"Time_AsMinutes", (PyCFunction)_wrap_Time_AsMinutes, METH_O, (char *)"\n"
		"Time_AsMinutes(Time self) -> double\n"
		"\n"
		"double AsMinutes()\n"
		"const\n"
		"\n"
		"Time in minutes. \n"
		""},
	 { (char *)"Time_AsSeconds", (PyCFunction)_wrap_Time_AsSeconds, METH_O, (char *)"\n"
		"Time_AsSeconds(Time self) -> double\n"
		"\n"
		"double AsSeconds()\n"
		"const\n"
		"\n"
		"Time in seconds. \n"
		""},
	 { (char *)"Time_AsMilliseconds", (PyCFunction)_wrap_Time_AsMilliseconds, METH_O, (char *)"\n"
		"Time_AsMilliseconds(Time self) -> long long\n"
		"\n"
		"long long\n"
		"AsMilliseconds() const\n"
		"\n"
		"Time in milliseconds. \n"
		""},
	 { (char *)"Time_AsDate", (PyCFunction)_wrap_Time_AsDate, METH_O, (char *)"\n"
		"Time_AsDate(Time self) -> Date\n"
		"\n"
		"Date AsDate() const\n"
		"\n"
		""},
	 { (char *)"Time_to_string", _wrap_Time_to_string, METH_VARARGS, (char *)"\n"
		"Time_to_string(Time self, char seperator = ':') -> string\n"
		"\n"
		"std::string\n"
		"to_string(char seperator=':') \n"
		""},
	 { (char *)"Time_is_not_0", (PyCFunction)_wrap_Time_is_not_0, METH_O, (char *)"\n"
		"Time_is_not_0(Time self) -> bool\n"
		"\n"
		"bool is_not_0()\n"
		"const \n"
		""},
	 { (char *)"Time_DOY", (PyCFunction)_wrap_Time_DOY, METH_O, (char *)"\n"
		"Time_DOY(Time self) -> double\n"
		"\n"
		"double DOY() const \n"
		""},
	 { (char *)"Time___add__", _wrap_Time___add__, METH_VARARGS, (char *)"Time___add__(Time self, Time t1) -> Time"},
	 { (char *)"Time___sub__", _wrap_Time___sub__, METH_VARARGS, (char *)"Time___sub__(Time self, Time t1) -> Time"},
	 { (char *)"Time___iadd__", _wrap_Time___iadd__, METH_VARARGS, (char *)"Time___iadd__(Time self, Time t1) -> Time"},
	 { (char *)"Time___isub__", _wrap_Time___isub__, METH_VARARGS, (char *)"Time___isub__(Time self, Time t1) -> Time"},
	 { (char *)"Time___mod__", _wrap_Time___mod__, METH_VARARGS, (char *)"Time___mod__(Time self, Time t1) -> Time"},
	 { (char *)"Time___mul__", _wrap_Time___mul__, METH_VARARGS, (char *)"\n"
		"__mul__(double x) -> Time\n"
		"Time___mul__(Time self, int x) -> Time\n"
		""},
	 { (char *)"Time___imul__", _wrap_Time___imul__, METH_VARARGS, (char *)"\n"
		"__imul__(double x) -> Time\n"
		"Time___imul__(Time self, int x) -> Time\n"
		""},
	 { (char *)"Time___idiv__", _wrap_Time___idiv__, METH_VARARGS, (char *)"\n"
		"__idiv__(double x) -> Time\n"
		"Time___idiv__(Time self, int x) -> Time\n"
		""},
	 { (char *)"Time___imod__", _wrap_Time___imod__, METH_VARARGS, (char *)"Time___imod__(Time self, Time t1) -> Time"},
	 { (char *)"Time___div__", _wrap_Time___div__, METH_VARARGS, (char *)"\n"
		"__div__(double x) -> Time\n"
		"__div__(int x) -> Time\n"
		"Time___div__(Time self, Time t1) -> double\n"
		""},
	 { (char *)"Time_times_in", _wrap_Time_times_in, METH_VARARGS, (char *)"\n"
		"Time_times_in(Time self, Time t1) -> long long\n"
		"\n"
		"long long\n"
		"times_in(const Time &t1) const\n"
		"\n"
		"Returns the number of times this is included in t1. \n"
		""},
	 { (char *)"Time___lt__", _wrap_Time___lt__, METH_VARARGS, (char *)"Time___lt__(Time self, Time t1) -> bool"},
	 { (char *)"Time___gt__", _wrap_Time___gt__, METH_VARARGS, (char *)"Time___gt__(Time self, Time t1) -> bool"},
	 { (char *)"Time___le__", _wrap_Time___le__, METH_VARARGS, (char *)"Time___le__(Time self, Time t1) -> bool"},
	 { (char *)"Time___ge__", _wrap_Time___ge__, METH_VARARGS, (char *)"Time___ge__(Time self, Time t1) -> bool"},
	 { (char *)"Time___eq__", _wrap_Time___eq__, METH_VARARGS, (char *)"Time___eq__(Time self, Time t1) -> bool"},
	 { (char *)"Time___ne__", _wrap_Time___ne__, METH_VARARGS, (char *)"Time___ne__(Time self, Time t1) -> bool"},
	 { (char *)"Time_Years", _wrap_Time_Years, METH_VARARGS, (char *)"Time_Years(double y = 1) -> Time"},
	 { (char *)"Time_Days", _wrap_Time_Days, METH_VARARGS, (char *)"Time_Days(double d = 1) -> Time"},
	 { (char *)"Time_Hours", _wrap_Time_Hours, METH_VARARGS, (char *)"Time_Hours(double h = 1) -> Time"},
	 { (char *)"Time_Minutes", _wrap_Time_Minutes, METH_VARARGS, (char *)"Time_Minutes(double min = 1) -> Time"},
	 { (char *)"Time_Seconds", _wrap_Time_Seconds, METH_VARARGS, (char *)"Time_Seconds(double secs = 1) -> Time"},
	 { (char *)"Time_Milliseconds", _wrap_Time_Milliseconds, METH_VARARGS, (char *)"Time_Milliseconds(long long ms = 1) -> Time"},
	 { (char *)"delete_Time", (PyCFunction)_wrap_delete_Time, METH_O, (char *)"delete_Time(Time self)"},
	 { (char *)"Time_swigregister", Time_swigregister, METH_VARARGS, NULL},
	 { (char *)"Time_swiginit", Time_swiginit, METH_VARARGS, NULL},
	 { (char *)"minimum_t", _wrap_minimum_t, METH_VARARGS, (char *)"\n"
		"minimum_t(Time t1, Time t2) -> Time\n"
		"\n"
		"Time\n"
		"cmf::math::minimum_t(Time t1, Time t2) \n"
		""},
	 { (char *)"maximum_t", _wrap_maximum_t, METH_VARARGS, (char *)"\n"
		"maximum_t(Time t1, Time t2) -> Time\n"
		"\n"
		"Time\n"
		"cmf::math::maximum_t(Time t1, Time t2) \n"
		""},
	 { (char *)"Date_year_set", _wrap_Date_year_set, METH_VARARGS, (char *)"Date_year_set(Date self, int year)"},
	 { (char *)"Date_year_get", (PyCFunction)_wrap_Date_year_get, METH_O, (char *)"Date_year_get(Date self) -> int"},
	 { (char *)"Date_month_set", _wrap_Date_month_set, METH_VARARGS, (char *)"Date_month_set(Date self, int month)"},
	 { (char *)"Date_month_get", (PyCFunction)_wrap_Date_month_get, METH_O, (char *)"Date_month_get(Date self) -> int"},
	 { (char *)"Date_day_set", _wrap_Date_day_set, METH_VARARGS, (char *)"Date_day_set(Date self, int day)"},
	 { (char *)"Date_day_get", (PyCFunction)_wrap_Date_day_get, METH_O, (char *)"Date_day_get(Date self) -> int"},
	 { (char *)"Date_hour_set", _wrap_Date_hour_set, METH_VARARGS, (char *)"Date_hour_set(Date self, int hour)"},
	 { (char *)"Date_hour_get", (PyCFunction)_wrap_Date_hour_get, METH_O, (char *)"Date_hour_get(Date self) -> int"},
	 { (char *)"Date_minute_set", _wrap_Date_minute_set, METH_VARARGS, (char *)"Date_minute_set(Date self, int minute)"},
	 { (char *)"Date_minute_get", (PyCFunction)_wrap_Date_minute_get, METH_O, (char *)"Date_minute_get(Date self) -> int"},
	 { (char *)"Date_second_set", _wrap_Date_second_set, METH_VARARGS, (char *)"Date_second_set(Date self, int second)"},
	 { (char *)"Date_second_get", (PyCFunction)_wrap_Date_second_get, METH_O, (char *)"Date_second_get(Date self) -> int"},
	 { (char *)"Date_ms_set", _wrap_Date_ms_set, METH_VARARGS, (char *)"Date_ms_set(Date self, int ms)"},
	 { (char *)"Date_ms_get", (PyCFunction)_wrap_Date_ms_get, METH_O, (char *)"Date_ms_get(Date self) -> int"},
	 { (char *)"new_Date", _wrap_new_Date, METH_VARARGS, (char *)"\n"
		"Date(int _day, int _month, int _year = 2001, int _hour = 0, \n"
		"    int _minute = 0, int _second = 0, int _ms = 0)\n"
		"new_Date(Time time) -> Date\n"
		"\n"
		"Date(const Time &time)\n"
		"\n"
		"Creates a new date from time (based on the 31.12.1899, like in\n"
		"Excel(TM)). \n"
		""},
	 { (char *)"Date_ToTime", (PyCFunction)_wrap_Date_ToTime, METH_O, (char *)"\n"
		"Date_ToTime(Date self) -> Time\n"
		"\n"
		"Time ToTime()\n"
		"\n"
		"Converts a date to Time (based on the 31.12.1899, like in Excel(TM).\n"
		"\n"
		""},
	 { (char *)"Date_DOY", (PyCFunction)_wrap_Date_DOY, METH_O, (char *)"\n"
		"Date_DOY(Date self) -> double\n"
		"\n"
		"double DOY()\n"
		"\n"
		"Returns the day of year. \n"
		""},
	 { (char *)"Date_to_string", (PyCFunction)_wrap_Date_to_string, METH_O, (char *)"\n"
		"Date_to_string(Date self) -> string\n"
		"\n"
		"std::string\n"
		"to_string()\n"
		"\n"
		"Returns a string representing the date. \n"
		""},
	 { (char *)"delete_Date", (PyCFunction)_wrap_delete_Date, METH_O, (char *)"delete_Date(Date self)"},
	 { (char *)"Date_swigregister", Date_swigregister, METH_VARARGS, NULL},
	 { (char *)"Date_swiginit", Date_swiginit, METH_VARARGS, NULL},
	 { (char *)"timeseries_interpolationpower", (PyCFunction)_wrap_timeseries_interpolationpower, METH_O, (char *)"\n"
		"timeseries_interpolationpower(timeseries self) -> double\n"
		"\n"
		"double interpolationpower() const\n"
		"\n"
		"Method for the interpolation (0 - Nearest neighbor, 1- linear, 2 -\n"
		"cubic spline (not implemented yet). \n"
		""},
	 { (char *)"timeseries_add", _wrap_timeseries_add, METH_VARARGS, (char *)"\n"
		"timeseries_add(timeseries self, double Value)\n"
		"\n"
		"void add(double\n"
		"Value)\n"
		"\n"
		"Appends a measurement. \n"
		""},
	 { (char *)"timeseries_is_empty", (PyCFunction)_wrap_timeseries_is_empty, METH_O, (char *)"\n"
		"timeseries_is_empty(timeseries self) -> bool\n"
		"\n"
		"bool\n"
		"is_empty() const\n"
		"\n"
		"returns true if no values are added to the timeseries \n"
		""},
	 { (char *)"timeseries_clear", (PyCFunction)_wrap_timeseries_clear, METH_O, (char *)"\n"
		"timeseries_clear(timeseries self)\n"
		"\n"
		"void clear() \n"
		""},
	 { (char *)"timeseries_adress", (PyCFunction)_wrap_timeseries_adress, METH_O, (char *)"\n"
		"timeseries_adress(timeseries self) -> size_t\n"
		"\n"
		"size_t adress()\n"
		"const \n"
		""},
	 { (char *)"timeseries_copy", (PyCFunction)_wrap_timeseries_copy, METH_O, (char *)"\n"
		"timeseries_copy(timeseries self) -> timeseries\n"
		"\n"
		"timeseries copy()\n"
		"const \n"
		""},
	 { (char *)"timeseries_size", (PyCFunction)_wrap_timeseries_size, METH_O, (char *)"\n"
		"timeseries_size(timeseries self) -> int\n"
		"\n"
		"int size() const\n"
		"\n"
		""},
	 { (char *)"new_timeseries", _wrap_new_timeseries, METH_VARARGS, (char *)"\n"
		"timeseries(Time _begin, Time _step, int _interpolationmethod = 1)\n"
		"timeseries()\n"
		"timeseries(timeseries ts)\n"
		"new_timeseries(double scalar) -> timeseries\n"
		"\n"
		"timeseries(double scalar) \n"
		""},
	 { (char *)"timeseries_get_t", _wrap_timeseries_get_t, METH_VARARGS, (char *)"\n"
		"timeseries_get_t(timeseries self, Time t) -> double\n"
		"\n"
		"double\n"
		"get_t(cmf::math::Time t) const \n"
		""},
	 { (char *)"timeseries_get_i", _wrap_timeseries_get_i, METH_VARARGS, (char *)"\n"
		"timeseries_get_i(timeseries self, int i) -> double\n"
		"\n"
		"double get_i(int\n"
		"i) const \n"
		""},
	 { (char *)"timeseries_set_t", _wrap_timeseries_set_t, METH_VARARGS, (char *)"\n"
		"timeseries_set_t(timeseries self, Time t, double value)\n"
		"\n"
		"void\n"
		"set_t(cmf::math::Time t, double value) \n"
		""},
	 { (char *)"timeseries_set_i", _wrap_timeseries_set_i, METH_VARARGS, (char *)"\n"
		"timeseries_set_i(timeseries self, int i, double value)\n"
		"\n"
		"void set_i(int\n"
		"i, double value) \n"
		""},
	 { (char *)"timeseries_get_slice", _wrap_timeseries_get_slice, METH_VARARGS, (char *)"\n"
		"get_slice(Time _begin, Time _end, Time _step = cmf::math::Time()) -> timeseries\n"
		"timeseries_get_slice(timeseries self, int _begin, int _end, int step = 1) -> timeseries\n"
		"\n"
		"cmf::math::timeseries get_slice(int _begin, int _end, int step=1) \n"
		""},
	 { (char *)"timeseries_set_slice", _wrap_timeseries_set_slice, METH_VARARGS, (char *)"\n"
		"set_slice(Time _begin, Time _end, timeseries values)\n"
		"timeseries_set_slice(timeseries self, int _begin, int _end, timeseries _values)\n"
		"\n"
		"void\n"
		"set_slice(int _begin, int _end, cmf::math::timeseries _values) \n"
		""},
	 { (char *)"timeseries___iadd__", _wrap_timeseries___iadd__, METH_VARARGS, (char *)"\n"
		"__iadd__(timeseries arg0) -> timeseries\n"
		"timeseries___iadd__(timeseries self, double arg1) -> timeseries\n"
		""},
	 { (char *)"timeseries___isub__", _wrap_timeseries___isub__, METH_VARARGS, (char *)"\n"
		"__isub__(timeseries arg0) -> timeseries\n"
		"timeseries___isub__(timeseries self, double arg1) -> timeseries\n"
		""},
	 { (char *)"timeseries___imul__", _wrap_timeseries___imul__, METH_VARARGS, (char *)"\n"
		"__imul__(timeseries arg0) -> timeseries\n"
		"timeseries___imul__(timeseries self, double arg1) -> timeseries\n"
		""},
	 { (char *)"timeseries___idiv__", _wrap_timeseries___idiv__, METH_VARARGS, (char *)"\n"
		"__idiv__(timeseries arg0) -> timeseries\n"
		"timeseries___idiv__(timeseries self, double arg1) -> timeseries\n"
		""},
	 { (char *)"timeseries___add__", _wrap_timeseries___add__, METH_VARARGS, (char *)"\n"
		"__add__(timeseries arg0) -> timeseries\n"
		"timeseries___add__(timeseries self, double other) -> timeseries\n"
		""},
	 { (char *)"timeseries___sub__", _wrap_timeseries___sub__, METH_VARARGS, (char *)"\n"
		"__sub__(timeseries other) -> timeseries\n"
		"timeseries___sub__(timeseries self, double other) -> timeseries\n"
		""},
	 { (char *)"timeseries___mul__", _wrap_timeseries___mul__, METH_VARARGS, (char *)"\n"
		"__mul__(timeseries other) -> timeseries\n"
		"timeseries___mul__(timeseries self, double other) -> timeseries\n"
		""},
	 { (char *)"timeseries___div__", _wrap_timeseries___div__, METH_VARARGS, (char *)"\n"
		"__div__(timeseries other) -> timeseries\n"
		"timeseries___div__(timeseries self, double other) -> timeseries\n"
		""},
	 { (char *)"timeseries___neg__", (PyCFunction)_wrap_timeseries___neg__, METH_O, (char *)"timeseries___neg__(timeseries self) -> timeseries"},
	 { (char *)"timeseries_inv", (PyCFunction)_wrap_timeseries_inv, METH_O, (char *)"\n"
		"timeseries_inv(timeseries self) -> timeseries\n"
		"\n"
		"timeseries inv()\n"
		"const \n"
		""},
	 { (char *)"timeseries_reduce_min", _wrap_timeseries_reduce_min, METH_VARARGS, (char *)"\n"
		"timeseries_reduce_min(timeseries self, Time begin, Time step) -> timeseries\n"
		"\n"
		"timeseries\n"
		"reduce_min(cmf::math::Time begin, cmf::math::Time step) const \n"
		""},
	 { (char *)"timeseries_reduce_max", _wrap_timeseries_reduce_max, METH_VARARGS, (char *)"\n"
		"timeseries_reduce_max(timeseries self, Time begin, Time step) -> timeseries\n"
		"\n"
		"timeseries\n"
		"reduce_max(cmf::math::Time begin, cmf::math::Time step) const\n"
		"\n"
		"Creates a timeseries with a bigger timestep, containing the minimum.\n"
		"\n"
		""},
	 { (char *)"timeseries_reduce_sum", _wrap_timeseries_reduce_sum, METH_VARARGS, (char *)"\n"
		"timeseries_reduce_sum(timeseries self, Time begin, Time step) -> timeseries\n"
		"\n"
		"timeseries\n"
		"reduce_sum(cmf::math::Time begin, cmf::math::Time step) const\n"
		"\n"
		"Creates a timeseries with a bigger timestep, containing the maximum.\n"
		"\n"
		""},
	 { (char *)"timeseries_reduce_avg", _wrap_timeseries_reduce_avg, METH_VARARGS, (char *)"\n"
		"timeseries_reduce_avg(timeseries self, Time begin, Time step) -> timeseries\n"
		"\n"
		"timeseries\n"
		"reduce_avg(cmf::math::Time begin, cmf::math::Time step) const\n"
		"\n"
		"Creates a timeseries with a bigger timestep, containing the sum. \n"
		""},
	 { (char *)"timeseries_floating_avg", _wrap_timeseries_floating_avg, METH_VARARGS, (char *)"\n"
		"timeseries_floating_avg(timeseries self, Time window_width) -> timeseries\n"
		"\n"
		"timeseries floating_avg(cmf::math::Time window_width) const\n"
		"\n"
		"Creates a timeseries with a bigger timestep, containing the average.\n"
		"\n"
		""},
	 { (char *)"timeseries_floating_max", _wrap_timeseries_floating_max, METH_VARARGS, (char *)"\n"
		"timeseries_floating_max(timeseries self, Time window_width) -> timeseries\n"
		"\n"
		"timeseries floating_max(cmf::math::Time window_width) const \n"
		""},
	 { (char *)"timeseries_floating_min", _wrap_timeseries_floating_min, METH_VARARGS, (char *)"\n"
		"timeseries_floating_min(timeseries self, Time window_width) -> timeseries\n"
		"\n"
		"timeseries floating_min(cmf::math::Time window_width) const \n"
		""},
	 { (char *)"timeseries_mean", (PyCFunction)_wrap_timeseries_mean, METH_O, (char *)"\n"
		"timeseries_mean(timeseries self) -> double\n"
		"\n"
		"double mean()\n"
		"const \n"
		""},
	 { (char *)"timeseries_min", (PyCFunction)_wrap_timeseries_min, METH_O, (char *)"\n"
		"timeseries_min(timeseries self) -> double\n"
		"\n"
		"double min() const\n"
		"\n"
		""},
	 { (char *)"timeseries_max", (PyCFunction)_wrap_timeseries_max, METH_O, (char *)"\n"
		"timeseries_max(timeseries self) -> double\n"
		"\n"
		"double max() const\n"
		"\n"
		""},
	 { (char *)"timeseries_log", (PyCFunction)_wrap_timeseries_log, METH_O, (char *)"\n"
		"timeseries_log(timeseries self) -> timeseries\n"
		"\n"
		"timeseries log()\n"
		"const \n"
		""},
	 { (char *)"timeseries_log10", (PyCFunction)_wrap_timeseries_log10, METH_O, (char *)"\n"
		"timeseries_log10(timeseries self) -> timeseries\n"
		"\n"
		"timeseries\n"
		"log10() const \n"
		""},
	 { (char *)"timeseries_power", _wrap_timeseries_power, METH_VARARGS, (char *)"\n"
		"timeseries_power(timeseries self, double exponent) -> timeseries\n"
		"\n"
		"timeseries\n"
		"power(double exponent) const \n"
		""},
	 { (char *)"timeseries_exp", (PyCFunction)_wrap_timeseries_exp, METH_O, (char *)"\n"
		"timeseries_exp(timeseries self) -> timeseries\n"
		"\n"
		"timeseries exp()\n"
		"const \n"
		""},
	 { (char *)"timeseries_begin_get", (PyCFunction)_wrap_timeseries_begin_get, METH_O, (char *)"\n"
		"timeseries_begin_get(timeseries self) -> Time\n"
		"\n"
		"cmf::math::Time\n"
		"begin() const\n"
		"\n"
		"Order of the interpolation.\n"
		"\n"
		"First date of measurement \n"
		""},
	 { (char *)"timeseries_step_get", (PyCFunction)_wrap_timeseries_step_get, METH_O, (char *)"\n"
		"timeseries_step_get(timeseries self) -> Time\n"
		"\n"
		"cmf::math::Time\n"
		"step() const\n"
		"\n"
		"Time between the measurements. \n"
		""},
	 { (char *)"timeseries_end_get", (PyCFunction)_wrap_timeseries_end_get, METH_O, (char *)"\n"
		"timeseries_end_get(timeseries self) -> Time\n"
		"\n"
		"cmf::math::Time\n"
		"end() const\n"
		"\n"
		"Last date of measurements. \n"
		""},
	 { (char *)"timeseries___len__", (PyCFunction)_wrap_timeseries___len__, METH_O, (char *)"timeseries___len__(timeseries self) -> double"},
	 { (char *)"delete_timeseries", (PyCFunction)_wrap_delete_timeseries, METH_O, (char *)"delete_timeseries(timeseries self)"},
	 { (char *)"timeseries_swigregister", timeseries_swigregister, METH_VARARGS, NULL},
	 { (char *)"timeseries_swiginit", timeseries_swiginit, METH_VARARGS, NULL},
	 { (char *)"nash_sutcliff", _wrap_nash_sutcliff, METH_VARARGS, (char *)"\n"
		"nash_sutcliff(timeseries model, timeseries observation) -> double\n"
		"\n"
		"double\n"
		"cmf::math::nash_sutcliff(const cmf::math::timeseries &model, const\n"
		"cmf::math::timeseries &observation) \n"
		""},
	 { (char *)"R2", _wrap_R2, METH_VARARGS, (char *)"\n"
		"R2(timeseries model, timeseries observation) -> double\n"
		"\n"
		"double cmf::math::R2(const\n"
		"cmf::math::timeseries &model, const cmf::math::timeseries\n"
		"&observation) \n"
		""},
	 { (char *)"new_num_array", _wrap_new_num_array, METH_VARARGS, (char *)"\n"
		"num_array(int count, real Value = 0)\n"
		"num_array(size_t count, real Value = 0)\n"
		"num_array()\n"
		"num_array(num_array Vector)\n"
		"new_num_array(double data, int count) -> num_array\n"
		"\n"
		"num_array(const std::valarray< real > &Vector)\n"
		"\n"
		"Convert from valarray<real>. \n"
		""},
	 { (char *)"num_array___set_data_from_adress", _wrap_num_array___set_data_from_adress, METH_VARARGS, (char *)"\n"
		"num_array___set_data_from_adress(num_array self, size_t data_adress, size_t count)\n"
		"\n"
		"void set_data_from_adress(size_t data_adress, size_t count) \n"
		""},
	 { (char *)"num_array_adress", (PyCFunction)_wrap_num_array_adress, METH_O, (char *)"\n"
		"num_array_adress(num_array self) -> size_t\n"
		"\n"
		"size_t adress()\n"
		"const \n"
		""},
	 { (char *)"delete_num_array", (PyCFunction)_wrap_delete_num_array, METH_O, (char *)"\n"
		"delete_num_array(num_array self)\n"
		"\n"
		"~num_array()\n"
		"\n"
		"Destructor. \n"
		""},
	 { (char *)"num_array_size", (PyCFunction)_wrap_num_array_size, METH_O, (char *)"\n"
		"num_array_size(num_array self) -> int\n"
		"\n"
		"int size() const\n"
		"\n"
		"Size of the vector. \n"
		""},
	 { (char *)"num_array_resize", _wrap_num_array_resize, METH_VARARGS, (char *)"\n"
		"resize(int count)\n"
		"num_array_resize(num_array self, size_t count)\n"
		"\n"
		"void\n"
		"resize(size_t count) \n"
		""},
	 { (char *)"num_array___neg__", (PyCFunction)_wrap_num_array___neg__, METH_O, (char *)"num_array___neg__(num_array self) -> num_array"},
	 { (char *)"num_array_power", _wrap_num_array_power, METH_VARARGS, (char *)"\n"
		"power(num_array arg0) -> num_array\n"
		"num_array_power(num_array self, real exponent) -> num_array\n"
		"\n"
		"num_array\n"
		"power(real exponent) const\n"
		"\n"
		"Return each element to the power \"exponent\". \n"
		""},
	 { (char *)"num_array___iadd__", _wrap_num_array___iadd__, METH_VARARGS, (char *)"\n"
		"__iadd__(num_array arg0) -> num_array\n"
		"num_array___iadd__(num_array self, real arg1) -> num_array\n"
		""},
	 { (char *)"num_array___isub__", _wrap_num_array___isub__, METH_VARARGS, (char *)"\n"
		"__isub__(num_array arg0) -> num_array\n"
		"num_array___isub__(num_array self, real arg1) -> num_array\n"
		""},
	 { (char *)"num_array___imul__", _wrap_num_array___imul__, METH_VARARGS, (char *)"\n"
		"__imul__(num_array arg0) -> num_array\n"
		"num_array___imul__(num_array self, real arg1) -> num_array\n"
		""},
	 { (char *)"num_array___idiv__", _wrap_num_array___idiv__, METH_VARARGS, (char *)"\n"
		"__idiv__(num_array arg0) -> num_array\n"
		"num_array___idiv__(num_array self, real arg1) -> num_array\n"
		""},
	 { (char *)"num_array_apply", _wrap_num_array_apply, METH_VARARGS, (char *)"\n"
		"num_array_apply(num_array self, real funct) -> num_array\n"
		"\n"
		"num_array\n"
		"apply(real funct(real)) const\n"
		"\n"
		"Return funct(this).\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"funct:  a function of signature real funct(real)\n"
		"\n"
		"Example: Return the sinus of each element of vector x \n"
		""},
	 { (char *)"num_array_dot", _wrap_num_array_dot, METH_VARARGS, (char *)"\n"
		"num_array_dot(num_array self, num_array arg1) -> real\n"
		"\n"
		"real dot(const\n"
		"num_array &) const\n"
		"\n"
		"Return dot product of this and vector. \n"
		""},
	 { (char *)"num_array_sum", (PyCFunction)_wrap_num_array_sum, METH_O, (char *)"\n"
		"num_array_sum(num_array self) -> real\n"
		"\n"
		"real sum() const\n"
		"\n"
		"Return sum of vector. \n"
		""},
	 { (char *)"num_array_max", (PyCFunction)_wrap_num_array_max, METH_O, (char *)"\n"
		"num_array_max(num_array self) -> real\n"
		"\n"
		"real max() const\n"
		"\n"
		"Return max of vector. \n"
		""},
	 { (char *)"num_array_min", (PyCFunction)_wrap_num_array_min, METH_O, (char *)"\n"
		"num_array_min(num_array self) -> real\n"
		"\n"
		"real min() const\n"
		"\n"
		"Return min of vector. \n"
		""},
	 { (char *)"num_array_mean", (PyCFunction)_wrap_num_array_mean, METH_O, (char *)"\n"
		"num_array_mean(num_array self) -> real\n"
		"\n"
		"real mean() const\n"
		"\n"
		"< Return mean of vector \n"
		""},
	 { (char *)"num_array_norm", _wrap_num_array_norm, METH_VARARGS, (char *)"\n"
		"num_array_norm(num_array self, int normtype = 0) -> real\n"
		"\n"
		"real norm(int\n"
		"normtype=0) const\n"
		"\n"
		"Returns a norm of the vector, implemented norms: 1 - sum of abs, 2 -\n"
		"Euclidean distance, 0 Maximum of abs.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"normtype:  An integer indicating the type of norm \n"
		""},
	 { (char *)"num_array___add__", _wrap_num_array___add__, METH_VARARGS, (char *)"\n"
		"__add__(num_array _Right) -> num_array\n"
		"num_array___add__(num_array self, real _Right) -> num_array\n"
		""},
	 { (char *)"num_array___sub__", _wrap_num_array___sub__, METH_VARARGS, (char *)"\n"
		"__sub__(num_array _Right) -> num_array\n"
		"num_array___sub__(num_array self, real _Right) -> num_array\n"
		""},
	 { (char *)"num_array___mul__", _wrap_num_array___mul__, METH_VARARGS, (char *)"\n"
		"__mul__(num_array _Right) -> num_array\n"
		"num_array___mul__(num_array self, real _Right) -> num_array\n"
		""},
	 { (char *)"num_array___div__", _wrap_num_array___div__, METH_VARARGS, (char *)"\n"
		"__div__(num_array _Right) -> num_array\n"
		"num_array___div__(num_array self, real _Right) -> num_array\n"
		""},
	 { (char *)"num_array___getitem__", _wrap_num_array___getitem__, METH_VARARGS, (char *)"num_array___getitem__(num_array self, int index) -> double"},
	 { (char *)"num_array___setitem__", _wrap_num_array___setitem__, METH_VARARGS, (char *)"num_array___setitem__(num_array self, int index, double value)"},
	 { (char *)"num_array___len__", (PyCFunction)_wrap_num_array___len__, METH_O, (char *)"num_array___len__(num_array self) -> int"},
	 { (char *)"num_array___radd__", _wrap_num_array___radd__, METH_VARARGS, (char *)"num_array___radd__(num_array self, real other) -> num_array"},
	 { (char *)"num_array___rsub__", _wrap_num_array___rsub__, METH_VARARGS, (char *)"num_array___rsub__(num_array self, real other) -> num_array"},
	 { (char *)"num_array___rmul__", _wrap_num_array___rmul__, METH_VARARGS, (char *)"num_array___rmul__(num_array self, real other) -> num_array"},
	 { (char *)"num_array___rdiv__", _wrap_num_array___rdiv__, METH_VARARGS, (char *)"num_array___rdiv__(num_array self, real other) -> num_array"},
	 { (char *)"num_array_swigregister", num_array_swigregister, METH_VARARGS, NULL},
	 { (char *)"num_array_swiginit", num_array_swiginit, METH_VARARGS, NULL},
	 { (char *)"__add__", _wrap___add__, METH_VARARGS, (char *)"__add__(real _Left, num_array _Right) -> num_array"},
	 { (char *)"__sub__", _wrap___sub__, METH_VARARGS, (char *)"__sub__(real _Left, num_array _Right) -> num_array"},
	 { (char *)"__mul__", _wrap___mul__, METH_VARARGS, (char *)"\n"
		"__mul__(double f, Time t) -> Time\n"
		"__mul__(int f, Time t) -> Time\n"
		"__mul__(real _Left, num_array _Right) -> num_array\n"
		""},
	 { (char *)"__div__", _wrap___div__, METH_VARARGS, (char *)"__div__(real _Left, num_array _Right) -> num_array"},
	 { (char *)"svVector_iterator", (PyCFunction)_wrap_svVector_iterator, METH_O, (char *)"\n"
		"svVector_iterator(svVector self) -> SwigPyIterator\n"
		"\n"
		"STL iterator class. \n"
		""},
	 { (char *)"svVector___nonzero__", (PyCFunction)_wrap_svVector___nonzero__, METH_O, (char *)"svVector___nonzero__(svVector self) -> bool"},
	 { (char *)"svVector___bool__", (PyCFunction)_wrap_svVector___bool__, METH_O, (char *)"svVector___bool__(svVector self) -> bool"},
	 { (char *)"svVector___len__", (PyCFunction)_wrap_svVector___len__, METH_O, (char *)"svVector___len__(svVector self) -> size_type"},
	 { (char *)"svVector_pop", (PyCFunction)_wrap_svVector_pop, METH_O, (char *)"svVector_pop(svVector self) -> value_type"},
	 { (char *)"svVector___getslice__", _wrap_svVector___getslice__, METH_VARARGS, (char *)"svVector___getslice__(svVector self, difference_type i, difference_type j) -> svVector"},
	 { (char *)"svVector___setslice__", _wrap_svVector___setslice__, METH_VARARGS, (char *)"\n"
		"svVector___setslice__(svVector self, difference_type i, difference_type j, \n"
		"    svVector v)\n"
		""},
	 { (char *)"svVector___delslice__", _wrap_svVector___delslice__, METH_VARARGS, (char *)"svVector___delslice__(svVector self, difference_type i, difference_type j)"},
	 { (char *)"svVector___delitem__", _wrap_svVector___delitem__, METH_VARARGS, (char *)"\n"
		"__delitem__(difference_type i)\n"
		"svVector___delitem__(svVector self, PySliceObject slice)\n"
		""},
	 { (char *)"svVector___getitem__", _wrap_svVector___getitem__, METH_VARARGS, (char *)"\n"
		"__getitem__(PySliceObject slice) -> svVector\n"
		"svVector___getitem__(svVector self, difference_type i) -> value_type\n"
		""},
	 { (char *)"svVector___setitem__", _wrap_svVector___setitem__, METH_VARARGS, (char *)"\n"
		"__setitem__(PySliceObject slice, svVector v)\n"
		"svVector___setitem__(svVector self, difference_type i, value_type x)\n"
		""},
	 { (char *)"svVector_append", _wrap_svVector_append, METH_VARARGS, (char *)"svVector_append(svVector self, value_type x)"},
	 { (char *)"svVector_empty", (PyCFunction)_wrap_svVector_empty, METH_O, (char *)"svVector_empty(svVector self) -> bool"},
	 { (char *)"svVector_size", (PyCFunction)_wrap_svVector_size, METH_O, (char *)"svVector_size(svVector self) -> size_type"},
	 { (char *)"svVector_clear", (PyCFunction)_wrap_svVector_clear, METH_O, (char *)"svVector_clear(svVector self)"},
	 { (char *)"svVector_swap", _wrap_svVector_swap, METH_VARARGS, (char *)"svVector_swap(svVector self, svVector v)"},
	 { (char *)"svVector_get_allocator", (PyCFunction)_wrap_svVector_get_allocator, METH_O, (char *)"svVector_get_allocator(svVector self) -> allocator_type"},
	 { (char *)"svVector_begin", (PyCFunction)_wrap_svVector_begin, METH_O, (char *)"svVector_begin(svVector self) -> const_iterator"},
	 { (char *)"svVector_end", (PyCFunction)_wrap_svVector_end, METH_O, (char *)"svVector_end(svVector self) -> const_iterator"},
	 { (char *)"svVector_rbegin", (PyCFunction)_wrap_svVector_rbegin, METH_O, (char *)"svVector_rbegin(svVector self) -> const_reverse_iterator"},
	 { (char *)"svVector_rend", (PyCFunction)_wrap_svVector_rend, METH_O, (char *)"svVector_rend(svVector self) -> const_reverse_iterator"},
	 { (char *)"svVector_pop_back", (PyCFunction)_wrap_svVector_pop_back, METH_O, (char *)"svVector_pop_back(svVector self)"},
	 { (char *)"svVector_erase", _wrap_svVector_erase, METH_VARARGS, (char *)"\n"
		"erase(iterator pos) -> iterator\n"
		"svVector_erase(svVector self, iterator first, iterator last) -> iterator\n"
		""},
	 { (char *)"new_svVector", _wrap_new_svVector, METH_VARARGS, (char *)"\n"
		"svVector()\n"
		"svVector(svVector arg0)\n"
		"svVector(size_type size)\n"
		"new_svVector(size_type size, value_type value) -> svVector\n"
		""},
	 { (char *)"svVector_push_back", _wrap_svVector_push_back, METH_VARARGS, (char *)"svVector_push_back(svVector self, value_type x)"},
	 { (char *)"svVector_front", (PyCFunction)_wrap_svVector_front, METH_O, (char *)"svVector_front(svVector self) -> value_type"},
	 { (char *)"svVector_back", (PyCFunction)_wrap_svVector_back, METH_O, (char *)"svVector_back(svVector self) -> value_type"},
	 { (char *)"svVector_assign", _wrap_svVector_assign, METH_VARARGS, (char *)"svVector_assign(svVector self, size_type n, value_type x)"},
	 { (char *)"svVector_resize", _wrap_svVector_resize, METH_VARARGS, (char *)"\n"
		"resize(size_type new_size)\n"
		"svVector_resize(svVector self, size_type new_size, value_type x)\n"
		""},
	 { (char *)"svVector_insert", _wrap_svVector_insert, METH_VARARGS, (char *)"\n"
		"insert(iterator pos, value_type x) -> iterator\n"
		"svVector_insert(svVector self, iterator pos, size_type n, value_type x)\n"
		""},
	 { (char *)"svVector_reserve", _wrap_svVector_reserve, METH_VARARGS, (char *)"svVector_reserve(svVector self, size_type n)"},
	 { (char *)"svVector_capacity", (PyCFunction)_wrap_svVector_capacity, METH_O, (char *)"svVector_capacity(svVector self) -> size_type"},
	 { (char *)"delete_svVector", (PyCFunction)_wrap_delete_svVector, METH_O, (char *)"\n"
		"delete_svVector(svVector self)\n"
		"\n"
		"STL class. \n"
		""},
	 { (char *)"svVector_swigregister", svVector_swigregister, METH_VARARGS, NULL},
	 { (char *)"svVector_swiginit", svVector_swiginit, METH_VARARGS, NULL},
	 { (char *)"StateVariable_Derivate", _wrap_StateVariable_Derivate, METH_VARARGS, (char *)"\n"
		"StateVariable_Derivate(StateVariable self, Time time) -> real\n"
		"\n"
		"virtual\n"
		"real Derivate(const cmf::math::Time &time)=0\n"
		"\n"
		"Returns the derivate of the state variable at time time. \n"
		""},
	 { (char *)"StateVariable_StateIsChanged", (PyCFunction)_wrap_StateVariable_StateIsChanged, METH_O, (char *)"\n"
		"StateVariable_StateIsChanged(StateVariable self) -> bool\n"
		"\n"
		"bool\n"
		"StateIsChanged()\n"
		"\n"
		"Returns if the state was currently updated. \n"
		""},
	 { (char *)"StateVariable_state_set", _wrap_StateVariable_state_set, METH_VARARGS, (char *)"StateVariable_state_set(StateVariable self, real state)"},
	 { (char *)"StateVariable_state_get", (PyCFunction)_wrap_StateVariable_state_get, METH_O, (char *)"StateVariable_state_get(StateVariable self) -> real"},
	 { (char *)"delete_StateVariable", (PyCFunction)_wrap_delete_StateVariable, METH_O, (char *)"delete_StateVariable(StateVariable self)"},
	 { (char *)"StateVariable_swigregister", StateVariable_swigregister, METH_VARARGS, NULL},
	 { (char *)"StateVariableVector_use_OpenMP_set", _wrap_StateVariableVector_use_OpenMP_set, METH_VARARGS, (char *)"StateVariableVector_use_OpenMP_set(StateVariableVector self, bool use_OpenMP)"},
	 { (char *)"StateVariableVector_use_OpenMP_get", (PyCFunction)_wrap_StateVariableVector_use_OpenMP_get, METH_O, (char *)"StateVariableVector_use_OpenMP_get(StateVariableVector self) -> bool"},
	 { (char *)"StateVariableVector_CopyStates", _wrap_StateVariableVector_CopyStates, METH_VARARGS, (char *)"\n"
		"CopyStates(num_array destination)\n"
		"StateVariableVector_CopyStates(StateVariableVector self, real destination)\n"
		"\n"
		"void CopyStates(real *destination) const \n"
		""},
	 { (char *)"StateVariableVector_SetStates", _wrap_StateVariableVector_SetStates, METH_VARARGS, (char *)"\n"
		"SetStates(num_array newStates)\n"
		"StateVariableVector_SetStates(StateVariableVector self, real newStates)\n"
		"\n"
		"void SetStates(real *newStates) \n"
		""},
	 { (char *)"StateVariableVector___iadd__", _wrap_StateVariableVector___iadd__, METH_VARARGS, (char *)"StateVariableVector___iadd__(StateVariableVector self, num_array aVector) -> StateVariableVector"},
	 { (char *)"StateVariableVector_CopyDerivs", _wrap_StateVariableVector_CopyDerivs, METH_VARARGS, (char *)"\n"
		"CopyDerivs(Time time, num_array destination, real factor = 1)\n"
		"StateVariableVector_CopyDerivs(StateVariableVector self, Time time, real destination, \n"
		"    real factor = 1)\n"
		"\n"
		"void CopyDerivs(Time time, real *destination, real factor=1) const\n"
		"\n"
		"Copies the derivatives at time step \"time\" to an preallocated c\n"
		"array.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"time:   Time at which the derivatives should be calculated\n"
		"\n"
		"destination:  Allocated c array\n"
		"\n"
		"factor:  A factor that is multiplied to the derivate (e.g. unit\n"
		"conversion or integration length) \n"
		""},
	 { (char *)"StateVariableVector_GetStates", (PyCFunction)_wrap_StateVariableVector_GetStates, METH_O, (char *)"\n"
		"StateVariableVector_GetStates(StateVariableVector self) -> num_array\n"
		"\n"
		"num_array GetStates() const\n"
		"\n"
		"Returns the states in a numeric vector using :CopyStates, but is\n"
		"slower because of additional memory allocation. \n"
		""},
	 { (char *)"StateVariableVector_GetDerivs", _wrap_StateVariableVector_GetDerivs, METH_VARARGS, (char *)"\n"
		"StateVariableVector_GetDerivs(StateVariableVector self, Time time) -> num_array\n"
		"\n"
		"num_array GetDerivs(Time time) const\n"
		"\n"
		"Returns the derivatives at time step \"time\" in a numeric vector\n"
		"using :CopyDerivs, but is slower because of additional memory\n"
		"allocation. \n"
		""},
	 { (char *)"new_StateVariableVector", (PyCFunction)_wrap_new_StateVariableVector, METH_NOARGS, (char *)"\n"
		"new_StateVariableVector() -> StateVariableVector\n"
		"\n"
		"StateVariableVector() \n"
		""},
	 { (char *)"delete_StateVariableVector", (PyCFunction)_wrap_delete_StateVariableVector, METH_O, (char *)"delete_StateVariableVector(StateVariableVector self)"},
	 { (char *)"StateVariableVector_swigregister", StateVariableVector_swigregister, METH_VARARGS, NULL},
	 { (char *)"StateVariableVector_swiginit", StateVariableVector_swiginit, METH_VARARGS, NULL},
	 { (char *)"StateVariableOwner_AddStateVariables", _wrap_StateVariableOwner_AddStateVariables, METH_VARARGS, (char *)"\n"
		"StateVariableOwner_AddStateVariables(StateVariableOwner self, StateVariableVector vector)\n"
		"\n"
		"virtual void\n"
		"AddStateVariables(cmf::math::StateVariableVector &vector)=0\n"
		"\n"
		"Add the state variables, owned by an object derived from\n"
		"StateVariableOwner, to the given vector. \n"
		""},
	 { (char *)"delete_StateVariableOwner", (PyCFunction)_wrap_delete_StateVariableOwner, METH_O, (char *)"delete_StateVariableOwner(StateVariableOwner self)"},
	 { (char *)"StateVariableOwner_swigregister", StateVariableOwner_swigregister, METH_VARARGS, NULL},
	 { (char *)"Integrator_Tag_set", _wrap_Integrator_Tag_set, METH_VARARGS, (char *)"Integrator_Tag_set(Integrator self, char Tag)"},
	 { (char *)"Integrator_Tag_get", (PyCFunction)_wrap_Integrator_Tag_get, METH_O, (char *)"Integrator_Tag_get(Integrator self) -> char"},
	 { (char *)"Integrator_UseEulerAtTmin_set", _wrap_Integrator_UseEulerAtTmin_set, METH_VARARGS, (char *)"Integrator_UseEulerAtTmin_set(Integrator self, bool UseEulerAtTmin)"},
	 { (char *)"Integrator_UseEulerAtTmin_get", (PyCFunction)_wrap_Integrator_UseEulerAtTmin_get, METH_O, (char *)"Integrator_UseEulerAtTmin_get(Integrator self) -> bool"},
	 { (char *)"Integrator_use_OpenMP_set", _wrap_Integrator_use_OpenMP_set, METH_VARARGS, (char *)"Integrator_use_OpenMP_set(Integrator self, bool use_OpenMP)"},
	 { (char *)"Integrator_use_OpenMP_get", (PyCFunction)_wrap_Integrator_use_OpenMP_get, METH_O, (char *)"Integrator_use_OpenMP_get(Integrator self) -> bool"},
	 { (char *)"Integrator_count", (PyCFunction)_wrap_Integrator_count, METH_O, (char *)"\n"
		"Integrator_count(Integrator self) -> int\n"
		"\n"
		"int count()\n"
		"const\n"
		"\n"
		"returns the number of state variables \n"
		""},
	 { (char *)"Integrator_state", _wrap_Integrator_state, METH_VARARGS, (char *)"\n"
		"state(int position) -> real\n"
		"Integrator_state(Integrator self, int position, real newState)\n"
		"\n"
		"void state(int\n"
		"position, real newState)\n"
		"\n"
		"Simplifies the assessment of state variables. \n"
		""},
	 { (char *)"Integrator_AddStatesFromOwner", _wrap_Integrator_AddStatesFromOwner, METH_VARARGS, (char *)"\n"
		"Integrator_AddStatesFromOwner(Integrator self, StateVariableOwner stateOwner)\n"
		"\n"
		"virtual void AddStatesFromOwner(cmf::math::StateVariableOwner\n"
		"&stateOwner)\n"
		"\n"
		"Adds the state variables of a StateVariableOwner to the state\n"
		"variables of the solver. \n"
		""},
	 { (char *)"Integrator_AddState", _wrap_Integrator_AddState, METH_VARARGS, (char *)"\n"
		"Integrator_AddState(Integrator self, StateVariable statevar)\n"
		"\n"
		"virtual void\n"
		"AddState(cmf::math::StateVariable &statevar) \n"
		""},
	 { (char *)"Integrator_ModelTime", _wrap_Integrator_ModelTime, METH_VARARGS, (char *)"\n"
		"ModelTime() -> Time\n"
		"Integrator_ModelTime(Integrator self, Time val)\n"
		"\n"
		"void\n"
		"ModelTime(cmf::math::Time val)\n"
		"\n"
		"Sets the current model time. \n"
		""},
	 { (char *)"Integrator_TimeStep", (PyCFunction)_wrap_Integrator_TimeStep, METH_O, (char *)"\n"
		"Integrator_TimeStep(Integrator self) -> Time\n"
		"\n"
		"cmf::math::Time TimeStep() const\n"
		"\n"
		"Returns the last time step. \n"
		""},
	 { (char *)"Integrator_NextTimeStep", _wrap_Integrator_NextTimeStep, METH_VARARGS, (char *)"\n"
		"NextTimeStep() -> Time\n"
		"Integrator_NextTimeStep(Integrator self, Time val)\n"
		"\n"
		"void\n"
		"NextTimeStep(cmf::math::Time val)\n"
		"\n"
		"Sets the next time step width. \n"
		""},
	 { (char *)"Integrator_MinTimestep", (PyCFunction)_wrap_Integrator_MinTimestep, METH_O, (char *)"\n"
		"Integrator_MinTimestep(Integrator self) -> Time\n"
		"\n"
		"const\n"
		"cmf::math::Time MinTimestep() const\n"
		"\n"
		"Returns The minimal allowed time step length. \n"
		""},
	 { (char *)"Integrator_Iterations", (PyCFunction)_wrap_Integrator_Iterations, METH_O, (char *)"\n"
		"Integrator_Iterations(Integrator self) -> int\n"
		"\n"
		"int\n"
		"Iterations() const \n"
		""},
	 { (char *)"Integrator_ResetIterations", (PyCFunction)_wrap_Integrator_ResetIterations, METH_O, (char *)"\n"
		"Integrator_ResetIterations(Integrator self)\n"
		"\n"
		"void\n"
		"ResetIterations() \n"
		""},
	 { (char *)"Integrator_Reset", (PyCFunction)_wrap_Integrator_Reset, METH_O, (char *)"\n"
		"Integrator_Reset(Integrator self)\n"
		"\n"
		"virtual void\n"
		"Reset() \n"
		""},
	 { (char *)"Integrator_Copy", (PyCFunction)_wrap_Integrator_Copy, METH_O, (char *)"\n"
		"Integrator_Copy(Integrator self) -> Integrator\n"
		"\n"
		"virtual\n"
		"cmf::math::Integrator* Copy() const =0\n"
		"\n"
		"Returns a new Integrator, based on this (without the state variables),\n"
		"e.g. same type, epsilon, model time etc. \n"
		""},
	 { (char *)"Integrator_Integrate", _wrap_Integrator_Integrate, METH_VARARGS, (char *)"\n"
		"Integrate(Time MaxTime, Time TimeStep) -> int\n"
		"Integrator_Integrate(Integrator self, Time MaxTime) -> int\n"
		"\n"
		"int\n"
		"Integrate(cmf::math::Time MaxTime) \n"
		""},
	 { (char *)"Integrator_IntegrateUntil", _wrap_Integrator_IntegrateUntil, METH_VARARGS, (char *)"\n"
		"IntegrateUntil(Time MaxTime)\n"
		"Integrator_IntegrateUntil(Integrator self, Time MaxTime, Time TimeStep)\n"
		"\n"
		"void\n"
		"IntegrateUntil(cmf::math::Time MaxTime, cmf::math::Time TimeStep)\n"
		"\n"
		"Integrates the vector of state variables until MaxTime. \n"
		""},
	 { (char *)"delete_Integrator", (PyCFunction)_wrap_delete_Integrator, METH_O, (char *)"delete_Integrator(Integrator self)"},
	 { (char *)"Integrator_swigregister", Integrator_swigregister, METH_VARARGS, NULL},
	 { (char *)"BDF2_get_error_position", (PyCFunction)_wrap_BDF2_get_error_position, METH_O, (char *)"\n"
		"BDF2_get_error_position(BDF2 self) -> int\n"
		"\n"
		"int\n"
		"get_error_position() const \n"
		""},
	 { (char *)"new_BDF2", _wrap_new_BDF2, METH_VARARGS, (char *)"\n"
		"BDF2(StateVariableVector states, real epsilon = 1e-9, Time tStepMin = cmf::math::Time::Milliseconds(10))\n"
		"BDF2(real epsilon = 1e-9, Time tStepMin = cmf::math::Time::Milliseconds(10))\n"
		"BDF2(StateVariableOwner states, real epsilon = 1e-9, Time tStepMin = cmf::math::Time::Milliseconds(10))\n"
		"new_BDF2(Integrator templ) -> BDF2\n"
		"\n"
		"BDF2(const Integrator\n"
		"&templ) \n"
		""},
	 { (char *)"delete_BDF2", (PyCFunction)_wrap_delete_BDF2, METH_O, (char *)"delete_BDF2(BDF2 self)"},
	 { (char *)"BDF2_swigregister", BDF2_swigregister, METH_VARARGS, NULL},
	 { (char *)"BDF2_swiginit", BDF2_swiginit, METH_VARARGS, NULL},
	 { (char *)"new_ExplicitEuler_fixed", _wrap_new_ExplicitEuler_fixed, METH_VARARGS, (char *)"\n"
		"ExplicitEuler_fixed(StateVariableVector states, real epsilon = 1e-9, Time tStepMin = cmf::math::Time::Seconds(10))\n"
		"ExplicitEuler_fixed(StateVariableOwner states, real epsilon = 1e-9, Time tStepMin = cmf::math::Time::Seconds(10))\n"
		"ExplicitEuler_fixed(real epsilon = 1e-9, Time tStepMin = cmf::math::Time::Seconds(10))\n"
		"new_ExplicitEuler_fixed(Integrator copy) -> ExplicitEuler_fixed\n"
		"\n"
		"ExplicitEuler_fixed(const Integrator &copy)\n"
		"\n"
		"Copy constructor. \n"
		""},
	 { (char *)"delete_ExplicitEuler_fixed", (PyCFunction)_wrap_delete_ExplicitEuler_fixed, METH_O, (char *)"\n"
		"delete_ExplicitEuler_fixed(ExplicitEuler_fixed self)\n"
		"\n"
		"virtual\n"
		"~ExplicitEuler_fixed() \n"
		""},
	 { (char *)"ExplicitEuler_fixed_swigregister", ExplicitEuler_fixed_swigregister, METH_VARARGS, NULL},
	 { (char *)"ExplicitEuler_fixed_swiginit", ExplicitEuler_fixed_swiginit, METH_VARARGS, NULL},
	 { (char *)"PredictCorrectSimple_alpha_set", _wrap_PredictCorrectSimple_alpha_set, METH_VARARGS, (char *)"PredictCorrectSimple_alpha_set(PredictCorrectSimple self, real alpha)"},
	 { (char *)"PredictCorrectSimple_alpha_get", (PyCFunction)_wrap_PredictCorrectSimple_alpha_get, METH_O, (char *)"PredictCorrectSimple_alpha_get(PredictCorrectSimple self) -> real"},
	 { (char *)"new_PredictCorrectSimple", _wrap_new_PredictCorrectSimple, METH_VARARGS, (char *)"\n"
		"PredictCorrectSimple(StateVariableVector states, real Alpha)\n"
		"PredictCorrectSimple(StateVariableOwner states, real Alpha)\n"
		"PredictCorrectSimple(real Alpha = 0.5)\n"
		"new_PredictCorrectSimple(Integrator copy) -> PredictCorrectSimple\n"
		"\n"
		"PredictCorrectSimple(const Integrator &copy)\n"
		"\n"
		"Copy constructor. \n"
		""},
	 { (char *)"delete_PredictCorrectSimple", (PyCFunction)_wrap_delete_PredictCorrectSimple, METH_O, (char *)"delete_PredictCorrectSimple(PredictCorrectSimple self)"},
	 { (char *)"PredictCorrectSimple_swigregister", PredictCorrectSimple_swigregister, METH_VARARGS, NULL},
	 { (char *)"PredictCorrectSimple_swiginit", PredictCorrectSimple_swiginit, METH_VARARGS, NULL},
	 { (char *)"new_ImplicitEuler", _wrap_new_ImplicitEuler, METH_VARARGS, (char *)"\n"
		"ImplicitEuler(StateVariableOwner states, real epsilon = 1e-9, Time tStepMin = cmf::math::Time::Seconds(10))\n"
		"ImplicitEuler(real epsilon = 1e-9, Time tStepMin = cmf::math::Time::Seconds(10))\n"
		"new_ImplicitEuler(Integrator arg0) -> ImplicitEuler\n"
		"\n"
		"ImplicitEuler(const Integrator &)\n"
		"\n"
		"Copy constructor. \n"
		""},
	 { (char *)"delete_ImplicitEuler", (PyCFunction)_wrap_delete_ImplicitEuler, METH_O, (char *)"delete_ImplicitEuler(ImplicitEuler self)"},
	 { (char *)"ImplicitEuler_swigregister", ImplicitEuler_swigregister, METH_VARARGS, NULL},
	 { (char *)"ImplicitEuler_swiginit", ImplicitEuler_swiginit, METH_VARARGS, NULL},
	 { (char *)"new_RKFIntegrator", _wrap_new_RKFIntegrator, METH_VARARGS, (char *)"\n"
		"RKFIntegrator(StateVariableOwner states, real epsilon = 1e-9, Time tStepMin = cmf::math::Time::Seconds(10))\n"
		"RKFIntegrator(real epsilon = 1e-9, Time tStepMin = cmf::math::Time::Seconds(10))\n"
		"new_RKFIntegrator(Integrator forCopy) -> RKFIntegrator\n"
		"\n"
		"RKFIntegrator(const Integrator &forCopy)\n"
		"\n"
		"Copy constructor, does not copy. \n"
		""},
	 { (char *)"delete_RKFIntegrator", (PyCFunction)_wrap_delete_RKFIntegrator, METH_O, (char *)"delete_RKFIntegrator(RKFIntegrator self)"},
	 { (char *)"RKFIntegrator_swigregister", RKFIntegrator_swigregister, METH_VARARGS, NULL},
	 { (char *)"RKFIntegrator_swiginit", RKFIntegrator_swiginit, METH_VARARGS, NULL},
	 { (char *)"CVodeIntegrator_preconditioner_set", _wrap_CVodeIntegrator_preconditioner_set, METH_VARARGS, (char *)"CVodeIntegrator_preconditioner_set(CVodeIntegrator self, char preconditioner)"},
	 { (char *)"CVodeIntegrator_preconditioner_get", (PyCFunction)_wrap_CVodeIntegrator_preconditioner_get, METH_O, (char *)"CVodeIntegrator_preconditioner_get(CVodeIntegrator self) -> char"},
	 { (char *)"CVodeIntegrator_MaxNonLinearIterations_set", _wrap_CVodeIntegrator_MaxNonLinearIterations_set, METH_VARARGS, (char *)"CVodeIntegrator_MaxNonLinearIterations_set(CVodeIntegrator self, int MaxNonLinearIterations)"},
	 { (char *)"CVodeIntegrator_MaxNonLinearIterations_get", (PyCFunction)_wrap_CVodeIntegrator_MaxNonLinearIterations_get, METH_O, (char *)"CVodeIntegrator_MaxNonLinearIterations_get(CVodeIntegrator self) -> int"},
	 { (char *)"CVodeIntegrator_MaxConvergenceFailures_set", _wrap_CVodeIntegrator_MaxConvergenceFailures_set, METH_VARARGS, (char *)"CVodeIntegrator_MaxConvergenceFailures_set(CVodeIntegrator self, int MaxConvergenceFailures)"},
	 { (char *)"CVodeIntegrator_MaxConvergenceFailures_get", (PyCFunction)_wrap_CVodeIntegrator_MaxConvergenceFailures_get, METH_O, (char *)"CVodeIntegrator_MaxConvergenceFailures_get(CVodeIntegrator self) -> int"},
	 { (char *)"CVodeIntegrator_MaxErrorTestFailures_set", _wrap_CVodeIntegrator_MaxErrorTestFailures_set, METH_VARARGS, (char *)"CVodeIntegrator_MaxErrorTestFailures_set(CVodeIntegrator self, int MaxErrorTestFailures)"},
	 { (char *)"CVodeIntegrator_MaxErrorTestFailures_get", (PyCFunction)_wrap_CVodeIntegrator_MaxErrorTestFailures_get, METH_O, (char *)"CVodeIntegrator_MaxErrorTestFailures_get(CVodeIntegrator self) -> int"},
	 { (char *)"CVodeIntegrator_maxl_set", _wrap_CVodeIntegrator_maxl_set, METH_VARARGS, (char *)"CVodeIntegrator_maxl_set(CVodeIntegrator self, int maxl)"},
	 { (char *)"CVodeIntegrator_maxl_get", (PyCFunction)_wrap_CVodeIntegrator_maxl_get, METH_O, (char *)"CVodeIntegrator_maxl_get(CVodeIntegrator self) -> int"},
	 { (char *)"CVodeIntegrator_LinearSolver_set", _wrap_CVodeIntegrator_LinearSolver_set, METH_VARARGS, (char *)"CVodeIntegrator_LinearSolver_set(CVodeIntegrator self, int LinearSolver)"},
	 { (char *)"CVodeIntegrator_LinearSolver_get", (PyCFunction)_wrap_CVodeIntegrator_LinearSolver_get, METH_O, (char *)"CVodeIntegrator_LinearSolver_get(CVodeIntegrator self) -> int"},
	 { (char *)"CVodeIntegrator_MaxOrder_set", _wrap_CVodeIntegrator_MaxOrder_set, METH_VARARGS, (char *)"CVodeIntegrator_MaxOrder_set(CVodeIntegrator self, int MaxOrder)"},
	 { (char *)"CVodeIntegrator_MaxOrder_get", (PyCFunction)_wrap_CVodeIntegrator_MaxOrder_get, METH_O, (char *)"CVodeIntegrator_MaxOrder_get(CVodeIntegrator self) -> int"},
	 { (char *)"CVodeIntegrator_reinit_always_set", _wrap_CVodeIntegrator_reinit_always_set, METH_VARARGS, (char *)"CVodeIntegrator_reinit_always_set(CVodeIntegrator self, bool reinit_always)"},
	 { (char *)"CVodeIntegrator_reinit_always_get", (PyCFunction)_wrap_CVodeIntegrator_reinit_always_get, METH_O, (char *)"CVodeIntegrator_reinit_always_get(CVodeIntegrator self) -> bool"},
	 { (char *)"CVodeIntegrator_max_step_set", _wrap_CVodeIntegrator_max_step_set, METH_VARARGS, (char *)"CVodeIntegrator_max_step_set(CVodeIntegrator self, Time max_step)"},
	 { (char *)"CVodeIntegrator_max_step_get", (PyCFunction)_wrap_CVodeIntegrator_max_step_get, METH_O, (char *)"CVodeIntegrator_max_step_get(CVodeIntegrator self) -> Time"},
	 { (char *)"CVodeIntegrator_GetOrder", (PyCFunction)_wrap_CVodeIntegrator_GetOrder, METH_O, (char *)"\n"
		"CVodeIntegrator_GetOrder(CVodeIntegrator self) -> int\n"
		"\n"
		"int\n"
		"GetOrder()\n"
		"\n"
		"Returns the last order of the solver used, may be smaller than\n"
		"MaxOrder due to the number of steps already taken or to fullfill\n"
		"stability limit. \n"
		""},
	 { (char *)"CVodeIntegrator_ReInit", _wrap_CVodeIntegrator_ReInit, METH_VARARGS, (char *)"\n"
		"CVodeIntegrator_ReInit(CVodeIntegrator self, Time initdt, real epsilon = 0)\n"
		"\n"
		"void\n"
		"ReInit(Time initdt, real epsilon=0) \n"
		""},
	 { (char *)"CVodeIntegrator_Initialize", (PyCFunction)_wrap_CVodeIntegrator_Initialize, METH_O, (char *)"\n"
		"CVodeIntegrator_Initialize(CVodeIntegrator self)\n"
		"\n"
		"void\n"
		"Initialize()\n"
		"\n"
		"Initializes the solver. Do not add or remove statevariables after\n"
		"initialization. \n"
		""},
	 { (char *)"new_CVodeIntegrator", _wrap_new_CVodeIntegrator, METH_VARARGS, (char *)"\n"
		"CVodeIntegrator(real epsilon = 1e-9, Time tStepMin = cmf::math::Time::Milliseconds(50))\n"
		"CVodeIntegrator(StateVariableOwner states, real epsilon = 1e-9, Time tStepMin = cmf::math::Time::Milliseconds(50))\n"
		"new_CVodeIntegrator(CVodeIntegrator templ) -> CVodeIntegrator\n"
		"\n"
		"CVodeIntegrator(const CVodeIntegrator &templ)\n"
		"\n"
		"Copy constructor, creates a new CVODE integrator similiar to the\n"
		"given, but without statevariables. \n"
		""},
	 { (char *)"CVodeIntegrator_Copy", (PyCFunction)_wrap_CVodeIntegrator_Copy, METH_O, (char *)"\n"
		"CVodeIntegrator_Copy(CVodeIntegrator self) -> CVodeIntegrator\n"
		"\n"
		"CVodeIntegrator* Copy() const\n"
		"\n"
		"Returns a new Integrator, based on this (without the state variables),\n"
		"e.g. same type, epsilon, model time etc. \n"
		""},
	 { (char *)"delete_CVodeIntegrator", (PyCFunction)_wrap_delete_CVodeIntegrator, METH_O, (char *)"\n"
		"delete_CVodeIntegrator(CVodeIntegrator self)\n"
		"\n"
		"virtual ~CVodeIntegrator() \n"
		""},
	 { (char *)"CVodeIntegrator_swigregister", CVodeIntegrator_swigregister, METH_VARARGS, NULL},
	 { (char *)"CVodeIntegrator_swiginit", CVodeIntegrator_swiginit, METH_VARARGS, NULL},
	 { (char *)"MultiIntegrator_Copy", (PyCFunction)_wrap_MultiIntegrator_Copy, METH_O, (char *)"\n"
		"MultiIntegrator_Copy(MultiIntegrator self) -> MultiIntegrator\n"
		"\n"
		"virtual\n"
		"cmf::math::MultiIntegrator* Copy() const\n"
		"\n"
		"Returns a new Integrator, based on this (without the state variables),\n"
		"e.g. same type, epsilon, model time etc. \n"
		""},
	 { (char *)"MultiIntegrator_add_states_to_integrator", _wrap_MultiIntegrator_add_states_to_integrator, METH_VARARGS, (char *)"\n"
		"MultiIntegrator_add_states_to_integrator(MultiIntegrator self, StateVariableOwner stateOwner, \n"
		"    int integrator_position)\n"
		"\n"
		"void\n"
		"add_states_to_integrator(cmf::math::StateVariableOwner &stateOwner,\n"
		"int integrator_position) \n"
		""},
	 { (char *)"new_MultiIntegrator", _wrap_new_MultiIntegrator, METH_VARARGS, (char *)"\n"
		"new_MultiIntegrator(Integrator template_integrator, int count) -> MultiIntegrator\n"
		"\n"
		"MultiIntegrator(const cmf::math::Integrator &template_integrator, int\n"
		"count) \n"
		""},
	 { (char *)"delete_MultiIntegrator", (PyCFunction)_wrap_delete_MultiIntegrator, METH_O, (char *)"delete_MultiIntegrator(MultiIntegrator self)"},
	 { (char *)"MultiIntegrator_swigregister", MultiIntegrator_swigregister, METH_VARARGS, NULL},
	 { (char *)"MultiIntegrator_swiginit", MultiIntegrator_swiginit, METH_VARARGS, NULL},
	 { (char *)"new_solute", (PyCFunction)_wrap_new_solute, METH_O, (char *)"\n"
		"new_solute(solute copy) -> solute\n"
		"\n"
		"solute(const\n"
		"solute &copy) \n"
		""},
	 { (char *)"solute___eq__", _wrap_solute___eq__, METH_VARARGS, (char *)"solute___eq__(solute self, solute cmp) -> bool"},
	 { (char *)"solute___lt__", _wrap_solute___lt__, METH_VARARGS, (char *)"solute___lt__(solute self, solute cmp) -> bool"},
	 { (char *)"solute___gt__", _wrap_solute___gt__, METH_VARARGS, (char *)"solute___gt__(solute self, solute cmp) -> bool"},
	 { (char *)"solute___le__", _wrap_solute___le__, METH_VARARGS, (char *)"solute___le__(solute self, solute cmp) -> bool"},
	 { (char *)"solute___ge__", _wrap_solute___ge__, METH_VARARGS, (char *)"solute___ge__(solute self, solute cmp) -> bool"},
	 { (char *)"solute___ne__", _wrap_solute___ne__, METH_VARARGS, (char *)"solute___ne__(solute self, solute cmp) -> bool"},
	 { (char *)"solute_Name_set", _wrap_solute_Name_set, METH_VARARGS, (char *)"solute_Name_set(solute self, string Name)"},
	 { (char *)"solute_Name_get", (PyCFunction)_wrap_solute_Name_get, METH_O, (char *)"solute_Name_get(solute self) -> string"},
	 { (char *)"solute_Unit_set", _wrap_solute_Unit_set, METH_VARARGS, (char *)"solute_Unit_set(solute self, string Unit)"},
	 { (char *)"solute_Unit_get", (PyCFunction)_wrap_solute_Unit_get, METH_O, (char *)"solute_Unit_get(solute self) -> string"},
	 { (char *)"solute_Uptake_set", _wrap_solute_Uptake_set, METH_VARARGS, (char *)"solute_Uptake_set(solute self, double Uptake)"},
	 { (char *)"solute_Uptake_get", (PyCFunction)_wrap_solute_Uptake_get, METH_O, (char *)"solute_Uptake_get(solute self) -> double"},
	 { (char *)"solute_Id_get", (PyCFunction)_wrap_solute_Id_get, METH_O, (char *)"solute_Id_get(solute self) -> size_t"},
	 { (char *)"solute___repr__", (PyCFunction)_wrap_solute___repr__, METH_O, (char *)"solute___repr__(solute self) -> string"},
	 { (char *)"delete_solute", (PyCFunction)_wrap_delete_solute, METH_O, (char *)"delete_solute(solute self)"},
	 { (char *)"solute_swigregister", solute_swigregister, METH_VARARGS, NULL},
	 { (char *)"solute_swiginit", solute_swiginit, METH_VARARGS, NULL},
	 { (char *)"solute_vector_size", (PyCFunction)_wrap_solute_vector_size, METH_O, (char *)"\n"
		"solute_vector_size(solute_vector self) -> size_t\n"
		"\n"
		"size_t size()\n"
		"const \n"
		""},
	 { (char *)"new_solute_vector", (PyCFunction)_wrap_new_solute_vector, METH_O, (char *)"\n"
		"new_solute_vector(string str) -> solute_vector\n"
		"\n"
		"solute_vector(std::string str)\n"
		"\n"
		"Creates a solute vector from solute names, separated by whitespace.\n"
		"E.g. solutes=solute_vector(\"dO18 dH2\"). \n"
		""},
	 { (char *)"solute_vector_get_solute", _wrap_solute_vector_get_solute, METH_VARARGS, (char *)"\n"
		"solute_vector_get_solute(solute_vector self, int position) -> solute\n"
		"\n"
		"cmf::water::solute* get_solute(int position) \n"
		""},
	 { (char *)"solute_vector___getitem__", _wrap_solute_vector___getitem__, METH_VARARGS, (char *)"solute_vector___getitem__(solute_vector self, int i) -> solute"},
	 { (char *)"solute_vector___len__", (PyCFunction)_wrap_solute_vector___len__, METH_O, (char *)"solute_vector___len__(solute_vector self) -> size_t"},
	 { (char *)"delete_solute_vector", (PyCFunction)_wrap_delete_solute_vector, METH_O, (char *)"delete_solute_vector(solute_vector self)"},
	 { (char *)"solute_vector_swigregister", solute_vector_swigregister, METH_VARARGS, NULL},
	 { (char *)"solute_vector_swiginit", solute_vector_swiginit, METH_VARARGS, NULL},
	 { (char *)"SoluteTimeseries_conc", _wrap_SoluteTimeseries_conc, METH_VARARGS, (char *)"\n"
		"SoluteTimeseries_conc(SoluteTimeseries self, Time t, solute solute) -> real\n"
		"\n"
		"real\n"
		"conc(cmf::math::Time t, const cmf::water::solute &solute) const \n"
		""},
	 { (char *)"SoluteTimeseries_size", (PyCFunction)_wrap_SoluteTimeseries_size, METH_O, (char *)"\n"
		"SoluteTimeseries_size(SoluteTimeseries self) -> size_t\n"
		"\n"
		"size_t\n"
		"size() const\n"
		"\n"
		"Returns the number of solutes in the solution. \n"
		""},
	 { (char *)"new_SoluteTimeseries", _wrap_new_SoluteTimeseries, METH_VARARGS, (char *)"\n"
		"SoluteTimeseries()\n"
		"SoluteTimeseries(solute_vector solutes, Time begin, Time step)\n"
		"new_SoluteTimeseries(SoluteTimeseries sts) -> SoluteTimeseries\n"
		"\n"
		"SoluteTimeseries(const cmf::water::SoluteTimeseries &sts) \n"
		""},
	 { (char *)"SoluteTimeseries___getitem__", _wrap_SoluteTimeseries___getitem__, METH_VARARGS, (char *)"SoluteTimeseries___getitem__(SoluteTimeseries self, solute solute) -> timeseries"},
	 { (char *)"SoluteTimeseries___setitem__", _wrap_SoluteTimeseries___setitem__, METH_VARARGS, (char *)"SoluteTimeseries___setitem__(SoluteTimeseries self, solute solute, timeseries concentration)"},
	 { (char *)"SoluteTimeseries___len__", (PyCFunction)_wrap_SoluteTimeseries___len__, METH_O, (char *)"SoluteTimeseries___len__(SoluteTimeseries self) -> size_t"},
	 { (char *)"delete_SoluteTimeseries", (PyCFunction)_wrap_delete_SoluteTimeseries, METH_O, (char *)"delete_SoluteTimeseries(SoluteTimeseries self)"},
	 { (char *)"SoluteTimeseries_swigregister", SoluteTimeseries_swigregister, METH_VARARGS, NULL},
	 { (char *)"SoluteTimeseries_swiginit", SoluteTimeseries_swiginit, METH_VARARGS, NULL},
	 { (char *)"SoluteStorage_decay_set", _wrap_SoluteStorage_decay_set, METH_VARARGS, (char *)"SoluteStorage_decay_set(SoluteStorage self, real decay)"},
	 { (char *)"SoluteStorage_decay_get", (PyCFunction)_wrap_SoluteStorage_decay_get, METH_O, (char *)"SoluteStorage_decay_get(SoluteStorage self) -> real"},
	 { (char *)"SoluteStorage_source_set", _wrap_SoluteStorage_source_set, METH_VARARGS, (char *)"SoluteStorage_source_set(SoluteStorage self, real source)"},
	 { (char *)"SoluteStorage_source_get", (PyCFunction)_wrap_SoluteStorage_source_get, METH_O, (char *)"SoluteStorage_source_get(SoluteStorage self) -> real"},
	 { (char *)"SoluteStorage_Solute_get", (PyCFunction)_wrap_SoluteStorage_Solute_get, METH_O, (char *)"SoluteStorage_Solute_get(SoluteStorage self) -> solute"},
	 { (char *)"SoluteStorage_conc", (PyCFunction)_wrap_SoluteStorage_conc, METH_O, (char *)"\n"
		"SoluteStorage_conc(SoluteStorage self) -> real\n"
		"\n"
		"real conc()\n"
		"const\n"
		"\n"
		"Returns the concentration of the solute. \n"
		""},
	 { (char *)"SoluteStorage_SWIGSharedPtrUpcast", (PyCFunction)_wrap_SoluteStorage_SWIGSharedPtrUpcast, METH_O, (char *)"SoluteStorage_SWIGSharedPtrUpcast(__dummy_2__ swigSharedPtrUpcast) -> __dummy_0__"},
	 { (char *)"delete_SoluteStorage", (PyCFunction)_wrap_delete_SoluteStorage, METH_O, (char *)"delete_SoluteStorage(SoluteStorage self)"},
	 { (char *)"SoluteStorage_swigregister", SoluteStorage_swigregister, METH_VARARGS, NULL},
	 { (char *)"connection_vector_iterator", (PyCFunction)_wrap_connection_vector_iterator, METH_O, (char *)"\n"
		"connection_vector_iterator(connection_vector self) -> SwigPyIterator\n"
		"\n"
		"STL iterator class. \n"
		""},
	 { (char *)"connection_vector___nonzero__", (PyCFunction)_wrap_connection_vector___nonzero__, METH_O, (char *)"connection_vector___nonzero__(connection_vector self) -> bool"},
	 { (char *)"connection_vector___bool__", (PyCFunction)_wrap_connection_vector___bool__, METH_O, (char *)"connection_vector___bool__(connection_vector self) -> bool"},
	 { (char *)"connection_vector___len__", (PyCFunction)_wrap_connection_vector___len__, METH_O, (char *)"connection_vector___len__(connection_vector self) -> size_type"},
	 { (char *)"connection_vector_pop", (PyCFunction)_wrap_connection_vector_pop, METH_O, (char *)"connection_vector_pop(connection_vector self) -> value_type"},
	 { (char *)"connection_vector___getslice__", _wrap_connection_vector___getslice__, METH_VARARGS, (char *)"connection_vector___getslice__(connection_vector self, difference_type i, difference_type j) -> connection_vector"},
	 { (char *)"connection_vector___setslice__", _wrap_connection_vector___setslice__, METH_VARARGS, (char *)"\n"
		"connection_vector___setslice__(connection_vector self, difference_type i, difference_type j, \n"
		"    connection_vector v)\n"
		""},
	 { (char *)"connection_vector___delslice__", _wrap_connection_vector___delslice__, METH_VARARGS, (char *)"connection_vector___delslice__(connection_vector self, difference_type i, difference_type j)"},
	 { (char *)"connection_vector___delitem__", _wrap_connection_vector___delitem__, METH_VARARGS, (char *)"\n"
		"__delitem__(difference_type i)\n"
		"connection_vector___delitem__(connection_vector self, PySliceObject slice)\n"
		""},
	 { (char *)"connection_vector___getitem__", _wrap_connection_vector___getitem__, METH_VARARGS, (char *)"\n"
		"__getitem__(PySliceObject slice) -> connection_vector\n"
		"connection_vector___getitem__(connection_vector self, difference_type i) -> value_type\n"
		""},
	 { (char *)"connection_vector___setitem__", _wrap_connection_vector___setitem__, METH_VARARGS, (char *)"\n"
		"__setitem__(PySliceObject slice, connection_vector v)\n"
		"connection_vector___setitem__(connection_vector self, difference_type i, value_type x)\n"
		""},
	 { (char *)"connection_vector_append", _wrap_connection_vector_append, METH_VARARGS, (char *)"connection_vector_append(connection_vector self, value_type x)"},
	 { (char *)"connection_vector_empty", (PyCFunction)_wrap_connection_vector_empty, METH_O, (char *)"connection_vector_empty(connection_vector self) -> bool"},
	 { (char *)"connection_vector_size", (PyCFunction)_wrap_connection_vector_size, METH_O, (char *)"connection_vector_size(connection_vector self) -> size_type"},
	 { (char *)"connection_vector_clear", (PyCFunction)_wrap_connection_vector_clear, METH_O, (char *)"connection_vector_clear(connection_vector self)"},
	 { (char *)"connection_vector_swap", _wrap_connection_vector_swap, METH_VARARGS, (char *)"connection_vector_swap(connection_vector self, connection_vector v)"},
	 { (char *)"connection_vector_get_allocator", (PyCFunction)_wrap_connection_vector_get_allocator, METH_O, (char *)"connection_vector_get_allocator(connection_vector self) -> allocator_type"},
	 { (char *)"connection_vector_begin", (PyCFunction)_wrap_connection_vector_begin, METH_O, (char *)"connection_vector_begin(connection_vector self) -> const_iterator"},
	 { (char *)"connection_vector_end", (PyCFunction)_wrap_connection_vector_end, METH_O, (char *)"connection_vector_end(connection_vector self) -> const_iterator"},
	 { (char *)"connection_vector_rbegin", (PyCFunction)_wrap_connection_vector_rbegin, METH_O, (char *)"connection_vector_rbegin(connection_vector self) -> const_reverse_iterator"},
	 { (char *)"connection_vector_rend", (PyCFunction)_wrap_connection_vector_rend, METH_O, (char *)"connection_vector_rend(connection_vector self) -> const_reverse_iterator"},
	 { (char *)"connection_vector_pop_back", (PyCFunction)_wrap_connection_vector_pop_back, METH_O, (char *)"connection_vector_pop_back(connection_vector self)"},
	 { (char *)"connection_vector_erase", _wrap_connection_vector_erase, METH_VARARGS, (char *)"\n"
		"erase(iterator pos) -> iterator\n"
		"connection_vector_erase(connection_vector self, iterator first, iterator last) -> iterator\n"
		""},
	 { (char *)"new_connection_vector", _wrap_new_connection_vector, METH_VARARGS, (char *)"\n"
		"connection_vector()\n"
		"connection_vector(connection_vector arg0)\n"
		"connection_vector(size_type size)\n"
		"new_connection_vector(size_type size, value_type value) -> connection_vector\n"
		""},
	 { (char *)"connection_vector_push_back", _wrap_connection_vector_push_back, METH_VARARGS, (char *)"connection_vector_push_back(connection_vector self, value_type x)"},
	 { (char *)"connection_vector_front", (PyCFunction)_wrap_connection_vector_front, METH_O, (char *)"connection_vector_front(connection_vector self) -> value_type"},
	 { (char *)"connection_vector_back", (PyCFunction)_wrap_connection_vector_back, METH_O, (char *)"connection_vector_back(connection_vector self) -> value_type"},
	 { (char *)"connection_vector_assign", _wrap_connection_vector_assign, METH_VARARGS, (char *)"connection_vector_assign(connection_vector self, size_type n, value_type x)"},
	 { (char *)"connection_vector_resize", _wrap_connection_vector_resize, METH_VARARGS, (char *)"\n"
		"resize(size_type new_size)\n"
		"connection_vector_resize(connection_vector self, size_type new_size, value_type x)\n"
		""},
	 { (char *)"connection_vector_insert", _wrap_connection_vector_insert, METH_VARARGS, (char *)"\n"
		"insert(iterator pos, value_type x) -> iterator\n"
		"connection_vector_insert(connection_vector self, iterator pos, size_type n, \n"
		"    value_type x)\n"
		""},
	 { (char *)"connection_vector_reserve", _wrap_connection_vector_reserve, METH_VARARGS, (char *)"connection_vector_reserve(connection_vector self, size_type n)"},
	 { (char *)"connection_vector_capacity", (PyCFunction)_wrap_connection_vector_capacity, METH_O, (char *)"connection_vector_capacity(connection_vector self) -> size_type"},
	 { (char *)"delete_connection_vector", (PyCFunction)_wrap_delete_connection_vector, METH_O, (char *)"\n"
		"delete_connection_vector(connection_vector self)\n"
		"\n"
		"STL class. \n"
		""},
	 { (char *)"connection_vector_swigregister", connection_vector_swigregister, METH_VARARGS, NULL},
	 { (char *)"connection_vector_swiginit", connection_vector_swiginit, METH_VARARGS, NULL},
	 { (char *)"connection_set_iterator", (PyCFunction)_wrap_connection_set_iterator, METH_O, (char *)"\n"
		"connection_set_iterator(connection_set self) -> SwigPyIterator\n"
		"\n"
		"STL iterator class. \n"
		""},
	 { (char *)"connection_set___nonzero__", (PyCFunction)_wrap_connection_set___nonzero__, METH_O, (char *)"connection_set___nonzero__(connection_set self) -> bool"},
	 { (char *)"connection_set___bool__", (PyCFunction)_wrap_connection_set___bool__, METH_O, (char *)"connection_set___bool__(connection_set self) -> bool"},
	 { (char *)"connection_set___len__", (PyCFunction)_wrap_connection_set___len__, METH_O, (char *)"connection_set___len__(connection_set self) -> size_type"},
	 { (char *)"connection_set_append", _wrap_connection_set_append, METH_VARARGS, (char *)"connection_set_append(connection_set self, value_type x)"},
	 { (char *)"connection_set___contains__", _wrap_connection_set___contains__, METH_VARARGS, (char *)"connection_set___contains__(connection_set self, value_type x) -> bool"},
	 { (char *)"connection_set___getitem__", _wrap_connection_set___getitem__, METH_VARARGS, (char *)"connection_set___getitem__(connection_set self, difference_type i) -> value_type"},
	 { (char *)"new_connection_set", _wrap_new_connection_set, METH_VARARGS, (char *)"\n"
		"connection_set(std::less<(p.cmf::water::flux_connection)> arg0)\n"
		"connection_set()\n"
		"new_connection_set(connection_set arg0) -> connection_set\n"
		""},
	 { (char *)"connection_set_empty", (PyCFunction)_wrap_connection_set_empty, METH_O, (char *)"connection_set_empty(connection_set self) -> bool"},
	 { (char *)"connection_set_size", (PyCFunction)_wrap_connection_set_size, METH_O, (char *)"connection_set_size(connection_set self) -> size_type"},
	 { (char *)"connection_set_clear", (PyCFunction)_wrap_connection_set_clear, METH_O, (char *)"connection_set_clear(connection_set self)"},
	 { (char *)"connection_set_swap", _wrap_connection_set_swap, METH_VARARGS, (char *)"connection_set_swap(connection_set self, connection_set v)"},
	 { (char *)"connection_set_count", _wrap_connection_set_count, METH_VARARGS, (char *)"connection_set_count(connection_set self, key_type x) -> size_type"},
	 { (char *)"connection_set_begin", (PyCFunction)_wrap_connection_set_begin, METH_O, (char *)"connection_set_begin(connection_set self) -> iterator"},
	 { (char *)"connection_set_end", (PyCFunction)_wrap_connection_set_end, METH_O, (char *)"connection_set_end(connection_set self) -> iterator"},
	 { (char *)"connection_set_rbegin", (PyCFunction)_wrap_connection_set_rbegin, METH_O, (char *)"connection_set_rbegin(connection_set self) -> reverse_iterator"},
	 { (char *)"connection_set_rend", (PyCFunction)_wrap_connection_set_rend, METH_O, (char *)"connection_set_rend(connection_set self) -> reverse_iterator"},
	 { (char *)"connection_set_erase", _wrap_connection_set_erase, METH_VARARGS, (char *)"\n"
		"erase(key_type x) -> size_type\n"
		"erase(iterator pos)\n"
		"connection_set_erase(connection_set self, iterator first, iterator last)\n"
		""},
	 { (char *)"connection_set_find", _wrap_connection_set_find, METH_VARARGS, (char *)"connection_set_find(connection_set self, key_type x) -> iterator"},
	 { (char *)"connection_set_lower_bound", _wrap_connection_set_lower_bound, METH_VARARGS, (char *)"connection_set_lower_bound(connection_set self, key_type x) -> iterator"},
	 { (char *)"connection_set_upper_bound", _wrap_connection_set_upper_bound, METH_VARARGS, (char *)"connection_set_upper_bound(connection_set self, key_type x) -> iterator"},
	 { (char *)"connection_set_equal_range", _wrap_connection_set_equal_range, METH_VARARGS, (char *)"connection_set_equal_range(connection_set self, key_type x) -> std::pair<(std::set<(p.cmf::water::flux_connection)>::iterator,std::set<(p.cmf::water::flux_connection)>::iterator)>"},
	 { (char *)"connection_set_insert", _wrap_connection_set_insert, METH_VARARGS, (char *)"connection_set_insert(connection_set self, value_type __x) -> std::pair<(std::set<(p.cmf::water::flux_connection)>::iterator,bool)>"},
	 { (char *)"delete_connection_set", (PyCFunction)_wrap_delete_connection_set, METH_O, (char *)"\n"
		"delete_connection_set(connection_set self)\n"
		"\n"
		"STL class. \n"
		""},
	 { (char *)"connection_set_swigregister", connection_set_swigregister, METH_VARARGS, NULL},
	 { (char *)"connection_set_swiginit", connection_set_swiginit, METH_VARARGS, NULL},
	 { (char *)"flux_node_project", (PyCFunction)_wrap_flux_node_project, METH_O, (char *)"\n"
		"flux_node_project(flux_node self) -> project\n"
		"\n"
		"const\n"
		"cmf::project& project() const\n"
		"\n"
		"Returns the project, this node is part of. \n"
		""},
	 { (char *)"flux_node_node_id_get", (PyCFunction)_wrap_flux_node_node_id_get, METH_O, (char *)"flux_node_node_id_get(flux_node self) -> int"},
	 { (char *)"flux_node_is_storage", (PyCFunction)_wrap_flux_node_is_storage, METH_O, (char *)"\n"
		"flux_node_is_storage(flux_node self) -> bool\n"
		"\n"
		"virtual\n"
		"bool is_storage() const\n"
		"\n"
		"true, if this is a waterstorage \n"
		""},
	 { (char *)"flux_node_Name_set", _wrap_flux_node_Name_set, METH_VARARGS, (char *)"flux_node_Name_set(flux_node self, string Name)"},
	 { (char *)"flux_node_Name_get", (PyCFunction)_wrap_flux_node_Name_get, METH_O, (char *)"flux_node_Name_get(flux_node self) -> string"},
	 { (char *)"flux_node_to_string", (PyCFunction)_wrap_flux_node_to_string, METH_O, (char *)"\n"
		"flux_node_to_string(flux_node self) -> string\n"
		"\n"
		"virtual\n"
		"std::string to_string() const \n"
		""},
	 { (char *)"delete_flux_node", (PyCFunction)_wrap_delete_flux_node, METH_O, (char *)"\n"
		"delete_flux_node(flux_node self)\n"
		"\n"
		"virtual\n"
		"~flux_node()\n"
		"\n"
		"The destructor deletes all connections. \n"
		""},
	 { (char *)"flux_node___eq__", _wrap_flux_node___eq__, METH_VARARGS, (char *)"flux_node___eq__(flux_node self, flux_node other) -> bool"},
	 { (char *)"flux_node_RecalcFluxes", _wrap_flux_node_RecalcFluxes, METH_VARARGS, (char *)"\n"
		"flux_node_RecalcFluxes(flux_node self, Time t) -> bool\n"
		"\n"
		"virtual\n"
		"bool RecalcFluxes(cmf::math::Time t)\n"
		"\n"
		"Pure flux_nodes do not influence fluxes, therefore no recalculation of\n"
		"fluxes is required by flux_node. WaterStorage overrides this, since\n"
		"state changes require an update of the fluxes. \n"
		""},
	 { (char *)"flux_node_get_connection", _wrap_flux_node_get_connection, METH_VARARGS, (char *)"\n"
		"flux_node_get_connection(flux_node self, flux_node target) -> flux_connection\n"
		"\n"
		"cmf::water::flux_connection* get_connection(const\n"
		"cmf::water::flux_node &target)\n"
		"\n"
		"Returns the connection between this and target. \n"
		""},
	 { (char *)"flux_node_remove_connection", _wrap_flux_node_remove_connection, METH_VARARGS, (char *)"\n"
		"flux_node_remove_connection(flux_node self, ptr To) -> bool\n"
		"\n"
		"bool\n"
		"remove_connection(cmf::water::flux_node::ptr To)\n"
		"\n"
		"Remove the connection. \n"
		""},
	 { (char *)"flux_node_flux_to", _wrap_flux_node_flux_to, METH_VARARGS, (char *)"\n"
		"flux_node_flux_to(flux_node self, flux_node target, Time t) -> real\n"
		"\n"
		"real\n"
		"flux_to(const cmf::water::flux_node &target, cmf::math::Time t)\n"
		"\n"
		"Returns the actual flux between this and target (positive sign means\n"
		"\"from target into this\"). \n"
		""},
	 { (char *)"flux_node_flux3d_to", _wrap_flux_node_flux3d_to, METH_VARARGS, (char *)"\n"
		"flux_node_flux3d_to(flux_node self, flux_node target, Time t) -> point\n"
		"\n"
		"cmf::geometry::point flux3d_to(const cmf::water::flux_node &target,\n"
		"cmf::math::Time t) \n"
		""},
	 { (char *)"flux_node_get_3d_flux", _wrap_flux_node_get_3d_flux, METH_VARARGS, (char *)"\n"
		"flux_node_get_3d_flux(flux_node self, Time t) -> point\n"
		"\n"
		"cmf::geometry::point get_3d_flux(cmf::math::Time t) \n"
		""},
	 { (char *)"flux_node_water_balance", _wrap_flux_node_water_balance, METH_VARARGS, (char *)"\n"
		"flux_node_water_balance(flux_node self, Time t, flux_connection Without = None) -> real\n"
		"\n"
		"real\n"
		"water_balance(cmf::math::Time t, const flux_connection *Without=0)\n"
		"const\n"
		"\n"
		"Returns the sum of all fluxes (positive and negative) at time t.\n"
		"Single fluxes can be excluded from the calculation.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"t:  Time of the query\n"
		"\n"
		"Without:  A flux_connection that is excluded from the water_balance\n"
		"(e.g. to prevent closed circuits) \n"
		""},
	 { (char *)"flux_node_conc", _wrap_flux_node_conc, METH_VARARGS, (char *)"\n"
		"flux_node_conc(flux_node self, Time t, solute solute) -> real\n"
		"\n"
		"virtual real\n"
		"conc(cmf::math::Time t, const cmf::water::solute &solute) const\n"
		"\n"
		"Returns the water quality of the flux_node, if it is not overridden\n"
		"this is the mix of the incoming fluxes. \n"
		""},
	 { (char *)"flux_node_Location_set", _wrap_flux_node_Location_set, METH_VARARGS, (char *)"flux_node_Location_set(flux_node self, point Location)"},
	 { (char *)"flux_node_Location_get", (PyCFunction)_wrap_flux_node_Location_get, METH_O, (char *)"flux_node_Location_get(flux_node self) -> point"},
	 { (char *)"flux_node_is_empty", (PyCFunction)_wrap_flux_node_is_empty, METH_O, (char *)"\n"
		"flux_node_is_empty(flux_node self) -> bool\n"
		"\n"
		"virtual bool\n"
		"is_empty() const \n"
		""},
	 { (char *)"new_flux_node", _wrap_new_flux_node, METH_VARARGS, (char *)"\n"
		"new_flux_node(project _project, point location = cmf::geometry::point()) -> flux_node\n"
		"\n"
		"flux_node(const cmf::project &_project, cmf::geometry::point\n"
		"location=cmf::geometry::point()) \n"
		""},
	 { (char *)"flux_node_SWIGSharedPtrUpcast", (PyCFunction)_wrap_flux_node_SWIGSharedPtrUpcast, METH_O, (char *)"flux_node_SWIGSharedPtrUpcast(__dummy_4__ swigSharedPtrUpcast) -> std::tr1::shared_ptr<(cmf::geometry::Locatable)>"},
	 { (char *)"flux_node_potential_set", _wrap_flux_node_potential_set, METH_VARARGS, (char *)"flux_node_potential_set(flux_node self, real potential)"},
	 { (char *)"flux_node_potential_get", (PyCFunction)_wrap_flux_node_potential_get, METH_O, (char *)"flux_node_potential_get(flux_node self) -> real"},
	 { (char *)"flux_node_connections_get", (PyCFunction)_wrap_flux_node_connections_get, METH_O, (char *)"flux_node_connections_get(flux_node self) -> connection_vector"},
	 { (char *)"flux_node_swigregister", flux_node_swigregister, METH_VARARGS, NULL},
	 { (char *)"flux_node_swiginit", flux_node_swiginit, METH_VARARGS, NULL},
	 { (char *)"count_node_references", (PyCFunction)_wrap_count_node_references, METH_O, (char *)"\n"
		"count_node_references(ptr node) -> int\n"
		"\n"
		"int\n"
		"cmf::water::count_node_references(flux_node::ptr node) \n"
		""},
	 { (char *)"get_higher_node", _wrap_get_higher_node, METH_VARARGS, (char *)"\n"
		"get_higher_node(ptr node1, ptr node2) -> ptr\n"
		"\n"
		"flux_node::ptr\n"
		"cmf::water::get_higher_node(flux_node::ptr node1, flux_node::ptr\n"
		"node2) \n"
		""},
	 { (char *)"get_lower_node", _wrap_get_lower_node, METH_VARARGS, (char *)"\n"
		"get_lower_node(ptr node1, ptr node2) -> ptr\n"
		"\n"
		"flux_node::ptr\n"
		"cmf::water::get_lower_node(flux_node::ptr node1, flux_node::ptr node2)\n"
		"\n"
		""},
	 { (char *)"flux_connection_left_node", (PyCFunction)_wrap_flux_connection_left_node, METH_O, (char *)"\n"
		"flux_connection_left_node(flux_connection self) -> ptr\n"
		"\n"
		"flux_node::ptr left_node() const\n"
		"\n"
		"Returns the left node of this connection. \n"
		""},
	 { (char *)"flux_connection_right_node", (PyCFunction)_wrap_flux_connection_right_node, METH_O, (char *)"\n"
		"flux_connection_right_node(flux_connection self) -> ptr\n"
		"\n"
		"flux_node::ptr right_node() const\n"
		"\n"
		"returns the right node of this connection \n"
		""},
	 { (char *)"flux_connection_kill_me", (PyCFunction)_wrap_flux_connection_kill_me, METH_O, (char *)"\n"
		"flux_connection_kill_me(flux_connection self) -> bool\n"
		"\n"
		"bool\n"
		"kill_me()\n"
		"\n"
		"Deregisters this connection from its nodes. Returns true if only one\n"
		"reference is left. \n"
		""},
	 { (char *)"flux_connection_connection_id_get", (PyCFunction)_wrap_flux_connection_connection_id_get, METH_O, (char *)"flux_connection_connection_id_get(flux_connection self) -> int"},
	 { (char *)"flux_connection___eq__", _wrap_flux_connection___eq__, METH_VARARGS, (char *)"flux_connection___eq__(flux_connection self, flux_connection other) -> bool"},
	 { (char *)"flux_connection_get_target", _wrap_flux_connection_get_target, METH_VARARGS, (char *)"\n"
		"get_target(flux_node inquirer) -> ptr\n"
		"flux_connection_get_target(flux_connection self, int index) -> ptr\n"
		"\n"
		"flux_node::ptr get_target(int index) const\n"
		"\n"
		"With index 0, the left node is returned, with index 1 the right node\n"
		"of the connection. \n"
		""},
	 { (char *)"flux_connection_exchange_target", _wrap_flux_connection_exchange_target, METH_VARARGS, (char *)"\n"
		"flux_connection_exchange_target(flux_connection self, ptr oldtarget, ptr newTarget)\n"
		"\n"
		"void exchange_target(flux_node::ptr oldtarget, flux_node::ptr\n"
		"newTarget) \n"
		""},
	 { (char *)"flux_connection_q", _wrap_flux_connection_q, METH_VARARGS, (char *)"\n"
		"flux_connection_q(flux_connection self, flux_node inquirer, Time t) -> real\n"
		"\n"
		"real q(const\n"
		"flux_node &inquirer, cmf::math::Time t)\n"
		"\n"
		"Returns the current flux through a connection. Negative signs mean out\n"
		"of the inquirer, positive are inflows to the inquirer. \n"
		""},
	 { (char *)"flux_connection_conc", _wrap_flux_connection_conc, METH_VARARGS, (char *)"\n"
		"flux_connection_conc(flux_connection self, Time t, solute solute) -> real\n"
		"\n"
		"real\n"
		"conc(cmf::math::Time t, const cmf::water::solute &solute)\n"
		"\n"
		"Returns the concentration of the flux. If not overridden, it returns\n"
		"the concentration of the source of the flux (direction depending). \n"
		""},
	 { (char *)"flux_connection_type_get", (PyCFunction)_wrap_flux_connection_type_get, METH_O, (char *)"flux_connection_type_get(flux_connection self) -> string"},
	 { (char *)"flux_connection_to_string", (PyCFunction)_wrap_flux_connection_to_string, METH_O, (char *)"\n"
		"flux_connection_to_string(flux_connection self) -> string\n"
		"\n"
		"std::string to_string() const \n"
		""},
	 { (char *)"flux_connection_short_string", (PyCFunction)_wrap_flux_connection_short_string, METH_O, (char *)"\n"
		"flux_connection_short_string(flux_connection self) -> string\n"
		"\n"
		"std::string short_string() const \n"
		""},
	 { (char *)"delete_flux_connection", (PyCFunction)_wrap_delete_flux_connection, METH_O, (char *)"\n"
		"delete_flux_connection(flux_connection self)\n"
		"\n"
		"virtual ~flux_connection() \n"
		""},
	 { (char *)"flux_connection_tracer_filter_set", _wrap_flux_connection_tracer_filter_set, METH_VARARGS, (char *)"flux_connection_tracer_filter_set(flux_connection self, real tracer_filter)"},
	 { (char *)"flux_connection_tracer_filter_get", (PyCFunction)_wrap_flux_connection_tracer_filter_get, METH_O, (char *)"flux_connection_tracer_filter_get(flux_connection self) -> real"},
	 { (char *)"flux_connection_swigregister", flux_connection_swigregister, METH_VARARGS, NULL},
	 { (char *)"replace_node", _wrap_replace_node, METH_VARARGS, (char *)"\n"
		"replace_node(ptr oldnode, ptr newnode)\n"
		"\n"
		"void\n"
		"cmf::water::replace_node(cmf::water::flux_node::ptr oldnode,\n"
		"cmf::water::flux_node::ptr newnode) \n"
		""},
	 { (char *)"new_waterbalance_connection", _wrap_new_waterbalance_connection, METH_VARARGS, (char *)"\n"
		"new_waterbalance_connection(ptr source, ptr target) -> waterbalance_connection\n"
		"\n"
		"waterbalance_connection(flux_node::ptr source, flux_node::ptr target)\n"
		"\n"
		""},
	 { (char *)"delete_waterbalance_connection", (PyCFunction)_wrap_delete_waterbalance_connection, METH_O, (char *)"delete_waterbalance_connection(waterbalance_connection self)"},
	 { (char *)"waterbalance_connection_swigregister", waterbalance_connection_swigregister, METH_VARARGS, NULL},
	 { (char *)"waterbalance_connection_swiginit", waterbalance_connection_swiginit, METH_VARARGS, NULL},
	 { (char *)"linear_scale_displacement_set", _wrap_linear_scale_displacement_set, METH_VARARGS, (char *)"linear_scale_displacement_set(linear_scale self, real displacement)"},
	 { (char *)"linear_scale_displacement_get", (PyCFunction)_wrap_linear_scale_displacement_get, METH_O, (char *)"linear_scale_displacement_get(linear_scale self) -> real"},
	 { (char *)"linear_scale_slope_set", _wrap_linear_scale_slope_set, METH_VARARGS, (char *)"linear_scale_slope_set(linear_scale self, real slope)"},
	 { (char *)"linear_scale_slope_get", (PyCFunction)_wrap_linear_scale_slope_get, METH_O, (char *)"linear_scale_slope_get(linear_scale self) -> real"},
	 { (char *)"linear_scale___call__", _wrap_linear_scale___call__, METH_VARARGS, (char *)"linear_scale___call__(linear_scale self, real value) -> real"},
	 { (char *)"new_linear_scale", _wrap_new_linear_scale, METH_VARARGS, (char *)"\n"
		"new_linear_scale(real _slope = 1, real _displacement = 0) -> linear_scale\n"
		"\n"
		"linear_scale(real _slope=1, real _displacement=0)\n"
		"\n"
		"Creates a linear scale (by default it is a unity scale, $a=1; b=0$).\n"
		"\n"
		""},
	 { (char *)"delete_linear_scale", (PyCFunction)_wrap_delete_linear_scale, METH_O, (char *)"delete_linear_scale(linear_scale self)"},
	 { (char *)"linear_scale_swigregister", linear_scale_swigregister, METH_VARARGS, NULL},
	 { (char *)"linear_scale_swiginit", linear_scale_swiginit, METH_VARARGS, NULL},
	 { (char *)"DricheletBoundary_set_conc", _wrap_DricheletBoundary_set_conc, METH_VARARGS, (char *)"\n"
		"DricheletBoundary_set_conc(DricheletBoundary self, solute solute, double value)\n"
		"\n"
		"virtual void set_conc(const cmf::water::solute &solute, double value)\n"
		"\n"
		""},
	 { (char *)"DricheletBoundary_is_source_set", _wrap_DricheletBoundary_is_source_set, METH_VARARGS, (char *)"DricheletBoundary_is_source_set(DricheletBoundary self, bool is_source)"},
	 { (char *)"DricheletBoundary_is_source_get", (PyCFunction)_wrap_DricheletBoundary_is_source_get, METH_O, (char *)"DricheletBoundary_is_source_get(DricheletBoundary self) -> bool"},
	 { (char *)"DricheletBoundary_RecalcFluxes", _wrap_DricheletBoundary_RecalcFluxes, METH_VARARGS, (char *)"\n"
		"DricheletBoundary_RecalcFluxes(DricheletBoundary self, Time t) -> bool\n"
		"\n"
		"virtual bool RecalcFluxes(cmf::math::Time t)\n"
		"\n"
		"Pure flux_nodes do not influence fluxes, therefore no recalculation of\n"
		"fluxes is required by flux_node. WaterStorage overrides this, since\n"
		"state changes require an update of the fluxes. \n"
		""},
	 { (char *)"new_DricheletBoundary", _wrap_new_DricheletBoundary, METH_VARARGS, (char *)"\n"
		"new_DricheletBoundary(project _p, real potential, point Location = cmf::geometry::point()) -> DricheletBoundary\n"
		"\n"
		"DricheletBoundary(const cmf::project &_p, real potential,\n"
		"cmf::geometry::point Location=cmf::geometry::point()) \n"
		""},
	 { (char *)"DricheletBoundary_SWIGSharedPtrUpcast", (PyCFunction)_wrap_DricheletBoundary_SWIGSharedPtrUpcast, METH_O, (char *)"DricheletBoundary_SWIGSharedPtrUpcast(__dummy_8__ swigSharedPtrUpcast) -> __dummy_4__"},
	 { (char *)"delete_DricheletBoundary", (PyCFunction)_wrap_delete_DricheletBoundary, METH_O, (char *)"delete_DricheletBoundary(DricheletBoundary self)"},
	 { (char *)"DricheletBoundary_swigregister", DricheletBoundary_swigregister, METH_VARARGS, NULL},
	 { (char *)"DricheletBoundary_swiginit", DricheletBoundary_swiginit, METH_VARARGS, NULL},
	 { (char *)"NeumannBoundary_flux_set", _wrap_NeumannBoundary_flux_set, METH_VARARGS, (char *)"NeumannBoundary_flux_set(NeumannBoundary self, timeseries flux)"},
	 { (char *)"NeumannBoundary_flux_get", (PyCFunction)_wrap_NeumannBoundary_flux_get, METH_O, (char *)"NeumannBoundary_flux_get(NeumannBoundary self) -> timeseries"},
	 { (char *)"NeumannBoundary_flux_scale_set", _wrap_NeumannBoundary_flux_scale_set, METH_VARARGS, (char *)"NeumannBoundary_flux_scale_set(NeumannBoundary self, linear_scale flux_scale)"},
	 { (char *)"NeumannBoundary_flux_scale_get", (PyCFunction)_wrap_NeumannBoundary_flux_scale_get, METH_O, (char *)"NeumannBoundary_flux_scale_get(NeumannBoundary self) -> linear_scale"},
	 { (char *)"NeumannBoundary_concentration_set", _wrap_NeumannBoundary_concentration_set, METH_VARARGS, (char *)"NeumannBoundary_concentration_set(NeumannBoundary self, SoluteTimeseries concentration)"},
	 { (char *)"NeumannBoundary_concentration_get", (PyCFunction)_wrap_NeumannBoundary_concentration_get, METH_O, (char *)"NeumannBoundary_concentration_get(NeumannBoundary self) -> SoluteTimeseries"},
	 { (char *)"NeumannBoundary___call__", _wrap_NeumannBoundary___call__, METH_VARARGS, (char *)"NeumannBoundary___call__(NeumannBoundary self, Time t) -> real"},
	 { (char *)"NeumannBoundary_connect_to", _wrap_NeumannBoundary_connect_to, METH_VARARGS, (char *)"\n"
		"NeumannBoundary_connect_to(NeumannBoundary self, ptr target)\n"
		"\n"
		"void\n"
		"connect_to(cmf::water::flux_node::ptr target) \n"
		""},
	 { (char *)"new_NeumannBoundary", _wrap_new_NeumannBoundary, METH_VARARGS, (char *)"\n"
		"NeumannBoundary(project _project, timeseries _flux, SoluteTimeseries _concentration = cmf::water::SoluteTimeseries(), \n"
		"    point loc = cmf::geometry::point())\n"
		"new_NeumannBoundary(project _project, point loc = cmf::geometry::point()) -> NeumannBoundary\n"
		"\n"
		"NeumannBoundary(const cmf::project &_project, cmf::geometry::point\n"
		"loc=cmf::geometry::point()) \n"
		""},
	 { (char *)"NeumannBoundary_create", (PyCFunction)_wrap_NeumannBoundary_create, METH_O, (char *)"NeumannBoundary_create(ptr target) -> ptr"},
	 { (char *)"NeumannBoundary_SWIGSharedPtrUpcast", (PyCFunction)_wrap_NeumannBoundary_SWIGSharedPtrUpcast, METH_O, (char *)"NeumannBoundary_SWIGSharedPtrUpcast(__dummy_10__ swigSharedPtrUpcast) -> __dummy_4__"},
	 { (char *)"delete_NeumannBoundary", (PyCFunction)_wrap_delete_NeumannBoundary, METH_O, (char *)"delete_NeumannBoundary(NeumannBoundary self)"},
	 { (char *)"NeumannBoundary_swigregister", NeumannBoundary_swigregister, METH_VARARGS, NULL},
	 { (char *)"NeumannBoundary_swiginit", NeumannBoundary_swiginit, METH_VARARGS, NULL},
	 { (char *)"new_NeumannFlux", _wrap_new_NeumannFlux, METH_VARARGS, (char *)"\n"
		"new_NeumannFlux(__dummy_10__ left, ptr right) -> NeumannFlux\n"
		"\n"
		"NeumannFlux(std::tr1::shared_ptr< NeumannBoundary > left,\n"
		"cmf::water::flux_node::ptr right) \n"
		""},
	 { (char *)"delete_NeumannFlux", (PyCFunction)_wrap_delete_NeumannFlux, METH_O, (char *)"delete_NeumannFlux(NeumannFlux self)"},
	 { (char *)"NeumannFlux_swigregister", NeumannFlux_swigregister, METH_VARARGS, NULL},
	 { (char *)"NeumannFlux_swiginit", NeumannFlux_swiginit, METH_VARARGS, NULL},
	 { (char *)"TechnicalFlux_MaxFlux_set", _wrap_TechnicalFlux_MaxFlux_set, METH_VARARGS, (char *)"TechnicalFlux_MaxFlux_set(TechnicalFlux self, real MaxFlux)"},
	 { (char *)"TechnicalFlux_MaxFlux_get", (PyCFunction)_wrap_TechnicalFlux_MaxFlux_get, METH_O, (char *)"TechnicalFlux_MaxFlux_get(TechnicalFlux self) -> real"},
	 { (char *)"TechnicalFlux_MinState_set", _wrap_TechnicalFlux_MinState_set, METH_VARARGS, (char *)"TechnicalFlux_MinState_set(TechnicalFlux self, real MinState)"},
	 { (char *)"TechnicalFlux_MinState_get", (PyCFunction)_wrap_TechnicalFlux_MinState_get, METH_O, (char *)"TechnicalFlux_MinState_get(TechnicalFlux self) -> real"},
	 { (char *)"TechnicalFlux_FluxDecreaseTime_set", _wrap_TechnicalFlux_FluxDecreaseTime_set, METH_VARARGS, (char *)"TechnicalFlux_FluxDecreaseTime_set(TechnicalFlux self, Time FluxDecreaseTime)"},
	 { (char *)"TechnicalFlux_FluxDecreaseTime_get", (PyCFunction)_wrap_TechnicalFlux_FluxDecreaseTime_get, METH_O, (char *)"TechnicalFlux_FluxDecreaseTime_get(TechnicalFlux self) -> Time"},
	 { (char *)"new_TechnicalFlux", _wrap_new_TechnicalFlux, METH_VARARGS, (char *)"\n"
		"new_TechnicalFlux(__dummy_14__ source, __dummy_4__ target, real maximum_flux, \n"
		"    real minimal_state = 0, Time flux_decrease_time = h) -> TechnicalFlux\n"
		"\n"
		"TechnicalFlux(std::tr1::shared_ptr< cmf::water::WaterStorage >\n"
		"&source, std::tr1::shared_ptr< cmf::water::flux_node > target, real\n"
		"maximum_flux, real minimal_state=0, cmf::math::Time\n"
		"flux_decrease_time=cmf::math::h)\n"
		"\n"
		"Produces a constant but changeable flux from a source to a target, if\n"
		"enough water is present in the source.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"source:  The source of the water\n"
		"\n"
		"target:  The target of the water\n"
		"\n"
		"maximum_flux:  The requested flux (see Formula in C++ documentation)\n"
		"\n"
		"minimal_state:  Minimal volume of stored water in source\n"
		"\n"
		"flux_decrease_time:  ( cmf::math::Time) \n"
		""},
	 { (char *)"delete_TechnicalFlux", (PyCFunction)_wrap_delete_TechnicalFlux, METH_O, (char *)"delete_TechnicalFlux(TechnicalFlux self)"},
	 { (char *)"TechnicalFlux_swigregister", TechnicalFlux_swigregister, METH_VARARGS, NULL},
	 { (char *)"TechnicalFlux_swiginit", TechnicalFlux_swiginit, METH_VARARGS, NULL},
	 { (char *)"new_WaterStorage", _wrap_new_WaterStorage, METH_VARARGS, (char *)"\n"
		"new_WaterStorage(project _project, double InitialState = 0) -> WaterStorage\n"
		"\n"
		"WaterStorage(const cmf::project &_project, double InitialState=0)\n"
		"\n"
		"creates a water storage (abstract class) o\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"_project:  The project the waterstorage belongs to\n"
		"\n"
		"InitialState:  Initial water content in m3 \n"
		""},
	 { (char *)"WaterStorage_from_node", (PyCFunction)_wrap_WaterStorage_from_node, METH_O, (char *)"WaterStorage_from_node(ptr node) -> __dummy_14__"},
	 { (char *)"WaterStorage_Solute", _wrap_WaterStorage_Solute, METH_VARARGS, (char *)"\n"
		"Solute(solute solute) -> SoluteStorage\n"
		"WaterStorage_Solute(WaterStorage self, solute solute) -> SoluteStorage\n"
		"\n"
		"const\n"
		"SoluteStorage& Solute(const cmf::water::solute &solute) const \n"
		""},
	 { (char *)"WaterStorage_conc", _wrap_WaterStorage_conc, METH_VARARGS, (char *)"\n"
		"conc(solute solute) -> real\n"
		"conc(Time t, solute solute) -> real\n"
		"WaterStorage_conc(WaterStorage self, solute solute, real NewConcetration)\n"
		"\n"
		"void\n"
		"conc(const cmf::water::solute &solute, real NewConcetration)\n"
		"\n"
		"Sets a new concentration. \n"
		""},
	 { (char *)"WaterStorage_cast", (PyCFunction)_wrap_WaterStorage_cast, METH_O, (char *)"WaterStorage_cast(__dummy_4__ node) -> __dummy_14__"},
	 { (char *)"WaterStorage_create", _wrap_WaterStorage_create, METH_VARARGS, (char *)"WaterStorage_create(project _project, real initial_state = 0.0) -> __dummy_14__"},
	 { (char *)"WaterStorage_SWIGSharedPtrUpcast", (PyCFunction)_wrap_WaterStorage_SWIGSharedPtrUpcast, METH_O, (char *)"WaterStorage_SWIGSharedPtrUpcast(__dummy_14__ swigSharedPtrUpcast) -> __dummy_4__"},
	 { (char *)"WaterStorage_volume_set", _wrap_WaterStorage_volume_set, METH_VARARGS, (char *)"WaterStorage_volume_set(WaterStorage self, real volume)"},
	 { (char *)"WaterStorage_volume_get", (PyCFunction)_wrap_WaterStorage_volume_get, METH_O, (char *)"WaterStorage_volume_get(WaterStorage self) -> real"},
	 { (char *)"delete_WaterStorage", (PyCFunction)_wrap_delete_WaterStorage, METH_O, (char *)"delete_WaterStorage(WaterStorage self)"},
	 { (char *)"WaterStorage_swigregister", WaterStorage_swigregister, METH_VARARGS, NULL},
	 { (char *)"WaterStorage_swiginit", WaterStorage_swiginit, METH_VARARGS, NULL},
	 { (char *)"storage_vector_iterator", (PyCFunction)_wrap_storage_vector_iterator, METH_O, (char *)"\n"
		"storage_vector_iterator(storage_vector self) -> SwigPyIterator\n"
		"\n"
		"STL iterator class. \n"
		""},
	 { (char *)"storage_vector___nonzero__", (PyCFunction)_wrap_storage_vector___nonzero__, METH_O, (char *)"storage_vector___nonzero__(storage_vector self) -> bool"},
	 { (char *)"storage_vector___bool__", (PyCFunction)_wrap_storage_vector___bool__, METH_O, (char *)"storage_vector___bool__(storage_vector self) -> bool"},
	 { (char *)"storage_vector___len__", (PyCFunction)_wrap_storage_vector___len__, METH_O, (char *)"storage_vector___len__(storage_vector self) -> std::vector<(std::tr1::shared_ptr<(cmf::water::WaterStorage)>)>::size_type"},
	 { (char *)"storage_vector_pop", (PyCFunction)_wrap_storage_vector_pop, METH_O, (char *)"storage_vector_pop(storage_vector self) -> std::vector<(std::tr1::shared_ptr<(cmf::water::WaterStorage)>)>::value_type"},
	 { (char *)"storage_vector___getslice__", _wrap_storage_vector___getslice__, METH_VARARGS, (char *)"\n"
		"storage_vector___getslice__(storage_vector self, std::vector<(std::tr1::shared_ptr<(cmf::water::WaterStorage)>)>::difference_type i, \n"
		"    std::vector<(std::tr1::shared_ptr<(cmf::water::WaterStorage)>)>::difference_type j) -> storage_vector\n"
		""},
	 { (char *)"storage_vector___setslice__", _wrap_storage_vector___setslice__, METH_VARARGS, (char *)"\n"
		"storage_vector___setslice__(storage_vector self, std::vector<(std::tr1::shared_ptr<(cmf::water::WaterStorage)>)>::difference_type i, \n"
		"    std::vector<(std::tr1::shared_ptr<(cmf::water::WaterStorage)>)>::difference_type j, \n"
		"    storage_vector v)\n"
		""},
	 { (char *)"storage_vector___delslice__", _wrap_storage_vector___delslice__, METH_VARARGS, (char *)"\n"
		"storage_vector___delslice__(storage_vector self, std::vector<(std::tr1::shared_ptr<(cmf::water::WaterStorage)>)>::difference_type i, \n"
		"    std::vector<(std::tr1::shared_ptr<(cmf::water::WaterStorage)>)>::difference_type j)\n"
		""},
	 { (char *)"storage_vector___delitem__", _wrap_storage_vector___delitem__, METH_VARARGS, (char *)"\n"
		"__delitem__(std::vector<(std::tr1::shared_ptr<(cmf::water::WaterStorage)>)>::difference_type i)\n"
		"storage_vector___delitem__(storage_vector self, PySliceObject slice)\n"
		""},
	 { (char *)"storage_vector___getitem__", _wrap_storage_vector___getitem__, METH_VARARGS, (char *)"\n"
		"__getitem__(PySliceObject slice) -> storage_vector\n"
		"storage_vector___getitem__(storage_vector self, std::vector<(std::tr1::shared_ptr<(cmf::water::WaterStorage)>)>::difference_type i) -> std::vector<(std::tr1::shared_ptr<(cmf::water::WaterStorage)>)>::value_type\n"
		""},
	 { (char *)"storage_vector___setitem__", _wrap_storage_vector___setitem__, METH_VARARGS, (char *)"\n"
		"__setitem__(PySliceObject slice, storage_vector v)\n"
		"storage_vector___setitem__(storage_vector self, std::vector<(std::tr1::shared_ptr<(cmf::water::WaterStorage)>)>::difference_type i, \n"
		"    std::vector<(std::tr1::shared_ptr<(cmf::water::WaterStorage)>)>::value_type x)\n"
		""},
	 { (char *)"storage_vector_append", _wrap_storage_vector_append, METH_VARARGS, (char *)"storage_vector_append(storage_vector self, std::vector<(std::tr1::shared_ptr<(cmf::water::WaterStorage)>)>::value_type x)"},
	 { (char *)"storage_vector_empty", (PyCFunction)_wrap_storage_vector_empty, METH_O, (char *)"storage_vector_empty(storage_vector self) -> bool"},
	 { (char *)"storage_vector_size", (PyCFunction)_wrap_storage_vector_size, METH_O, (char *)"storage_vector_size(storage_vector self) -> std::vector<(std::tr1::shared_ptr<(cmf::water::WaterStorage)>)>::size_type"},
	 { (char *)"storage_vector_clear", (PyCFunction)_wrap_storage_vector_clear, METH_O, (char *)"storage_vector_clear(storage_vector self)"},
	 { (char *)"storage_vector_swap", _wrap_storage_vector_swap, METH_VARARGS, (char *)"storage_vector_swap(storage_vector self, storage_vector v)"},
	 { (char *)"storage_vector_get_allocator", (PyCFunction)_wrap_storage_vector_get_allocator, METH_O, (char *)"storage_vector_get_allocator(storage_vector self) -> std::vector<(std::tr1::shared_ptr<(cmf::water::WaterStorage)>)>::allocator_type"},
	 { (char *)"storage_vector_begin", (PyCFunction)_wrap_storage_vector_begin, METH_O, (char *)"storage_vector_begin(storage_vector self) -> std::vector<(std::tr1::shared_ptr<(cmf::water::WaterStorage)>)>::const_iterator"},
	 { (char *)"storage_vector_end", (PyCFunction)_wrap_storage_vector_end, METH_O, (char *)"storage_vector_end(storage_vector self) -> std::vector<(std::tr1::shared_ptr<(cmf::water::WaterStorage)>)>::const_iterator"},
	 { (char *)"storage_vector_rbegin", (PyCFunction)_wrap_storage_vector_rbegin, METH_O, (char *)"storage_vector_rbegin(storage_vector self) -> std::vector<(std::tr1::shared_ptr<(cmf::water::WaterStorage)>)>::const_reverse_iterator"},
	 { (char *)"storage_vector_rend", (PyCFunction)_wrap_storage_vector_rend, METH_O, (char *)"storage_vector_rend(storage_vector self) -> std::vector<(std::tr1::shared_ptr<(cmf::water::WaterStorage)>)>::const_reverse_iterator"},
	 { (char *)"storage_vector_pop_back", (PyCFunction)_wrap_storage_vector_pop_back, METH_O, (char *)"storage_vector_pop_back(storage_vector self)"},
	 { (char *)"storage_vector_erase", _wrap_storage_vector_erase, METH_VARARGS, (char *)"\n"
		"erase(std::vector<(std::tr1::shared_ptr<(cmf::water::WaterStorage)>)>::iterator pos) -> std::vector<(std::tr1::shared_ptr<(cmf::water::WaterStorage)>)>::iterator\n"
		"storage_vector_erase(storage_vector self, std::vector<(std::tr1::shared_ptr<(cmf::water::WaterStorage)>)>::iterator first, \n"
		"    std::vector<(std::tr1::shared_ptr<(cmf::water::WaterStorage)>)>::iterator last) -> std::vector<(std::tr1::shared_ptr<(cmf::water::WaterStorage)>)>::iterator\n"
		""},
	 { (char *)"new_storage_vector", _wrap_new_storage_vector, METH_VARARGS, (char *)"\n"
		"storage_vector()\n"
		"storage_vector(storage_vector arg0)\n"
		"storage_vector(std::vector<(std::tr1::shared_ptr<(cmf::water::WaterStorage)>)>::size_type size)\n"
		"new_storage_vector(std::vector<(std::tr1::shared_ptr<(cmf::water::WaterStorage)>)>::size_type size, \n"
		"    std::vector<(std::tr1::shared_ptr<(cmf::water::WaterStorage)>)>::value_type value) -> storage_vector\n"
		""},
	 { (char *)"storage_vector_push_back", _wrap_storage_vector_push_back, METH_VARARGS, (char *)"storage_vector_push_back(storage_vector self, std::vector<(std::tr1::shared_ptr<(cmf::water::WaterStorage)>)>::value_type x)"},
	 { (char *)"storage_vector_front", (PyCFunction)_wrap_storage_vector_front, METH_O, (char *)"storage_vector_front(storage_vector self) -> std::vector<(std::tr1::shared_ptr<(cmf::water::WaterStorage)>)>::value_type"},
	 { (char *)"storage_vector_back", (PyCFunction)_wrap_storage_vector_back, METH_O, (char *)"storage_vector_back(storage_vector self) -> std::vector<(std::tr1::shared_ptr<(cmf::water::WaterStorage)>)>::value_type"},
	 { (char *)"storage_vector_assign", _wrap_storage_vector_assign, METH_VARARGS, (char *)"\n"
		"storage_vector_assign(storage_vector self, std::vector<(std::tr1::shared_ptr<(cmf::water::WaterStorage)>)>::size_type n, \n"
		"    std::vector<(std::tr1::shared_ptr<(cmf::water::WaterStorage)>)>::value_type x)\n"
		""},
	 { (char *)"storage_vector_resize", _wrap_storage_vector_resize, METH_VARARGS, (char *)"\n"
		"resize(std::vector<(std::tr1::shared_ptr<(cmf::water::WaterStorage)>)>::size_type new_size)\n"
		"storage_vector_resize(storage_vector self, std::vector<(std::tr1::shared_ptr<(cmf::water::WaterStorage)>)>::size_type new_size, \n"
		"    std::vector<(std::tr1::shared_ptr<(cmf::water::WaterStorage)>)>::value_type x)\n"
		""},
	 { (char *)"storage_vector_insert", _wrap_storage_vector_insert, METH_VARARGS, (char *)"\n"
		"insert(std::vector<(std::tr1::shared_ptr<(cmf::water::WaterStorage)>)>::iterator pos, \n"
		"    std::vector<(std::tr1::shared_ptr<(cmf::water::WaterStorage)>)>::value_type x) -> std::vector<(std::tr1::shared_ptr<(cmf::water::WaterStorage)>)>::iterator\n"
		"storage_vector_insert(storage_vector self, std::vector<(std::tr1::shared_ptr<(cmf::water::WaterStorage)>)>::iterator pos, \n"
		"    std::vector<(std::tr1::shared_ptr<(cmf::water::WaterStorage)>)>::size_type n, \n"
		"    std::vector<(std::tr1::shared_ptr<(cmf::water::WaterStorage)>)>::value_type x)\n"
		""},
	 { (char *)"storage_vector_reserve", _wrap_storage_vector_reserve, METH_VARARGS, (char *)"storage_vector_reserve(storage_vector self, std::vector<(std::tr1::shared_ptr<(cmf::water::WaterStorage)>)>::size_type n)"},
	 { (char *)"storage_vector_capacity", (PyCFunction)_wrap_storage_vector_capacity, METH_O, (char *)"storage_vector_capacity(storage_vector self) -> std::vector<(std::tr1::shared_ptr<(cmf::water::WaterStorage)>)>::size_type"},
	 { (char *)"delete_storage_vector", (PyCFunction)_wrap_delete_storage_vector, METH_O, (char *)"\n"
		"delete_storage_vector(storage_vector self)\n"
		"\n"
		"STL class. \n"
		""},
	 { (char *)"storage_vector_swigregister", storage_vector_swigregister, METH_VARARGS, NULL},
	 { (char *)"storage_vector_swiginit", storage_vector_swiginit, METH_VARARGS, NULL},
	 { (char *)"node_list_size", (PyCFunction)_wrap_node_list_size, METH_O, (char *)"\n"
		"node_list_size(node_list self) -> int\n"
		"\n"
		"int size() const\n"
		"\n"
		"The number of nodes. \n"
		""},
	 { (char *)"new_node_list", _wrap_new_node_list, METH_VARARGS, (char *)"\n"
		"node_list()\n"
		"new_node_list(node_list forcopy) -> node_list\n"
		"\n"
		"node_list(const node_list &forcopy)\n"
		"\n"
		"Copy the node_list. \n"
		""},
	 { (char *)"node_list___iadd__", _wrap_node_list___iadd__, METH_VARARGS, (char *)"node_list___iadd__(node_list self, node_list right) -> node_list"},
	 { (char *)"node_list___add__", _wrap_node_list___add__, METH_VARARGS, (char *)"node_list___add__(node_list self, node_list right) -> node_list"},
	 { (char *)"node_list_get", _wrap_node_list_get, METH_VARARGS, (char *)"\n"
		"get(int index) -> ptr\n"
		"node_list_get(node_list self, int begin, int end, int step = 1) -> node_list\n"
		"\n"
		"node_list get(int\n"
		"begin, int end, int step=1) const\n"
		"\n"
		"Returns a slice of the node_list. \n"
		""},
	 { (char *)"node_list_append", _wrap_node_list_append, METH_VARARGS, (char *)"\n"
		"node_list_append(node_list self, ptr node)\n"
		"\n"
		"void\n"
		"append(flux_node::ptr node)\n"
		"\n"
		"Adds a flux node to the list. \n"
		""},
	 { (char *)"node_list_global_water_balance", _wrap_node_list_global_water_balance, METH_VARARGS, (char *)"\n"
		"node_list_global_water_balance(node_list self, Time t) -> real\n"
		"\n"
		"real global_water_balance(cmf::math::Time t) const\n"
		"\n"
		"Returns the sum of the water balances of the nodes (see Formula in C++\n"
		"documentation) .\n"
		"\n"
		"Replaces slow Python code like: \n"
		""},
	 { (char *)"node_list_water_balance", _wrap_node_list_water_balance, METH_VARARGS, (char *)"\n"
		"node_list_water_balance(node_list self, Time t) -> num_array\n"
		"\n"
		"cmf::math::num_array water_balance(cmf::math::Time t) const\n"
		"\n"
		"Returns the water balance of each vector as a vector (see Formula in\n"
		"C++ documentation) .\n"
		"\n"
		"Replaces slow Python code like: \n"
		""},
	 { (char *)"node_list_conc", _wrap_node_list_conc, METH_VARARGS, (char *)"\n"
		"node_list_conc(node_list self, Time t, solute solute) -> num_array\n"
		"\n"
		"cmf::math::num_array conc(cmf::math::Time t, const cmf::water::solute\n"
		"&solute) const\n"
		"\n"
		"Returns an array holding the concentration of all the flux nodes for\n"
		"the given solute. \n"
		""},
	 { (char *)"node_list_set_solute_source", _wrap_node_list_set_solute_source, METH_VARARGS, (char *)"\n"
		"node_list_set_solute_source(node_list self, solute solute, num_array source_fluxes) -> int\n"
		"\n"
		"int\n"
		"set_solute_source(const cmf::water::solute &solute,\n"
		"cmf::math::num_array source_fluxes)\n"
		"\n"
		"Sets the source flux of a solute storage associated with a node (node\n"
		"has to be a water storage). \n"
		""},
	 { (char *)"node_list_get_fluxes_to", _wrap_node_list_get_fluxes_to, METH_VARARGS, (char *)"\n"
		"node_list_get_fluxes_to(node_list self, node_list targets, Time t) -> num_array\n"
		"\n"
		"cmf::math::num_array get_fluxes_to(const cmf::water::node_list\n"
		"&targets, cmf::math::Time t) const\n"
		"\n"
		"A fast method to perform flux queries as a batch. The node lists left\n"
		"and right should have the same length.\n"
		"\n"
		"The vector containing the flux from left to right at the same position\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"targets:  A node_list containing the source nodes\n"
		"\n"
		"t:  The time for the fluxes\n"
		"\n"
		"Replaces slow Python code like: \n"
		""},
	 { (char *)"node_list_get_fluxes3d_to", _wrap_node_list_get_fluxes3d_to, METH_VARARGS, (char *)"\n"
		"node_list_get_fluxes3d_to(node_list self, node_list targets, Time t) -> point_vector\n"
		"\n"
		"cmf::geometry::point_vector get_fluxes3d_to(const\n"
		"cmf::water::node_list &targets, cmf::math::Time t) const\n"
		"\n"
		"Returns the flux vectors to the nodes of a given target node_list. \n"
		""},
	 { (char *)"node_list_get_fluxes3d", _wrap_node_list_get_fluxes3d, METH_VARARGS, (char *)"\n"
		"node_list_get_fluxes3d(node_list self, Time t) -> point_vector\n"
		"\n"
		"cmf::geometry::point_vector get_fluxes3d(cmf::math::Time t) const\n"
		"\n"
		"Returns the current flow vector for each node. \n"
		""},
	 { (char *)"node_list_get_positions", (PyCFunction)_wrap_node_list_get_positions, METH_O, (char *)"\n"
		"node_list_get_positions(node_list self) -> point_vector\n"
		"\n"
		"cmf::geometry::point_vector get_positions() const\n"
		"\n"
		"Returns the positions of the nodes. \n"
		""},
	 { (char *)"node_list_potentials_set", _wrap_node_list_potentials_set, METH_VARARGS, (char *)"node_list_potentials_set(node_list self, num_array potentials)"},
	 { (char *)"node_list_potentials_get", (PyCFunction)_wrap_node_list_potentials_get, METH_O, (char *)"node_list_potentials_get(node_list self) -> num_array"},
	 { (char *)"delete_node_list", (PyCFunction)_wrap_delete_node_list, METH_O, (char *)"delete_node_list(node_list self)"},
	 { (char *)"node_list_swigregister", node_list_swigregister, METH_VARARGS, NULL},
	 { (char *)"node_list_swiginit", node_list_swiginit, METH_VARARGS, NULL},
	 { (char *)"NeumannBoundary_list_get", _wrap_NeumannBoundary_list_get, METH_VARARGS, (char *)"\n"
		"NeumannBoundary_list_get(NeumannBoundary_list self, int index) -> NeumannBoundary_ptr\n"
		"\n"
		"NeumannBoundary_ptr get(int index) const\n"
		"\n"
		"Returns the Neumann boundary condition at position index. \n"
		""},
	 { (char *)"NeumannBoundary_list_get_fluxes", _wrap_NeumannBoundary_list_get_fluxes, METH_VARARGS, (char *)"\n"
		"NeumannBoundary_list_get_fluxes(NeumannBoundary_list self, Time t = cmf::math::Time()) -> num_array\n"
		"\n"
		"cmf::math::num_array get_fluxes(cmf::math::Time t=cmf::math::Time())\n"
		"const\n"
		"\n"
		"Returns the fluxes of the items as an array. \n"
		""},
	 { (char *)"NeumannBoundary_list_append", _wrap_NeumannBoundary_list_append, METH_VARARGS, (char *)"\n"
		"NeumannBoundary_list_append(NeumannBoundary_list self, NeumannBoundary_ptr nbc)\n"
		"\n"
		"void\n"
		"append(NeumannBoundary_ptr nbc) \n"
		""},
	 { (char *)"NeumannBoundary_list_size", (PyCFunction)_wrap_NeumannBoundary_list_size, METH_O, (char *)"\n"
		"NeumannBoundary_list_size(NeumannBoundary_list self) -> size_t\n"
		"\n"
		"size_t\n"
		"size() const \n"
		""},
	 { (char *)"new_NeumannBoundary_list", _wrap_new_NeumannBoundary_list, METH_VARARGS, (char *)"\n"
		"NeumannBoundary_list()\n"
		"NeumannBoundary_list(node_list copy)\n"
		"new_NeumannBoundary_list(NeumannBoundary_list copy) -> NeumannBoundary_list\n"
		"\n"
		"NeumannBoundary_list(const NeumannBoundary_list &copy) \n"
		""},
	 { (char *)"NeumannBoundary_list_to_node_list", (PyCFunction)_wrap_NeumannBoundary_list_to_node_list, METH_O, (char *)"\n"
		"NeumannBoundary_list_to_node_list(NeumannBoundary_list self) -> node_list\n"
		"\n"
		"cmf::water::node_list to_node_list() const\n"
		"\n"
		"Creates a node_list from this NeumannBoundary_list. \n"
		""},
	 { (char *)"NeumannBoundary_list_global_water_balance", _wrap_NeumannBoundary_list_global_water_balance, METH_VARARGS, (char *)"\n"
		"NeumannBoundary_list_global_water_balance(NeumannBoundary_list self, Time t) -> real\n"
		"\n"
		"real\n"
		"global_water_balance(cmf::math::Time t) const\n"
		"\n"
		"Returns the sum of the water balances of the nodes (see Formula in C++\n"
		"documentation) .\n"
		"\n"
		"Replaces slow Python code like: \n"
		""},
	 { (char *)"NeumannBoundary_list_water_balance", _wrap_NeumannBoundary_list_water_balance, METH_VARARGS, (char *)"\n"
		"NeumannBoundary_list_water_balance(NeumannBoundary_list self, Time t) -> num_array\n"
		"\n"
		"cmf::math::num_array water_balance(cmf::math::Time t) const\n"
		"\n"
		"Returns the water balance of each vector as a vector (see Formula in\n"
		"C++ documentation) .\n"
		"\n"
		"Replaces slow Python code like: \n"
		""},
	 { (char *)"NeumannBoundary_list_fluxes_set", _wrap_NeumannBoundary_list_fluxes_set, METH_VARARGS, (char *)"NeumannBoundary_list_fluxes_set(NeumannBoundary_list self, num_array fluxes)"},
	 { (char *)"NeumannBoundary_list_fluxes_get", (PyCFunction)_wrap_NeumannBoundary_list_fluxes_get, METH_O, (char *)"NeumannBoundary_list_fluxes_get(NeumannBoundary_list self) -> num_array"},
	 { (char *)"delete_NeumannBoundary_list", (PyCFunction)_wrap_delete_NeumannBoundary_list, METH_O, (char *)"delete_NeumannBoundary_list(NeumannBoundary_list self)"},
	 { (char *)"NeumannBoundary_list_swigregister", NeumannBoundary_list_swigregister, METH_VARARGS, NULL},
	 { (char *)"NeumannBoundary_list_swiginit", NeumannBoundary_list_swiginit, METH_VARARGS, NULL},
	 { (char *)"vapour_pressure", (PyCFunction)_wrap_vapour_pressure, METH_O, (char *)"\n"
		"vapour_pressure(double T) -> double\n"
		"\n"
		"double\n"
		"cmf::atmosphere::vapour_pressure(double T) \n"
		""},
	 { (char *)"global_radiation", _wrap_global_radiation, METH_VARARGS, (char *)"\n"
		"global_radiation(Time t, double height, double sunshine_fraction, double longitude = 8, \n"
		"    double latitude = 51, int time_zone = 1, \n"
		"    bool daily = 0) -> double\n"
		"\n"
		"double\n"
		"cmf::atmosphere::global_radiation(cmf::math::Time t, double height,\n"
		"double sunshine_fraction, double longitude=8, double latitude=51, int\n"
		"time_zone=1, bool daily=0) \n"
		""},
	 { (char *)"Pressure", (PyCFunction)_wrap_Pressure, METH_O, (char *)"\n"
		"Pressure(double height) -> double\n"
		"\n"
		"double\n"
		"cmf::atmosphere::Pressure(double height) \n"
		""},
	 { (char *)"Weather_T_set", _wrap_Weather_T_set, METH_VARARGS, (char *)"Weather_T_set(Weather self, double T)"},
	 { (char *)"Weather_T_get", (PyCFunction)_wrap_Weather_T_get, METH_O, (char *)"Weather_T_get(Weather self) -> double"},
	 { (char *)"Weather_Tmax_set", _wrap_Weather_Tmax_set, METH_VARARGS, (char *)"Weather_Tmax_set(Weather self, double Tmax)"},
	 { (char *)"Weather_Tmax_get", (PyCFunction)_wrap_Weather_Tmax_get, METH_O, (char *)"Weather_Tmax_get(Weather self) -> double"},
	 { (char *)"Weather_Tmin_set", _wrap_Weather_Tmin_set, METH_VARARGS, (char *)"Weather_Tmin_set(Weather self, double Tmin)"},
	 { (char *)"Weather_Tmin_get", (PyCFunction)_wrap_Weather_Tmin_get, METH_O, (char *)"Weather_Tmin_get(Weather self) -> double"},
	 { (char *)"Weather_Tground_set", _wrap_Weather_Tground_set, METH_VARARGS, (char *)"Weather_Tground_set(Weather self, double Tground)"},
	 { (char *)"Weather_Tground_get", (PyCFunction)_wrap_Weather_Tground_get, METH_O, (char *)"Weather_Tground_get(Weather self) -> double"},
	 { (char *)"Weather_Windspeed_set", _wrap_Weather_Windspeed_set, METH_VARARGS, (char *)"Weather_Windspeed_set(Weather self, double Windspeed)"},
	 { (char *)"Weather_Windspeed_get", (PyCFunction)_wrap_Weather_Windspeed_get, METH_O, (char *)"Weather_Windspeed_get(Weather self) -> double"},
	 { (char *)"Weather_e_a_set", _wrap_Weather_e_a_set, METH_VARARGS, (char *)"Weather_e_a_set(Weather self, double e_a)"},
	 { (char *)"Weather_e_a_get", (PyCFunction)_wrap_Weather_e_a_get, METH_O, (char *)"Weather_e_a_get(Weather self) -> double"},
	 { (char *)"Weather_e_s_set", _wrap_Weather_e_s_set, METH_VARARGS, (char *)"Weather_e_s_set(Weather self, double e_s)"},
	 { (char *)"Weather_e_s_get", (PyCFunction)_wrap_Weather_e_s_get, METH_O, (char *)"Weather_e_s_get(Weather self) -> double"},
	 { (char *)"Weather_sunshine_set", _wrap_Weather_sunshine_set, METH_VARARGS, (char *)"Weather_sunshine_set(Weather self, double sunshine)"},
	 { (char *)"Weather_sunshine_get", (PyCFunction)_wrap_Weather_sunshine_get, METH_O, (char *)"Weather_sunshine_get(Weather self) -> double"},
	 { (char *)"Weather_Rs_set", _wrap_Weather_Rs_set, METH_VARARGS, (char *)"Weather_Rs_set(Weather self, double Rs)"},
	 { (char *)"Weather_Rs_get", (PyCFunction)_wrap_Weather_Rs_get, METH_O, (char *)"Weather_Rs_get(Weather self) -> double"},
	 { (char *)"Weather_instument_height_set", _wrap_Weather_instument_height_set, METH_VARARGS, (char *)"Weather_instument_height_set(Weather self, double instument_height)"},
	 { (char *)"Weather_instument_height_get", (PyCFunction)_wrap_Weather_instument_height_get, METH_O, (char *)"Weather_instument_height_get(Weather self) -> double"},
	 { (char *)"Weather_Rn", _wrap_Weather_Rn, METH_VARARGS, (char *)"\n"
		"Weather_Rn(Weather self, double albedo, bool daily = False) -> double\n"
		"\n"
		"double Rn(double\n"
		"albedo, bool daily=false) const\n"
		"\n"
		"Calculates the net radiation flux (see Formula in C++ documentation) .\n"
		"\n"
		"(see Formula in C++ documentation)\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"albedo:  the albedo (see Formula in C++ documentation)  of the surface\n"
		"\n"
		"daily:  If true, the net radiation for daily averages will be\n"
		"calculated \n"
		""},
	 { (char *)"new_Weather", (PyCFunction)_wrap_new_Weather, METH_NOARGS, (char *)"\n"
		"new_Weather() -> Weather\n"
		"\n"
		"Weather()\n"
		"\n"
		"Calculates the mean pressure for a specific height. \n"
		""},
	 { (char *)"Weather_to_string", (PyCFunction)_wrap_Weather_to_string, METH_O, (char *)"\n"
		"Weather_to_string(Weather self) -> string\n"
		"\n"
		"std::string to_string() const \n"
		""},
	 { (char *)"Weather_snow_threshold_get", _wrap_Weather_snow_threshold_get, METH_VARARGS, NULL},
	 { (char *)"Weather_snow_threshold_set", _wrap_Weather_snow_threshold_set, METH_VARARGS, NULL},
	 { (char *)"delete_Weather", (PyCFunction)_wrap_delete_Weather, METH_O, (char *)"delete_Weather(Weather self)"},
	 { (char *)"Weather_swigregister", Weather_swigregister, METH_VARARGS, NULL},
	 { (char *)"Weather_swiginit", Weather_swiginit, METH_VARARGS, NULL},
	 { (char *)"Meteorology___call__", _wrap_Meteorology___call__, METH_VARARGS, (char *)"Meteorology___call__(Meteorology self, Time t) -> Weather"},
	 { (char *)"Meteorology_get_weather", _wrap_Meteorology_get_weather, METH_VARARGS, (char *)"\n"
		"Meteorology_get_weather(Meteorology self, Time t) -> Weather\n"
		"\n"
		"virtual cmf::atmosphere::Weather get_weather(cmf::math::Time t) const\n"
		"=0\n"
		"\n"
		"Returns the Weather at time t. Pure virtual function. Must get\n"
		"implemented by child functions. \n"
		""},
	 { (char *)"Meteorology_copy", (PyCFunction)_wrap_Meteorology_copy, METH_O, (char *)"\n"
		"Meteorology_copy(Meteorology self) -> Meteorology\n"
		"\n"
		"virtual\n"
		"Meteorology* copy() const =0\n"
		"\n"
		"Returns a copy of the meteorology object. Pure virtual function, needs\n"
		"to be implemented. \n"
		""},
	 { (char *)"Meteorology_get_instrument_height", (PyCFunction)_wrap_Meteorology_get_instrument_height, METH_O, (char *)"\n"
		"Meteorology_get_instrument_height(Meteorology self) -> real\n"
		"\n"
		"virtual real\n"
		"get_instrument_height() const =0 \n"
		""},
	 { (char *)"delete_Meteorology", (PyCFunction)_wrap_delete_Meteorology, METH_O, (char *)"delete_Meteorology(Meteorology self)"},
	 { (char *)"Meteorology_swigregister", Meteorology_swigregister, METH_VARARGS, NULL},
	 { (char *)"ConstantMeteorology_weather_set", _wrap_ConstantMeteorology_weather_set, METH_VARARGS, (char *)"ConstantMeteorology_weather_set(ConstantMeteorology self, Weather weather)"},
	 { (char *)"ConstantMeteorology_weather_get", (PyCFunction)_wrap_ConstantMeteorology_weather_get, METH_O, (char *)"ConstantMeteorology_weather_get(ConstantMeteorology self) -> Weather"},
	 { (char *)"new_ConstantMeteorology", _wrap_new_ConstantMeteorology, METH_VARARGS, (char *)"\n"
		"ConstantMeteorology()\n"
		"ConstantMeteorology(Weather w)\n"
		"new_ConstantMeteorology(ConstantMeteorology other) -> ConstantMeteorology\n"
		"\n"
		"ConstantMeteorology(const cmf::atmosphere::ConstantMeteorology &other)\n"
		"\n"
		""},
	 { (char *)"ConstantMeteorology_copy", (PyCFunction)_wrap_ConstantMeteorology_copy, METH_O, (char *)"\n"
		"ConstantMeteorology_copy(ConstantMeteorology self) -> ConstantMeteorology\n"
		"\n"
		"ConstantMeteorology* copy() const\n"
		"\n"
		"Creates a new instannce of the ConstantMeteorology with the same\n"
		"weather. \n"
		""},
	 { (char *)"delete_ConstantMeteorology", (PyCFunction)_wrap_delete_ConstantMeteorology, METH_O, (char *)"delete_ConstantMeteorology(ConstantMeteorology self)"},
	 { (char *)"ConstantMeteorology_swigregister", ConstantMeteorology_swigregister, METH_VARARGS, NULL},
	 { (char *)"ConstantMeteorology_swiginit", ConstantMeteorology_swiginit, METH_VARARGS, NULL},
	 { (char *)"MeteoStation_Latitude_set", _wrap_MeteoStation_Latitude_set, METH_VARARGS, (char *)"MeteoStation_Latitude_set(MeteoStation self, double Latitude)"},
	 { (char *)"MeteoStation_Latitude_get", (PyCFunction)_wrap_MeteoStation_Latitude_get, METH_O, (char *)"MeteoStation_Latitude_get(MeteoStation self) -> double"},
	 { (char *)"MeteoStation_Longitude_set", _wrap_MeteoStation_Longitude_set, METH_VARARGS, (char *)"MeteoStation_Longitude_set(MeteoStation self, double Longitude)"},
	 { (char *)"MeteoStation_Longitude_get", (PyCFunction)_wrap_MeteoStation_Longitude_get, METH_O, (char *)"MeteoStation_Longitude_get(MeteoStation self) -> double"},
	 { (char *)"MeteoStation_Timezone_set", _wrap_MeteoStation_Timezone_set, METH_VARARGS, (char *)"MeteoStation_Timezone_set(MeteoStation self, double Timezone)"},
	 { (char *)"MeteoStation_Timezone_get", (PyCFunction)_wrap_MeteoStation_Timezone_get, METH_O, (char *)"MeteoStation_Timezone_get(MeteoStation self) -> double"},
	 { (char *)"MeteoStation_x_set", _wrap_MeteoStation_x_set, METH_VARARGS, (char *)"MeteoStation_x_set(MeteoStation self, double x)"},
	 { (char *)"MeteoStation_x_get", (PyCFunction)_wrap_MeteoStation_x_get, METH_O, (char *)"MeteoStation_x_get(MeteoStation self) -> double"},
	 { (char *)"MeteoStation_y_set", _wrap_MeteoStation_y_set, METH_VARARGS, (char *)"MeteoStation_y_set(MeteoStation self, double y)"},
	 { (char *)"MeteoStation_y_get", (PyCFunction)_wrap_MeteoStation_y_get, METH_O, (char *)"MeteoStation_y_get(MeteoStation self) -> double"},
	 { (char *)"MeteoStation_z_set", _wrap_MeteoStation_z_set, METH_VARARGS, (char *)"MeteoStation_z_set(MeteoStation self, double z)"},
	 { (char *)"MeteoStation_z_get", (PyCFunction)_wrap_MeteoStation_z_get, METH_O, (char *)"MeteoStation_z_get(MeteoStation self) -> double"},
	 { (char *)"MeteoStation_Name_set", _wrap_MeteoStation_Name_set, METH_VARARGS, (char *)"MeteoStation_Name_set(MeteoStation self, string Name)"},
	 { (char *)"MeteoStation_Name_get", (PyCFunction)_wrap_MeteoStation_Name_get, METH_O, (char *)"MeteoStation_Name_get(MeteoStation self) -> string"},
	 { (char *)"MeteoStation_daily_set", _wrap_MeteoStation_daily_set, METH_VARARGS, (char *)"MeteoStation_daily_set(MeteoStation self, bool daily)"},
	 { (char *)"MeteoStation_daily_get", (PyCFunction)_wrap_MeteoStation_daily_get, METH_O, (char *)"MeteoStation_daily_get(MeteoStation self) -> bool"},
	 { (char *)"MeteoStation_InstrumentHeight_set", _wrap_MeteoStation_InstrumentHeight_set, METH_VARARGS, (char *)"MeteoStation_InstrumentHeight_set(MeteoStation self, real InstrumentHeight)"},
	 { (char *)"MeteoStation_InstrumentHeight_get", (PyCFunction)_wrap_MeteoStation_InstrumentHeight_get, METH_O, (char *)"MeteoStation_InstrumentHeight_get(MeteoStation self) -> real"},
	 { (char *)"new_MeteoStation", (PyCFunction)_wrap_new_MeteoStation, METH_O, (char *)"\n"
		"new_MeteoStation(MeteoStation other) -> MeteoStation\n"
		"\n"
		"MeteoStation(const cmf::atmosphere::MeteoStation &other) \n"
		""},
	 { (char *)"MeteoStation_get_data", _wrap_MeteoStation_get_data, METH_VARARGS, (char *)"\n"
		"MeteoStation_get_data(MeteoStation self, Time t, double height) -> Weather\n"
		"\n"
		"cmf::atmosphere::Weather get_data(cmf::math::Time t, double height)\n"
		"const\n"
		"\n"
		"Returns the current Atmosphere state. Uses default values for missing\n"
		"timeseries. \n"
		""},
	 { (char *)"MeteoStation_SetSunshineFraction", _wrap_MeteoStation_SetSunshineFraction, METH_VARARGS, (char *)"\n"
		"MeteoStation_SetSunshineFraction(MeteoStation self, timeseries sunshine_duration)\n"
		"\n"
		"void\n"
		"SetSunshineFraction(cmf::math::timeseries sunshine_duration)\n"
		"\n"
		"Returns the global radiation at a given time step (see Formula in C++\n"
		"documentation) ,\n"
		"seehttp://www.fao.org/docrep/X0490E/x0490e07.htm#radiation (see\n"
		"Formula in C++ documentation)  double\n"
		"get_global_radiation(cmf::math::Time t,double height,double\n"
		"sunshine_fraction) const;.\n"
		"\n"
		"Calculates a timeseries of the sunshine fraction (to put into\n"
		"Sunshine) from a timeseries of absolute sunshine duration, using the\n"
		"potential sunshine duration in hours,\n"
		"seehttp://www.fao.org/docrep/X0490E/x0490e07.htm#radiation (see\n"
		"Formula in C++ documentation)  \n"
		""},
	 { (char *)"MeteoStation_T_set", _wrap_MeteoStation_T_set, METH_VARARGS, (char *)"MeteoStation_T_set(MeteoStation self, timeseries T)"},
	 { (char *)"MeteoStation_T_get", (PyCFunction)_wrap_MeteoStation_T_get, METH_O, (char *)"MeteoStation_T_get(MeteoStation self) -> timeseries"},
	 { (char *)"MeteoStation_Tmax_set", _wrap_MeteoStation_Tmax_set, METH_VARARGS, (char *)"MeteoStation_Tmax_set(MeteoStation self, timeseries Tmax)"},
	 { (char *)"MeteoStation_Tmax_get", (PyCFunction)_wrap_MeteoStation_Tmax_get, METH_O, (char *)"MeteoStation_Tmax_get(MeteoStation self) -> timeseries"},
	 { (char *)"MeteoStation_Tmin_set", _wrap_MeteoStation_Tmin_set, METH_VARARGS, (char *)"MeteoStation_Tmin_set(MeteoStation self, timeseries Tmin)"},
	 { (char *)"MeteoStation_Tmin_get", (PyCFunction)_wrap_MeteoStation_Tmin_get, METH_O, (char *)"MeteoStation_Tmin_get(MeteoStation self) -> timeseries"},
	 { (char *)"MeteoStation_Tground_set", _wrap_MeteoStation_Tground_set, METH_VARARGS, (char *)"MeteoStation_Tground_set(MeteoStation self, timeseries Tground)"},
	 { (char *)"MeteoStation_Tground_get", (PyCFunction)_wrap_MeteoStation_Tground_get, METH_O, (char *)"MeteoStation_Tground_get(MeteoStation self) -> timeseries"},
	 { (char *)"MeteoStation_Windspeed_set", _wrap_MeteoStation_Windspeed_set, METH_VARARGS, (char *)"MeteoStation_Windspeed_set(MeteoStation self, timeseries Windspeed)"},
	 { (char *)"MeteoStation_Windspeed_get", (PyCFunction)_wrap_MeteoStation_Windspeed_get, METH_O, (char *)"MeteoStation_Windspeed_get(MeteoStation self) -> timeseries"},
	 { (char *)"MeteoStation_rHmean_set", _wrap_MeteoStation_rHmean_set, METH_VARARGS, (char *)"MeteoStation_rHmean_set(MeteoStation self, timeseries rHmean)"},
	 { (char *)"MeteoStation_rHmean_get", (PyCFunction)_wrap_MeteoStation_rHmean_get, METH_O, (char *)"MeteoStation_rHmean_get(MeteoStation self) -> timeseries"},
	 { (char *)"MeteoStation_rHmin_set", _wrap_MeteoStation_rHmin_set, METH_VARARGS, (char *)"MeteoStation_rHmin_set(MeteoStation self, timeseries rHmin)"},
	 { (char *)"MeteoStation_rHmin_get", (PyCFunction)_wrap_MeteoStation_rHmin_get, METH_O, (char *)"MeteoStation_rHmin_get(MeteoStation self) -> timeseries"},
	 { (char *)"MeteoStation_rHmax_set", _wrap_MeteoStation_rHmax_set, METH_VARARGS, (char *)"MeteoStation_rHmax_set(MeteoStation self, timeseries rHmax)"},
	 { (char *)"MeteoStation_rHmax_get", (PyCFunction)_wrap_MeteoStation_rHmax_get, METH_O, (char *)"MeteoStation_rHmax_get(MeteoStation self) -> timeseries"},
	 { (char *)"MeteoStation_Tdew_set", _wrap_MeteoStation_Tdew_set, METH_VARARGS, (char *)"MeteoStation_Tdew_set(MeteoStation self, timeseries Tdew)"},
	 { (char *)"MeteoStation_Tdew_get", (PyCFunction)_wrap_MeteoStation_Tdew_get, METH_O, (char *)"MeteoStation_Tdew_get(MeteoStation self) -> timeseries"},
	 { (char *)"MeteoStation_Sunshine_set", _wrap_MeteoStation_Sunshine_set, METH_VARARGS, (char *)"MeteoStation_Sunshine_set(MeteoStation self, timeseries Sunshine)"},
	 { (char *)"MeteoStation_Sunshine_get", (PyCFunction)_wrap_MeteoStation_Sunshine_get, METH_O, (char *)"MeteoStation_Sunshine_get(MeteoStation self) -> timeseries"},
	 { (char *)"MeteoStation_Rs_set", _wrap_MeteoStation_Rs_set, METH_VARARGS, (char *)"MeteoStation_Rs_set(MeteoStation self, timeseries Rs)"},
	 { (char *)"MeteoStation_Rs_get", (PyCFunction)_wrap_MeteoStation_Rs_get, METH_O, (char *)"MeteoStation_Rs_get(MeteoStation self) -> timeseries"},
	 { (char *)"MeteoStation_T_lapse_set", _wrap_MeteoStation_T_lapse_set, METH_VARARGS, (char *)"MeteoStation_T_lapse_set(MeteoStation self, timeseries T_lapse)"},
	 { (char *)"MeteoStation_T_lapse_get", (PyCFunction)_wrap_MeteoStation_T_lapse_get, METH_O, (char *)"MeteoStation_T_lapse_get(MeteoStation self) -> timeseries"},
	 { (char *)"delete_MeteoStation", (PyCFunction)_wrap_delete_MeteoStation, METH_O, (char *)"delete_MeteoStation(MeteoStation self)"},
	 { (char *)"MeteoStation_swigregister", MeteoStation_swigregister, METH_VARARGS, NULL},
	 { (char *)"MeteoStation_swiginit", MeteoStation_swiginit, METH_VARARGS, NULL},
	 { (char *)"MeteoStationReference_get_station", (PyCFunction)_wrap_MeteoStationReference_get_station, METH_O, (char *)"\n"
		"MeteoStationReference_get_station(MeteoStationReference self)\n"
		"\n"
		"meteo_station_pointer get_station() const\n"
		"\n"
		"Returns the station referenced. \n"
		""},
	 { (char *)"new_MeteoStationReference", _wrap_new_MeteoStationReference, METH_VARARGS, (char *)"\n"
		"MeteoStationReference( station, Locatable location)\n"
		"new_MeteoStationReference(MeteoStationReference copy) -> MeteoStationReference\n"
		"\n"
		"MeteoStationReference(const MeteoStationReference &copy) \n"
		""},
	 { (char *)"MeteoStationReference_copy", (PyCFunction)_wrap_MeteoStationReference_copy, METH_O, (char *)"\n"
		"MeteoStationReference_copy(MeteoStationReference self) -> MeteoStationReference\n"
		"\n"
		"MeteoStationReference* copy() const\n"
		"\n"
		"Returns a copy of the meteorology object. Pure virtual function, needs\n"
		"to be implemented. \n"
		""},
	 { (char *)"delete_MeteoStationReference", (PyCFunction)_wrap_delete_MeteoStationReference, METH_O, (char *)"delete_MeteoStationReference(MeteoStationReference self)"},
	 { (char *)"MeteoStationReference_swigregister", MeteoStationReference_swigregister, METH_VARARGS, NULL},
	 { (char *)"MeteoStationReference_swiginit", MeteoStationReference_swiginit, METH_VARARGS, NULL},
	 { (char *)"MeteoStationList___len__", (PyCFunction)_wrap_MeteoStationList___len__, METH_O, (char *)"\n"
		"MeteoStationList___len__(MeteoStationList self) -> int\n"
		"\n"
		"int\n"
		"size() const\n"
		"\n"
		"Returns the number of stations. \n"
		""},
	 { (char *)"MeteoStationList___getitem__", _wrap_MeteoStationList___getitem__, METH_VARARGS, (char *)"\n"
		"__getitem__(int index)\n"
		"MeteoStationList___getitem__(MeteoStationList self, string Name)\n"
		""},
	 { (char *)"MeteoStationList_calculate_Temp_lapse", _wrap_MeteoStationList_calculate_Temp_lapse, METH_VARARGS, (char *)"\n"
		"MeteoStationList_calculate_Temp_lapse(MeteoStationList self, Time begin, Time step, Time end) -> double\n"
		"\n"
		"double\n"
		"calculate_Temp_lapse(cmf::math::Time begin, cmf::math::Time step,\n"
		"cmf::math::Time end)\n"
		"\n"
		"Calculates the temperature lapse from all stations in the list and\n"
		"sets the T_lapse attribute of each station.\n"
		"\n"
		"Returns the average lapse over the whole period. \n"
		""},
	 { (char *)"MeteoStationList_add_station", _wrap_MeteoStationList_add_station, METH_VARARGS, (char *)"\n"
		"add_station(string name, double latitude = 51, double longitude = 8, \n"
		"    double timezone = 1, double elevation = 0, \n"
		"    Time startTime = cmf::math::Time(1,1,2001), \n"
		"    Time timestep = day)\n"
		"MeteoStationList_add_station(MeteoStationList self, string name, point position, \n"
		"    double latitude = 51, double longitude = 8, \n"
		"    double timezone = 1, Time startTime = cmf::math::Time(1,1,2001), \n"
		"    Time timestep = day)\n"
		"\n"
		"meteo_station_pointer add_station(std::string name,\n"
		"cmf::geometry::point position, double latitude=51, double longitude=8,\n"
		"double timezone=1, cmf::math::Time startTime=cmf::math::Time(1, 1,\n"
		"2001), cmf::math::Time timestep=cmf::math::day)\n"
		"\n"
		"Creates a meteorological station at a certain position and adds it to\n"
		"the list.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"name:  Name of the station\n"
		"\n"
		"position:  The location of the station in map coordinates\n"
		"\n"
		"latitude:  Latitude of the study area (for solar radiation)\n"
		"\n"
		"longitude:  Longitude of the study area (for solar time)\n"
		"\n"
		"timezone:  Time zone of the study area (e.g Germany +1,U.S. Pacific\n"
		"time -8\n"
		"\n"
		"startTime:  Date of the beginning of the climatic data (may be changed\n"
		"for each time series later)\n"
		"\n"
		"timestep:  Frequency of climatic data (may be changed for each time\n"
		"series later) \n"
		""},
	 { (char *)"MeteoStationList_remove_station", _wrap_MeteoStationList_remove_station, METH_VARARGS, (char *)"\n"
		"MeteoStationList_remove_station(MeteoStationList self, int index) -> int\n"
		"\n"
		"int\n"
		"remove_station(int index)\n"
		"\n"
		"Removes a station and returns the number of remaining references to\n"
		"the removed station. If the station is deleted, 0 is returned. \n"
		""},
	 { (char *)"new_MeteoStationList", _wrap_new_MeteoStationList, METH_VARARGS, (char *)"\n"
		"MeteoStationList()\n"
		"new_MeteoStationList(MeteoStationList copy) -> MeteoStationList\n"
		"\n"
		"MeteoStationList(const MeteoStationList &copy) \n"
		""},
	 { (char *)"MeteoStationList_reference_to_nearest", _wrap_MeteoStationList_reference_to_nearest, METH_VARARGS, (char *)"\n"
		"MeteoStationList_reference_to_nearest(MeteoStationList self, Locatable position, double z_weight = 0) -> MeteoStationReference\n"
		"\n"
		"MeteoStationReference reference_to_nearest(const\n"
		"cmf::geometry::Locatable &position, double z_weight=0) const\n"
		"\n"
		"Creates a MeteoStationReference from the nearest station to position\n"
		"at position.\n"
		"\n"
		"The distance is calculated as (see Formula in C++ documentation)\n"
		"Where (see Formula in C++ documentation)  is the station and (see\n"
		"Formula in C++ documentation)  is the locatable A Meteorology using\n"
		"the data of the nearest station to position\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"position:  The position (any locatable, like e.g. Cell possible) to\n"
		"look for the station. The reference should be owned by the locatable\n"
		"\n"
		"z_weight:  The weight of the height difference (see Formula in C++\n"
		"documentation)  \n"
		""},
	 { (char *)"delete_MeteoStationList", (PyCFunction)_wrap_delete_MeteoStationList, METH_O, (char *)"delete_MeteoStationList(MeteoStationList self)"},
	 { (char *)"MeteoStationList_swigregister", MeteoStationList_swigregister, METH_VARARGS, NULL},
	 { (char *)"MeteoStationList_swiginit", MeteoStationList_swiginit, METH_VARARGS, NULL},
	 { (char *)"RainCloud_get_cell", (PyCFunction)_wrap_RainCloud_get_cell, METH_O, (char *)"\n"
		"RainCloud_get_cell(RainCloud self) -> Cell\n"
		"\n"
		"const\n"
		"cmf::upslope::Cell& get_cell() const \n"
		""},
	 { (char *)"RainCloud_SWIGSharedPtrUpcast", (PyCFunction)_wrap_RainCloud_SWIGSharedPtrUpcast, METH_O, (char *)"RainCloud_SWIGSharedPtrUpcast(__dummy_12__ swigSharedPtrUpcast) -> __dummy_10__"},
	 { (char *)"delete_RainCloud", (PyCFunction)_wrap_delete_RainCloud, METH_O, (char *)"delete_RainCloud(RainCloud self)"},
	 { (char *)"RainCloud_swigregister", RainCloud_swigregister, METH_VARARGS, NULL},
	 { (char *)"Vegetation_LAI_set", _wrap_Vegetation_LAI_set, METH_VARARGS, (char *)"Vegetation_LAI_set(Vegetation self, double LAI)"},
	 { (char *)"Vegetation_LAI_get", (PyCFunction)_wrap_Vegetation_LAI_get, METH_O, (char *)"Vegetation_LAI_get(Vegetation self) -> double"},
	 { (char *)"Vegetation_Height_set", _wrap_Vegetation_Height_set, METH_VARARGS, (char *)"Vegetation_Height_set(Vegetation self, double Height)"},
	 { (char *)"Vegetation_Height_get", (PyCFunction)_wrap_Vegetation_Height_get, METH_O, (char *)"Vegetation_Height_get(Vegetation self) -> double"},
	 { (char *)"Vegetation_albedo_set", _wrap_Vegetation_albedo_set, METH_VARARGS, (char *)"Vegetation_albedo_set(Vegetation self, double albedo)"},
	 { (char *)"Vegetation_albedo_get", (PyCFunction)_wrap_Vegetation_albedo_get, METH_O, (char *)"Vegetation_albedo_get(Vegetation self) -> double"},
	 { (char *)"Vegetation_CanopyCapacityPerLAI_set", _wrap_Vegetation_CanopyCapacityPerLAI_set, METH_VARARGS, (char *)"Vegetation_CanopyCapacityPerLAI_set(Vegetation self, double CanopyCapacityPerLAI)"},
	 { (char *)"Vegetation_CanopyCapacityPerLAI_get", (PyCFunction)_wrap_Vegetation_CanopyCapacityPerLAI_get, METH_O, (char *)"Vegetation_CanopyCapacityPerLAI_get(Vegetation self) -> double"},
	 { (char *)"Vegetation_RootDepth_set", _wrap_Vegetation_RootDepth_set, METH_VARARGS, (char *)"Vegetation_RootDepth_set(Vegetation self, double RootDepth)"},
	 { (char *)"Vegetation_RootDepth_get", (PyCFunction)_wrap_Vegetation_RootDepth_get, METH_O, (char *)"Vegetation_RootDepth_get(Vegetation self) -> double"},
	 { (char *)"Vegetation_fraction_at_rootdepth_set", _wrap_Vegetation_fraction_at_rootdepth_set, METH_VARARGS, (char *)"Vegetation_fraction_at_rootdepth_set(Vegetation self, double fraction_at_rootdepth)"},
	 { (char *)"Vegetation_fraction_at_rootdepth_get", (PyCFunction)_wrap_Vegetation_fraction_at_rootdepth_get, METH_O, (char *)"Vegetation_fraction_at_rootdepth_get(Vegetation self) -> double"},
	 { (char *)"Vegetation_StomatalResistance_set", _wrap_Vegetation_StomatalResistance_set, METH_VARARGS, (char *)"Vegetation_StomatalResistance_set(Vegetation self, double StomatalResistance)"},
	 { (char *)"Vegetation_StomatalResistance_get", (PyCFunction)_wrap_Vegetation_StomatalResistance_get, METH_O, (char *)"Vegetation_StomatalResistance_get(Vegetation self) -> double"},
	 { (char *)"Vegetation_CanopyClosure_set", _wrap_Vegetation_CanopyClosure_set, METH_VARARGS, (char *)"Vegetation_CanopyClosure_set(Vegetation self, double CanopyClosure)"},
	 { (char *)"Vegetation_CanopyClosure_get", (PyCFunction)_wrap_Vegetation_CanopyClosure_get, METH_O, (char *)"Vegetation_CanopyClosure_get(Vegetation self) -> double"},
	 { (char *)"Vegetation_LeafWidth_set", _wrap_Vegetation_LeafWidth_set, METH_VARARGS, (char *)"Vegetation_LeafWidth_set(Vegetation self, double LeafWidth)"},
	 { (char *)"Vegetation_LeafWidth_get", (PyCFunction)_wrap_Vegetation_LeafWidth_get, METH_O, (char *)"Vegetation_LeafWidth_get(Vegetation self) -> double"},
	 { (char *)"Vegetation_RootFraction", _wrap_Vegetation_RootFraction, METH_VARARGS, (char *)"\n"
		"Vegetation_RootFraction(Vegetation self, double upperBoundary, double lowerBoundary) -> double\n"
		"\n"
		"virtual double\n"
		"RootFraction(double upperBoundary, double lowerBoundary) const \n"
		""},
	 { (char *)"new_Vegetation", _wrap_new_Vegetation, METH_VARARGS, (char *)"\n"
		"new_Vegetation(double _LAI = 2.88, double _Height = 0.12, double _RootDepth = 0.25, \n"
		"    double _StomatalResistance = 100, \n"
		"    double _albedo = 0.23, double _CanopyClosure = 1, \n"
		"    double _CanopyCapacityPerLAI = 0.1, \n"
		"    double _fraction_at_rootdepth = 1.0) -> Vegetation\n"
		"\n"
		"Vegetation(double\n"
		"_LAI=2.88, double _Height=0.12, double _RootDepth=0.25, double\n"
		"_StomatalResistance=100, double _albedo=0.23, double _CanopyClosure=1,\n"
		"double _CanopyCapacityPerLAI=0.1, double _fraction_at_rootdepth=1.0)\n"
		"\n"
		""},
	 { (char *)"delete_Vegetation", (PyCFunction)_wrap_delete_Vegetation, METH_O, (char *)"delete_Vegetation(Vegetation self)"},
	 { (char *)"Vegetation_swigregister", Vegetation_swigregister, METH_VARARGS, NULL},
	 { (char *)"Vegetation_swiginit", Vegetation_swiginit, METH_VARARGS, NULL},
	 { (char *)"CellConnector_connect", _wrap_CellConnector_connect, METH_VARARGS, (char *)"\n"
		"CellConnector_connect(CellConnector self, Cell cell1, Cell cell2, int start_at_layer = 0)\n"
		"\n"
		"void\n"
		"connect(cmf::upslope::Cell &cell1, cmf::upslope::Cell &cell2, int\n"
		"start_at_layer=0) const \n"
		""},
	 { (char *)"delete_CellConnector", (PyCFunction)_wrap_delete_CellConnector, METH_O, (char *)"delete_CellConnector(CellConnector self)"},
	 { (char *)"CellConnector_swigregister", CellConnector_swigregister, METH_VARARGS, NULL},
	 { (char *)"Cell_x_set", _wrap_Cell_x_set, METH_VARARGS, (char *)"Cell_x_set(Cell self, double x)"},
	 { (char *)"Cell_x_get", (PyCFunction)_wrap_Cell_x_get, METH_O, (char *)"Cell_x_get(Cell self) -> double"},
	 { (char *)"Cell_y_set", _wrap_Cell_y_set, METH_VARARGS, (char *)"Cell_y_set(Cell self, double y)"},
	 { (char *)"Cell_y_get", (PyCFunction)_wrap_Cell_y_get, METH_O, (char *)"Cell_y_get(Cell self) -> double"},
	 { (char *)"Cell_z_set", _wrap_Cell_z_set, METH_VARARGS, (char *)"Cell_z_set(Cell self, double z)"},
	 { (char *)"Cell_z_get", (PyCFunction)_wrap_Cell_z_get, METH_O, (char *)"Cell_z_get(Cell self) -> double"},
	 { (char *)"Cell_get_area", (PyCFunction)_wrap_Cell_get_area, METH_O, (char *)"\n"
		"Cell_get_area(Cell self) -> double\n"
		"\n"
		"double\n"
		"get_area() const\n"
		"\n"
		"Returns the area of the cell. \n"
		""},
	 { (char *)"Cell_InvalidateSatDepth", (PyCFunction)_wrap_Cell_InvalidateSatDepth, METH_O, (char *)"\n"
		"Cell_InvalidateSatDepth(Cell self)\n"
		"\n"
		"void\n"
		"InvalidateSatDepth()\n"
		"\n"
		"Marks the saturated depth as unvalid. \n"
		""},
	 { (char *)"Cell_get_saturated_depth", (PyCFunction)_wrap_Cell_get_saturated_depth, METH_O, (char *)"\n"
		"Cell_get_saturated_depth(Cell self) -> real\n"
		"\n"
		"real\n"
		"get_saturated_depth() \n"
		""},
	 { (char *)"Cell_set_saturated_depth", _wrap_Cell_set_saturated_depth, METH_VARARGS, (char *)"\n"
		"Cell_set_saturated_depth(Cell self, real depth)\n"
		"\n"
		"void\n"
		"set_saturated_depth(real depth) \n"
		""},
	 { (char *)"Cell_get_surfacewater", (PyCFunction)_wrap_Cell_get_surfacewater, METH_O, (char *)"\n"
		"Cell_get_surfacewater(Cell self) -> ptr\n"
		"\n"
		"cmf::water::flux_node::ptr get_surfacewater()\n"
		"\n"
		"returns the surface water of this cell \n"
		""},
	 { (char *)"Cell_surfacewater_as_storage", (PyCFunction)_wrap_Cell_surfacewater_as_storage, METH_O, (char *)"\n"
		"Cell_surfacewater_as_storage(Cell self)\n"
		"\n"
		"void surfacewater_as_storage() \n"
		""},
	 { (char *)"Cell_add_storage", _wrap_Cell_add_storage, METH_VARARGS, (char *)"\n"
		"Cell_add_storage(Cell self, string Name, char storage_role = 'N', bool isopenwater = False) -> ptr\n"
		"\n"
		"cmf::water::WaterStorage::ptr add_storage(std::string Name, char\n"
		"storage_role='N', bool isopenwater=false) \n"
		""},
	 { (char *)"Cell_remove_storage", _wrap_Cell_remove_storage, METH_VARARGS, (char *)"\n"
		"Cell_remove_storage(Cell self, WaterStorage storage)\n"
		"\n"
		"void\n"
		"remove_storage(cmf::water::WaterStorage &storage) \n"
		""},
	 { (char *)"Cell_storage_count", (PyCFunction)_wrap_Cell_storage_count, METH_O, (char *)"\n"
		"Cell_storage_count(Cell self) -> int\n"
		"\n"
		"int\n"
		"storage_count() const \n"
		""},
	 { (char *)"Cell_get_storage", _wrap_Cell_get_storage, METH_VARARGS, (char *)"\n"
		"Cell_get_storage(Cell self, int index) -> ptr\n"
		"\n"
		"cmf::water::WaterStorage::ptr get_storage(int index) const \n"
		""},
	 { (char *)"Cell_get_canopy", (PyCFunction)_wrap_Cell_get_canopy, METH_O, (char *)"\n"
		"Cell_get_canopy(Cell self) -> ptr\n"
		"\n"
		"cmf::water::WaterStorage::ptr get_canopy() const \n"
		""},
	 { (char *)"Cell_get_snow", (PyCFunction)_wrap_Cell_get_snow, METH_O, (char *)"\n"
		"Cell_get_snow(Cell self) -> ptr\n"
		"\n"
		"cmf::water::WaterStorage::ptr get_snow() const \n"
		""},
	 { (char *)"Cell_snow_coverage", (PyCFunction)_wrap_Cell_snow_coverage, METH_O, (char *)"\n"
		"Cell_snow_coverage(Cell self) -> real\n"
		"\n"
		"real\n"
		"snow_coverage() const \n"
		""},
	 { (char *)"Cell_has_wet_leaves", (PyCFunction)_wrap_Cell_has_wet_leaves, METH_O, (char *)"\n"
		"Cell_has_wet_leaves(Cell self) -> bool\n"
		"\n"
		"bool\n"
		"has_wet_leaves() const \n"
		""},
	 { (char *)"Cell_has_surface_water", (PyCFunction)_wrap_Cell_has_surface_water, METH_O, (char *)"\n"
		"Cell_has_surface_water(Cell self) -> bool\n"
		"\n"
		"bool\n"
		"has_surface_water() const \n"
		""},
	 { (char *)"Cell_get_vegetation", (PyCFunction)_wrap_Cell_get_vegetation, METH_O, (char *)"\n"
		"Cell_get_vegetation(Cell self) -> Vegetation\n"
		"\n"
		"cmf::upslope::vegetation::Vegetation get_vegetation() const \n"
		""},
	 { (char *)"Cell_set_vegetation", _wrap_Cell_set_vegetation, METH_VARARGS, (char *)"\n"
		"Cell_set_vegetation(Cell self, Vegetation val)\n"
		"\n"
		"void\n"
		"set_vegetation(cmf::upslope::vegetation::Vegetation val) \n"
		""},
	 { (char *)"Cell_Id_set", _wrap_Cell_Id_set, METH_VARARGS, (char *)"Cell_Id_set(Cell self, int Id)"},
	 { (char *)"Cell_Id_get", (PyCFunction)_wrap_Cell_Id_get, METH_O, (char *)"Cell_Id_get(Cell self) -> int"},
	 { (char *)"Cell_project", (PyCFunction)_wrap_Cell_project, METH_O, (char *)"\n"
		"Cell_project(Cell self) -> project\n"
		"\n"
		"const\n"
		"cmf::project& project() const \n"
		""},
	 { (char *)"Cell_get_weather", _wrap_Cell_get_weather, METH_VARARGS, (char *)"\n"
		"Cell_get_weather(Cell self, Time t) -> Weather\n"
		"\n"
		"cmf::atmosphere::Weather get_weather(cmf::math::Time t) const \n"
		""},
	 { (char *)"Cell_layer_count", (PyCFunction)_wrap_Cell_layer_count, METH_O, (char *)"\n"
		"Cell_layer_count(Cell self) -> int\n"
		"\n"
		"int\n"
		"layer_count() const \n"
		""},
	 { (char *)"Cell_get_layer", _wrap_Cell_get_layer, METH_VARARGS, (char *)"\n"
		"Cell_get_layer(Cell self, int ndx) -> layer_ptr\n"
		"\n"
		"cmf::upslope::layer_ptr get_layer(int ndx) const \n"
		""},
	 { (char *)"Cell_add_layer", _wrap_Cell_add_layer, METH_VARARGS, (char *)"\n"
		"Cell_add_layer(Cell self, real lowerboundary, RetentionCurve r_curve, \n"
		"    real saturateddepth = 10)\n"
		"\n"
		"void\n"
		"add_layer(real lowerboundary, const cmf::upslope::RetentionCurve\n"
		"&r_curve, real saturateddepth=10) \n"
		""},
	 { (char *)"Cell_remove_last_layer", (PyCFunction)_wrap_Cell_remove_last_layer, METH_O, (char *)"\n"
		"Cell_remove_last_layer(Cell self)\n"
		"\n"
		"void\n"
		"remove_last_layer() \n"
		""},
	 { (char *)"Cell_remove_layers", (PyCFunction)_wrap_Cell_remove_layers, METH_O, (char *)"\n"
		"Cell_remove_layers(Cell self)\n"
		"\n"
		"void\n"
		"remove_layers() \n"
		""},
	 { (char *)"delete_Cell", (PyCFunction)_wrap_delete_Cell, METH_O, (char *)"\n"
		"delete_Cell(Cell self)\n"
		"\n"
		"virtual ~Cell() \n"
		""},
	 { (char *)"new_Cell", _wrap_new_Cell, METH_VARARGS, (char *)"\n"
		"new_Cell(double x, double y, double z, double area, project _project) -> Cell\n"
		"\n"
		"Cell(double x,\n"
		"double y, double z, double area, cmf::project &_project) \n"
		""},
	 { (char *)"Cell_to_string", (PyCFunction)_wrap_Cell_to_string, METH_O, (char *)"\n"
		"Cell_to_string(Cell self) -> string\n"
		"\n"
		"std::string\n"
		"to_string() \n"
		""},
	 { (char *)"Cell_topology_get", (PyCFunction)_wrap_Cell_topology_get, METH_O, (char *)"Cell_topology_get(Cell self) -> Topology"},
	 { (char *)"Cell_evaporation_get", (PyCFunction)_wrap_Cell_evaporation_get, METH_O, (char *)"Cell_evaporation_get(Cell self) -> ptr"},
	 { (char *)"Cell_transpiration_get", (PyCFunction)_wrap_Cell_transpiration_get, METH_O, (char *)"Cell_transpiration_get(Cell self) -> ptr"},
	 { (char *)"Cell_meteorology_set", _wrap_Cell_meteorology_set, METH_VARARGS, (char *)"Cell_meteorology_set(Cell self, Meteorology meteorology)"},
	 { (char *)"Cell_meteorology_get", (PyCFunction)_wrap_Cell_meteorology_get, METH_O, (char *)"Cell_meteorology_get(Cell self) -> Meteorology"},
	 { (char *)"Cell_rain_get", (PyCFunction)_wrap_Cell_rain_get, METH_O, (char *)"Cell_rain_get(Cell self) -> __dummy_12__"},
	 { (char *)"Cell_swigregister", Cell_swigregister, METH_VARARGS, NULL},
	 { (char *)"Cell_swiginit", Cell_swiginit, METH_VARARGS, NULL},
	 { (char *)"Topology_cell_get", (PyCFunction)_wrap_Topology_cell_get, METH_O, (char *)"Topology_cell_get(Topology self) -> Cell"},
	 { (char *)"Topology_x_set", _wrap_Topology_x_set, METH_VARARGS, (char *)"Topology_x_set(Topology self, double x)"},
	 { (char *)"Topology_x_get", (PyCFunction)_wrap_Topology_x_get, METH_O, (char *)"Topology_x_get(Topology self) -> double"},
	 { (char *)"Topology_y_set", _wrap_Topology_y_set, METH_VARARGS, (char *)"Topology_y_set(Topology self, double y)"},
	 { (char *)"Topology_y_get", (PyCFunction)_wrap_Topology_y_get, METH_O, (char *)"Topology_y_get(Topology self) -> double"},
	 { (char *)"Topology_z_set", _wrap_Topology_z_set, METH_VARARGS, (char *)"Topology_z_set(Topology self, double z)"},
	 { (char *)"Topology_z_get", (PyCFunction)_wrap_Topology_z_get, METH_O, (char *)"Topology_z_get(Topology self) -> double"},
	 { (char *)"Topology_flowwidth", _wrap_Topology_flowwidth, METH_VARARGS, (char *)"\n"
		"flowwidth(Cell target) -> double\n"
		"Topology_flowwidth(Topology self, Topology target) -> double\n"
		"\n"
		"double\n"
		"flowwidth(Topology &target) \n"
		""},
	 { (char *)"Topology_AddNeighbor", _wrap_Topology_AddNeighbor, METH_VARARGS, (char *)"\n"
		"AddNeighbor(Cell target, double flowwidth)\n"
		"Topology_AddNeighbor(Topology self, Topology target, double flowwidth)\n"
		"\n"
		"void\n"
		"AddNeighbor(Topology &target, double flowwidth) \n"
		""},
	 { (char *)"Topology_RemoveNeighbor", _wrap_Topology_RemoveNeighbor, METH_VARARGS, (char *)"\n"
		"Topology_RemoveNeighbor(Topology self, Topology target)\n"
		"\n"
		"void\n"
		"RemoveNeighbor(Topology &target) \n"
		""},
	 { (char *)"Topology_neighbor_count", (PyCFunction)_wrap_Topology_neighbor_count, METH_O, (char *)"\n"
		"Topology_neighbor_count(Topology self) -> size_t\n"
		"\n"
		"size_t\n"
		"neighbor_count() const \n"
		""},
	 { (char *)"Topology_MainOutlet", _wrap_Topology_MainOutlet, METH_VARARGS, (char *)"\n"
		"Topology_MainOutlet(Topology self, bool forceRecalc = False) -> Cell\n"
		"\n"
		"Cell*\n"
		"MainOutlet(bool forceRecalc=false) \n"
		""},
	 { (char *)"Topology_ContributingArea", (PyCFunction)_wrap_Topology_ContributingArea, METH_O, (char *)"\n"
		"Topology_ContributingArea(Topology self) -> double\n"
		"\n"
		"double ContributingArea() const \n"
		""},
	 { (char *)"Topology_calculate_contributing_area", (PyCFunction)_wrap_Topology_calculate_contributing_area, METH_O, (char *)"Topology_calculate_contributing_area(cell_vector arg0)"},
	 { (char *)"Topology___eq__", _wrap_Topology___eq__, METH_VARARGS, (char *)"Topology___eq__(Topology self, Topology cmp) -> bool"},
	 { (char *)"delete_Topology", (PyCFunction)_wrap_delete_Topology, METH_O, (char *)"delete_Topology(Topology self)"},
	 { (char *)"Topology_swigregister", Topology_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_NeighborIterator", (PyCFunction)_wrap_new_NeighborIterator, METH_O, (char *)"\n"
		"new_NeighborIterator(Cell cell) -> NeighborIterator\n"
		"\n"
		"NeighborIterator(cmf::upslope::Cell *cell) \n"
		""},
	 { (char *)"NeighborIterator_cell", (PyCFunction)_wrap_NeighborIterator_cell, METH_O, (char *)"\n"
		"NeighborIterator_cell(NeighborIterator self) -> Cell\n"
		"\n"
		"Cell&\n"
		"cell() \n"
		""},
	 { (char *)"NeighborIterator_flowwidth", (PyCFunction)_wrap_NeighborIterator_flowwidth, METH_O, (char *)"\n"
		"NeighborIterator_flowwidth(NeighborIterator self) -> double\n"
		"\n"
		"double flowwidth() \n"
		""},
	 { (char *)"NeighborIterator_valid", (PyCFunction)_wrap_NeighborIterator_valid, METH_O, (char *)"\n"
		"NeighborIterator_valid(NeighborIterator self) -> bool\n"
		"\n"
		"bool\n"
		"valid() const \n"
		""},
	 { (char *)"NeighborIterator_next", (PyCFunction)_wrap_NeighborIterator_next, METH_O, (char *)"\n"
		"NeighborIterator_next(NeighborIterator self) -> NeighborIterator\n"
		"\n"
		"NeighborIterator& next()\n"
		"\n"
		"Points the iterator to the next neighbor. \n"
		""},
	 { (char *)"NeighborIterator___eq__", _wrap_NeighborIterator___eq__, METH_VARARGS, (char *)"NeighborIterator___eq__(NeighborIterator self, NeighborIterator cmp) -> bool"},
	 { (char *)"NeighborIterator___neq__", _wrap_NeighborIterator___neq__, METH_VARARGS, (char *)"NeighborIterator___neq__(NeighborIterator self, NeighborIterator cmp) -> bool"},
	 { (char *)"delete_NeighborIterator", (PyCFunction)_wrap_delete_NeighborIterator, METH_O, (char *)"delete_NeighborIterator(NeighborIterator self)"},
	 { (char *)"NeighborIterator_swigregister", NeighborIterator_swigregister, METH_VARARGS, NULL},
	 { (char *)"NeighborIterator_swiginit", NeighborIterator_swiginit, METH_VARARGS, NULL},
	 { (char *)"cell_vector_iterator", (PyCFunction)_wrap_cell_vector_iterator, METH_O, (char *)"\n"
		"cell_vector_iterator(cell_vector self) -> SwigPyIterator\n"
		"\n"
		"STL iterator class. \n"
		""},
	 { (char *)"cell_vector___nonzero__", (PyCFunction)_wrap_cell_vector___nonzero__, METH_O, (char *)"cell_vector___nonzero__(cell_vector self) -> bool"},
	 { (char *)"cell_vector___bool__", (PyCFunction)_wrap_cell_vector___bool__, METH_O, (char *)"cell_vector___bool__(cell_vector self) -> bool"},
	 { (char *)"cell_vector___len__", (PyCFunction)_wrap_cell_vector___len__, METH_O, (char *)"cell_vector___len__(cell_vector self) -> size_type"},
	 { (char *)"cell_vector_pop", (PyCFunction)_wrap_cell_vector_pop, METH_O, (char *)"cell_vector_pop(cell_vector self) -> value_type"},
	 { (char *)"cell_vector___getslice__", _wrap_cell_vector___getslice__, METH_VARARGS, (char *)"cell_vector___getslice__(cell_vector self, difference_type i, difference_type j) -> cell_vector"},
	 { (char *)"cell_vector___setslice__", _wrap_cell_vector___setslice__, METH_VARARGS, (char *)"\n"
		"cell_vector___setslice__(cell_vector self, difference_type i, difference_type j, \n"
		"    cell_vector v)\n"
		""},
	 { (char *)"cell_vector___delslice__", _wrap_cell_vector___delslice__, METH_VARARGS, (char *)"cell_vector___delslice__(cell_vector self, difference_type i, difference_type j)"},
	 { (char *)"cell_vector___delitem__", _wrap_cell_vector___delitem__, METH_VARARGS, (char *)"\n"
		"__delitem__(difference_type i)\n"
		"cell_vector___delitem__(cell_vector self, PySliceObject slice)\n"
		""},
	 { (char *)"cell_vector___getitem__", _wrap_cell_vector___getitem__, METH_VARARGS, (char *)"\n"
		"__getitem__(PySliceObject slice) -> cell_vector\n"
		"cell_vector___getitem__(cell_vector self, difference_type i) -> value_type\n"
		""},
	 { (char *)"cell_vector___setitem__", _wrap_cell_vector___setitem__, METH_VARARGS, (char *)"\n"
		"__setitem__(PySliceObject slice, cell_vector v)\n"
		"cell_vector___setitem__(cell_vector self, difference_type i, value_type x)\n"
		""},
	 { (char *)"cell_vector_append", _wrap_cell_vector_append, METH_VARARGS, (char *)"cell_vector_append(cell_vector self, value_type x)"},
	 { (char *)"cell_vector_empty", (PyCFunction)_wrap_cell_vector_empty, METH_O, (char *)"cell_vector_empty(cell_vector self) -> bool"},
	 { (char *)"cell_vector_size", (PyCFunction)_wrap_cell_vector_size, METH_O, (char *)"cell_vector_size(cell_vector self) -> size_type"},
	 { (char *)"cell_vector_clear", (PyCFunction)_wrap_cell_vector_clear, METH_O, (char *)"cell_vector_clear(cell_vector self)"},
	 { (char *)"cell_vector_swap", _wrap_cell_vector_swap, METH_VARARGS, (char *)"cell_vector_swap(cell_vector self, cell_vector v)"},
	 { (char *)"cell_vector_get_allocator", (PyCFunction)_wrap_cell_vector_get_allocator, METH_O, (char *)"cell_vector_get_allocator(cell_vector self) -> allocator_type"},
	 { (char *)"cell_vector_begin", (PyCFunction)_wrap_cell_vector_begin, METH_O, (char *)"cell_vector_begin(cell_vector self) -> const_iterator"},
	 { (char *)"cell_vector_end", (PyCFunction)_wrap_cell_vector_end, METH_O, (char *)"cell_vector_end(cell_vector self) -> const_iterator"},
	 { (char *)"cell_vector_rbegin", (PyCFunction)_wrap_cell_vector_rbegin, METH_O, (char *)"cell_vector_rbegin(cell_vector self) -> const_reverse_iterator"},
	 { (char *)"cell_vector_rend", (PyCFunction)_wrap_cell_vector_rend, METH_O, (char *)"cell_vector_rend(cell_vector self) -> const_reverse_iterator"},
	 { (char *)"cell_vector_pop_back", (PyCFunction)_wrap_cell_vector_pop_back, METH_O, (char *)"cell_vector_pop_back(cell_vector self)"},
	 { (char *)"cell_vector_erase", _wrap_cell_vector_erase, METH_VARARGS, (char *)"\n"
		"erase(iterator pos) -> iterator\n"
		"cell_vector_erase(cell_vector self, iterator first, iterator last) -> iterator\n"
		""},
	 { (char *)"new_cell_vector", _wrap_new_cell_vector, METH_VARARGS, (char *)"\n"
		"cell_vector()\n"
		"cell_vector(cell_vector arg0)\n"
		"cell_vector(size_type size)\n"
		"new_cell_vector(size_type size, value_type value) -> cell_vector\n"
		""},
	 { (char *)"cell_vector_push_back", _wrap_cell_vector_push_back, METH_VARARGS, (char *)"cell_vector_push_back(cell_vector self, value_type x)"},
	 { (char *)"cell_vector_front", (PyCFunction)_wrap_cell_vector_front, METH_O, (char *)"cell_vector_front(cell_vector self) -> value_type"},
	 { (char *)"cell_vector_back", (PyCFunction)_wrap_cell_vector_back, METH_O, (char *)"cell_vector_back(cell_vector self) -> value_type"},
	 { (char *)"cell_vector_assign", _wrap_cell_vector_assign, METH_VARARGS, (char *)"cell_vector_assign(cell_vector self, size_type n, value_type x)"},
	 { (char *)"cell_vector_resize", _wrap_cell_vector_resize, METH_VARARGS, (char *)"\n"
		"resize(size_type new_size)\n"
		"cell_vector_resize(cell_vector self, size_type new_size, value_type x)\n"
		""},
	 { (char *)"cell_vector_insert", _wrap_cell_vector_insert, METH_VARARGS, (char *)"\n"
		"insert(iterator pos, value_type x) -> iterator\n"
		"cell_vector_insert(cell_vector self, iterator pos, size_type n, value_type x)\n"
		""},
	 { (char *)"cell_vector_reserve", _wrap_cell_vector_reserve, METH_VARARGS, (char *)"cell_vector_reserve(cell_vector self, size_type n)"},
	 { (char *)"cell_vector_capacity", (PyCFunction)_wrap_cell_vector_capacity, METH_O, (char *)"cell_vector_capacity(cell_vector self) -> size_type"},
	 { (char *)"delete_cell_vector", (PyCFunction)_wrap_delete_cell_vector, METH_O, (char *)"\n"
		"delete_cell_vector(cell_vector self)\n"
		"\n"
		"STL class. \n"
		""},
	 { (char *)"cell_vector_swigregister", cell_vector_swigregister, METH_VARARGS, NULL},
	 { (char *)"cell_vector_swiginit", cell_vector_swiginit, METH_VARARGS, NULL},
	 { (char *)"find_cell", _wrap_find_cell, METH_VARARGS, (char *)"find_cell(cells_ref arg0, point p, double max_dist = 1e20) -> Cell"},
	 { (char *)"get_boundary_cells", (PyCFunction)_wrap_get_boundary_cells, METH_O, (char *)"get_boundary_cells(cells_ref cells) -> cell_vector"},
	 { (char *)"get_connections", (PyCFunction)_wrap_get_connections, METH_O, (char *)"get_connections(cells_ref cells) -> connection_set"},
	 { (char *)"connect_cells_with_flux", _wrap_connect_cells_with_flux, METH_VARARGS, (char *)"connect_cells_with_flux(cells_ref cells, CellConnector connect, int start_at_layer = 0)"},
	 { (char *)"fill_sinks", _wrap_fill_sinks, METH_VARARGS, (char *)"fill_sinks(cells_ref cells, double min_difference = 0.001) -> int"},
	 { (char *)"area", (PyCFunction)_wrap_area, METH_O, (char *)"area(cells_ref cells) -> double"},
	 { (char *)"set_meteo_station", _wrap_set_meteo_station, METH_VARARGS, (char *)"set_meteo_station(cells_ref cells,  meteo_station)"},
	 { (char *)"set_precipitation", _wrap_set_precipitation, METH_VARARGS, (char *)"set_precipitation(cells_ref cells, timeseries data_in_mm_day)"},
	 { (char *)"cell_positions", (PyCFunction)_wrap_cell_positions, METH_O, (char *)"cell_positions(cells_ref cells) -> point_vector"},
	 { (char *)"cell_flux_directions", _wrap_cell_flux_directions, METH_VARARGS, (char *)"cell_flux_directions(cells_ref cells, Time arg1) -> point_vector"},
	 { (char *)"pressure_to_waterhead", (PyCFunction)_wrap_pressure_to_waterhead, METH_O, (char *)"pressure_to_waterhead(double Pressure) -> double"},
	 { (char *)"waterhead_to_pressure", (PyCFunction)_wrap_waterhead_to_pressure, METH_O, (char *)"waterhead_to_pressure(double waterhead) -> double"},
	 { (char *)"pF_to_waterhead", (PyCFunction)_wrap_pF_to_waterhead, METH_O, (char *)"pF_to_waterhead(double pF) -> double"},
	 { (char *)"waterhead_to_pF", (PyCFunction)_wrap_waterhead_to_pF, METH_O, (char *)"waterhead_to_pF(double waterhead) -> double"},
	 { (char *)"RetentionCurve_K", _wrap_RetentionCurve_K, METH_VARARGS, (char *)"\n"
		"RetentionCurve_K(RetentionCurve self, real wetness, real depth) -> real\n"
		"\n"
		"virtual real\n"
		"K(real wetness, real depth) const =0\n"
		"\n"
		"Returns the conductivity in m/day at a certain depth and water\n"
		"content. \n"
		""},
	 { (char *)"RetentionCurve_Wetness_eff", _wrap_RetentionCurve_Wetness_eff, METH_VARARGS, (char *)"\n"
		"RetentionCurve_Wetness_eff(RetentionCurve self, real wetness, real pF_r = 4.2) -> real\n"
		"\n"
		"virtual real Wetness_eff(real wetness, real pF_r=4.2) const\n"
		"\n"
		"Returns the effective wetness, using a residual pF value (see Formula\n"
		"in C++ documentation) . \n"
		""},
	 { (char *)"RetentionCurve_Porosity", _wrap_RetentionCurve_Porosity, METH_VARARGS, (char *)"\n"
		"RetentionCurve_Porosity(RetentionCurve self, real depth) -> real\n"
		"\n"
		"virtual real Porosity(real depth) const =0\n"
		"\n"
		"Returns the porosity at a certain depth. \n"
		""},
	 { (char *)"RetentionCurve_VoidVolume", _wrap_RetentionCurve_VoidVolume, METH_VARARGS, (char *)"\n"
		"RetentionCurve_VoidVolume(RetentionCurve self, real upperDepth, real lowerDepth, \n"
		"    real Area) -> real\n"
		"\n"
		"virtual real VoidVolume(real upperDepth, real lowerDepth, real Area)\n"
		"const\n"
		"\n"
		"Returns the void volume of a soil column. \n"
		""},
	 { (char *)"RetentionCurve_FillHeight", _wrap_RetentionCurve_FillHeight, METH_VARARGS, (char *)"\n"
		"RetentionCurve_FillHeight(RetentionCurve self, real lowerDepth, real Area, real Volume) -> real\n"
		"\n"
		"virtual real FillHeight(real lowerDepth, real Area, real Volume) const\n"
		"\n"
		"Returns the thickness of a soil column with a certain pore volume. \n"
		""},
	 { (char *)"RetentionCurve_Transmissivity", _wrap_RetentionCurve_Transmissivity, METH_VARARGS, (char *)"\n"
		"RetentionCurve_Transmissivity(RetentionCurve self, real upperDepth, real lowerDepth, \n"
		"    real wetness) -> real\n"
		"\n"
		"virtual real Transmissivity(real upperDepth, real lowerDepth, real\n"
		"wetness) const\n"
		"\n"
		"Returns the transmissivity of a part of a soil column. \n"
		""},
	 { (char *)"RetentionCurve_Wetness", _wrap_RetentionCurve_Wetness, METH_VARARGS, (char *)"\n"
		"RetentionCurve_Wetness(RetentionCurve self, real suction) -> real\n"
		"\n"
		"virtual\n"
		"real Wetness(real suction) const\n"
		"\n"
		"returns the wetness (volumetric water content per pore space) at a\n"
		"given suction pressure \n"
		""},
	 { (char *)"RetentionCurve_Wetness_pF", _wrap_RetentionCurve_Wetness_pF, METH_VARARGS, (char *)"\n"
		"RetentionCurve_Wetness_pF(RetentionCurve self, real pF) -> real\n"
		"\n"
		"real\n"
		"Wetness_pF(real pF) const\n"
		"\n"
		"returns the volumetric water content at a given pF value \n"
		""},
	 { (char *)"RetentionCurve_MatricPotential", _wrap_RetentionCurve_MatricPotential, METH_VARARGS, (char *)"\n"
		"RetentionCurve_MatricPotential(RetentionCurve self, real wetness) -> real\n"
		"\n"
		"virtual real MatricPotential(real wetness) const\n"
		"\n"
		"returns the wetness of the soil at given water content \n"
		""},
	 { (char *)"RetentionCurve_copy", (PyCFunction)_wrap_RetentionCurve_copy, METH_O, (char *)"\n"
		"RetentionCurve_copy(RetentionCurve self) -> RetentionCurve\n"
		"\n"
		"virtual\n"
		"RetentionCurve* copy() const =0 \n"
		""},
	 { (char *)"delete_RetentionCurve", (PyCFunction)_wrap_delete_RetentionCurve, METH_O, (char *)"delete_RetentionCurve(RetentionCurve self)"},
	 { (char *)"RetentionCurve_swigregister", RetentionCurve_swigregister, METH_VARARGS, NULL},
	 { (char *)"BrooksCoreyRetentionCurve_SetKsat", _wrap_BrooksCoreyRetentionCurve_SetKsat, METH_VARARGS, (char *)"\n"
		"BrooksCoreyRetentionCurve_SetKsat(BrooksCoreyRetentionCurve self, real ksat, real ksat_decay)\n"
		"\n"
		"void SetKsat(real\n"
		"ksat, real ksat_decay) \n"
		""},
	 { (char *)"BrooksCoreyRetentionCurve_SetPorosity", _wrap_BrooksCoreyRetentionCurve_SetPorosity, METH_VARARGS, (char *)"\n"
		"BrooksCoreyRetentionCurve_SetPorosity(BrooksCoreyRetentionCurve self, real porosity, real porosity_decay = 0)\n"
		"\n"
		"void\n"
		"SetPorosity(real porosity, real porosity_decay=0)\n"
		"\n"
		"Sets the porosity (Volume of pores per volume of soil) and the\n"
		"exponential porosity decline with depth. \n"
		""},
	 { (char *)"BrooksCoreyRetentionCurve_wetness_X_set", _wrap_BrooksCoreyRetentionCurve_wetness_X_set, METH_VARARGS, (char *)"BrooksCoreyRetentionCurve_wetness_X_set(BrooksCoreyRetentionCurve self, real wetness_X)"},
	 { (char *)"BrooksCoreyRetentionCurve_wetness_X_get", (PyCFunction)_wrap_BrooksCoreyRetentionCurve_wetness_X_get, METH_O, (char *)"BrooksCoreyRetentionCurve_wetness_X_get(BrooksCoreyRetentionCurve self) -> real"},
	 { (char *)"BrooksCoreyRetentionCurve_Psi_X_set", _wrap_BrooksCoreyRetentionCurve_Psi_X_set, METH_VARARGS, (char *)"BrooksCoreyRetentionCurve_Psi_X_set(BrooksCoreyRetentionCurve self, real Psi_X)"},
	 { (char *)"BrooksCoreyRetentionCurve_Psi_X_get", (PyCFunction)_wrap_BrooksCoreyRetentionCurve_Psi_X_get, METH_O, (char *)"BrooksCoreyRetentionCurve_Psi_X_get(BrooksCoreyRetentionCurve self) -> real"},
	 { (char *)"BrooksCoreyRetentionCurve_b", (PyCFunction)_wrap_BrooksCoreyRetentionCurve_b, METH_O, (char *)"\n"
		"BrooksCoreyRetentionCurve_b(BrooksCoreyRetentionCurve self) -> real\n"
		"\n"
		"real b() const\n"
		"\n"
		"Retention curve shape parameter. \n"
		""},
	 { (char *)"BrooksCoreyRetentionCurve_Set_b", _wrap_BrooksCoreyRetentionCurve_Set_b, METH_VARARGS, (char *)"\n"
		"BrooksCoreyRetentionCurve_Set_b(BrooksCoreyRetentionCurve self, real new_b)\n"
		"\n"
		"void Set_b(real new_b) \n"
		""},
	 { (char *)"new_BrooksCoreyRetentionCurve", _wrap_new_BrooksCoreyRetentionCurve, METH_VARARGS, (char *)"\n"
		"new_BrooksCoreyRetentionCurve(real ksat = 15, real porosity = 0.5, real _b = 5, real theta_x = 0.2, \n"
		"    real psi_x = cmf::upslope::pF_to_waterhead(2.5), \n"
		"    real ksat_decay = 0, real porosity_decay = 0) -> BrooksCoreyRetentionCurve\n"
		"\n"
		"BrooksCoreyRetentionCurve(real ksat=15, real porosity=0.5, real _b=5,\n"
		"real theta_x=0.2, real psi_x=pF_to_waterhead(2.5), real ksat_decay=0,\n"
		"real porosity_decay=0)\n"
		"\n"
		"Creates a brooks corey retention curve.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"ksat:  Saturated conductivity (see Formula in C++ documentation)\n"
		"\n"
		"porosity:   (see Formula in C++ documentation)\n"
		"\n"
		"_b:  Shape of the retention curve (if you do not know how to\n"
		"parameterize this, take a look at the other constructor)\n"
		"\n"
		"theta_x:   (see Formula in C++ documentation)  Water content at a\n"
		"specific suction pressure\n"
		"\n"
		"psi_x:  Suction pressure for (see Formula in C++ documentation)  in m\n"
		"water column, use the conversion functions pF_to_waterhead,\n"
		"pressure_to_waterhead to convert pressure in to waterhead height\n"
		"(default pF=2.5)\n"
		"\n"
		"ksat_decay:  Relative decay of conductivity with depth, e.g. 0.1 means\n"
		"conductivity gets 10% smaller per meter\n"
		"\n"
		"porosity_decay:  Relative decay of porosity with depth, e.g. 0.1 means\n"
		"conductivity gets 10% smaller per meter \n"
		""},
	 { (char *)"BrooksCoreyRetentionCurve_CreateFrom2Points", _wrap_BrooksCoreyRetentionCurve_CreateFrom2Points, METH_VARARGS, (char *)"\n"
		"BrooksCoreyRetentionCurve_CreateFrom2Points(real ksat, real porosity, real theta1, real theta2, \n"
		"    real psi_1 = cmf::upslope::pF_to_waterhead(2.5), \n"
		"    real psi_2 = cmf::upslope::pF_to_waterhead(4.2)) -> BrooksCoreyRetentionCurve\n"
		""},
	 { (char *)"BrooksCoreyRetentionCurve_copy", (PyCFunction)_wrap_BrooksCoreyRetentionCurve_copy, METH_O, (char *)"\n"
		"BrooksCoreyRetentionCurve_copy(BrooksCoreyRetentionCurve self) -> BrooksCoreyRetentionCurve\n"
		"\n"
		"virtual BrooksCoreyRetentionCurve* copy() const \n"
		""},
	 { (char *)"delete_BrooksCoreyRetentionCurve", (PyCFunction)_wrap_delete_BrooksCoreyRetentionCurve, METH_O, (char *)"delete_BrooksCoreyRetentionCurve(BrooksCoreyRetentionCurve self)"},
	 { (char *)"BrooksCoreyRetentionCurve_swigregister", BrooksCoreyRetentionCurve_swigregister, METH_VARARGS, NULL},
	 { (char *)"BrooksCoreyRetentionCurve_swiginit", BrooksCoreyRetentionCurve_swiginit, METH_VARARGS, NULL},
	 { (char *)"VanGenuchtenMualem_alpha_set", _wrap_VanGenuchtenMualem_alpha_set, METH_VARARGS, (char *)"VanGenuchtenMualem_alpha_set(VanGenuchtenMualem self, real alpha)"},
	 { (char *)"VanGenuchtenMualem_alpha_get", (PyCFunction)_wrap_VanGenuchtenMualem_alpha_get, METH_O, (char *)"VanGenuchtenMualem_alpha_get(VanGenuchtenMualem self) -> real"},
	 { (char *)"VanGenuchtenMualem_n_set", _wrap_VanGenuchtenMualem_n_set, METH_VARARGS, (char *)"VanGenuchtenMualem_n_set(VanGenuchtenMualem self, real n)"},
	 { (char *)"VanGenuchtenMualem_n_get", (PyCFunction)_wrap_VanGenuchtenMualem_n_get, METH_O, (char *)"VanGenuchtenMualem_n_get(VanGenuchtenMualem self) -> real"},
	 { (char *)"VanGenuchtenMualem_Ksat_set", _wrap_VanGenuchtenMualem_Ksat_set, METH_VARARGS, (char *)"VanGenuchtenMualem_Ksat_set(VanGenuchtenMualem self, real Ksat)"},
	 { (char *)"VanGenuchtenMualem_Ksat_get", (PyCFunction)_wrap_VanGenuchtenMualem_Ksat_get, METH_O, (char *)"VanGenuchtenMualem_Ksat_get(VanGenuchtenMualem self) -> real"},
	 { (char *)"VanGenuchtenMualem_Phi_set", _wrap_VanGenuchtenMualem_Phi_set, METH_VARARGS, (char *)"VanGenuchtenMualem_Phi_set(VanGenuchtenMualem self, real Phi)"},
	 { (char *)"VanGenuchtenMualem_Phi_get", (PyCFunction)_wrap_VanGenuchtenMualem_Phi_get, METH_O, (char *)"VanGenuchtenMualem_Phi_get(VanGenuchtenMualem self) -> real"},
	 { (char *)"VanGenuchtenMualem_Psi_full_set", _wrap_VanGenuchtenMualem_Psi_full_set, METH_VARARGS, (char *)"VanGenuchtenMualem_Psi_full_set(VanGenuchtenMualem self, real Psi_full)"},
	 { (char *)"VanGenuchtenMualem_Psi_full_get", (PyCFunction)_wrap_VanGenuchtenMualem_Psi_full_get, METH_O, (char *)"VanGenuchtenMualem_Psi_full_get(VanGenuchtenMualem self) -> real"},
	 { (char *)"VanGenuchtenMualem_m_set", _wrap_VanGenuchtenMualem_m_set, METH_VARARGS, (char *)"VanGenuchtenMualem_m_set(VanGenuchtenMualem self, real m)"},
	 { (char *)"VanGenuchtenMualem_m_get", (PyCFunction)_wrap_VanGenuchtenMualem_m_get, METH_O, (char *)"VanGenuchtenMualem_m_get(VanGenuchtenMualem self) -> real"},
	 { (char *)"VanGenuchtenMualem_copy", (PyCFunction)_wrap_VanGenuchtenMualem_copy, METH_O, (char *)"\n"
		"VanGenuchtenMualem_copy(VanGenuchtenMualem self) -> VanGenuchtenMualem\n"
		"\n"
		"VanGenuchtenMualem* copy() const \n"
		""},
	 { (char *)"new_VanGenuchtenMualem", _wrap_new_VanGenuchtenMualem, METH_VARARGS, (char *)"\n"
		"VanGenuchtenMualem()\n"
		"new_VanGenuchtenMualem(real _Ksat, real _phi, real _alpha, real _n, real _m = -1) -> VanGenuchtenMualem\n"
		"\n"
		"VanGenuchtenMualem(real _Ksat, real _phi, real _alpha, real _n, real\n"
		"_m=-1)\n"
		"\n"
		"Creates a van Genuchten-Mualem retention curve.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"_Ksat:  Saturated conductivity in (see Formula in C++ documentation)\n"
		"\n"
		"_phi:  Porosity in (see Formula in C++ documentation)\n"
		"\n"
		"_alpha:  Van Genuchten (see Formula in C++ documentation)  in (see\n"
		"Formula in C++ documentation)\n"
		"\n"
		"_n:  Van Genuchten n\n"
		"\n"
		"_m:  m parameter, if negative m is calculated as (see Formula in C++\n"
		"documentation)  \n"
		""},
	 { (char *)"delete_VanGenuchtenMualem", (PyCFunction)_wrap_delete_VanGenuchtenMualem, METH_O, (char *)"delete_VanGenuchtenMualem(VanGenuchtenMualem self)"},
	 { (char *)"VanGenuchtenMualem_swigregister", VanGenuchtenMualem_swigregister, METH_VARARGS, NULL},
	 { (char *)"VanGenuchtenMualem_swiginit", VanGenuchtenMualem_swiginit, METH_VARARGS, NULL},
	 { (char *)"LinearRetention_Ksat_set", _wrap_LinearRetention_Ksat_set, METH_VARARGS, (char *)"LinearRetention_Ksat_set(LinearRetention self, real Ksat)"},
	 { (char *)"LinearRetention_Ksat_get", (PyCFunction)_wrap_LinearRetention_Ksat_get, METH_O, (char *)"LinearRetention_Ksat_get(LinearRetention self) -> real"},
	 { (char *)"LinearRetention_porosity_set", _wrap_LinearRetention_porosity_set, METH_VARARGS, (char *)"LinearRetention_porosity_set(LinearRetention self, real porosity)"},
	 { (char *)"LinearRetention_porosity_get", (PyCFunction)_wrap_LinearRetention_porosity_get, METH_O, (char *)"LinearRetention_porosity_get(LinearRetention self) -> real"},
	 { (char *)"LinearRetention_thickness_set", _wrap_LinearRetention_thickness_set, METH_VARARGS, (char *)"LinearRetention_thickness_set(LinearRetention self, real thickness)"},
	 { (char *)"LinearRetention_thickness_get", (PyCFunction)_wrap_LinearRetention_thickness_get, METH_O, (char *)"LinearRetention_thickness_get(LinearRetention self) -> real"},
	 { (char *)"LinearRetention_residual_wetness_set", _wrap_LinearRetention_residual_wetness_set, METH_VARARGS, (char *)"LinearRetention_residual_wetness_set(LinearRetention self, real residual_wetness)"},
	 { (char *)"LinearRetention_residual_wetness_get", (PyCFunction)_wrap_LinearRetention_residual_wetness_get, METH_O, (char *)"LinearRetention_residual_wetness_get(LinearRetention self) -> real"},
	 { (char *)"LinearRetention_porosity_decay_set", _wrap_LinearRetention_porosity_decay_set, METH_VARARGS, (char *)"LinearRetention_porosity_decay_set(LinearRetention self, real porosity_decay)"},
	 { (char *)"LinearRetention_porosity_decay_get", (PyCFunction)_wrap_LinearRetention_porosity_decay_get, METH_O, (char *)"LinearRetention_porosity_decay_get(LinearRetention self) -> real"},
	 { (char *)"LinearRetention_Ksat_decay_set", _wrap_LinearRetention_Ksat_decay_set, METH_VARARGS, (char *)"LinearRetention_Ksat_decay_set(LinearRetention self, real Ksat_decay)"},
	 { (char *)"LinearRetention_Ksat_decay_get", (PyCFunction)_wrap_LinearRetention_Ksat_decay_get, METH_O, (char *)"LinearRetention_Ksat_decay_get(LinearRetention self) -> real"},
	 { (char *)"LinearRetention_beta_set", _wrap_LinearRetention_beta_set, METH_VARARGS, (char *)"LinearRetention_beta_set(LinearRetention self, real beta)"},
	 { (char *)"LinearRetention_beta_get", (PyCFunction)_wrap_LinearRetention_beta_get, METH_O, (char *)"LinearRetention_beta_get(LinearRetention self) -> real"},
	 { (char *)"LinearRetention_copy", (PyCFunction)_wrap_LinearRetention_copy, METH_O, (char *)"\n"
		"LinearRetention_copy(LinearRetention self) -> LinearRetention\n"
		"\n"
		"LinearRetention* copy() const \n"
		""},
	 { (char *)"new_LinearRetention", _wrap_new_LinearRetention, METH_VARARGS, (char *)"\n"
		"new_LinearRetention(real _Ksat, real _Phi, real _thickness, real _beta = 1.0, \n"
		"    real Ss = 1e-4, real _residual_wetness = 0.0, \n"
		"    real _ksat_decay = 0.0, real _porosity_decay = 0.0) -> LinearRetention\n"
		"\n"
		"LinearRetention(real _Ksat, real _Phi, real _thickness, real\n"
		"_beta=1.0, real Ss=1e-4, real _residual_wetness=0.0, real\n"
		"_ksat_decay=0.0, real _porosity_decay=0.0) \n"
		""},
	 { (char *)"delete_LinearRetention", (PyCFunction)_wrap_delete_LinearRetention, METH_O, (char *)"delete_LinearRetention(LinearRetention self)"},
	 { (char *)"LinearRetention_swigregister", LinearRetention_swigregister, METH_VARARGS, NULL},
	 { (char *)"LinearRetention_swiginit", LinearRetention_swiginit, METH_VARARGS, NULL},
	 { (char *)"SoilLayer_Position_get", (PyCFunction)_wrap_SoilLayer_Position_get, METH_O, (char *)"SoilLayer_Position_get(SoilLayer self) -> int"},
	 { (char *)"SoilLayer_cell_get", (PyCFunction)_wrap_SoilLayer_cell_get, METH_O, (char *)"SoilLayer_cell_get(SoilLayer self) -> Cell"},
	 { (char *)"SoilLayer_get_soil", (PyCFunction)_wrap_SoilLayer_get_soil, METH_O, (char *)"\n"
		"SoilLayer_get_soil(SoilLayer self) -> RetentionCurve\n"
		"\n"
		"virtual\n"
		"cmf::upslope::RetentionCurve& get_soil() const\n"
		"\n"
		"Returns the soil properties of the water storage. \n"
		""},
	 { (char *)"SoilLayer_set_soil", _wrap_SoilLayer_set_soil, METH_VARARGS, (char *)"\n"
		"SoilLayer_set_soil(SoilLayer self, RetentionCurve r_curve)\n"
		"\n"
		"virtual\n"
		"void set_soil(const cmf::upslope::RetentionCurve &r_curve) \n"
		""},
	 { (char *)"SoilLayer_get_theta", (PyCFunction)_wrap_SoilLayer_get_theta, METH_O, (char *)"\n"
		"SoilLayer_get_theta(SoilLayer self) -> real\n"
		"\n"
		"virtual\n"
		"real get_theta() const\n"
		"\n"
		"Returns the actual volumetric water content of the water storage. \n"
		""},
	 { (char *)"SoilLayer_set_theta", _wrap_SoilLayer_set_theta, METH_VARARGS, (char *)"\n"
		"SoilLayer_set_theta(SoilLayer self, real Value)\n"
		"\n"
		"virtual\n"
		"void set_theta(real Value) \n"
		""},
	 { (char *)"SoilLayer_get_capacity", (PyCFunction)_wrap_SoilLayer_get_capacity, METH_O, (char *)"\n"
		"SoilLayer_get_capacity(SoilLayer self) -> real\n"
		"\n"
		"virtual\n"
		"real get_capacity() const\n"
		"\n"
		"Returns the capacity of the water storage in m3. \n"
		""},
	 { (char *)"SoilLayer_get_saturated_depth", (PyCFunction)_wrap_SoilLayer_get_saturated_depth, METH_O, (char *)"\n"
		"SoilLayer_get_saturated_depth(SoilLayer self) -> real\n"
		"\n"
		"virtual real get_saturated_depth() const\n"
		"\n"
		"Returns the depth for saturation (see Formula in C++ documentation) .\n"
		"\n"
		""},
	 { (char *)"SoilLayer_get_flow_crosssection", _wrap_SoilLayer_get_flow_crosssection, METH_VARARGS, (char *)"\n"
		"SoilLayer_get_flow_crosssection(SoilLayer self, SoilLayer target, bool HorizontalLayers = False) -> real\n"
		"\n"
		"real get_flow_crosssection(const cmf::upslope::SoilLayer &target,\n"
		"bool HorizontalLayers=false) const\n"
		"\n"
		"Calculates the shared crosssectional area of this and another soil\n"
		"water storage.\n"
		"\n"
		"If both layers belong to the same cell, the area of the cell is\n"
		"returned, if they belong to different cells the area of the vertical\n"
		"shared boundary is returned get_area in m2\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"target:  The other soil water storage\n"
		"\n"
		"HorizontalLayers:  If true, the layers are assumed to be parallel to\n"
		"the gravitational potential, otherwise they are assumed to be parallel\n"
		"to the ground topography \n"
		""},
	 { (char *)"SoilLayer_cast", (PyCFunction)_wrap_SoilLayer_cast, METH_O, (char *)"SoilLayer_cast(ptr node) -> ptr"},
	 { (char *)"SoilLayer_SWIGSharedPtrUpcast", (PyCFunction)_wrap_SoilLayer_SWIGSharedPtrUpcast, METH_O, (char *)"SoilLayer_SWIGSharedPtrUpcast(__dummy_20__ swigSharedPtrUpcast) -> __dummy_14__"},
	 { (char *)"SoilLayer_gravitational_potential_get", (PyCFunction)_wrap_SoilLayer_gravitational_potential_get, METH_O, (char *)"SoilLayer_gravitational_potential_get(SoilLayer self) -> real"},
	 { (char *)"SoilLayer_matrix_potential_get", (PyCFunction)_wrap_SoilLayer_matrix_potential_get, METH_O, (char *)"SoilLayer_matrix_potential_get(SoilLayer self) -> real"},
	 { (char *)"SoilLayer_wetness_set", _wrap_SoilLayer_wetness_set, METH_VARARGS, (char *)"SoilLayer_wetness_set(SoilLayer self, real wetness)"},
	 { (char *)"SoilLayer_wetness_get", (PyCFunction)_wrap_SoilLayer_wetness_get, METH_O, (char *)"SoilLayer_wetness_get(SoilLayer self) -> real"},
	 { (char *)"SoilLayer_K_get", (PyCFunction)_wrap_SoilLayer_K_get, METH_O, (char *)"SoilLayer_K_get(SoilLayer self) -> real"},
	 { (char *)"SoilLayer_Ksat_get", (PyCFunction)_wrap_SoilLayer_Ksat_get, METH_O, (char *)"SoilLayer_Ksat_get(SoilLayer self) -> real"},
	 { (char *)"SoilLayer_thickness_get", (PyCFunction)_wrap_SoilLayer_thickness_get, METH_O, (char *)"SoilLayer_thickness_get(SoilLayer self) -> real"},
	 { (char *)"SoilLayer_lower_boundary_get", (PyCFunction)_wrap_SoilLayer_lower_boundary_get, METH_O, (char *)"SoilLayer_lower_boundary_get(SoilLayer self) -> real"},
	 { (char *)"SoilLayer_upper_boundary_get", (PyCFunction)_wrap_SoilLayer_upper_boundary_get, METH_O, (char *)"SoilLayer_upper_boundary_get(SoilLayer self) -> real"},
	 { (char *)"SoilLayer_porosity_get", (PyCFunction)_wrap_SoilLayer_porosity_get, METH_O, (char *)"SoilLayer_porosity_get(SoilLayer self) -> real"},
	 { (char *)"delete_SoilLayer", (PyCFunction)_wrap_delete_SoilLayer, METH_O, (char *)"delete_SoilLayer(SoilLayer self)"},
	 { (char *)"SoilLayer_swigregister", SoilLayer_swigregister, METH_VARARGS, NULL},
	 { (char *)"IVolumeHeightFunction_h", _wrap_IVolumeHeightFunction_h, METH_VARARGS, (char *)"\n"
		"IVolumeHeightFunction_h(IVolumeHeightFunction self, double V) -> double\n"
		"\n"
		"virtual\n"
		"double h(double V) const =0\n"
		"\n"
		"Returns the depth of a given volume. \n"
		""},
	 { (char *)"IVolumeHeightFunction_A", _wrap_IVolumeHeightFunction_A, METH_VARARGS, (char *)"\n"
		"IVolumeHeightFunction_A(IVolumeHeightFunction self, double V) -> double\n"
		"\n"
		"virtual\n"
		"double A(double V) const =0\n"
		"\n"
		"Returns the area of the surface for a given volume. \n"
		""},
	 { (char *)"IVolumeHeightFunction_V", _wrap_IVolumeHeightFunction_V, METH_VARARGS, (char *)"\n"
		"IVolumeHeightFunction_V(IVolumeHeightFunction self, double h) -> double\n"
		"\n"
		"virtual\n"
		"double V(double h) const =0 \n"
		""},
	 { (char *)"IVolumeHeightFunction_copy", (PyCFunction)_wrap_IVolumeHeightFunction_copy, METH_O, (char *)"\n"
		"IVolumeHeightFunction_copy(IVolumeHeightFunction self) -> IVolumeHeightFunction\n"
		"\n"
		"virtual IVolumeHeightFunction* copy() const =0 \n"
		""},
	 { (char *)"IVolumeHeightFunction___call__", _wrap_IVolumeHeightFunction___call__, METH_VARARGS, (char *)"IVolumeHeightFunction___call__(IVolumeHeightFunction self, double V) -> double"},
	 { (char *)"delete_IVolumeHeightFunction", (PyCFunction)_wrap_delete_IVolumeHeightFunction, METH_O, (char *)"delete_IVolumeHeightFunction(IVolumeHeightFunction self)"},
	 { (char *)"IVolumeHeightFunction_swigregister", IVolumeHeightFunction_swigregister, METH_VARARGS, NULL},
	 { (char *)"Prism_Area_set", _wrap_Prism_Area_set, METH_VARARGS, (char *)"Prism_Area_set(Prism self, double Area)"},
	 { (char *)"Prism_Area_get", (PyCFunction)_wrap_Prism_Area_get, METH_O, (char *)"Prism_Area_get(Prism self) -> double"},
	 { (char *)"new_Prism", (PyCFunction)_wrap_new_Prism, METH_O, (char *)"\n"
		"new_Prism(double base_area) -> Prism\n"
		"\n"
		"Prism(double\n"
		"base_area) \n"
		""},
	 { (char *)"Prism_copy", (PyCFunction)_wrap_Prism_copy, METH_O, (char *)"\n"
		"Prism_copy(Prism self) -> Prism\n"
		"\n"
		"Prism* copy() const\n"
		"\n"
		""},
	 { (char *)"delete_Prism", (PyCFunction)_wrap_delete_Prism, METH_O, (char *)"delete_Prism(Prism self)"},
	 { (char *)"Prism_swigregister", Prism_swigregister, METH_VARARGS, NULL},
	 { (char *)"Prism_swiginit", Prism_swiginit, METH_VARARGS, NULL},
	 { (char *)"new_volume_height_function", _wrap_new_volume_height_function, METH_VARARGS, (char *)"\n"
		"volume_height_function(volume_height_function for_copy)\n"
		"new_volume_height_function(IVolumeHeightFunction for_copy) -> volume_height_function\n"
		"\n"
		"volume_height_function(const IVolumeHeightFunction &for_copy)\n"
		"\n"
		"Wrapper for any IVolumeHeightFunction. \n"
		""},
	 { (char *)"volume_height_function_copy", (PyCFunction)_wrap_volume_height_function_copy, METH_O, (char *)"\n"
		"volume_height_function_copy(volume_height_function self) -> volume_height_function\n"
		"\n"
		"volume_height_function* copy() const \n"
		""},
	 { (char *)"delete_volume_height_function", (PyCFunction)_wrap_delete_volume_height_function, METH_O, (char *)"delete_volume_height_function(volume_height_function self)"},
	 { (char *)"volume_height_function_swigregister", volume_height_function_swigregister, METH_VARARGS, NULL},
	 { (char *)"volume_height_function_swiginit", volume_height_function_swiginit, METH_VARARGS, NULL},
	 { (char *)"IChannel_get_nManning", (PyCFunction)_wrap_IChannel_get_nManning, METH_O, (char *)"\n"
		"IChannel_get_nManning(IChannel self) -> double\n"
		"\n"
		"virtual\n"
		"double get_nManning() const \n"
		""},
	 { (char *)"IChannel_set_nManning", _wrap_IChannel_set_nManning, METH_VARARGS, (char *)"\n"
		"IChannel_set_nManning(IChannel self, double val)\n"
		"\n"
		"virtual\n"
		"void set_nManning(double val) \n"
		""},
	 { (char *)"IChannel_length_set", _wrap_IChannel_length_set, METH_VARARGS, (char *)"IChannel_length_set(IChannel self, double length)"},
	 { (char *)"IChannel_length_get", (PyCFunction)_wrap_IChannel_length_get, METH_O, (char *)"IChannel_length_get(IChannel self) -> double"},
	 { (char *)"IChannel_typecode", (PyCFunction)_wrap_IChannel_typecode, METH_O, (char *)"\n"
		"IChannel_typecode(IChannel self) -> char\n"
		"\n"
		"virtual char\n"
		"typecode() const =0 \n"
		""},
	 { (char *)"IChannel_get_channel_width", _wrap_IChannel_get_channel_width, METH_VARARGS, (char *)"\n"
		"IChannel_get_channel_width(IChannel self, double depth) -> double\n"
		"\n"
		"virtual double get_channel_width(double depth) const =0\n"
		"\n"
		"Calculates the flow width from a given actual depth [m] using the\n"
		"actual IChannel geometry. \n"
		""},
	 { (char *)"IChannel_get_wetted_perimeter", _wrap_IChannel_get_wetted_perimeter, METH_VARARGS, (char *)"\n"
		"IChannel_get_wetted_perimeter(IChannel self, double depth) -> double\n"
		"\n"
		"virtual double get_wetted_perimeter(double depth) const =0\n"
		"\n"
		"Calculates the wetted perimeter from a given actual depth [m] using\n"
		"the actual IChannel geometry. \n"
		""},
	 { (char *)"IChannel_get_depth", _wrap_IChannel_get_depth, METH_VARARGS, (char *)"\n"
		"IChannel_get_depth(IChannel self, double area) -> double\n"
		"\n"
		"virtual\n"
		"double get_depth(double area) const =0\n"
		"\n"
		"Calculates the actual depth of the reach using the IChannel geometry.\n"
		"\n"
		"get_depth of the reach [m]\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"area:  Wetted area of a river cross section [m2], can be obtained by\n"
		"V/l, where V is the stored volume and l is the reach length \n"
		""},
	 { (char *)"IChannel_get_flux_crossection", _wrap_IChannel_get_flux_crossection, METH_VARARGS, (char *)"\n"
		"IChannel_get_flux_crossection(IChannel self, double depth) -> double\n"
		"\n"
		"virtual double get_flux_crossection(double depth) const =0\n"
		"\n"
		"Calculates the wetted area from a given depth using the IChannel\n"
		"geometry. In most cases use get_flux_crossection=V/l, where V is the\n"
		"stored volume and l is the reach length.\n"
		"\n"
		"Wetted area of a river cross section [m2]\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"depth:  get_depth of the reach [m] \n"
		""},
	 { (char *)"IChannel_copy", (PyCFunction)_wrap_IChannel_copy, METH_O, (char *)"\n"
		"IChannel_copy(IChannel self) -> IChannel\n"
		"\n"
		"virtual IChannel*\n"
		"copy() const =0 \n"
		""},
	 { (char *)"IChannel_qManning", _wrap_IChannel_qManning, METH_VARARGS, (char *)"\n"
		"IChannel_qManning(IChannel self, double A, double slope) -> double\n"
		"\n"
		"double\n"
		"qManning(double A, double slope) const\n"
		"\n"
		"Calculates the flow rate from a given water volume in the reach (see\n"
		"Formula in C++ documentation) .\n"
		"\n"
		"Flow rate [m3/s]\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"A:  The area of the cross section [m2]\n"
		"\n"
		"slope:  The slope of the reach [m/m] \n"
		""},
	 { (char *)"delete_IChannel", (PyCFunction)_wrap_delete_IChannel, METH_O, (char *)"delete_IChannel(IChannel self)"},
	 { (char *)"IChannel_swigregister", IChannel_swigregister, METH_VARARGS, NULL},
	 { (char *)"SWATReachType_BottomWidth_set", _wrap_SWATReachType_BottomWidth_set, METH_VARARGS, (char *)"SWATReachType_BottomWidth_set(SWATReachType self, double BottomWidth)"},
	 { (char *)"SWATReachType_BottomWidth_get", (PyCFunction)_wrap_SWATReachType_BottomWidth_get, METH_O, (char *)"SWATReachType_BottomWidth_get(SWATReachType self) -> double"},
	 { (char *)"SWATReachType_ChannelDepth_set", _wrap_SWATReachType_ChannelDepth_set, METH_VARARGS, (char *)"SWATReachType_ChannelDepth_set(SWATReachType self, double ChannelDepth)"},
	 { (char *)"SWATReachType_ChannelDepth_get", (PyCFunction)_wrap_SWATReachType_ChannelDepth_get, METH_O, (char *)"SWATReachType_ChannelDepth_get(SWATReachType self) -> double"},
	 { (char *)"SWATReachType_BankSlope_set", _wrap_SWATReachType_BankSlope_set, METH_VARARGS, (char *)"SWATReachType_BankSlope_set(SWATReachType self, double BankSlope)"},
	 { (char *)"SWATReachType_BankSlope_get", (PyCFunction)_wrap_SWATReachType_BankSlope_get, METH_O, (char *)"SWATReachType_BankSlope_get(SWATReachType self) -> double"},
	 { (char *)"SWATReachType_FloodPlainSlope_set", _wrap_SWATReachType_FloodPlainSlope_set, METH_VARARGS, (char *)"SWATReachType_FloodPlainSlope_set(SWATReachType self, double FloodPlainSlope)"},
	 { (char *)"SWATReachType_FloodPlainSlope_get", (PyCFunction)_wrap_SWATReachType_FloodPlainSlope_get, METH_O, (char *)"SWATReachType_FloodPlainSlope_get(SWATReachType self) -> double"},
	 { (char *)"new_SWATReachType", _wrap_new_SWATReachType, METH_VARARGS, (char *)"\n"
		"SWATReachType(double l)\n"
		"new_SWATReachType(double l, double BankWidth, double Depth) -> SWATReachType\n"
		"\n"
		"SWATReachType(double l, double BankWidth, double Depth)\n"
		"\n"
		"Creates a new reach structure from a give width and depth.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"l:  length of the channel [m]\n"
		"\n"
		"BankWidth:  get_channel_width of the reach from bank to bank [m]\n"
		"\n"
		"Depth:  Depth of the reach [m] \n"
		""},
	 { (char *)"SWATReachType_copy", (PyCFunction)_wrap_SWATReachType_copy, METH_O, (char *)"\n"
		"SWATReachType_copy(SWATReachType self) -> SWATReachType\n"
		"\n"
		"SWATReachType* copy() const \n"
		""},
	 { (char *)"delete_SWATReachType", (PyCFunction)_wrap_delete_SWATReachType, METH_O, (char *)"delete_SWATReachType(SWATReachType self)"},
	 { (char *)"SWATReachType_swigregister", SWATReachType_swigregister, METH_VARARGS, NULL},
	 { (char *)"SWATReachType_swiginit", SWATReachType_swiginit, METH_VARARGS, NULL},
	 { (char *)"TriangularReach_BankSlope_set", _wrap_TriangularReach_BankSlope_set, METH_VARARGS, (char *)"TriangularReach_BankSlope_set(TriangularReach self, double BankSlope)"},
	 { (char *)"TriangularReach_BankSlope_get", (PyCFunction)_wrap_TriangularReach_BankSlope_get, METH_O, (char *)"TriangularReach_BankSlope_get(TriangularReach self) -> double"},
	 { (char *)"new_TriangularReach", _wrap_new_TriangularReach, METH_VARARGS, (char *)"\n"
		"new_TriangularReach(double l, double bankSlope = 2) -> TriangularReach\n"
		"\n"
		"TriangularReach(double l, double bankSlope=2)\n"
		"\n"
		"Creates a new triangular reach type. \n"
		""},
	 { (char *)"TriangularReach_copy", (PyCFunction)_wrap_TriangularReach_copy, METH_O, (char *)"\n"
		"TriangularReach_copy(TriangularReach self) -> TriangularReach\n"
		"\n"
		"TriangularReach* copy() const \n"
		""},
	 { (char *)"delete_TriangularReach", (PyCFunction)_wrap_delete_TriangularReach, METH_O, (char *)"delete_TriangularReach(TriangularReach self)"},
	 { (char *)"TriangularReach_swigregister", TriangularReach_swigregister, METH_VARARGS, NULL},
	 { (char *)"TriangularReach_swiginit", TriangularReach_swiginit, METH_VARARGS, NULL},
	 { (char *)"new_RectangularReach", _wrap_new_RectangularReach, METH_VARARGS, (char *)"\n"
		"new_RectangularReach(double l, double width) -> RectangularReach\n"
		"\n"
		"RectangularReach(double l, double width)\n"
		"\n"
		"Creates a new rectangular reach type with width [m]. \n"
		""},
	 { (char *)"RectangularReach_copy", (PyCFunction)_wrap_RectangularReach_copy, METH_O, (char *)"\n"
		"RectangularReach_copy(RectangularReach self) -> RectangularReach\n"
		"\n"
		"RectangularReach* copy() const \n"
		""},
	 { (char *)"delete_RectangularReach", (PyCFunction)_wrap_delete_RectangularReach, METH_O, (char *)"delete_RectangularReach(RectangularReach self)"},
	 { (char *)"RectangularReach_swigregister", RectangularReach_swigregister, METH_VARARGS, NULL},
	 { (char *)"RectangularReach_swiginit", RectangularReach_swiginit, METH_VARARGS, NULL},
	 { (char *)"PipeReach_radius_set", _wrap_PipeReach_radius_set, METH_VARARGS, (char *)"PipeReach_radius_set(PipeReach self, double radius)"},
	 { (char *)"PipeReach_radius_get", (PyCFunction)_wrap_PipeReach_radius_get, METH_O, (char *)"PipeReach_radius_get(PipeReach self) -> double"},
	 { (char *)"new_PipeReach", _wrap_new_PipeReach, METH_VARARGS, (char *)"\n"
		"new_PipeReach(double l, double diameter) -> PipeReach\n"
		"\n"
		"PipeReach(double l, double diameter)\n"
		"\n"
		"Creates a tube IChannel with diameter [m]. \n"
		""},
	 { (char *)"PipeReach_copy", (PyCFunction)_wrap_PipeReach_copy, METH_O, (char *)"\n"
		"PipeReach_copy(PipeReach self) -> PipeReach\n"
		"\n"
		"PipeReach* copy()\n"
		"const \n"
		""},
	 { (char *)"delete_PipeReach", (PyCFunction)_wrap_delete_PipeReach, METH_O, (char *)"delete_PipeReach(PipeReach self)"},
	 { (char *)"PipeReach_swigregister", PipeReach_swigregister, METH_VARARGS, NULL},
	 { (char *)"PipeReach_swiginit", PipeReach_swiginit, METH_VARARGS, NULL},
	 { (char *)"new_Channel", _wrap_new_Channel, METH_VARARGS, (char *)"\n"
		"Channel(double length = 1.0)\n"
		"Channel(IChannel for_wrapping)\n"
		"Channel(IVolumeHeightFunction for_casting)\n"
		"Channel(Channel for_copy)\n"
		"new_Channel(char typecode, double length, double width = 1., double depth = 0.25) -> Channel\n"
		"\n"
		"Channel(char\n"
		"typecode, double length, double width=1., double depth=0.25)\n"
		"\n"
		"Creates a reachtype using a short cut character. Acceptes one of the\n"
		"following characters: 'T' TriangularReach, width and depth are\n"
		"ignored.\n"
		"\n"
		"'R' RectangularReach, depth is ignored\n"
		"\n"
		"'P' PipeReach, depth is ignored, width is the diameter of the pipe\n"
		"\n"
		"'S' SWATReachType, a trapezoid flow cross section, as used in the SWAT\n"
		"model, width (bank width) and depth are used.\n"
		"\n"
		"the reach type\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"typecode:  Describes the geometry of the reach cross section.\n"
		"\n"
		"length:  The length of the channel in m\n"
		"\n"
		"width:  width of the reach cross section in m (ignored for typecode\n"
		"'T')\n"
		"\n"
		"depth:  depth of the reach (ignored for typecode 'T','R','P','S') \n"
		""},
	 { (char *)"Channel_copy", (PyCFunction)_wrap_Channel_copy, METH_O, (char *)"\n"
		"Channel_copy(Channel self) -> Channel\n"
		"\n"
		"Channel* copy()\n"
		"const \n"
		""},
	 { (char *)"delete_Channel", (PyCFunction)_wrap_delete_Channel, METH_O, (char *)"delete_Channel(Channel self)"},
	 { (char *)"Channel_swigregister", Channel_swigregister, METH_VARARGS, NULL},
	 { (char *)"Channel_swiginit", Channel_swiginit, METH_VARARGS, NULL},
	 { (char *)"new_MeanChannel", _wrap_new_MeanChannel, METH_VARARGS, (char *)"\n"
		"MeanChannel(IChannel channel1, IChannel channel2)\n"
		"new_MeanChannel(MeanChannel meanChannel) -> MeanChannel\n"
		"\n"
		"MeanChannel(const MeanChannel &meanChannel) \n"
		""},
	 { (char *)"MeanChannel_copy", (PyCFunction)_wrap_MeanChannel_copy, METH_O, (char *)"\n"
		"MeanChannel_copy(MeanChannel self) -> MeanChannel\n"
		"\n"
		"MeanChannel*\n"
		"copy() const \n"
		""},
	 { (char *)"delete_MeanChannel", (PyCFunction)_wrap_delete_MeanChannel, METH_O, (char *)"delete_MeanChannel(MeanChannel self)"},
	 { (char *)"MeanChannel_swigregister", MeanChannel_swigregister, METH_VARARGS, NULL},
	 { (char *)"MeanChannel_swiginit", MeanChannel_swiginit, METH_VARARGS, NULL},
	 { (char *)"OpenWaterStorage_get_height_function", (PyCFunction)_wrap_OpenWaterStorage_get_height_function, METH_O, (char *)"\n"
		"OpenWaterStorage_get_height_function(OpenWaterStorage self) -> IVolumeHeightFunction\n"
		"\n"
		"virtual const\n"
		"IVolumeHeightFunction& get_height_function() const\n"
		"\n"
		"The functional relation between volume, depth and exposed area. \n"
		""},
	 { (char *)"OpenWaterStorage_set_height_function", _wrap_OpenWaterStorage_set_height_function, METH_VARARGS, (char *)"\n"
		"OpenWaterStorage_set_height_function(OpenWaterStorage self, IVolumeHeightFunction val)\n"
		"\n"
		"virtual void\n"
		"set_height_function(const IVolumeHeightFunction &val) \n"
		""},
	 { (char *)"OpenWaterStorage_wet_area", (PyCFunction)_wrap_OpenWaterStorage_wet_area, METH_O, (char *)"\n"
		"OpenWaterStorage_wet_area(OpenWaterStorage self) -> real\n"
		"\n"
		"real\n"
		"wet_area() const\n"
		"\n"
		"Returns the exposed surface area in m2. \n"
		""},
	 { (char *)"OpenWaterStorage_create", _wrap_OpenWaterStorage_create, METH_VARARGS, (char *)"\n"
		"create(project _project, real Area) -> ptr\n"
		"OpenWaterStorage_create(project _project, IVolumeHeightFunction base_geo) -> ptr\n"
		""},
	 { (char *)"OpenWaterStorage_from_node", _wrap_OpenWaterStorage_from_node, METH_VARARGS, (char *)"OpenWaterStorage_from_node(ptr node, real Area) -> ptr"},
	 { (char *)"OpenWaterStorage_cast", (PyCFunction)_wrap_OpenWaterStorage_cast, METH_O, (char *)"OpenWaterStorage_cast(ptr node) -> ptr"},
	 { (char *)"OpenWaterStorage_SWIGSharedPtrUpcast", (PyCFunction)_wrap_OpenWaterStorage_SWIGSharedPtrUpcast, METH_O, (char *)"OpenWaterStorage_SWIGSharedPtrUpcast(__dummy_16__ swigSharedPtrUpcast) -> __dummy_14__"},
	 { (char *)"OpenWaterStorage_depth_set", _wrap_OpenWaterStorage_depth_set, METH_VARARGS, (char *)"OpenWaterStorage_depth_set(OpenWaterStorage self, real depth)"},
	 { (char *)"OpenWaterStorage_depth_get", (PyCFunction)_wrap_OpenWaterStorage_depth_get, METH_O, (char *)"OpenWaterStorage_depth_get(OpenWaterStorage self) -> real"},
	 { (char *)"delete_OpenWaterStorage", (PyCFunction)_wrap_delete_OpenWaterStorage, METH_O, (char *)"delete_OpenWaterStorage(OpenWaterStorage self)"},
	 { (char *)"OpenWaterStorage_swigregister", OpenWaterStorage_swigregister, METH_VARARGS, NULL},
	 { (char *)"Reach_get_height_function", (PyCFunction)_wrap_Reach_get_height_function, METH_O, (char *)"\n"
		"Reach_get_height_function(Reach self) -> IChannel\n"
		"\n"
		"const\n"
		"IChannel& get_height_function() const\n"
		"\n"
		"Returns the channel shape. \n"
		""},
	 { (char *)"Reach_set_height_function", _wrap_Reach_set_height_function, METH_VARARGS, (char *)"\n"
		"Reach_set_height_function(Reach self, IChannel val)\n"
		"\n"
		"virtual void set_height_function(const IVolumeHeightFunction &val) \n"
		""},
	 { (char *)"Reach_get_length", (PyCFunction)_wrap_Reach_get_length, METH_O, (char *)"\n"
		"Reach_get_length(Reach self) -> real\n"
		"\n"
		"real\n"
		"get_length() const\n"
		"\n"
		"Returns the length of the reach. \n"
		""},
	 { (char *)"Reach_set_outlet", _wrap_Reach_set_outlet, METH_VARARGS, (char *)"\n"
		"Reach_set_outlet(Reach self, ptr outlet)\n"
		"\n"
		"void\n"
		"set_outlet(cmf::water::flux_node::ptr outlet)\n"
		"\n"
		"Connects the reach to an outlet, e.g. a boundary condition. \n"
		""},
	 { (char *)"Reach_set_dead_end", (PyCFunction)_wrap_Reach_set_dead_end, METH_O, (char *)"\n"
		"Reach_set_dead_end(Reach self)\n"
		"\n"
		"void\n"
		"set_dead_end() \n"
		""},
	 { (char *)"Reach_set_downstream", _wrap_Reach_set_downstream, METH_VARARGS, (char *)"\n"
		"Reach_set_downstream(Reach self, Reach_ptr new_downstream)\n"
		"\n"
		"void\n"
		"set_downstream(Reach_ptr new_downstream)\n"
		"\n"
		"Connects the reach to another one downstream. \n"
		""},
	 { (char *)"Reach_get_upstream", _wrap_Reach_get_upstream, METH_VARARGS, (char *)"\n"
		"Reach_get_upstream(Reach self, int index) -> Reach_ptr\n"
		"\n"
		"Reach_ptr\n"
		"get_upstream(int index) const\n"
		"\n"
		"Returns a reach upstream of this. \n"
		""},
	 { (char *)"Reach_add_cell", _wrap_Reach_add_cell, METH_VARARGS, (char *)"\n"
		"Reach_add_cell(Reach self, Cell cell, bool soil_cut, real distance, \n"
		"    real width)\n"
		"\n"
		"void\n"
		"add_cell(cmf::upslope::Cell *cell, bool soil_cut, real distance, real\n"
		"width)\n"
		"\n"
		"Connects the surfacewater of a cell with this reach.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"cell:  The cell with the surface water to be connected with this reach\n"
		"\n"
		"soil_cut:  True, if this reach might have inflow through the bank\n"
		"\n"
		"distance:  The average distance from cell to this reach\n"
		"\n"
		"width:  The flow width from cell to this reach \n"
		""},
	 { (char *)"Reach_cuts_soil_of", _wrap_Reach_cuts_soil_of, METH_VARARGS, (char *)"\n"
		"Reach_cuts_soil_of(Reach self, Cell cell) -> bool\n"
		"\n"
		"bool\n"
		"cuts_soil_of(cmf::upslope::Cell *cell) const\n"
		"\n"
		"True if bank flow is possible. \n"
		""},
	 { (char *)"Reach_get_distance_to", _wrap_Reach_get_distance_to, METH_VARARGS, (char *)"\n"
		"Reach_get_distance_to(Reach self, Cell cell) -> real\n"
		"\n"
		"double\n"
		"get_distance_to(const Locatable &cmp)\n"
		"\n"
		"Returns the distance between two locatable objects. \n"
		""},
	 { (char *)"Reach_get_bank_length_with", _wrap_Reach_get_bank_length_with, METH_VARARGS, (char *)"\n"
		"Reach_get_bank_length_with(Reach self, Cell cell) -> real\n"
		"\n"
		"real\n"
		"get_bank_length_with(cmf::upslope::Cell *cell) const\n"
		"\n"
		"The bank length in the cell. \n"
		""},
	 { (char *)"Reach_get_diffusive", (PyCFunction)_wrap_Reach_get_diffusive, METH_O, (char *)"\n"
		"Reach_get_diffusive(Reach self) -> bool\n"
		"\n"
		"bool\n"
		"get_diffusive() const \n"
		""},
	 { (char *)"Reach_set_diffusive", _wrap_Reach_set_diffusive, METH_VARARGS, (char *)"\n"
		"Reach_set_diffusive(Reach self, bool use_diffusive_wave)\n"
		"\n"
		"void\n"
		"set_diffusive(bool use_diffusive_wave)\n"
		"\n"
		"Sets all Manning kind connections to either diffusive or kinematic. \n"
		""},
	 { (char *)"delete_Reach", (PyCFunction)_wrap_delete_Reach, METH_O, (char *)"\n"
		"delete_Reach(Reach self)\n"
		"\n"
		"virtual ~Reach() \n"
		""},
	 { (char *)"Reach_create", _wrap_Reach_create, METH_VARARGS, (char *)"Reach_create(project project, Channel shape, bool diffusive = False) -> ptr"},
	 { (char *)"Reach_SWIGSharedPtrUpcast", (PyCFunction)_wrap_Reach_SWIGSharedPtrUpcast, METH_O, (char *)"Reach_SWIGSharedPtrUpcast(__dummy_18__ swigSharedPtrUpcast) -> __dummy_16__"},
	 { (char *)"Reach_cells_get", (PyCFunction)_wrap_Reach_cells_get, METH_O, (char *)"Reach_cells_get(Reach self) -> cell_vector"},
	 { (char *)"Reach_downstream_get", (PyCFunction)_wrap_Reach_downstream_get, METH_O, (char *)"Reach_downstream_get(Reach self) -> Reach"},
	 { (char *)"Reach_root_get", (PyCFunction)_wrap_Reach_root_get, METH_O, (char *)"Reach_root_get(Reach self) -> Reach"},
	 { (char *)"Reach_upstream_count_get", (PyCFunction)_wrap_Reach_upstream_count_get, METH_O, (char *)"\n"
		"Reach_upstream_count_get(Reach self) -> int\n"
		"\n"
		"int\n"
		"upstream_count() const\n"
		"\n"
		"Returns the number of reaches upstream of this. \n"
		""},
	 { (char *)"Reach_swigregister", Reach_swigregister, METH_VARARGS, NULL},
	 { (char *)"ReachIterator_next", (PyCFunction)_wrap_ReachIterator_next, METH_O, (char *)"\n"
		"ReachIterator_next(ReachIterator self) -> Reach_ptr\n"
		"\n"
		"Reach_ptr\n"
		"next()\n"
		"\n"
		"Returns the next reach in the upstream queue. \n"
		""},
	 { (char *)"ReachIterator_valid", (PyCFunction)_wrap_ReachIterator_valid, METH_O, (char *)"\n"
		"ReachIterator_valid(ReachIterator self) -> bool\n"
		"\n"
		"bool valid()\n"
		"const\n"
		"\n"
		"Returns true, if reaches are left to iterate over. \n"
		""},
	 { (char *)"new_ReachIterator", (PyCFunction)_wrap_new_ReachIterator, METH_O, (char *)"\n"
		"new_ReachIterator(Reach_ptr first) -> ReachIterator\n"
		"\n"
		"ReachIterator(Reach_ptr first)\n"
		"\n"
		"Creates a ReachIterator from a first reach. \n"
		""},
	 { (char *)"ReachIterator_reach_get", (PyCFunction)_wrap_ReachIterator_reach_get, METH_O, (char *)"\n"
		"ReachIterator_reach_get(ReachIterator self) -> Reach\n"
		"\n"
		"Reach_ptr\n"
		"reach() const\n"
		"\n"
		"Returns the current reach. \n"
		""},
	 { (char *)"ReachIterator_position_get", (PyCFunction)_wrap_ReachIterator_position_get, METH_O, (char *)"\n"
		"ReachIterator_position_get(ReachIterator self) -> double\n"
		"\n"
		"double\n"
		"position() const\n"
		"\n"
		"Returns the distance to the root reach. \n"
		""},
	 { (char *)"delete_ReachIterator", (PyCFunction)_wrap_delete_ReachIterator, METH_O, (char *)"delete_ReachIterator(ReachIterator self)"},
	 { (char *)"ReachIterator_swigregister", ReachIterator_swigregister, METH_VARARGS, NULL},
	 { (char *)"ReachIterator_swiginit", ReachIterator_swiginit, METH_VARARGS, NULL},
	 { (char *)"make_river_gap", (PyCFunction)_wrap_make_river_gap, METH_O, (char *)"\n"
		"make_river_gap(Reach_ptr root_reach) -> double\n"
		"\n"
		"double\n"
		"cmf::river::make_river_gap(Reach_ptr root_reach)\n"
		"\n"
		"Ensures that rivers have a monotone downward flow direction. Reaches\n"
		"with a bottom higher than any upstream reach are lowered to the\n"
		"minimum height of any (possibly distant) upstream reach. \n"
		""},
	 { (char *)"delete_lateral_sub_surface_flux", (PyCFunction)_wrap_delete_lateral_sub_surface_flux, METH_O, (char *)"delete_lateral_sub_surface_flux(lateral_sub_surface_flux self)"},
	 { (char *)"lateral_sub_surface_flux_swigregister", lateral_sub_surface_flux_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_Darcy", _wrap_new_Darcy, METH_VARARGS, (char *)"\n"
		"new_Darcy(ptr left, ptr right, real FlowWidth, real Distance = 0) -> Darcy\n"
		"\n"
		"Darcy(cmf::upslope::SoilLayer::ptr left, cmf::water::flux_node::ptr\n"
		"right, real FlowWidth, real Distance=0) \n"
		""},
	 { (char *)"delete_Darcy", (PyCFunction)_wrap_delete_Darcy, METH_O, (char *)"delete_Darcy(Darcy self)"},
	 { (char *)"Darcy_swigregister", Darcy_swigregister, METH_VARARGS, NULL},
	 { (char *)"Darcy_swiginit", Darcy_swiginit, METH_VARARGS, NULL},
	 { (char *)"new_TopographicGradientDarcy", _wrap_new_TopographicGradientDarcy, METH_VARARGS, (char *)"\n"
		"new_TopographicGradientDarcy(ptr left, ptr right, real FlowWidth, real Distance = 0) -> TopographicGradientDarcy\n"
		"\n"
		"TopographicGradientDarcy(cmf::upslope::SoilLayer::ptr left,\n"
		"cmf::water::flux_node::ptr right, real FlowWidth, real Distance=0) \n"
		""},
	 { (char *)"delete_TopographicGradientDarcy", (PyCFunction)_wrap_delete_TopographicGradientDarcy, METH_O, (char *)"delete_TopographicGradientDarcy(TopographicGradientDarcy self)"},
	 { (char *)"TopographicGradientDarcy_swigregister", TopographicGradientDarcy_swigregister, METH_VARARGS, NULL},
	 { (char *)"TopographicGradientDarcy_swiginit", TopographicGradientDarcy_swiginit, METH_VARARGS, NULL},
	 { (char *)"new_OHDISflow", _wrap_new_OHDISflow, METH_VARARGS, (char *)"\n"
		"new_OHDISflow(ptr left, ptr right, real FlowWidth, real Distance = 0) -> OHDISflow\n"
		"\n"
		"OHDISflow(cmf::upslope::SoilLayer::ptr left,\n"
		"cmf::water::flux_node::ptr right, real FlowWidth, real Distance=0) \n"
		""},
	 { (char *)"delete_OHDISflow", (PyCFunction)_wrap_delete_OHDISflow, METH_O, (char *)"delete_OHDISflow(OHDISflow self)"},
	 { (char *)"OHDISflow_swigregister", OHDISflow_swigregister, METH_VARARGS, NULL},
	 { (char *)"OHDISflow_swiginit", OHDISflow_swiginit, METH_VARARGS, NULL},
	 { (char *)"new_Richards_lateral", _wrap_new_Richards_lateral, METH_VARARGS, (char *)"\n"
		"new_Richards_lateral(ptr left, ptr right, real FlowWidth = 0, real Distance = 0) -> Richards_lateral\n"
		"\n"
		"Richards_lateral(cmf::upslope::SoilLayer::ptr left,\n"
		"cmf::water::flux_node::ptr right, real FlowWidth=0, real Distance=0)\n"
		"\n"
		""},
	 { (char *)"delete_Richards_lateral", (PyCFunction)_wrap_delete_Richards_lateral, METH_O, (char *)"delete_Richards_lateral(Richards_lateral self)"},
	 { (char *)"Richards_lateral_swigregister", Richards_lateral_swigregister, METH_VARARGS, NULL},
	 { (char *)"Richards_lateral_swiginit", Richards_lateral_swiginit, METH_VARARGS, NULL},
	 { (char *)"Manning_is_diffusive_wave_set", _wrap_Manning_is_diffusive_wave_set, METH_VARARGS, (char *)"Manning_is_diffusive_wave_set(Manning self, bool is_diffusive_wave)"},
	 { (char *)"Manning_is_diffusive_wave_get", (PyCFunction)_wrap_Manning_is_diffusive_wave_get, METH_O, (char *)"Manning_is_diffusive_wave_get(Manning self) -> bool"},
	 { (char *)"Manning_flux_geometry_set", _wrap_Manning_flux_geometry_set, METH_VARARGS, (char *)"Manning_flux_geometry_set(Manning self, Channel flux_geometry)"},
	 { (char *)"Manning_flux_geometry_get", (PyCFunction)_wrap_Manning_flux_geometry_get, METH_O, (char *)"Manning_flux_geometry_get(Manning self) -> Channel"},
	 { (char *)"delete_Manning", (PyCFunction)_wrap_delete_Manning, METH_O, (char *)"delete_Manning(Manning self)"},
	 { (char *)"Manning_swigregister", Manning_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_Manning_Diffusive", _wrap_new_Manning_Diffusive, METH_VARARGS, (char *)"\n"
		"new_Manning_Diffusive(ptr left, ptr right, Channel reachtype) -> Manning_Diffusive\n"
		"\n"
		"Manning_Diffusive(cmf::river::OpenWaterStorage::ptr left,\n"
		"cmf::water::flux_node::ptr right, cmf::river::Channel reachtype) \n"
		""},
	 { (char *)"delete_Manning_Diffusive", (PyCFunction)_wrap_delete_Manning_Diffusive, METH_O, (char *)"delete_Manning_Diffusive(Manning_Diffusive self)"},
	 { (char *)"Manning_Diffusive_swigregister", Manning_Diffusive_swigregister, METH_VARARGS, NULL},
	 { (char *)"Manning_Diffusive_swiginit", Manning_Diffusive_swiginit, METH_VARARGS, NULL},
	 { (char *)"new_Manning_Kinematic", _wrap_new_Manning_Kinematic, METH_VARARGS, (char *)"\n"
		"new_Manning_Kinematic(ptr left, ptr right, Channel reachtype) -> Manning_Kinematic\n"
		"\n"
		"Manning_Kinematic(cmf::river::OpenWaterStorage::ptr left,\n"
		"cmf::water::flux_node::ptr right, cmf::river::Channel reachtype) \n"
		""},
	 { (char *)"delete_Manning_Kinematic", (PyCFunction)_wrap_delete_Manning_Kinematic, METH_O, (char *)"delete_Manning_Kinematic(Manning_Kinematic self)"},
	 { (char *)"Manning_Kinematic_swigregister", Manning_Kinematic_swigregister, METH_VARARGS, NULL},
	 { (char *)"Manning_Kinematic_swiginit", Manning_Kinematic_swiginit, METH_VARARGS, NULL},
	 { (char *)"new_CanopyOverflow", _wrap_new_CanopyOverflow, METH_VARARGS, (char *)"\n"
		"new_CanopyOverflow(ptr Canopy, ptr target, Cell cell) -> CanopyOverflow\n"
		"\n"
		"CanopyOverflow(cmf::water::WaterStorage::ptr Canopy,\n"
		"cmf::water::flux_node::ptr target, cmf::upslope::Cell &cell) \n"
		""},
	 { (char *)"CanopyOverflow_use_for_cell", (PyCFunction)_wrap_CanopyOverflow_use_for_cell, METH_O, (char *)"CanopyOverflow_use_for_cell(Cell cell) -> CanopyOverflow"},
	 { (char *)"delete_CanopyOverflow", (PyCFunction)_wrap_delete_CanopyOverflow, METH_O, (char *)"delete_CanopyOverflow(CanopyOverflow self)"},
	 { (char *)"CanopyOverflow_swigregister", CanopyOverflow_swigregister, METH_VARARGS, NULL},
	 { (char *)"CanopyOverflow_swiginit", CanopyOverflow_swiginit, METH_VARARGS, NULL},
	 { (char *)"SimpleTindexSnowMelt_SnowMeltRate_set", _wrap_SimpleTindexSnowMelt_SnowMeltRate_set, METH_VARARGS, (char *)"SimpleTindexSnowMelt_SnowMeltRate_set(SimpleTindexSnowMelt self, real SnowMeltRate)"},
	 { (char *)"SimpleTindexSnowMelt_SnowMeltRate_get", (PyCFunction)_wrap_SimpleTindexSnowMelt_SnowMeltRate_get, METH_O, (char *)"SimpleTindexSnowMelt_SnowMeltRate_get(SimpleTindexSnowMelt self) -> real"},
	 { (char *)"new_SimpleTindexSnowMelt", _wrap_new_SimpleTindexSnowMelt, METH_VARARGS, (char *)"\n"
		"new_SimpleTindexSnowMelt(ptr snow, ptr surface_water, Cell cell) -> SimpleTindexSnowMelt\n"
		"\n"
		"SimpleTindexSnowMelt(cmf::water::WaterStorage::ptr snow,\n"
		"cmf::water::flux_node::ptr surface_water, cmf::upslope::Cell &cell) \n"
		""},
	 { (char *)"SimpleTindexSnowMelt_use_for_cell", (PyCFunction)_wrap_SimpleTindexSnowMelt_use_for_cell, METH_O, (char *)"SimpleTindexSnowMelt_use_for_cell(Cell cell)"},
	 { (char *)"delete_SimpleTindexSnowMelt", (PyCFunction)_wrap_delete_SimpleTindexSnowMelt, METH_O, (char *)"delete_SimpleTindexSnowMelt(SimpleTindexSnowMelt self)"},
	 { (char *)"SimpleTindexSnowMelt_swigregister", SimpleTindexSnowMelt_swigregister, METH_VARARGS, NULL},
	 { (char *)"SimpleTindexSnowMelt_swiginit", SimpleTindexSnowMelt_swiginit, METH_VARARGS, NULL},
	 { (char *)"Rainfall_Throughfall_set", _wrap_Rainfall_Throughfall_set, METH_VARARGS, (char *)"Rainfall_Throughfall_set(Rainfall self, bool Throughfall)"},
	 { (char *)"Rainfall_Throughfall_get", (PyCFunction)_wrap_Rainfall_Throughfall_get, METH_O, (char *)"Rainfall_Throughfall_get(Rainfall self) -> bool"},
	 { (char *)"Rainfall_InterceptedRainfall_set", _wrap_Rainfall_InterceptedRainfall_set, METH_VARARGS, (char *)"Rainfall_InterceptedRainfall_set(Rainfall self, bool InterceptedRainfall)"},
	 { (char *)"Rainfall_InterceptedRainfall_get", (PyCFunction)_wrap_Rainfall_InterceptedRainfall_get, METH_O, (char *)"Rainfall_InterceptedRainfall_get(Rainfall self) -> bool"},
	 { (char *)"new_Rainfall", _wrap_new_Rainfall, METH_VARARGS, (char *)"\n"
		"new_Rainfall(ptr target, Cell cell, bool getthroughfall = True, \n"
		"    bool getintercepted = True) -> Rainfall\n"
		"\n"
		"Rainfall(cmf::water::flux_node::ptr target, cmf::upslope::Cell &cell,\n"
		"bool getthroughfall=true, bool getintercepted=true) \n"
		""},
	 { (char *)"delete_Rainfall", (PyCFunction)_wrap_delete_Rainfall, METH_O, (char *)"delete_Rainfall(Rainfall self)"},
	 { (char *)"Rainfall_swigregister", Rainfall_swigregister, METH_VARARGS, NULL},
	 { (char *)"Rainfall_swiginit", Rainfall_swiginit, METH_VARARGS, NULL},
	 { (char *)"new_Snowfall", _wrap_new_Snowfall, METH_VARARGS, (char *)"\n"
		"new_Snowfall(ptr target, Cell cell) -> Snowfall\n"
		"\n"
		"Snowfall(cmf::water::flux_node::ptr target, cmf::upslope::Cell &cell)\n"
		"\n"
		""},
	 { (char *)"delete_Snowfall", (PyCFunction)_wrap_delete_Snowfall, METH_O, (char *)"delete_Snowfall(Snowfall self)"},
	 { (char *)"Snowfall_swigregister", Snowfall_swigregister, METH_VARARGS, NULL},
	 { (char *)"Snowfall_swiginit", Snowfall_swiginit, METH_VARARGS, NULL},
	 { (char *)"new_MatrixInfiltration", _wrap_new_MatrixInfiltration, METH_VARARGS, (char *)"\n"
		"new_MatrixInfiltration(ptr soilwater, ptr surfacewater) -> MatrixInfiltration\n"
		"\n"
		"MatrixInfiltration(cmf::upslope::SoilLayer::ptr soilwater,\n"
		"cmf::water::flux_node::ptr surfacewater) \n"
		""},
	 { (char *)"MatrixInfiltration_use_for_cell", (PyCFunction)_wrap_MatrixInfiltration_use_for_cell, METH_O, (char *)"MatrixInfiltration_use_for_cell(Cell c)"},
	 { (char *)"delete_MatrixInfiltration", (PyCFunction)_wrap_delete_MatrixInfiltration, METH_O, (char *)"delete_MatrixInfiltration(MatrixInfiltration self)"},
	 { (char *)"MatrixInfiltration_swigregister", MatrixInfiltration_swigregister, METH_VARARGS, NULL},
	 { (char *)"MatrixInfiltration_swiginit", MatrixInfiltration_swiginit, METH_VARARGS, NULL},
	 { (char *)"new_CompleteInfiltration", _wrap_new_CompleteInfiltration, METH_VARARGS, (char *)"\n"
		"new_CompleteInfiltration(ptr soilwater, ptr surfacewater) -> CompleteInfiltration\n"
		"\n"
		"CompleteInfiltration(cmf::upslope::SoilLayer::ptr soilwater,\n"
		"cmf::water::flux_node::ptr surfacewater) \n"
		""},
	 { (char *)"delete_CompleteInfiltration", (PyCFunction)_wrap_delete_CompleteInfiltration, METH_O, (char *)"delete_CompleteInfiltration(CompleteInfiltration self)"},
	 { (char *)"CompleteInfiltration_swigregister", CompleteInfiltration_swigregister, METH_VARARGS, NULL},
	 { (char *)"CompleteInfiltration_swiginit", CompleteInfiltration_swiginit, METH_VARARGS, NULL},
	 { (char *)"SWATPercolation_use_for_cell", _wrap_SWATPercolation_use_for_cell, METH_VARARGS, (char *)"SWATPercolation_use_for_cell(Cell cell, bool no_override = True)"},
	 { (char *)"new_SWATPercolation", _wrap_new_SWATPercolation, METH_VARARGS, (char *)"\n"
		"new_SWATPercolation(ptr upperLayer, ptr lowerLayer) -> SWATPercolation\n"
		"\n"
		"SWATPercolation(cmf::upslope::SoilLayer::ptr upperLayer,\n"
		"cmf::upslope::SoilLayer::ptr lowerLayer) \n"
		""},
	 { (char *)"delete_SWATPercolation", (PyCFunction)_wrap_delete_SWATPercolation, METH_O, (char *)"delete_SWATPercolation(SWATPercolation self)"},
	 { (char *)"SWATPercolation_swigregister", SWATPercolation_swigregister, METH_VARARGS, NULL},
	 { (char *)"SWATPercolation_swiginit", SWATPercolation_swiginit, METH_VARARGS, NULL},
	 { (char *)"new_Richards", _wrap_new_Richards, METH_VARARGS, (char *)"\n"
		"new_Richards(ptr left, ptr right) -> Richards\n"
		"\n"
		"Richards(cmf::upslope::SoilLayer::ptr left, cmf::water::flux_node::ptr\n"
		"right) \n"
		""},
	 { (char *)"Richards_use_for_cell", _wrap_Richards_use_for_cell, METH_VARARGS, (char *)"Richards_use_for_cell(Cell cell, bool no_override = True)"},
	 { (char *)"delete_Richards", (PyCFunction)_wrap_delete_Richards, METH_O, (char *)"delete_Richards(Richards self)"},
	 { (char *)"Richards_swigregister", Richards_swigregister, METH_VARARGS, NULL},
	 { (char *)"Richards_swiginit", Richards_swiginit, METH_VARARGS, NULL},
	 { (char *)"HBVparameters_cfmax_set", _wrap_HBVparameters_cfmax_set, METH_VARARGS, (char *)"HBVparameters_cfmax_set(HBVparameters self, double cfmax)"},
	 { (char *)"HBVparameters_cfmax_get", (PyCFunction)_wrap_HBVparameters_cfmax_get, METH_O, (char *)"HBVparameters_cfmax_get(HBVparameters self) -> double"},
	 { (char *)"HBVparameters_sfcf_set", _wrap_HBVparameters_sfcf_set, METH_VARARGS, (char *)"HBVparameters_sfcf_set(HBVparameters self, double sfcf)"},
	 { (char *)"HBVparameters_sfcf_get", (PyCFunction)_wrap_HBVparameters_sfcf_get, METH_O, (char *)"HBVparameters_sfcf_get(HBVparameters self) -> double"},
	 { (char *)"HBVparameters_cfr_set", _wrap_HBVparameters_cfr_set, METH_VARARGS, (char *)"HBVparameters_cfr_set(HBVparameters self, double cfr)"},
	 { (char *)"HBVparameters_cfr_get", (PyCFunction)_wrap_HBVparameters_cfr_get, METH_O, (char *)"HBVparameters_cfr_get(HBVparameters self) -> double"},
	 { (char *)"HBVparameters_cwh_set", _wrap_HBVparameters_cwh_set, METH_VARARGS, (char *)"HBVparameters_cwh_set(HBVparameters self, double cwh)"},
	 { (char *)"HBVparameters_cwh_get", (PyCFunction)_wrap_HBVparameters_cwh_get, METH_O, (char *)"HBVparameters_cwh_get(HBVparameters self) -> double"},
	 { (char *)"HBVparameters_k0_set", _wrap_HBVparameters_k0_set, METH_VARARGS, (char *)"HBVparameters_k0_set(HBVparameters self, double k0)"},
	 { (char *)"HBVparameters_k0_get", (PyCFunction)_wrap_HBVparameters_k0_get, METH_O, (char *)"HBVparameters_k0_get(HBVparameters self) -> double"},
	 { (char *)"HBVparameters_k1_set", _wrap_HBVparameters_k1_set, METH_VARARGS, (char *)"HBVparameters_k1_set(HBVparameters self, double k1)"},
	 { (char *)"HBVparameters_k1_get", (PyCFunction)_wrap_HBVparameters_k1_get, METH_O, (char *)"HBVparameters_k1_get(HBVparameters self) -> double"},
	 { (char *)"HBVparameters_k2_set", _wrap_HBVparameters_k2_set, METH_VARARGS, (char *)"HBVparameters_k2_set(HBVparameters self, double k2)"},
	 { (char *)"HBVparameters_k2_get", (PyCFunction)_wrap_HBVparameters_k2_get, METH_O, (char *)"HBVparameters_k2_get(HBVparameters self) -> double"},
	 { (char *)"HBVparameters_perc_set", _wrap_HBVparameters_perc_set, METH_VARARGS, (char *)"HBVparameters_perc_set(HBVparameters self, double perc)"},
	 { (char *)"HBVparameters_perc_get", (PyCFunction)_wrap_HBVparameters_perc_get, METH_O, (char *)"HBVparameters_perc_get(HBVparameters self) -> double"},
	 { (char *)"HBVparameters_fc_set", _wrap_HBVparameters_fc_set, METH_VARARGS, (char *)"HBVparameters_fc_set(HBVparameters self, double fc)"},
	 { (char *)"HBVparameters_fc_get", (PyCFunction)_wrap_HBVparameters_fc_get, METH_O, (char *)"HBVparameters_fc_get(HBVparameters self) -> double"},
	 { (char *)"HBVparameters_uplim_set", _wrap_HBVparameters_uplim_set, METH_VARARGS, (char *)"HBVparameters_uplim_set(HBVparameters self, double uplim)"},
	 { (char *)"HBVparameters_uplim_get", (PyCFunction)_wrap_HBVparameters_uplim_get, METH_O, (char *)"HBVparameters_uplim_get(HBVparameters self) -> double"},
	 { (char *)"HBVparameters_lowlim_set", _wrap_HBVparameters_lowlim_set, METH_VARARGS, (char *)"HBVparameters_lowlim_set(HBVparameters self, double lowlim)"},
	 { (char *)"HBVparameters_lowlim_get", (PyCFunction)_wrap_HBVparameters_lowlim_get, METH_O, (char *)"HBVparameters_lowlim_get(HBVparameters self) -> double"},
	 { (char *)"HBVparameters_beta_set", _wrap_HBVparameters_beta_set, METH_VARARGS, (char *)"HBVparameters_beta_set(HBVparameters self, double beta)"},
	 { (char *)"HBVparameters_beta_get", (PyCFunction)_wrap_HBVparameters_beta_get, METH_O, (char *)"HBVparameters_beta_get(HBVparameters self) -> double"},
	 { (char *)"new_HBVparameters", _wrap_new_HBVparameters, METH_VARARGS, (char *)"\n"
		"new_HBVparameters(double _k0 = 1, double _k1 = 0.25, double _k2 = 0.005, \n"
		"    double _perc = 0.05, double _fc = 0.3, double _beta = 4.0, \n"
		"    double _uplim = .35, double _lowlim = 1.0, \n"
		"    double _cfmax = 2, double _sfcf = 0.6, \n"
		"    double _cwh = 0.1, double _cfr = 0.05) -> HBVparameters\n"
		"\n"
		"HBVparameters(double _k0=1, double _k1=0.25, double _k2=0.005, double\n"
		"_perc=0.05, double _fc=0.3, double _beta=4.0, double _uplim=.35,\n"
		"double _lowlim=1.0, double _cfmax=2, double _sfcf=0.6, double\n"
		"_cwh=0.1, double _cfr=0.05) \n"
		""},
	 { (char *)"HBVparameters_copy", (PyCFunction)_wrap_HBVparameters_copy, METH_O, (char *)"\n"
		"HBVparameters_copy(HBVparameters self) -> HBVparameters\n"
		"\n"
		"virtual HBVparameters* copy() const \n"
		""},
	 { (char *)"HBVparameters_cast", (PyCFunction)_wrap_HBVparameters_cast, METH_O, (char *)"HBVparameters_cast(RetentionCurve for_cast) -> HBVparameters"},
	 { (char *)"delete_HBVparameters", (PyCFunction)_wrap_delete_HBVparameters, METH_O, (char *)"delete_HBVparameters(HBVparameters self)"},
	 { (char *)"HBVparameters_swigregister", HBVparameters_swigregister, METH_VARARGS, NULL},
	 { (char *)"HBVparameters_swiginit", HBVparameters_swiginit, METH_VARARGS, NULL},
	 { (char *)"new_HBVpercolation", _wrap_new_HBVpercolation, METH_VARARGS, (char *)"\n"
		"new_HBVpercolation(ptr left, ptr right) -> HBVpercolation\n"
		"\n"
		"HBVpercolation(cmf::upslope::SoilLayer::ptr left,\n"
		"cmf::water::flux_node::ptr right) \n"
		""},
	 { (char *)"delete_HBVpercolation", (PyCFunction)_wrap_delete_HBVpercolation, METH_O, (char *)"delete_HBVpercolation(HBVpercolation self)"},
	 { (char *)"HBVpercolation_swigregister", HBVpercolation_swigregister, METH_VARARGS, NULL},
	 { (char *)"HBVpercolation_swiginit", HBVpercolation_swiginit, METH_VARARGS, NULL},
	 { (char *)"new_HBVlateral", _wrap_new_HBVlateral, METH_VARARGS, (char *)"\n"
		"new_HBVlateral(ptr left, ptr right, real width, real dist) -> HBVlateral\n"
		"\n"
		"HBVlateral(cmf::upslope::SoilLayer::ptr left,\n"
		"cmf::water::flux_node::ptr right, real width, real dist) \n"
		""},
	 { (char *)"delete_HBVlateral", (PyCFunction)_wrap_delete_HBVlateral, METH_O, (char *)"delete_HBVlateral(HBVlateral self)"},
	 { (char *)"HBVlateral_swigregister", HBVlateral_swigregister, METH_VARARGS, NULL},
	 { (char *)"HBVlateral_swiginit", HBVlateral_swiginit, METH_VARARGS, NULL},
	 { (char *)"HBVinstall", _wrap_HBVinstall, METH_VARARGS, (char *)"\n"
		"HBVinstall(HBVparameters parameters, Cell cell)\n"
		"\n"
		"void\n"
		"cmf::upslope::connections::HBVinstall(HBVparameters parameters,\n"
		"cmf::upslope::Cell &cell)\n"
		"\n"
		"Installs an HBV like model setup at a cell Reference: Bergstroem et al\n"
		"1995, in Singh (1995): Computer models of watershed hydrology.\n"
		"\n"
		"Removes the layers of a cell and adds three layers with 1m thickness\n"
		"and the HBVparameters as retention curve. Installs HBVpercolation\n"
		"between the layers\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"parameters:  The parameters for the HBV like setup\n"
		"\n"
		"cell:   Cell where HBV like percolation is to be calculated \n"
		""},
	 { (char *)"PenmanMonteith", _wrap_PenmanMonteith, METH_VARARGS, (char *)"\n"
		"PenmanMonteith(real Rn, real ra, real rs, real T, real vap_press_deficit) -> real\n"
		"PenmanMonteith(Weather A, Vegetation veg, double h) -> real\n"
		"\n"
		"real\n"
		"cmf::upslope::ET::PenmanMonteith(cmf::atmosphere::Weather A, const\n"
		"cmf::upslope::vegetation::Vegetation &veg, double h) \n"
		""},
	 { (char *)"Tact", _wrap_Tact, METH_VARARGS, (char *)"\n"
		"Tact(real Tpot, SoilLayer sw, Vegetation veg) -> real\n"
		"\n"
		"real\n"
		"cmf::upslope::ET::Tact(real Tpot, const cmf::upslope::SoilLayer &sw,\n"
		"const cmf::upslope::vegetation::Vegetation &veg) \n"
		""},
	 { (char *)"constantETpot_ETpot_value_set", _wrap_constantETpot_ETpot_value_set, METH_VARARGS, (char *)"constantETpot_ETpot_value_set(constantETpot self, real ETpot_value)"},
	 { (char *)"constantETpot_ETpot_value_get", (PyCFunction)_wrap_constantETpot_ETpot_value_get, METH_O, (char *)"constantETpot_ETpot_value_get(constantETpot self) -> real"},
	 { (char *)"constantETpot_GetETpot", _wrap_constantETpot_GetETpot, METH_VARARGS, (char *)"\n"
		"constantETpot_GetETpot(constantETpot self, Time t) -> real\n"
		"\n"
		"real GetETpot(cmf::math::Time t) const \n"
		""},
	 { (char *)"new_constantETpot", _wrap_new_constantETpot, METH_VARARGS, (char *)"\n"
		"new_constantETpot(ptr source, ptr ET_target, double constantETpot_value) -> constantETpot\n"
		"\n"
		"constantETpot(cmf::upslope::SoilLayer::ptr source,\n"
		"cmf::water::flux_node::ptr ET_target, double constantETpot_value) \n"
		""},
	 { (char *)"delete_constantETpot", (PyCFunction)_wrap_delete_constantETpot, METH_O, (char *)"delete_constantETpot(constantETpot self)"},
	 { (char *)"constantETpot_swigregister", constantETpot_swigregister, METH_VARARGS, NULL},
	 { (char *)"constantETpot_swiginit", constantETpot_swiginit, METH_VARARGS, NULL},
	 { (char *)"PenmanMonteithET_daily_set", _wrap_PenmanMonteithET_daily_set, METH_VARARGS, (char *)"PenmanMonteithET_daily_set(PenmanMonteithET self, bool daily)"},
	 { (char *)"PenmanMonteithET_daily_get", (PyCFunction)_wrap_PenmanMonteithET_daily_get, METH_O, (char *)"PenmanMonteithET_daily_get(PenmanMonteithET self) -> bool"},
	 { (char *)"new_PenmanMonteithET", _wrap_new_PenmanMonteithET, METH_VARARGS, (char *)"\n"
		"new_PenmanMonteithET(ptr source, ptr ET_target) -> PenmanMonteithET\n"
		"\n"
		"PenmanMonteithET(cmf::upslope::SoilLayer::ptr source,\n"
		"cmf::water::flux_node::ptr ET_target) \n"
		""},
	 { (char *)"PenmanMonteithET_r_s", (PyCFunction)_wrap_PenmanMonteithET_r_s, METH_O, (char *)"PenmanMonteithET_r_s(Vegetation veg) -> real"},
	 { (char *)"PenmanMonteithET_r_a", _wrap_PenmanMonteithET_r_a, METH_VARARGS, (char *)"PenmanMonteithET_r_a(Weather A, real veg_height) -> real"},
	 { (char *)"PenmanMonteithET_use_for_cell", (PyCFunction)_wrap_PenmanMonteithET_use_for_cell, METH_O, (char *)"PenmanMonteithET_use_for_cell(Cell cell)"},
	 { (char *)"delete_PenmanMonteithET", (PyCFunction)_wrap_delete_PenmanMonteithET, METH_O, (char *)"delete_PenmanMonteithET(PenmanMonteithET self)"},
	 { (char *)"PenmanMonteithET_swigregister", PenmanMonteithET_swigregister, METH_VARARGS, NULL},
	 { (char *)"PenmanMonteithET_swiginit", PenmanMonteithET_swiginit, METH_VARARGS, NULL},
	 { (char *)"new_ShuttleworthWallaceET", _wrap_new_ShuttleworthWallaceET, METH_VARARGS, (char *)"\n"
		"new_ShuttleworthWallaceET(ptr source, ptr ET_target, Cell cell, string Type = \"Shuttleworth Wallace get_evaporation\") -> ShuttleworthWallaceET\n"
		"\n"
		"ShuttleworthWallaceET(cmf::water::WaterStorage::ptr source,\n"
		"cmf::water::flux_node::ptr ET_target, cmf::upslope::Cell &cell,\n"
		"std::string Type=\"Shuttleworth Wallace get_evaporation\") \n"
		""},
	 { (char *)"ShuttleworthWallaceET_use_for_cell", (PyCFunction)_wrap_ShuttleworthWallaceET_use_for_cell, METH_O, (char *)"ShuttleworthWallaceET_use_for_cell(Cell cell)"},
	 { (char *)"delete_ShuttleworthWallaceET", (PyCFunction)_wrap_delete_ShuttleworthWallaceET, METH_O, (char *)"delete_ShuttleworthWallaceET(ShuttleworthWallaceET self)"},
	 { (char *)"ShuttleworthWallaceET_swigregister", ShuttleworthWallaceET_swigregister, METH_VARARGS, NULL},
	 { (char *)"ShuttleworthWallaceET_swiginit", ShuttleworthWallaceET_swiginit, METH_VARARGS, NULL},
	 { (char *)"new_HargreaveET", _wrap_new_HargreaveET, METH_VARARGS, (char *)"\n"
		"new_HargreaveET(ptr source, ptr ET_target) -> HargreaveET\n"
		"\n"
		"HargreaveET(cmf::upslope::SoilLayer::ptr source,\n"
		"cmf::water::flux_node::ptr ET_target) \n"
		""},
	 { (char *)"HargreaveET_use_for_cell", (PyCFunction)_wrap_HargreaveET_use_for_cell, METH_O, (char *)"HargreaveET_use_for_cell(Cell cell)"},
	 { (char *)"delete_HargreaveET", (PyCFunction)_wrap_delete_HargreaveET, METH_O, (char *)"delete_HargreaveET(HargreaveET self)"},
	 { (char *)"HargreaveET_swigregister", HargreaveET_swigregister, METH_VARARGS, NULL},
	 { (char *)"HargreaveET_swiginit", HargreaveET_swiginit, METH_VARARGS, NULL},
	 { (char *)"new_CanopyStorageEvaporation", _wrap_new_CanopyStorageEvaporation, METH_VARARGS, (char *)"\n"
		"new_CanopyStorageEvaporation(ptr CanopyStorage, ptr ET_target, Cell cell) -> CanopyStorageEvaporation\n"
		"\n"
		"CanopyStorageEvaporation(cmf::water::WaterStorage::ptr CanopyStorage,\n"
		"cmf::water::flux_node::ptr ET_target, cmf::upslope::Cell &cell) \n"
		""},
	 { (char *)"delete_CanopyStorageEvaporation", (PyCFunction)_wrap_delete_CanopyStorageEvaporation, METH_O, (char *)"delete_CanopyStorageEvaporation(CanopyStorageEvaporation self)"},
	 { (char *)"CanopyStorageEvaporation_swigregister", CanopyStorageEvaporation_swigregister, METH_VARARGS, NULL},
	 { (char *)"CanopyStorageEvaporation_swiginit", CanopyStorageEvaporation_swiginit, METH_VARARGS, NULL},
	 { (char *)"new_PenmanEvaporation", _wrap_new_PenmanEvaporation, METH_VARARGS, (char *)"\n"
		"new_PenmanEvaporation(ptr source, ptr Evap_target, Meteorology meteo) -> PenmanEvaporation\n"
		"\n"
		"PenmanEvaporation(cmf::river::OpenWaterStorage::ptr source,\n"
		"cmf::water::flux_node::ptr Evap_target, const\n"
		"cmf::atmosphere::Meteorology &meteo) \n"
		""},
	 { (char *)"delete_PenmanEvaporation", (PyCFunction)_wrap_delete_PenmanEvaporation, METH_O, (char *)"delete_PenmanEvaporation(PenmanEvaporation self)"},
	 { (char *)"PenmanEvaporation_swigregister", PenmanEvaporation_swigregister, METH_VARARGS, NULL},
	 { (char *)"PenmanEvaporation_swiginit", PenmanEvaporation_swiginit, METH_VARARGS, NULL},
	 { (char *)"project_solutes_get", (PyCFunction)_wrap_project_solutes_get, METH_O, (char *)"project_solutes_get(project self) -> solute_vector"},
	 { (char *)"project_meteo_stations_set", _wrap_project_meteo_stations_set, METH_VARARGS, (char *)"project_meteo_stations_set(project self, MeteoStationList meteo_stations)"},
	 { (char *)"project_meteo_stations_get", (PyCFunction)_wrap_project_meteo_stations_get, METH_O, (char *)"project_meteo_stations_get(project self) -> MeteoStationList"},
	 { (char *)"project_outlets_set", _wrap_project_outlets_set, METH_VARARGS, (char *)"project_outlets_set(project self, node_list outlets)"},
	 { (char *)"project_outlets_get", (PyCFunction)_wrap_project_outlets_get, METH_O, (char *)"project_outlets_get(project self) -> node_list"},
	 { (char *)"project_get_cell", _wrap_project_get_cell, METH_VARARGS, (char *)"\n"
		"project_get_cell(project self, int index) -> Cell\n"
		"\n"
		"upslope::Cell&\n"
		"get_cell(int index) \n"
		""},
	 { (char *)"project_size", (PyCFunction)_wrap_project_size, METH_O, (char *)"\n"
		"project_size(project self) -> int\n"
		"\n"
		"int size() const \n"
		""},
	 { (char *)"project_debug_set", _wrap_project_debug_set, METH_VARARGS, (char *)"project_debug_set(project self, bool debug)"},
	 { (char *)"project_debug_get", (PyCFunction)_wrap_project_debug_get, METH_O, (char *)"project_debug_get(project self) -> bool"},
	 { (char *)"new_project", _wrap_new_project, METH_VARARGS, (char *)"\n"
		"new_project(string solute_names = \"\") -> project\n"
		"\n"
		"project(std::string\n"
		"solute_names=\"\")\n"
		"\n"
		"Creates a new project. \n"
		""},
	 { (char *)"delete_project", (PyCFunction)_wrap_delete_project, METH_O, (char *)"\n"
		"delete_project(project self)\n"
		"\n"
		"~project() \n"
		""},
	 { (char *)"project_NewCell", _wrap_project_NewCell, METH_VARARGS, (char *)"\n"
		"NewCell(double x, double y, double z, double Area) -> Cell\n"
		"project_NewCell(project self, point p, double Area) -> Cell\n"
		"\n"
		"cmf::upslope::Cell*\n"
		"NewCell(cmf::geometry::point p, double Area)\n"
		"\n"
		"Creates a new cell. \n"
		""},
	 { (char *)"project_get_reach", _wrap_project_get_reach, METH_VARARGS, (char *)"\n"
		"project_get_reach(project self, int index) -> Reach_ptr\n"
		"\n"
		"cmf::river::Reach_ptr\n"
		"get_reach(int index) \n"
		""},
	 { (char *)"project_reach_count", (PyCFunction)_wrap_project_reach_count, METH_O, (char *)"\n"
		"project_reach_count(project self) -> int\n"
		"\n"
		"int reach_count()\n"
		"const \n"
		""},
	 { (char *)"project_get_storages", (PyCFunction)_wrap_project_get_storages, METH_O, (char *)"\n"
		"project_get_storages(project self) -> node_list\n"
		"\n"
		"cmf::water::node_list get_storages() \n"
		""},
	 { (char *)"project_NewReach", _wrap_project_NewReach, METH_VARARGS, (char *)"\n"
		"project_NewReach(project self, Channel shape, bool diffusive = False) -> Reach_ptr\n"
		"\n"
		"cmf::river::Reach_ptr\n"
		"NewReach(cmf::river::Channel shape, bool diffusive=false)\n"
		"\n"
		"Creates a new reach. \n"
		""},
	 { (char *)"project_cells_get", (PyCFunction)_wrap_project_cells_get, METH_O, (char *)"project_cells_get(project self) -> cell_vector"},
	 { (char *)"project_swigregister", project_swigregister, METH_VARARGS, NULL},
	 { (char *)"project_swiginit", project_swiginit, METH_VARARGS, NULL},
	 { (char *)"SoluteWaterIntegrator_Copy", (PyCFunction)_wrap_SoluteWaterIntegrator_Copy, METH_O, (char *)"\n"
		"SoluteWaterIntegrator_Copy(SoluteWaterIntegrator self) -> SoluteWaterIntegrator\n"
		"\n"
		"virtual cmf::math::SoluteWaterIntegrator* Copy() const \n"
		""},
	 { (char *)"new_SoluteWaterIntegrator", _wrap_new_SoluteWaterIntegrator, METH_VARARGS, (char *)"\n"
		"SoluteWaterIntegrator(Integrator water_integrator, Integrator solute_integrator)\n"
		"new_SoluteWaterIntegrator(Integrator water_integrator, Integrator solute_integrator, \n"
		"    StateVariableOwner states) -> SoluteWaterIntegrator\n"
		"\n"
		"SoluteWaterIntegrator(const cmf::math::Integrator &water_integrator,\n"
		"const cmf::math::Integrator &solute_integrator,\n"
		"cmf::math::StateVariableOwner &states) \n"
		""},
	 { (char *)"SoluteWaterIntegrator_solute_integrator_set", _wrap_SoluteWaterIntegrator_solute_integrator_set, METH_VARARGS, (char *)"SoluteWaterIntegrator_solute_integrator_set(SoluteWaterIntegrator self, Integrator solute_integrator)"},
	 { (char *)"SoluteWaterIntegrator_solute_integrator_get", (PyCFunction)_wrap_SoluteWaterIntegrator_solute_integrator_get, METH_O, (char *)"SoluteWaterIntegrator_solute_integrator_get(SoluteWaterIntegrator self) -> Integrator"},
	 { (char *)"SoluteWaterIntegrator_water_integrator_set", _wrap_SoluteWaterIntegrator_water_integrator_set, METH_VARARGS, (char *)"SoluteWaterIntegrator_water_integrator_set(SoluteWaterIntegrator self, Integrator water_integrator)"},
	 { (char *)"SoluteWaterIntegrator_water_integrator_get", (PyCFunction)_wrap_SoluteWaterIntegrator_water_integrator_get, METH_O, (char *)"SoluteWaterIntegrator_water_integrator_get(SoluteWaterIntegrator self) -> Integrator"},
	 { (char *)"delete_SoluteWaterIntegrator", (PyCFunction)_wrap_delete_SoluteWaterIntegrator, METH_O, (char *)"delete_SoluteWaterIntegrator(SoluteWaterIntegrator self)"},
	 { (char *)"SoluteWaterIntegrator_swigregister", SoluteWaterIntegrator_swigregister, METH_VARARGS, NULL},
	 { (char *)"SoluteWaterIntegrator_swiginit", SoluteWaterIntegrator_swiginit, METH_VARARGS, NULL},
	 { NULL, NULL, 0, NULL }
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_std__tr1__shared_ptrT_cmf__water__flux_node_tTo_p_std__tr1__shared_ptrT_cmf__geometry__Locatable_t(void *x, int *newmemory) {
  *newmemory = SWIG_CAST_NEW_MEMORY;
  return (void *) new std::tr1::shared_ptr< cmf::geometry::Locatable >(*(std::tr1::shared_ptr< cmf::water::flux_node > *)x);
}
static void *_p_cmf__upslope__connections__CanopyOverflowTo_p_cmf__water__flux_connection(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmf::water::flux_connection *)  ((cmf::upslope::connections::CanopyOverflow *) x));
}
static void *_p_cmf__upslope__connections__SnowfallTo_p_cmf__water__flux_connection(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmf::water::flux_connection *)  ((cmf::upslope::connections::Snowfall *) x));
}
static void *_p_cmf__upslope__connections__RainfallTo_p_cmf__water__flux_connection(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmf::water::flux_connection *)  ((cmf::upslope::connections::Rainfall *) x));
}
static void *_p_cmf__water__waterbalance_connectionTo_p_cmf__water__flux_connection(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmf::water::flux_connection *)  ((cmf::water::waterbalance_connection *) x));
}
static void *_p_cmf__river__Manning_KinematicTo_p_cmf__water__flux_connection(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmf::water::flux_connection *) (cmf::river::Manning *) ((cmf::river::Manning_Kinematic *) x));
}
static void *_p_cmf__upslope__connections__TopographicGradientDarcyTo_p_cmf__water__flux_connection(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmf::water::flux_connection *) (cmf::upslope::connections::lateral_sub_surface_flux *) ((cmf::upslope::connections::TopographicGradientDarcy *) x));
}
static void *_p_cmf__upslope__connections__SimpleTindexSnowMeltTo_p_cmf__water__flux_connection(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmf::water::flux_connection *)  ((cmf::upslope::connections::SimpleTindexSnowMelt *) x));
}
static void *_p_cmf__river__Manning_DiffusiveTo_p_cmf__water__flux_connection(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmf::water::flux_connection *) (cmf::river::Manning *) ((cmf::river::Manning_Diffusive *) x));
}
static void *_p_cmf__upslope__connections__SWATPercolationTo_p_cmf__water__flux_connection(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmf::water::flux_connection *)  ((cmf::upslope::connections::SWATPercolation *) x));
}
static void *_p_cmf__upslope__connections__HBVpercolationTo_p_cmf__water__flux_connection(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmf::water::flux_connection *)  ((cmf::upslope::connections::HBVpercolation *) x));
}
static void *_p_cmf__upslope__connections__Richards_lateralTo_p_cmf__water__flux_connection(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmf::water::flux_connection *) (cmf::upslope::connections::lateral_sub_surface_flux *) ((cmf::upslope::connections::Richards_lateral *) x));
}
static void *_p_cmf__upslope__connections__HBVlateralTo_p_cmf__water__flux_connection(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmf::water::flux_connection *) (cmf::upslope::connections::lateral_sub_surface_flux *) ((cmf::upslope::connections::HBVlateral *) x));
}
static void *_p_cmf__upslope__connections__RichardsTo_p_cmf__water__flux_connection(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmf::water::flux_connection *)  ((cmf::upslope::connections::Richards *) x));
}
static void *_p_cmf__upslope__connections__DarcyTo_p_cmf__water__flux_connection(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmf::water::flux_connection *) (cmf::upslope::connections::lateral_sub_surface_flux *) ((cmf::upslope::connections::Darcy *) x));
}
static void *_p_cmf__upslope__ET__ShuttleworthWallaceETTo_p_cmf__water__flux_connection(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmf::water::flux_connection *)  ((cmf::upslope::ET::ShuttleworthWallaceET *) x));
}
static void *_p_cmf__upslope__connections__OHDISflowTo_p_cmf__water__flux_connection(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmf::water::flux_connection *) (cmf::upslope::connections::lateral_sub_surface_flux *) ((cmf::upslope::connections::OHDISflow *) x));
}
static void *_p_cmf__water__TechnicalFluxTo_p_cmf__water__flux_connection(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmf::water::flux_connection *)  ((cmf::water::TechnicalFlux *) x));
}
static void *_p_cmf__upslope__ET__constantETpotTo_p_cmf__water__flux_connection(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmf::water::flux_connection *)  ((cmf::upslope::ET::constantETpot *) x));
}
static void *_p_cmf__river__ManningTo_p_cmf__water__flux_connection(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmf::water::flux_connection *)  ((cmf::river::Manning *) x));
}
static void *_p_cmf__upslope__connections__MatrixInfiltrationTo_p_cmf__water__flux_connection(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmf::water::flux_connection *)  ((cmf::upslope::connections::MatrixInfiltration *) x));
}
static void *_p_cmf__upslope__connections__CompleteInfiltrationTo_p_cmf__water__flux_connection(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmf::water::flux_connection *)  ((cmf::upslope::connections::CompleteInfiltration *) x));
}
static void *_p_cmf__upslope__ET__HargreaveETTo_p_cmf__water__flux_connection(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmf::water::flux_connection *)  ((cmf::upslope::ET::HargreaveET *) x));
}
static void *_p_cmf__upslope__connections__lateral_sub_surface_fluxTo_p_cmf__water__flux_connection(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmf::water::flux_connection *)  ((cmf::upslope::connections::lateral_sub_surface_flux *) x));
}
static void *_p_cmf__upslope__ET__PenmanMonteithETTo_p_cmf__water__flux_connection(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmf::water::flux_connection *)  ((cmf::upslope::ET::PenmanMonteithET *) x));
}
static void *_p_cmf__water__NeumannFluxTo_p_cmf__water__flux_connection(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmf::water::flux_connection *)  ((cmf::water::NeumannFlux *) x));
}
static void *_p_cmf__upslope__ET__CanopyStorageEvaporationTo_p_cmf__water__flux_connection(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmf::water::flux_connection *)  ((cmf::upslope::ET::CanopyStorageEvaporation *) x));
}
static void *_p_cmf__upslope__ET__PenmanEvaporationTo_p_cmf__water__flux_connection(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmf::water::flux_connection *)  ((cmf::upslope::ET::PenmanEvaporation *) x));
}
static void *_p_p_cmf__upslope__connections__CanopyOverflowTo_p_p_cmf__water__flux_connection(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmf::water::flux_connection **)  ((cmf::upslope::connections::CanopyOverflow **) x));
}
static void *_p_p_cmf__upslope__connections__SnowfallTo_p_p_cmf__water__flux_connection(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmf::water::flux_connection **)  ((cmf::upslope::connections::Snowfall **) x));
}
static void *_p_p_cmf__upslope__connections__RainfallTo_p_p_cmf__water__flux_connection(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmf::water::flux_connection **)  ((cmf::upslope::connections::Rainfall **) x));
}
static void *_p_p_cmf__water__waterbalance_connectionTo_p_p_cmf__water__flux_connection(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmf::water::flux_connection **)  ((cmf::water::waterbalance_connection **) x));
}
static void *_p_p_cmf__river__Manning_KinematicTo_p_p_cmf__water__flux_connection(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmf::water::flux_connection **) (cmf::river::Manning *) ((cmf::river::Manning_Kinematic **) x));
}
static void *_p_p_cmf__upslope__connections__TopographicGradientDarcyTo_p_p_cmf__water__flux_connection(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmf::water::flux_connection **) (cmf::upslope::connections::lateral_sub_surface_flux *) ((cmf::upslope::connections::TopographicGradientDarcy **) x));
}
static void *_p_p_cmf__upslope__connections__SimpleTindexSnowMeltTo_p_p_cmf__water__flux_connection(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmf::water::flux_connection **)  ((cmf::upslope::connections::SimpleTindexSnowMelt **) x));
}
static void *_p_p_cmf__river__Manning_DiffusiveTo_p_p_cmf__water__flux_connection(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmf::water::flux_connection **) (cmf::river::Manning *) ((cmf::river::Manning_Diffusive **) x));
}
static void *_p_p_cmf__upslope__connections__SWATPercolationTo_p_p_cmf__water__flux_connection(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmf::water::flux_connection **)  ((cmf::upslope::connections::SWATPercolation **) x));
}
static void *_p_p_cmf__upslope__connections__HBVpercolationTo_p_p_cmf__water__flux_connection(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmf::water::flux_connection **)  ((cmf::upslope::connections::HBVpercolation **) x));
}
static void *_p_p_cmf__upslope__connections__Richards_lateralTo_p_p_cmf__water__flux_connection(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmf::water::flux_connection **) (cmf::upslope::connections::lateral_sub_surface_flux *) ((cmf::upslope::connections::Richards_lateral **) x));
}
static void *_p_p_cmf__upslope__connections__HBVlateralTo_p_p_cmf__water__flux_connection(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmf::water::flux_connection **) (cmf::upslope::connections::lateral_sub_surface_flux *) ((cmf::upslope::connections::HBVlateral **) x));
}
static void *_p_p_cmf__upslope__connections__RichardsTo_p_p_cmf__water__flux_connection(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmf::water::flux_connection **)  ((cmf::upslope::connections::Richards **) x));
}
static void *_p_p_cmf__upslope__connections__DarcyTo_p_p_cmf__water__flux_connection(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmf::water::flux_connection **) (cmf::upslope::connections::lateral_sub_surface_flux *) ((cmf::upslope::connections::Darcy **) x));
}
static void *_p_p_cmf__upslope__ET__ShuttleworthWallaceETTo_p_p_cmf__water__flux_connection(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmf::water::flux_connection **)  ((cmf::upslope::ET::ShuttleworthWallaceET **) x));
}
static void *_p_p_cmf__upslope__connections__OHDISflowTo_p_p_cmf__water__flux_connection(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmf::water::flux_connection **) (cmf::upslope::connections::lateral_sub_surface_flux *) ((cmf::upslope::connections::OHDISflow **) x));
}
static void *_p_p_cmf__water__TechnicalFluxTo_p_p_cmf__water__flux_connection(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmf::water::flux_connection **)  ((cmf::water::TechnicalFlux **) x));
}
static void *_p_p_cmf__upslope__ET__constantETpotTo_p_p_cmf__water__flux_connection(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmf::water::flux_connection **)  ((cmf::upslope::ET::constantETpot **) x));
}
static void *_p_p_cmf__river__ManningTo_p_p_cmf__water__flux_connection(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmf::water::flux_connection **)  ((cmf::river::Manning **) x));
}
static void *_p_p_cmf__upslope__connections__MatrixInfiltrationTo_p_p_cmf__water__flux_connection(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmf::water::flux_connection **)  ((cmf::upslope::connections::MatrixInfiltration **) x));
}
static void *_p_p_cmf__upslope__connections__CompleteInfiltrationTo_p_p_cmf__water__flux_connection(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmf::water::flux_connection **)  ((cmf::upslope::connections::CompleteInfiltration **) x));
}
static void *_p_p_cmf__upslope__ET__HargreaveETTo_p_p_cmf__water__flux_connection(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmf::water::flux_connection **)  ((cmf::upslope::ET::HargreaveET **) x));
}
static void *_p_p_cmf__upslope__connections__lateral_sub_surface_fluxTo_p_p_cmf__water__flux_connection(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmf::water::flux_connection **)  ((cmf::upslope::connections::lateral_sub_surface_flux **) x));
}
static void *_p_p_cmf__upslope__ET__PenmanMonteithETTo_p_p_cmf__water__flux_connection(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmf::water::flux_connection **)  ((cmf::upslope::ET::PenmanMonteithET **) x));
}
static void *_p_p_cmf__water__NeumannFluxTo_p_p_cmf__water__flux_connection(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmf::water::flux_connection **)  ((cmf::water::NeumannFlux **) x));
}
static void *_p_p_cmf__upslope__ET__CanopyStorageEvaporationTo_p_p_cmf__water__flux_connection(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmf::water::flux_connection **)  ((cmf::upslope::ET::CanopyStorageEvaporation **) x));
}
static void *_p_p_cmf__upslope__ET__PenmanEvaporationTo_p_p_cmf__water__flux_connection(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmf::water::flux_connection **)  ((cmf::upslope::ET::PenmanEvaporation **) x));
}
static void *_p_cmf__upslope__LinearRetentionTo_p_cmf__upslope__RetentionCurve(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmf::upslope::RetentionCurve *)  ((cmf::upslope::LinearRetention *) x));
}
static void *_p_cmf__upslope__BrooksCoreyRetentionCurveTo_p_cmf__upslope__RetentionCurve(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmf::upslope::RetentionCurve *)  ((cmf::upslope::BrooksCoreyRetentionCurve *) x));
}
static void *_p_cmf__upslope__connections__HBVparametersTo_p_cmf__upslope__RetentionCurve(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmf::upslope::RetentionCurve *)  ((cmf::upslope::connections::HBVparameters *) x));
}
static void *_p_cmf__upslope__VanGenuchtenMualemTo_p_cmf__upslope__RetentionCurve(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmf::upslope::RetentionCurve *)  ((cmf::upslope::VanGenuchtenMualem *) x));
}
static void *_p_cmf__river__ReachTo_p_cmf__water__flux_node(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmf::water::flux_node *) (cmf::water::WaterStorage *)(cmf::river::OpenWaterStorage *) ((cmf::river::Reach *) x));
}
static void *_p_cmf__water__DricheletBoundaryTo_p_cmf__water__flux_node(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmf::water::flux_node *)  ((cmf::water::DricheletBoundary *) x));
}
static void *_p_cmf__water__NeumannBoundaryTo_p_cmf__water__flux_node(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmf::water::flux_node *)  ((cmf::water::NeumannBoundary *) x));
}
static void *_p_cmf__upslope__SoilLayerTo_p_cmf__water__flux_node(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmf::water::flux_node *) (cmf::water::WaterStorage *) ((cmf::upslope::SoilLayer *) x));
}
static void *_p_cmf__water__WaterStorageTo_p_cmf__water__flux_node(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmf::water::flux_node *)  ((cmf::water::WaterStorage *) x));
}
static void *_p_cmf__river__OpenWaterStorageTo_p_cmf__water__flux_node(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmf::water::flux_node *) (cmf::water::WaterStorage *) ((cmf::river::OpenWaterStorage *) x));
}
static void *_p_cmf__atmosphere__RainCloudTo_p_cmf__water__flux_node(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmf::water::flux_node *) (cmf::water::NeumannBoundary *) ((cmf::atmosphere::RainCloud *) x));
}
static void *_p_cmf__atmosphere__RainCloudTo_p_cmf__water__NeumannBoundary(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmf::water::NeumannBoundary *)  ((cmf::atmosphere::RainCloud *) x));
}
static void *_p_cmf__river__PipeReachTo_p_cmf__river__IChannel(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmf::river::IChannel *)  ((cmf::river::PipeReach *) x));
}
static void *_p_cmf__river__ChannelTo_p_cmf__river__IChannel(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmf::river::IChannel *)  ((cmf::river::Channel *) x));
}
static void *_p_cmf__river__MeanChannelTo_p_cmf__river__IChannel(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmf::river::IChannel *)  ((cmf::river::MeanChannel *) x));
}
static void *_p_cmf__river__SWATReachTypeTo_p_cmf__river__IChannel(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmf::river::IChannel *)  ((cmf::river::SWATReachType *) x));
}
static void *_p_cmf__river__TriangularReachTo_p_cmf__river__IChannel(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmf::river::IChannel *)  ((cmf::river::TriangularReach *) x));
}
static void *_p_cmf__river__RectangularReachTo_p_cmf__river__IChannel(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmf::river::IChannel *)  ((cmf::river::RectangularReach *) x));
}
static void *_p_std__tr1__shared_ptrT_cmf__atmosphere__RainCloud_tTo_p_std__tr1__shared_ptrT_cmf__water__NeumannBoundary_t(void *x, int *newmemory) {
  *newmemory = SWIG_CAST_NEW_MEMORY;
  return (void *) new std::tr1::shared_ptr< cmf::water::NeumannBoundary >(*(std::tr1::shared_ptr< cmf::atmosphere::RainCloud > *)x);
}
static void *_p_cmf__river__IChannelTo_p_cmf__river__IVolumeHeightFunction(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmf::river::IVolumeHeightFunction *)  ((cmf::river::IChannel *) x));
}
static void *_p_cmf__river__PipeReachTo_p_cmf__river__IVolumeHeightFunction(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmf::river::IVolumeHeightFunction *) (cmf::river::IChannel *) ((cmf::river::PipeReach *) x));
}
static void *_p_cmf__river__ChannelTo_p_cmf__river__IVolumeHeightFunction(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmf::river::IVolumeHeightFunction *) (cmf::river::IChannel *) ((cmf::river::Channel *) x));
}
static void *_p_cmf__river__MeanChannelTo_p_cmf__river__IVolumeHeightFunction(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmf::river::IVolumeHeightFunction *) (cmf::river::IChannel *) ((cmf::river::MeanChannel *) x));
}
static void *_p_cmf__river__volume_height_functionTo_p_cmf__river__IVolumeHeightFunction(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmf::river::IVolumeHeightFunction *)  ((cmf::river::volume_height_function *) x));
}
static void *_p_cmf__river__SWATReachTypeTo_p_cmf__river__IVolumeHeightFunction(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmf::river::IVolumeHeightFunction *) (cmf::river::IChannel *) ((cmf::river::SWATReachType *) x));
}
static void *_p_cmf__river__TriangularReachTo_p_cmf__river__IVolumeHeightFunction(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmf::river::IVolumeHeightFunction *) (cmf::river::IChannel *) ((cmf::river::TriangularReach *) x));
}
static void *_p_cmf__river__RectangularReachTo_p_cmf__river__IVolumeHeightFunction(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmf::river::IVolumeHeightFunction *) (cmf::river::IChannel *) ((cmf::river::RectangularReach *) x));
}
static void *_p_cmf__river__PrismTo_p_cmf__river__IVolumeHeightFunction(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmf::river::IVolumeHeightFunction *)  ((cmf::river::Prism *) x));
}
static void *_p_cmf__river__Manning_DiffusiveTo_p_cmf__river__Manning(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmf::river::Manning *)  ((cmf::river::Manning_Diffusive *) x));
}
static void *_p_cmf__river__Manning_KinematicTo_p_cmf__river__Manning(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmf::river::Manning *)  ((cmf::river::Manning_Kinematic *) x));
}
static void *_p_cmf__upslope__connections__TopographicGradientDarcyTo_p_cmf__upslope__connections__lateral_sub_surface_flux(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmf::upslope::connections::lateral_sub_surface_flux *)  ((cmf::upslope::connections::TopographicGradientDarcy *) x));
}
static void *_p_cmf__upslope__connections__Richards_lateralTo_p_cmf__upslope__connections__lateral_sub_surface_flux(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmf::upslope::connections::lateral_sub_surface_flux *)  ((cmf::upslope::connections::Richards_lateral *) x));
}
static void *_p_cmf__upslope__connections__HBVlateralTo_p_cmf__upslope__connections__lateral_sub_surface_flux(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmf::upslope::connections::lateral_sub_surface_flux *)  ((cmf::upslope::connections::HBVlateral *) x));
}
static void *_p_cmf__upslope__connections__DarcyTo_p_cmf__upslope__connections__lateral_sub_surface_flux(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmf::upslope::connections::lateral_sub_surface_flux *)  ((cmf::upslope::connections::Darcy *) x));
}
static void *_p_cmf__upslope__connections__OHDISflowTo_p_cmf__upslope__connections__lateral_sub_surface_flux(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmf::upslope::connections::lateral_sub_surface_flux *)  ((cmf::upslope::connections::OHDISflow *) x));
}
static void *_p_std__tr1__shared_ptrT_cmf__river__Reach_tTo_p_std__tr1__shared_ptrT_cmf__water__WaterStorage_t(void *x, int *newmemory) {{
  *newmemory = SWIG_CAST_NEW_MEMORY;
  return (void *) new std::tr1::shared_ptr<cmf::water::WaterStorage>(*(std::tr1::shared_ptr<cmf::river::Reach> *)x);
}}
static void *_p_std__tr1__shared_ptrT_cmf__river__OpenWaterStorage_tTo_p_std__tr1__shared_ptrT_cmf__water__WaterStorage_t(void *x, int *newmemory) {
  *newmemory = SWIG_CAST_NEW_MEMORY;
  return (void *) new std::tr1::shared_ptr< cmf::water::WaterStorage >(*(std::tr1::shared_ptr< cmf::river::OpenWaterStorage > *)x);
}
static void *_p_std__tr1__shared_ptrT_cmf__upslope__SoilLayer_tTo_p_std__tr1__shared_ptrT_cmf__water__WaterStorage_t(void *x, int *newmemory) {
  *newmemory = SWIG_CAST_NEW_MEMORY;
  return (void *) new std::tr1::shared_ptr< cmf::water::WaterStorage >(*(std::tr1::shared_ptr< cmf::upslope::SoilLayer > *)x);
}
static void *_p_std__tr1__shared_ptrT_cmf__river__Reach_tTo_p_std__tr1__shared_ptrT_cmf__water__flux_node_t(void *x, int *newmemory) {{
  *newmemory = SWIG_CAST_NEW_MEMORY;
  return (void *) new std::tr1::shared_ptr<cmf::water::flux_node>(*(std::tr1::shared_ptr<cmf::river::Reach> *)x);
}}
static void *_p_std__tr1__shared_ptrT_cmf__water__DricheletBoundary_tTo_p_std__tr1__shared_ptrT_cmf__water__flux_node_t(void *x, int *newmemory) {
  *newmemory = SWIG_CAST_NEW_MEMORY;
  return (void *) new std::tr1::shared_ptr< cmf::water::flux_node >(*(std::tr1::shared_ptr< cmf::water::DricheletBoundary > *)x);
}
static void *_p_std__tr1__shared_ptrT_cmf__water__WaterStorage_tTo_p_std__tr1__shared_ptrT_cmf__water__flux_node_t(void *x, int *newmemory) {
  *newmemory = SWIG_CAST_NEW_MEMORY;
  return (void *) new std::tr1::shared_ptr< cmf::water::flux_node >(*(std::tr1::shared_ptr< cmf::water::WaterStorage > *)x);
}
static void *_p_std__tr1__shared_ptrT_cmf__river__OpenWaterStorage_tTo_p_std__tr1__shared_ptrT_cmf__water__flux_node_t(void *x, int *newmemory) {{
  *newmemory = SWIG_CAST_NEW_MEMORY;
  return (void *) new std::tr1::shared_ptr<cmf::water::flux_node>(*(std::tr1::shared_ptr<cmf::river::OpenWaterStorage> *)x);
}}
static void *_p_std__tr1__shared_ptrT_cmf__atmosphere__RainCloud_tTo_p_std__tr1__shared_ptrT_cmf__water__flux_node_t(void *x, int *newmemory) {{
  *newmemory = SWIG_CAST_NEW_MEMORY;
  return (void *) new std::tr1::shared_ptr<cmf::water::flux_node>(*(std::tr1::shared_ptr<cmf::atmosphere::RainCloud> *)x);
}}
static void *_p_std__tr1__shared_ptrT_cmf__water__NeumannBoundary_tTo_p_std__tr1__shared_ptrT_cmf__water__flux_node_t(void *x, int *newmemory) {
  *newmemory = SWIG_CAST_NEW_MEMORY;
  return (void *) new std::tr1::shared_ptr< cmf::water::flux_node >(*(std::tr1::shared_ptr< cmf::water::NeumannBoundary > *)x);
}
static void *_p_std__tr1__shared_ptrT_cmf__upslope__SoilLayer_tTo_p_std__tr1__shared_ptrT_cmf__water__flux_node_t(void *x, int *newmemory) {{
  *newmemory = SWIG_CAST_NEW_MEMORY;
  return (void *) new std::tr1::shared_ptr<cmf::water::flux_node>(*(std::tr1::shared_ptr<cmf::upslope::SoilLayer> *)x);
}}
static void *_p_std__tr1__shared_ptrT_cmf__river__Reach_tTo_p_std__tr1__shared_ptrT_cmf__river__OpenWaterStorage_t(void *x, int *newmemory) {
  *newmemory = SWIG_CAST_NEW_MEMORY;
  return (void *) new std::tr1::shared_ptr< cmf::river::OpenWaterStorage >(*(std::tr1::shared_ptr< cmf::river::Reach > *)x);
}
static void *_p_cmf__atmosphere__RainCloudTo_p_cmf__geometry__Locatable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmf::geometry::Locatable *) (cmf::water::flux_node *)(cmf::water::NeumannBoundary *) ((cmf::atmosphere::RainCloud *) x));
}
static void *_p_cmf__atmosphere__MeteoStationTo_p_cmf__geometry__Locatable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmf::geometry::Locatable *)  ((cmf::atmosphere::MeteoStation *) x));
}
static void *_p_cmf__geometry__LocationTo_p_cmf__geometry__Locatable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmf::geometry::Locatable *)  ((cmf::geometry::Location *) x));
}
static void *_p_cmf__atmosphere__MeteoStationReferenceTo_p_cmf__geometry__Locatable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmf::geometry::Locatable *)  ((cmf::atmosphere::MeteoStationReference *) x));
}
static void *_p_cmf__water__NeumannBoundaryTo_p_cmf__geometry__Locatable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmf::geometry::Locatable *) (cmf::water::flux_node *) ((cmf::water::NeumannBoundary *) x));
}
static void *_p_cmf__water__DricheletBoundaryTo_p_cmf__geometry__Locatable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmf::geometry::Locatable *) (cmf::water::flux_node *) ((cmf::water::DricheletBoundary *) x));
}
static void *_p_cmf__upslope__CellTo_p_cmf__geometry__Locatable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmf::geometry::Locatable *)  ((cmf::upslope::Cell *) x));
}
static void *_p_cmf__upslope__SoilLayerTo_p_cmf__geometry__Locatable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmf::geometry::Locatable *) (cmf::water::flux_node *)(cmf::water::WaterStorage *) ((cmf::upslope::SoilLayer *) x));
}
static void *_p_std__tr1__shared_ptrT_cmf__water__flux_node_tTo_p_cmf__geometry__Locatable(void *x, int *SWIGUNUSEDPARM(newmemory)) {{
  std::tr1::shared_ptr<cmf::water::flux_node>* from_with_type = (std::tr1::shared_ptr<cmf::water::flux_node>*)(x);
  return (from_with_type->get());  
}}
static void *_p_cmf__upslope__TopologyTo_p_cmf__geometry__Locatable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmf::geometry::Locatable *)  ((cmf::upslope::Topology *) x));
}
static void *_p_cmf__water__flux_nodeTo_p_cmf__geometry__Locatable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmf::geometry::Locatable *)  ((cmf::water::flux_node *) x));
}
static void *_p_cmf__river__ReachTo_p_cmf__geometry__Locatable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmf::geometry::Locatable *) (cmf::water::flux_node *)(cmf::water::WaterStorage *)(cmf::river::OpenWaterStorage *) ((cmf::river::Reach *) x));
}
static void *_p_cmf__river__OpenWaterStorageTo_p_cmf__geometry__Locatable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmf::geometry::Locatable *) (cmf::water::flux_node *)(cmf::water::WaterStorage *) ((cmf::river::OpenWaterStorage *) x));
}
static void *_p_cmf__water__WaterStorageTo_p_cmf__geometry__Locatable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmf::geometry::Locatable *) (cmf::water::flux_node *) ((cmf::water::WaterStorage *) x));
}
static void *_p_cmf__math__StateVariableVectorTo_p_std__vectorT_cmf__math__StateVariable_p_std__allocatorT_cmf__math__StateVariable_p_t_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::vector< cmf::math::StateVariable *,std::allocator< cmf::math::StateVariable * > > *)  ((cmf::math::StateVariableVector *) x));
}
static void *_p_std__tr1__shared_ptrT_cmf__river__Reach_tTo_p_std__tr1__shared_ptrT_cmf__math__StateVariable_t(void *x, int *newmemory) {{
  *newmemory = SWIG_CAST_NEW_MEMORY;
  return (void *) new std::tr1::shared_ptr<cmf::math::StateVariable>(*(std::tr1::shared_ptr<cmf::river::Reach> *)x);
}}
static void *_p_std__tr1__shared_ptrT_cmf__water__SoluteStorage_tTo_p_std__tr1__shared_ptrT_cmf__math__StateVariable_t(void *x, int *newmemory) {
  *newmemory = SWIG_CAST_NEW_MEMORY;
  return (void *) new std::tr1::shared_ptr< cmf::math::StateVariable >(*(std::tr1::shared_ptr< cmf::water::SoluteStorage > *)x);
}
static void *_p_std__tr1__shared_ptrT_cmf__river__OpenWaterStorage_tTo_p_std__tr1__shared_ptrT_cmf__math__StateVariable_t(void *x, int *newmemory) {{
  *newmemory = SWIG_CAST_NEW_MEMORY;
  return (void *) new std::tr1::shared_ptr<cmf::math::StateVariable>(*(std::tr1::shared_ptr<cmf::river::OpenWaterStorage> *)x);
}}
static void *_p_std__tr1__shared_ptrT_cmf__water__WaterStorage_tTo_p_std__tr1__shared_ptrT_cmf__math__StateVariable_t(void *x, int *newmemory) {{
  *newmemory = SWIG_CAST_NEW_MEMORY;
  return (void *) new std::tr1::shared_ptr<cmf::math::StateVariable>(*(std::tr1::shared_ptr<cmf::water::WaterStorage> *)x);
}}
static void *_p_std__tr1__shared_ptrT_cmf__upslope__SoilLayer_tTo_p_std__tr1__shared_ptrT_cmf__math__StateVariable_t(void *x, int *newmemory) {{
  *newmemory = SWIG_CAST_NEW_MEMORY;
  return (void *) new std::tr1::shared_ptr<cmf::math::StateVariable>(*(std::tr1::shared_ptr<cmf::upslope::SoilLayer> *)x);
}}
static void *_p_cmf__river__ReachTo_p_cmf__water__WaterStorage(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmf::water::WaterStorage *) (cmf::river::OpenWaterStorage *) ((cmf::river::Reach *) x));
}
static void *_p_cmf__upslope__SoilLayerTo_p_cmf__water__WaterStorage(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmf::water::WaterStorage *)  ((cmf::upslope::SoilLayer *) x));
}
static void *_p_cmf__river__OpenWaterStorageTo_p_cmf__water__WaterStorage(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmf::water::WaterStorage *)  ((cmf::river::OpenWaterStorage *) x));
}
static void *_p_cmf__river__ReachTo_p_cmf__river__OpenWaterStorage(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmf::river::OpenWaterStorage *)  ((cmf::river::Reach *) x));
}
static void *_p_cmf__river__ReachTo_p_cmf__math__StateVariable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmf::math::StateVariable *) (cmf::water::WaterStorage *)(cmf::river::OpenWaterStorage *) ((cmf::river::Reach *) x));
}
static void *_p_cmf__upslope__SoilLayerTo_p_cmf__math__StateVariable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmf::math::StateVariable *) (cmf::water::WaterStorage *) ((cmf::upslope::SoilLayer *) x));
}
static void *_p_cmf__water__SoluteStorageTo_p_cmf__math__StateVariable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmf::math::StateVariable *)  ((cmf::water::SoluteStorage *) x));
}
static void *_p_cmf__water__WaterStorageTo_p_cmf__math__StateVariable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmf::math::StateVariable *)  ((cmf::water::WaterStorage *) x));
}
static void *_p_cmf__river__OpenWaterStorageTo_p_cmf__math__StateVariable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmf::math::StateVariable *) (cmf::water::WaterStorage *) ((cmf::river::OpenWaterStorage *) x));
}
static void *_p_cmf__atmosphere__MeteoStationReferenceTo_p_cmf__atmosphere__Meteorology(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmf::atmosphere::Meteorology *)  ((cmf::atmosphere::MeteoStationReference *) x));
}
static void *_p_cmf__atmosphere__ConstantMeteorologyTo_p_cmf__atmosphere__Meteorology(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmf::atmosphere::Meteorology *)  ((cmf::atmosphere::ConstantMeteorology *) x));
}
static void *_p_cmf__river__ReachTo_p_cmf__math__StateVariableOwner(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmf::math::StateVariableOwner *) (cmf::water::WaterStorage *)(cmf::river::OpenWaterStorage *) ((cmf::river::Reach *) x));
}
static void *_p_cmf__upslope__CellTo_p_cmf__math__StateVariableOwner(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmf::math::StateVariableOwner *)  ((cmf::upslope::Cell *) x));
}
static void *_p_cmf__upslope__SoilLayerTo_p_cmf__math__StateVariableOwner(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmf::math::StateVariableOwner *) (cmf::water::WaterStorage *) ((cmf::upslope::SoilLayer *) x));
}
static void *_p_cmf__water__WaterStorageTo_p_cmf__math__StateVariableOwner(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmf::math::StateVariableOwner *)  ((cmf::water::WaterStorage *) x));
}
static void *_p_cmf__river__OpenWaterStorageTo_p_cmf__math__StateVariableOwner(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmf::math::StateVariableOwner *) (cmf::water::WaterStorage *) ((cmf::river::OpenWaterStorage *) x));
}
static void *_p_cmf__water__node_listTo_p_cmf__math__StateVariableOwner(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmf::math::StateVariableOwner *)  ((cmf::water::node_list *) x));
}
static void *_p_cmf__projectTo_p_cmf__math__StateVariableOwner(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmf::math::StateVariableOwner *)  ((cmf::project *) x));
}
static void *_p_cmf__math__PredictCorrectSimpleTo_p_cmf__math__Integrator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmf::math::Integrator *)  ((cmf::math::PredictCorrectSimple *) x));
}
static void *_p_cmf__math__ExplicitEuler_fixedTo_p_cmf__math__Integrator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmf::math::Integrator *)  ((cmf::math::ExplicitEuler_fixed *) x));
}
static void *_p_cmf__math__BDF2To_p_cmf__math__Integrator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmf::math::Integrator *)  ((cmf::math::BDF2 *) x));
}
static void *_p_cmf__math__ImplicitEulerTo_p_cmf__math__Integrator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmf::math::Integrator *)  ((cmf::math::ImplicitEuler *) x));
}
static void *_p_cmf__math__RKFIntegratorTo_p_cmf__math__Integrator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmf::math::Integrator *)  ((cmf::math::RKFIntegrator *) x));
}
static void *_p_cmf__math__CVodeIntegratorTo_p_cmf__math__Integrator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmf::math::Integrator *)  ((cmf::math::CVodeIntegrator *) x));
}
static void *_p_cmf__math__MultiIntegratorTo_p_cmf__math__Integrator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmf::math::Integrator *)  ((cmf::math::MultiIntegrator *) x));
}
static void *_p_cmf__math__SoluteWaterIntegratorTo_p_cmf__math__Integrator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmf::math::Integrator *)  ((cmf::math::SoluteWaterIntegrator *) x));
}
static swig_type_info _swigt__p_allocator_type = {"_p_allocator_type", "allocator_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_char = {"_p_char", "char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_cmf__atmosphere__ConstantMeteorology = {"_p_cmf__atmosphere__ConstantMeteorology", "cmf::atmosphere::ConstantMeteorology *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_cmf__atmosphere__MeteoStation = {"_p_cmf__atmosphere__MeteoStation", "cmf::atmosphere::MeteoStation *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_cmf__atmosphere__MeteoStationList = {"_p_cmf__atmosphere__MeteoStationList", "cmf::atmosphere::MeteoStationList *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_cmf__atmosphere__MeteoStationReference = {"_p_cmf__atmosphere__MeteoStationReference", "cmf::atmosphere::MeteoStationReference *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_cmf__atmosphere__Meteorology = {"_p_cmf__atmosphere__Meteorology", "cmf::atmosphere::Meteorology *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_cmf__atmosphere__RainCloud = {"_p_cmf__atmosphere__RainCloud", "cmf::atmosphere::RainCloud *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_cmf__atmosphere__Weather = {"_p_cmf__atmosphere__Weather", "cmf::atmosphere::Weather *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_cmf__geometry__Locatable = {"_p_cmf__geometry__Locatable", "cmf::geometry::Locatable *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_cmf__geometry__Location = {"_p_cmf__geometry__Location", "cmf::geometry::Location *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_cmf__geometry__point = {"_p_cmf__geometry__point", "cmf::geometry::point *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_cmf__geometry__point_vector = {"_p_cmf__geometry__point_vector", "cmf::geometry::point_vector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_cmf__math__BDF2 = {"_p_cmf__math__BDF2", "cmf::math::BDF2 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_cmf__math__CVodeIntegrator = {"_p_cmf__math__CVodeIntegrator", "cmf::math::CVodeIntegrator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_cmf__math__Date = {"_p_cmf__math__Date", "cmf::math::Date *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_cmf__math__ExplicitEuler_fixed = {"_p_cmf__math__ExplicitEuler_fixed", "cmf::math::ExplicitEuler_fixed *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_cmf__math__ImplicitEuler = {"_p_cmf__math__ImplicitEuler", "cmf::math::ImplicitEuler *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_cmf__math__Integrator = {"_p_cmf__math__Integrator", "cmf::math::Integrator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_cmf__math__MultiIntegrator = {"_p_cmf__math__MultiIntegrator", "cmf::math::MultiIntegrator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_cmf__math__PredictCorrectSimple = {"_p_cmf__math__PredictCorrectSimple", "cmf::math::PredictCorrectSimple *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_cmf__math__RKFIntegrator = {"_p_cmf__math__RKFIntegrator", "cmf::math::RKFIntegrator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_cmf__math__SoluteWaterIntegrator = {"_p_cmf__math__SoluteWaterIntegrator", "cmf::math::SoluteWaterIntegrator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_cmf__math__StateVariable = {"_p_cmf__math__StateVariable", "cmf::math::StateVariable *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_cmf__math__StateVariableOwner = {"_p_cmf__math__StateVariableOwner", "cmf::math::StateVariableOwner *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_cmf__math__StateVariableVector = {"_p_cmf__math__StateVariableVector", "cmf::math::StateVariableVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_cmf__math__Time = {"_p_cmf__math__Time", "cmf::math::Time *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_cmf__math__num_array = {"_p_cmf__math__num_array", "cmf::math::num_array *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_cmf__math__timeseries = {"_p_cmf__math__timeseries", "cmf::math::timeseries *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_cmf__project = {"_p_cmf__project", "cmf::project *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_cmf__river__Channel = {"_p_cmf__river__Channel", "cmf::river::Channel *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_cmf__river__IChannel = {"_p_cmf__river__IChannel", "cmf::river::IChannel *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_cmf__river__IVolumeHeightFunction = {"_p_cmf__river__IVolumeHeightFunction", "cmf::river::IVolumeHeightFunction *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_cmf__river__Manning = {"_p_cmf__river__Manning", "cmf::river::Manning *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_cmf__river__Manning_Diffusive = {"_p_cmf__river__Manning_Diffusive", "cmf::river::Manning_Diffusive *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_cmf__river__Manning_Kinematic = {"_p_cmf__river__Manning_Kinematic", "cmf::river::Manning_Kinematic *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_cmf__river__MeanChannel = {"_p_cmf__river__MeanChannel", "cmf::river::MeanChannel *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_cmf__river__OpenWaterStorage = {"_p_cmf__river__OpenWaterStorage", "cmf::river::OpenWaterStorage *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_cmf__river__PipeReach = {"_p_cmf__river__PipeReach", "cmf::river::PipeReach *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_cmf__river__Prism = {"_p_cmf__river__Prism", "cmf::river::Prism *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_cmf__river__Reach = {"_p_cmf__river__Reach", "cmf::river::Reach *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_cmf__river__ReachIterator = {"_p_cmf__river__ReachIterator", "cmf::river::ReachIterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_cmf__river__RectangularReach = {"_p_cmf__river__RectangularReach", "cmf::river::RectangularReach *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_cmf__river__SWATReachType = {"_p_cmf__river__SWATReachType", "cmf::river::SWATReachType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_cmf__river__TriangularReach = {"_p_cmf__river__TriangularReach", "cmf::river::TriangularReach *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_cmf__river__volume_height_function = {"_p_cmf__river__volume_height_function", "cmf::river::volume_height_function *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_cmf__upslope__BrooksCoreyRetentionCurve = {"_p_cmf__upslope__BrooksCoreyRetentionCurve", "cmf::upslope::BrooksCoreyRetentionCurve *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_cmf__upslope__Cell = {"_p_cmf__upslope__Cell", "cmf::upslope::Cell *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_cmf__upslope__CellConnector = {"_p_cmf__upslope__CellConnector", "cmf::upslope::CellConnector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_cmf__upslope__ET__CanopyStorageEvaporation = {"_p_cmf__upslope__ET__CanopyStorageEvaporation", "cmf::upslope::ET::CanopyStorageEvaporation *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_cmf__upslope__ET__HargreaveET = {"_p_cmf__upslope__ET__HargreaveET", "cmf::upslope::ET::HargreaveET *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_cmf__upslope__ET__PenmanEvaporation = {"_p_cmf__upslope__ET__PenmanEvaporation", "cmf::upslope::ET::PenmanEvaporation *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_cmf__upslope__ET__PenmanMonteithET = {"_p_cmf__upslope__ET__PenmanMonteithET", "cmf::upslope::ET::PenmanMonteithET *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_cmf__upslope__ET__ShuttleworthWallaceET = {"_p_cmf__upslope__ET__ShuttleworthWallaceET", "cmf::upslope::ET::ShuttleworthWallaceET *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_cmf__upslope__ET__constantETpot = {"_p_cmf__upslope__ET__constantETpot", "cmf::upslope::ET::constantETpot *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_cmf__upslope__LinearRetention = {"_p_cmf__upslope__LinearRetention", "cmf::upslope::LinearRetention *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_cmf__upslope__NeighborIterator = {"_p_cmf__upslope__NeighborIterator", "cmf::upslope::NeighborIterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_cmf__upslope__RetentionCurve = {"_p_cmf__upslope__RetentionCurve", "cmf::upslope::RetentionCurve *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_cmf__upslope__SoilLayer = {"_p_cmf__upslope__SoilLayer", "cmf::upslope::SoilLayer *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_cmf__upslope__Topology = {"_p_cmf__upslope__Topology", "cmf::upslope::Topology *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_cmf__upslope__VanGenuchtenMualem = {"_p_cmf__upslope__VanGenuchtenMualem", "cmf::upslope::VanGenuchtenMualem *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_cmf__upslope__connections__CanopyOverflow = {"_p_cmf__upslope__connections__CanopyOverflow", "cmf::upslope::connections::CanopyOverflow *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_cmf__upslope__connections__CompleteInfiltration = {"_p_cmf__upslope__connections__CompleteInfiltration", "cmf::upslope::connections::CompleteInfiltration *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_cmf__upslope__connections__Darcy = {"_p_cmf__upslope__connections__Darcy", "cmf::upslope::connections::Darcy *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_cmf__upslope__connections__HBVlateral = {"_p_cmf__upslope__connections__HBVlateral", "cmf::upslope::connections::HBVlateral *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_cmf__upslope__connections__HBVparameters = {"_p_cmf__upslope__connections__HBVparameters", "cmf::upslope::connections::HBVparameters *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_cmf__upslope__connections__HBVpercolation = {"_p_cmf__upslope__connections__HBVpercolation", "cmf::upslope::connections::HBVpercolation *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_cmf__upslope__connections__MatrixInfiltration = {"_p_cmf__upslope__connections__MatrixInfiltration", "cmf::upslope::connections::MatrixInfiltration *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_cmf__upslope__connections__OHDISflow = {"_p_cmf__upslope__connections__OHDISflow", "cmf::upslope::connections::OHDISflow *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_cmf__upslope__connections__Rainfall = {"_p_cmf__upslope__connections__Rainfall", "cmf::upslope::connections::Rainfall *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_cmf__upslope__connections__Richards = {"_p_cmf__upslope__connections__Richards", "cmf::upslope::connections::Richards *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_cmf__upslope__connections__Richards_lateral = {"_p_cmf__upslope__connections__Richards_lateral", "cmf::upslope::connections::Richards_lateral *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_cmf__upslope__connections__SWATPercolation = {"_p_cmf__upslope__connections__SWATPercolation", "cmf::upslope::connections::SWATPercolation *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_cmf__upslope__connections__SimpleTindexSnowMelt = {"_p_cmf__upslope__connections__SimpleTindexSnowMelt", "cmf::upslope::connections::SimpleTindexSnowMelt *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_cmf__upslope__connections__Snowfall = {"_p_cmf__upslope__connections__Snowfall", "cmf::upslope::connections::Snowfall *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_cmf__upslope__connections__TopographicGradientDarcy = {"_p_cmf__upslope__connections__TopographicGradientDarcy", "cmf::upslope::connections::TopographicGradientDarcy *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_cmf__upslope__connections__lateral_sub_surface_flux = {"_p_cmf__upslope__connections__lateral_sub_surface_flux", "cmf::upslope::connections::lateral_sub_surface_flux *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_cmf__upslope__vegetation__Vegetation = {"_p_cmf__upslope__vegetation__Vegetation", "cmf::upslope::vegetation::Vegetation *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_cmf__water__DricheletBoundary = {"_p_cmf__water__DricheletBoundary", "cmf::water::DricheletBoundary *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_cmf__water__NeumannBoundary = {"_p_cmf__water__NeumannBoundary", "cmf::water::NeumannBoundary *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_cmf__water__NeumannBoundary_list = {"_p_cmf__water__NeumannBoundary_list", "cmf::water::NeumannBoundary_list *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_cmf__water__NeumannFlux = {"_p_cmf__water__NeumannFlux", "cmf::water::NeumannFlux *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_cmf__water__SoluteStorage = {"_p_cmf__water__SoluteStorage", "cmf::water::SoluteStorage *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_cmf__water__SoluteTimeseries = {"_p_cmf__water__SoluteTimeseries", "cmf::water::SoluteTimeseries *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_cmf__water__TechnicalFlux = {"_p_cmf__water__TechnicalFlux", "cmf::water::TechnicalFlux *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_cmf__water__WaterStorage = {"_p_cmf__water__WaterStorage", "cmf::water::WaterStorage *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_cmf__water__flux_connection = {"_p_cmf__water__flux_connection", "cmf::water::flux_connection *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_cmf__water__flux_node = {"_p_cmf__water__flux_node", "cmf::water::flux_node *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_cmf__water__linear_scale = {"_p_cmf__water__linear_scale", "cmf::water::linear_scale *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_cmf__water__node_list = {"_p_cmf__water__node_list", "cmf::water::node_list *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_cmf__water__solute = {"_p_cmf__water__solute", "cmf::water::solute *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_cmf__water__solute_vector = {"_p_cmf__water__solute_vector", "cmf::water::solute_vector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_cmf__water__waterbalance_connection = {"_p_cmf__water__waterbalance_connection", "cmf::water::waterbalance_connection *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_const_reference = {"_p_const_reference", "const_reference *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_difference_type = {"_p_difference_type", "difference_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_double = {"_p_double", "real *|double *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_double__double = {"_p_f_double__double", "real (*)(real)|double (*)(double)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_key_type = {"_p_key_type", "key_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_PyObject = {"_p_p_PyObject", "PyObject **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ptr = {"_p_ptr", "ptr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_reference = {"_p_reference", "reference *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_size_type = {"_p_size_type", "size_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__invalid_argument = {"_p_std__invalid_argument", "std::invalid_argument *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__lessT_cmf__water__flux_connection_p_t = {"_p_std__lessT_cmf__water__flux_connection_p_t", "std::less< cmf::water::flux_connection * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__setT_cmf__upslope__Cell_p_std__lessT_cmf__upslope__Cell_p_t_std__allocatorT_cmf__upslope__Cell_p_t_t = {"_p_std__setT_cmf__upslope__Cell_p_std__lessT_cmf__upslope__Cell_p_t_std__allocatorT_cmf__upslope__Cell_p_t_t", "std::set< cmf::upslope::Cell *,std::less< cmf::upslope::Cell * >,std::allocator< cmf::upslope::Cell * > > *|cmf::upslope::cell_set *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__setT_cmf__water__flux_connection_p_std__lessT_cmf__water__flux_connection_p_t_std__allocatorT_cmf__water__flux_connection_p_t_t = {"_p_std__setT_cmf__water__flux_connection_p_std__lessT_cmf__water__flux_connection_p_t_std__allocatorT_cmf__water__flux_connection_p_t_t", "cmf::water::connection_set *|std::set< cmf::water::flux_connection * > *|std::set< cmf::water::flux_connection *,std::less< cmf::water::flux_connection * >,std::allocator< cmf::water::flux_connection * > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__setT_cmf__water__flux_connection_p_std__lessT_cmf__water__flux_connection_p_t_std__allocatorT_cmf__water__flux_connection_p_t_t__key_type = {"_p_std__setT_cmf__water__flux_connection_p_std__lessT_cmf__water__flux_connection_p_t_std__allocatorT_cmf__water__flux_connection_p_t_t__key_type", "cmf::water::flux_connection **|std::set< cmf::water::flux_connection * >::key_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_cmf__upslope__connections__Snowfall = {"_p_p_cmf__upslope__connections__Snowfall", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_cmf__upslope__connections__CanopyOverflow = {"_p_p_cmf__upslope__connections__CanopyOverflow", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_cmf__upslope__connections__Rainfall = {"_p_p_cmf__upslope__connections__Rainfall", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_cmf__water__waterbalance_connection = {"_p_p_cmf__water__waterbalance_connection", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_cmf__river__Manning_Kinematic = {"_p_p_cmf__river__Manning_Kinematic", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_cmf__upslope__connections__lateral_sub_surface_flux = {"_p_p_cmf__upslope__connections__lateral_sub_surface_flux", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_cmf__upslope__connections__SWATPercolation = {"_p_p_cmf__upslope__connections__SWATPercolation", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_cmf__upslope__connections__HBVpercolation = {"_p_p_cmf__upslope__connections__HBVpercolation", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_cmf__river__Manning_Diffusive = {"_p_p_cmf__river__Manning_Diffusive", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_cmf__upslope__connections__Richards_lateral = {"_p_p_cmf__upslope__connections__Richards_lateral", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_cmf__upslope__connections__HBVlateral = {"_p_p_cmf__upslope__connections__HBVlateral", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_cmf__upslope__connections__CompleteInfiltration = {"_p_p_cmf__upslope__connections__CompleteInfiltration", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_cmf__upslope__connections__SimpleTindexSnowMelt = {"_p_p_cmf__upslope__connections__SimpleTindexSnowMelt", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_cmf__upslope__connections__Richards = {"_p_p_cmf__upslope__connections__Richards", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_cmf__upslope__ET__ShuttleworthWallaceET = {"_p_p_cmf__upslope__ET__ShuttleworthWallaceET", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_cmf__upslope__connections__Darcy = {"_p_p_cmf__upslope__connections__Darcy", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_cmf__upslope__connections__OHDISflow = {"_p_p_cmf__upslope__connections__OHDISflow", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_cmf__water__TechnicalFlux = {"_p_p_cmf__water__TechnicalFlux", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_cmf__upslope__connections__TopographicGradientDarcy = {"_p_p_cmf__upslope__connections__TopographicGradientDarcy", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_cmf__upslope__ET__constantETpot = {"_p_p_cmf__upslope__ET__constantETpot", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_cmf__river__Manning = {"_p_p_cmf__river__Manning", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_cmf__upslope__connections__MatrixInfiltration = {"_p_p_cmf__upslope__connections__MatrixInfiltration", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_cmf__upslope__ET__HargreaveET = {"_p_p_cmf__upslope__ET__HargreaveET", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_cmf__upslope__ET__PenmanMonteithET = {"_p_p_cmf__upslope__ET__PenmanMonteithET", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_cmf__water__NeumannFlux = {"_p_p_cmf__water__NeumannFlux", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_cmf__upslope__ET__CanopyStorageEvaporation = {"_p_p_cmf__upslope__ET__CanopyStorageEvaporation", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_cmf__upslope__ET__PenmanEvaporation = {"_p_p_cmf__upslope__ET__PenmanEvaporation", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_std__setT_cmf__water__flux_connection_p_std__lessT_cmf__water__flux_connection_p_t_std__allocatorT_cmf__water__flux_connection_p_t_t__value_type = {"_p_std__setT_cmf__water__flux_connection_p_std__lessT_cmf__water__flux_connection_p_t_std__allocatorT_cmf__water__flux_connection_p_t_t__value_type", "cmf::water::flux_connection **|std::set< cmf::water::flux_connection * >::value_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__tr1__shared_ptrT_cmf__atmosphere__MeteoStation_t = {"_p_std__tr1__shared_ptrT_cmf__atmosphere__MeteoStation_t", "std::tr1::shared_ptr< cmf::atmosphere::MeteoStation > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__tr1__shared_ptrT_cmf__atmosphere__RainCloud_t = {"_p_std__tr1__shared_ptrT_cmf__atmosphere__RainCloud_t", "std::tr1::shared_ptr< cmf::atmosphere::RainCloud > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__tr1__shared_ptrT_cmf__geometry__Locatable_t = {"_p_std__tr1__shared_ptrT_cmf__geometry__Locatable_t", "std::tr1::shared_ptr< cmf::geometry::Locatable > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__tr1__shared_ptrT_cmf__math__StateVariable_t = {"_p_std__tr1__shared_ptrT_cmf__math__StateVariable_t", "std::tr1::shared_ptr< cmf::math::StateVariable > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__tr1__shared_ptrT_cmf__river__OpenWaterStorage_t = {"_p_std__tr1__shared_ptrT_cmf__river__OpenWaterStorage_t", "std::tr1::shared_ptr< cmf::river::OpenWaterStorage > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__tr1__shared_ptrT_cmf__river__Reach_t = {"_p_std__tr1__shared_ptrT_cmf__river__Reach_t", "cmf::river::Reach_ptr *|std::tr1::shared_ptr< cmf::river::Reach > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__tr1__shared_ptrT_cmf__upslope__SoilLayer_t = {"_p_std__tr1__shared_ptrT_cmf__upslope__SoilLayer_t", "std::tr1::shared_ptr< cmf::upslope::SoilLayer > *|cmf::upslope::layer_ptr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__tr1__shared_ptrT_cmf__water__DricheletBoundary_t = {"_p_std__tr1__shared_ptrT_cmf__water__DricheletBoundary_t", "std::tr1::shared_ptr< cmf::water::DricheletBoundary > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__tr1__shared_ptrT_cmf__water__NeumannBoundary_t = {"_p_std__tr1__shared_ptrT_cmf__water__NeumannBoundary_t", "cmf::water::NeumannBoundary_ptr *|std::tr1::shared_ptr< cmf::water::NeumannBoundary > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__tr1__shared_ptrT_cmf__water__SoluteStorage_t = {"_p_std__tr1__shared_ptrT_cmf__water__SoluteStorage_t", "std::tr1::shared_ptr< cmf::water::SoluteStorage > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__tr1__shared_ptrT_cmf__water__WaterStorage_t = {"_p_std__tr1__shared_ptrT_cmf__water__WaterStorage_t", "std::tr1::shared_ptr< cmf::water::WaterStorage > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__tr1__shared_ptrT_cmf__water__flux_node_t = {"_p_std__tr1__shared_ptrT_cmf__water__flux_node_t", "std::tr1::shared_ptr< cmf::water::flux_node > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_cmf__geometry__point_std__allocatorT_cmf__geometry__point_t_t = {"_p_std__vectorT_cmf__geometry__point_std__allocatorT_cmf__geometry__point_t_t", "cmf::geometry::Points *|std::vector< cmf::geometry::point,std::allocator< cmf::geometry::point > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_cmf__math__StateVariable_p_std__allocatorT_cmf__math__StateVariable_p_t_t = {"_p_std__vectorT_cmf__math__StateVariable_p_std__allocatorT_cmf__math__StateVariable_p_t_t", "std::vector< cmf::math::StateVariable * > *|std::vector< cmf::math::StateVariable *,std::allocator< cmf::math::StateVariable * > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_cmf__math__StateVariable_p_std__allocatorT_cmf__math__StateVariable_p_t_t__allocator_type = {"_p_std__vectorT_cmf__math__StateVariable_p_std__allocatorT_cmf__math__StateVariable_p_t_t__allocator_type", "std::vector< cmf::math::StateVariable * >::allocator_type *|std::allocator< cmf::math::StateVariable * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_cmf__upslope__Cell_p_std__allocatorT_cmf__upslope__Cell_p_t_t = {"_p_std__vectorT_cmf__upslope__Cell_p_std__allocatorT_cmf__upslope__Cell_p_t_t", "std::vector< cmf::upslope::Cell * > *|std::vector< cmf::upslope::Cell *,std::allocator< cmf::upslope::Cell * > > *|cmf::upslope::cell_vector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_cmf__upslope__Cell_p_std__allocatorT_cmf__upslope__Cell_p_t_t__allocator_type = {"_p_std__vectorT_cmf__upslope__Cell_p_std__allocatorT_cmf__upslope__Cell_p_t_t__allocator_type", "std::vector< cmf::upslope::Cell * >::allocator_type *|std::allocator< cmf::upslope::Cell * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_cmf__water__flux_connection_p_std__allocatorT_cmf__water__flux_connection_p_t_t = {"_p_std__vectorT_cmf__water__flux_connection_p_std__allocatorT_cmf__water__flux_connection_p_t_t", "std::vector< cmf::water::flux_connection *,std::allocator< cmf::water::flux_connection * > > *|std::vector< cmf::water::flux_connection * > *|cmf::water::connection_vector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_cmf__water__flux_connection_p_std__allocatorT_cmf__water__flux_connection_p_t_t__allocator_type = {"_p_std__vectorT_cmf__water__flux_connection_p_std__allocatorT_cmf__water__flux_connection_p_t_t__allocator_type", "std::vector< cmf::water::flux_connection * >::allocator_type *|std::allocator< cmf::water::flux_connection * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_std__tr1__shared_ptrT_cmf__water__WaterStorage_t_std__allocatorT_std__tr1__shared_ptrT_cmf__water__WaterStorage_t_t_t = {"_p_std__vectorT_std__tr1__shared_ptrT_cmf__water__WaterStorage_t_std__allocatorT_std__tr1__shared_ptrT_cmf__water__WaterStorage_t_t_t", "std::vector< std::tr1::shared_ptr< cmf::water::WaterStorage >,std::allocator< std::tr1::shared_ptr< cmf::water::WaterStorage > > > *|std::vector< std::tr1::shared_ptr< cmf::water::WaterStorage > > *|std::vector< cmf::water::WaterStorage::ptr > *|cmf::water::storage_vector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_std__tr1__shared_ptrT_cmf__water__WaterStorage_t_std__allocatorT_std__tr1__shared_ptrT_cmf__water__WaterStorage_t_t_t__allocator_type = {"_p_std__vectorT_std__tr1__shared_ptrT_cmf__water__WaterStorage_t_std__allocatorT_std__tr1__shared_ptrT_cmf__water__WaterStorage_t_t_t__allocator_type", "std::allocator< std::tr1::shared_ptr< cmf::water::WaterStorage > > *|std::vector< std::tr1::shared_ptr< cmf::water::WaterStorage > >::allocator_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_swig__SwigPyIterator = {"_p_swig__SwigPyIterator", "swig::SwigPyIterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_value_type = {"_p_value_type", "value_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__std__setT_cmf__water__flux_connection_p_std__lessT_cmf__water__flux_connection_p_t_std__allocatorT_cmf__water__flux_connection_p_t_t__key_type = {"_std__setT_cmf__water__flux_connection_p_std__lessT_cmf__water__flux_connection_p_t_std__allocatorT_cmf__water__flux_connection_p_t_t__key_type", "cmf::water::flux_connection *|std::set< cmf::water::flux_connection * >::key_type", 0, 0, (void*)0, 0};
static swig_type_info _swigt__std__setT_cmf__water__flux_connection_p_std__lessT_cmf__water__flux_connection_p_t_std__allocatorT_cmf__water__flux_connection_p_t_t__value_type = {"_std__setT_cmf__water__flux_connection_p_std__lessT_cmf__water__flux_connection_p_t_std__allocatorT_cmf__water__flux_connection_p_t_t__value_type", "cmf::water::flux_connection *|std::set< cmf::water::flux_connection * >::value_type", 0, 0, (void*)0, 0};
static swig_type_info _swigt__std__vectorT_cmf__upslope__Cell_p_std__allocatorT_cmf__upslope__Cell_p_t_t__value_type = {"_std__vectorT_cmf__upslope__Cell_p_std__allocatorT_cmf__upslope__Cell_p_t_t__value_type", "cmf::upslope::Cell *|std::vector< cmf::upslope::Cell * >::value_type", 0, 0, (void*)0, 0};
static swig_type_info _swigt__std__vectorT_cmf__water__flux_connection_p_std__allocatorT_cmf__water__flux_connection_p_t_t__value_type = {"_std__vectorT_cmf__water__flux_connection_p_std__allocatorT_cmf__water__flux_connection_p_t_t__value_type", "cmf::water::flux_connection *|std::vector< cmf::water::flux_connection * >::value_type", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_allocator_type,
  &_swigt__p_char,
  &_swigt__p_cmf__atmosphere__ConstantMeteorology,
  &_swigt__p_cmf__atmosphere__MeteoStation,
  &_swigt__p_cmf__atmosphere__MeteoStationList,
  &_swigt__p_cmf__atmosphere__MeteoStationReference,
  &_swigt__p_cmf__atmosphere__Meteorology,
  &_swigt__p_cmf__atmosphere__RainCloud,
  &_swigt__p_cmf__atmosphere__Weather,
  &_swigt__p_cmf__geometry__Locatable,
  &_swigt__p_cmf__geometry__Location,
  &_swigt__p_cmf__geometry__point,
  &_swigt__p_cmf__geometry__point_vector,
  &_swigt__p_cmf__math__BDF2,
  &_swigt__p_cmf__math__CVodeIntegrator,
  &_swigt__p_cmf__math__Date,
  &_swigt__p_cmf__math__ExplicitEuler_fixed,
  &_swigt__p_cmf__math__ImplicitEuler,
  &_swigt__p_cmf__math__Integrator,
  &_swigt__p_cmf__math__MultiIntegrator,
  &_swigt__p_cmf__math__PredictCorrectSimple,
  &_swigt__p_cmf__math__RKFIntegrator,
  &_swigt__p_cmf__math__SoluteWaterIntegrator,
  &_swigt__p_cmf__math__StateVariable,
  &_swigt__p_cmf__math__StateVariableOwner,
  &_swigt__p_cmf__math__StateVariableVector,
  &_swigt__p_cmf__math__Time,
  &_swigt__p_cmf__math__num_array,
  &_swigt__p_cmf__math__timeseries,
  &_swigt__p_cmf__project,
  &_swigt__p_cmf__river__Channel,
  &_swigt__p_cmf__river__IChannel,
  &_swigt__p_cmf__river__IVolumeHeightFunction,
  &_swigt__p_cmf__river__Manning,
  &_swigt__p_cmf__river__Manning_Diffusive,
  &_swigt__p_cmf__river__Manning_Kinematic,
  &_swigt__p_cmf__river__MeanChannel,
  &_swigt__p_cmf__river__OpenWaterStorage,
  &_swigt__p_cmf__river__PipeReach,
  &_swigt__p_cmf__river__Prism,
  &_swigt__p_cmf__river__Reach,
  &_swigt__p_cmf__river__ReachIterator,
  &_swigt__p_cmf__river__RectangularReach,
  &_swigt__p_cmf__river__SWATReachType,
  &_swigt__p_cmf__river__TriangularReach,
  &_swigt__p_cmf__river__volume_height_function,
  &_swigt__p_cmf__upslope__BrooksCoreyRetentionCurve,
  &_swigt__p_cmf__upslope__Cell,
  &_swigt__p_cmf__upslope__CellConnector,
  &_swigt__p_cmf__upslope__ET__CanopyStorageEvaporation,
  &_swigt__p_cmf__upslope__ET__HargreaveET,
  &_swigt__p_cmf__upslope__ET__PenmanEvaporation,
  &_swigt__p_cmf__upslope__ET__PenmanMonteithET,
  &_swigt__p_cmf__upslope__ET__ShuttleworthWallaceET,
  &_swigt__p_cmf__upslope__ET__constantETpot,
  &_swigt__p_cmf__upslope__LinearRetention,
  &_swigt__p_cmf__upslope__NeighborIterator,
  &_swigt__p_cmf__upslope__RetentionCurve,
  &_swigt__p_cmf__upslope__SoilLayer,
  &_swigt__p_cmf__upslope__Topology,
  &_swigt__p_cmf__upslope__VanGenuchtenMualem,
  &_swigt__p_cmf__upslope__connections__CanopyOverflow,
  &_swigt__p_cmf__upslope__connections__CompleteInfiltration,
  &_swigt__p_cmf__upslope__connections__Darcy,
  &_swigt__p_cmf__upslope__connections__HBVlateral,
  &_swigt__p_cmf__upslope__connections__HBVparameters,
  &_swigt__p_cmf__upslope__connections__HBVpercolation,
  &_swigt__p_cmf__upslope__connections__MatrixInfiltration,
  &_swigt__p_cmf__upslope__connections__OHDISflow,
  &_swigt__p_cmf__upslope__connections__Rainfall,
  &_swigt__p_cmf__upslope__connections__Richards,
  &_swigt__p_cmf__upslope__connections__Richards_lateral,
  &_swigt__p_cmf__upslope__connections__SWATPercolation,
  &_swigt__p_cmf__upslope__connections__SimpleTindexSnowMelt,
  &_swigt__p_cmf__upslope__connections__Snowfall,
  &_swigt__p_cmf__upslope__connections__TopographicGradientDarcy,
  &_swigt__p_cmf__upslope__connections__lateral_sub_surface_flux,
  &_swigt__p_cmf__upslope__vegetation__Vegetation,
  &_swigt__p_cmf__water__DricheletBoundary,
  &_swigt__p_cmf__water__NeumannBoundary,
  &_swigt__p_cmf__water__NeumannBoundary_list,
  &_swigt__p_cmf__water__NeumannFlux,
  &_swigt__p_cmf__water__SoluteStorage,
  &_swigt__p_cmf__water__SoluteTimeseries,
  &_swigt__p_cmf__water__TechnicalFlux,
  &_swigt__p_cmf__water__WaterStorage,
  &_swigt__p_cmf__water__flux_connection,
  &_swigt__p_cmf__water__flux_node,
  &_swigt__p_cmf__water__linear_scale,
  &_swigt__p_cmf__water__node_list,
  &_swigt__p_cmf__water__solute,
  &_swigt__p_cmf__water__solute_vector,
  &_swigt__p_cmf__water__waterbalance_connection,
  &_swigt__p_const_reference,
  &_swigt__p_difference_type,
  &_swigt__p_double,
  &_swigt__p_f_double__double,
  &_swigt__p_key_type,
  &_swigt__p_p_PyObject,
  &_swigt__p_p_cmf__river__Manning,
  &_swigt__p_p_cmf__river__Manning_Diffusive,
  &_swigt__p_p_cmf__river__Manning_Kinematic,
  &_swigt__p_p_cmf__upslope__ET__CanopyStorageEvaporation,
  &_swigt__p_p_cmf__upslope__ET__HargreaveET,
  &_swigt__p_p_cmf__upslope__ET__PenmanEvaporation,
  &_swigt__p_p_cmf__upslope__ET__PenmanMonteithET,
  &_swigt__p_p_cmf__upslope__ET__ShuttleworthWallaceET,
  &_swigt__p_p_cmf__upslope__ET__constantETpot,
  &_swigt__p_p_cmf__upslope__connections__CanopyOverflow,
  &_swigt__p_p_cmf__upslope__connections__CompleteInfiltration,
  &_swigt__p_p_cmf__upslope__connections__Darcy,
  &_swigt__p_p_cmf__upslope__connections__HBVlateral,
  &_swigt__p_p_cmf__upslope__connections__HBVpercolation,
  &_swigt__p_p_cmf__upslope__connections__MatrixInfiltration,
  &_swigt__p_p_cmf__upslope__connections__OHDISflow,
  &_swigt__p_p_cmf__upslope__connections__Rainfall,
  &_swigt__p_p_cmf__upslope__connections__Richards,
  &_swigt__p_p_cmf__upslope__connections__Richards_lateral,
  &_swigt__p_p_cmf__upslope__connections__SWATPercolation,
  &_swigt__p_p_cmf__upslope__connections__SimpleTindexSnowMelt,
  &_swigt__p_p_cmf__upslope__connections__Snowfall,
  &_swigt__p_p_cmf__upslope__connections__TopographicGradientDarcy,
  &_swigt__p_p_cmf__upslope__connections__lateral_sub_surface_flux,
  &_swigt__p_p_cmf__water__NeumannFlux,
  &_swigt__p_p_cmf__water__TechnicalFlux,
  &_swigt__p_p_cmf__water__waterbalance_connection,
  &_swigt__p_ptr,
  &_swigt__p_reference,
  &_swigt__p_size_type,
  &_swigt__p_std__invalid_argument,
  &_swigt__p_std__lessT_cmf__water__flux_connection_p_t,
  &_swigt__p_std__setT_cmf__upslope__Cell_p_std__lessT_cmf__upslope__Cell_p_t_std__allocatorT_cmf__upslope__Cell_p_t_t,
  &_swigt__p_std__setT_cmf__water__flux_connection_p_std__lessT_cmf__water__flux_connection_p_t_std__allocatorT_cmf__water__flux_connection_p_t_t,
  &_swigt__p_std__setT_cmf__water__flux_connection_p_std__lessT_cmf__water__flux_connection_p_t_std__allocatorT_cmf__water__flux_connection_p_t_t__key_type,
  &_swigt__p_std__setT_cmf__water__flux_connection_p_std__lessT_cmf__water__flux_connection_p_t_std__allocatorT_cmf__water__flux_connection_p_t_t__value_type,
  &_swigt__p_std__tr1__shared_ptrT_cmf__atmosphere__MeteoStation_t,
  &_swigt__p_std__tr1__shared_ptrT_cmf__atmosphere__RainCloud_t,
  &_swigt__p_std__tr1__shared_ptrT_cmf__geometry__Locatable_t,
  &_swigt__p_std__tr1__shared_ptrT_cmf__math__StateVariable_t,
  &_swigt__p_std__tr1__shared_ptrT_cmf__river__OpenWaterStorage_t,
  &_swigt__p_std__tr1__shared_ptrT_cmf__river__Reach_t,
  &_swigt__p_std__tr1__shared_ptrT_cmf__upslope__SoilLayer_t,
  &_swigt__p_std__tr1__shared_ptrT_cmf__water__DricheletBoundary_t,
  &_swigt__p_std__tr1__shared_ptrT_cmf__water__NeumannBoundary_t,
  &_swigt__p_std__tr1__shared_ptrT_cmf__water__SoluteStorage_t,
  &_swigt__p_std__tr1__shared_ptrT_cmf__water__WaterStorage_t,
  &_swigt__p_std__tr1__shared_ptrT_cmf__water__flux_node_t,
  &_swigt__p_std__vectorT_cmf__geometry__point_std__allocatorT_cmf__geometry__point_t_t,
  &_swigt__p_std__vectorT_cmf__math__StateVariable_p_std__allocatorT_cmf__math__StateVariable_p_t_t,
  &_swigt__p_std__vectorT_cmf__math__StateVariable_p_std__allocatorT_cmf__math__StateVariable_p_t_t__allocator_type,
  &_swigt__p_std__vectorT_cmf__upslope__Cell_p_std__allocatorT_cmf__upslope__Cell_p_t_t,
  &_swigt__p_std__vectorT_cmf__upslope__Cell_p_std__allocatorT_cmf__upslope__Cell_p_t_t__allocator_type,
  &_swigt__p_std__vectorT_cmf__water__flux_connection_p_std__allocatorT_cmf__water__flux_connection_p_t_t,
  &_swigt__p_std__vectorT_cmf__water__flux_connection_p_std__allocatorT_cmf__water__flux_connection_p_t_t__allocator_type,
  &_swigt__p_std__vectorT_std__tr1__shared_ptrT_cmf__water__WaterStorage_t_std__allocatorT_std__tr1__shared_ptrT_cmf__water__WaterStorage_t_t_t,
  &_swigt__p_std__vectorT_std__tr1__shared_ptrT_cmf__water__WaterStorage_t_std__allocatorT_std__tr1__shared_ptrT_cmf__water__WaterStorage_t_t_t__allocator_type,
  &_swigt__p_swig__SwigPyIterator,
  &_swigt__p_value_type,
  &_swigt__std__setT_cmf__water__flux_connection_p_std__lessT_cmf__water__flux_connection_p_t_std__allocatorT_cmf__water__flux_connection_p_t_t__key_type,
  &_swigt__std__setT_cmf__water__flux_connection_p_std__lessT_cmf__water__flux_connection_p_t_std__allocatorT_cmf__water__flux_connection_p_t_t__value_type,
  &_swigt__std__vectorT_cmf__upslope__Cell_p_std__allocatorT_cmf__upslope__Cell_p_t_t__value_type,
  &_swigt__std__vectorT_cmf__water__flux_connection_p_std__allocatorT_cmf__water__flux_connection_p_t_t__value_type,
};

static swig_cast_info _swigc__p_allocator_type[] = {  {&_swigt__p_allocator_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cmf__atmosphere__ConstantMeteorology[] = {  {&_swigt__p_cmf__atmosphere__ConstantMeteorology, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cmf__atmosphere__MeteoStation[] = {  {&_swigt__p_cmf__atmosphere__MeteoStation, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cmf__atmosphere__MeteoStationList[] = {  {&_swigt__p_cmf__atmosphere__MeteoStationList, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cmf__atmosphere__MeteoStationReference[] = {  {&_swigt__p_cmf__atmosphere__MeteoStationReference, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cmf__atmosphere__Meteorology[] = {  {&_swigt__p_cmf__atmosphere__MeteoStationReference, _p_cmf__atmosphere__MeteoStationReferenceTo_p_cmf__atmosphere__Meteorology, 0, 0},  {&_swigt__p_cmf__atmosphere__Meteorology, 0, 0, 0},  {&_swigt__p_cmf__atmosphere__ConstantMeteorology, _p_cmf__atmosphere__ConstantMeteorologyTo_p_cmf__atmosphere__Meteorology, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cmf__atmosphere__RainCloud[] = {  {&_swigt__p_cmf__atmosphere__RainCloud, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cmf__atmosphere__Weather[] = {  {&_swigt__p_cmf__atmosphere__Weather, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cmf__geometry__Locatable[] = {  {&_swigt__p_cmf__atmosphere__RainCloud, _p_cmf__atmosphere__RainCloudTo_p_cmf__geometry__Locatable, 0, 0},  {&_swigt__p_std__tr1__shared_ptrT_cmf__water__WaterStorage_t, 0, 0, 0},  {&_swigt__p_cmf__atmosphere__MeteoStation, _p_cmf__atmosphere__MeteoStationTo_p_cmf__geometry__Locatable, 0, 0},  {&_swigt__p_std__tr1__shared_ptrT_cmf__river__Reach_t, 0, 0, 0},  {&_swigt__p_cmf__upslope__Cell, _p_cmf__upslope__CellTo_p_cmf__geometry__Locatable, 0, 0},  {&_swigt__p_cmf__geometry__Location, _p_cmf__geometry__LocationTo_p_cmf__geometry__Locatable, 0, 0},  {&_swigt__p_cmf__atmosphere__MeteoStationReference, _p_cmf__atmosphere__MeteoStationReferenceTo_p_cmf__geometry__Locatable, 0, 0},  {&_swigt__p_std__tr1__shared_ptrT_cmf__atmosphere__RainCloud_t, 0, 0, 0},  {&_swigt__p_std__tr1__shared_ptrT_cmf__water__DricheletBoundary_t, 0, 0, 0},  {&_swigt__p_std__tr1__shared_ptrT_cmf__water__flux_node_t, _p_std__tr1__shared_ptrT_cmf__water__flux_node_tTo_p_cmf__geometry__Locatable, 0, 0},  {&_swigt__p_std__tr1__shared_ptrT_cmf__water__NeumannBoundary_t, 0, 0, 0},  {&_swigt__p_cmf__water__DricheletBoundary, _p_cmf__water__DricheletBoundaryTo_p_cmf__geometry__Locatable, 0, 0},  {&_swigt__p_cmf__water__NeumannBoundary, _p_cmf__water__NeumannBoundaryTo_p_cmf__geometry__Locatable, 0, 0},  {&_swigt__p_std__tr1__shared_ptrT_cmf__river__OpenWaterStorage_t, 0, 0, 0},  {&_swigt__p_cmf__upslope__SoilLayer, _p_cmf__upslope__SoilLayerTo_p_cmf__geometry__Locatable, 0, 0},  {&_swigt__p_cmf__upslope__Topology, _p_cmf__upslope__TopologyTo_p_cmf__geometry__Locatable, 0, 0},  {&_swigt__std__vectorT_cmf__upslope__Cell_p_std__allocatorT_cmf__upslope__Cell_p_t_t__value_type, 0, 0, 0},  {&_swigt__p_std__tr1__shared_ptrT_cmf__upslope__SoilLayer_t, 0, 0, 0},  {&_swigt__p_cmf__water__flux_node, _p_cmf__water__flux_nodeTo_p_cmf__geometry__Locatable, 0, 0},  {&_swigt__p_cmf__river__Reach, _p_cmf__river__ReachTo_p_cmf__geometry__Locatable, 0, 0},  {&_swigt__p_cmf__water__WaterStorage, _p_cmf__water__WaterStorageTo_p_cmf__geometry__Locatable, 0, 0},  {&_swigt__p_cmf__river__OpenWaterStorage, _p_cmf__river__OpenWaterStorageTo_p_cmf__geometry__Locatable, 0, 0},  {&_swigt__p_cmf__geometry__Locatable, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cmf__geometry__Location[] = {  {&_swigt__p_cmf__geometry__Location, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cmf__geometry__point[] = {  {&_swigt__p_cmf__geometry__point, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cmf__geometry__point_vector[] = {  {&_swigt__p_cmf__geometry__point_vector, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cmf__math__BDF2[] = {  {&_swigt__p_cmf__math__BDF2, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cmf__math__CVodeIntegrator[] = {  {&_swigt__p_cmf__math__CVodeIntegrator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cmf__math__Date[] = {  {&_swigt__p_cmf__math__Date, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cmf__math__ExplicitEuler_fixed[] = {  {&_swigt__p_cmf__math__ExplicitEuler_fixed, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cmf__math__ImplicitEuler[] = {  {&_swigt__p_cmf__math__ImplicitEuler, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cmf__math__Integrator[] = {  {&_swigt__p_cmf__math__PredictCorrectSimple, _p_cmf__math__PredictCorrectSimpleTo_p_cmf__math__Integrator, 0, 0},  {&_swigt__p_cmf__math__BDF2, _p_cmf__math__BDF2To_p_cmf__math__Integrator, 0, 0},  {&_swigt__p_cmf__math__ExplicitEuler_fixed, _p_cmf__math__ExplicitEuler_fixedTo_p_cmf__math__Integrator, 0, 0},  {&_swigt__p_cmf__math__ImplicitEuler, _p_cmf__math__ImplicitEulerTo_p_cmf__math__Integrator, 0, 0},  {&_swigt__p_cmf__math__Integrator, 0, 0, 0},  {&_swigt__p_cmf__math__RKFIntegrator, _p_cmf__math__RKFIntegratorTo_p_cmf__math__Integrator, 0, 0},  {&_swigt__p_cmf__math__CVodeIntegrator, _p_cmf__math__CVodeIntegratorTo_p_cmf__math__Integrator, 0, 0},  {&_swigt__p_cmf__math__MultiIntegrator, _p_cmf__math__MultiIntegratorTo_p_cmf__math__Integrator, 0, 0},  {&_swigt__p_cmf__math__SoluteWaterIntegrator, _p_cmf__math__SoluteWaterIntegratorTo_p_cmf__math__Integrator, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cmf__math__MultiIntegrator[] = {  {&_swigt__p_cmf__math__MultiIntegrator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cmf__math__PredictCorrectSimple[] = {  {&_swigt__p_cmf__math__PredictCorrectSimple, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cmf__math__RKFIntegrator[] = {  {&_swigt__p_cmf__math__RKFIntegrator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cmf__math__SoluteWaterIntegrator[] = {  {&_swigt__p_cmf__math__SoluteWaterIntegrator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cmf__math__StateVariable[] = {  {&_swigt__p_cmf__math__StateVariable, 0, 0, 0},  {&_swigt__p_cmf__river__Reach, _p_cmf__river__ReachTo_p_cmf__math__StateVariable, 0, 0},  {&_swigt__p_cmf__upslope__SoilLayer, _p_cmf__upslope__SoilLayerTo_p_cmf__math__StateVariable, 0, 0},  {&_swigt__p_cmf__water__SoluteStorage, _p_cmf__water__SoluteStorageTo_p_cmf__math__StateVariable, 0, 0},  {&_swigt__p_cmf__water__WaterStorage, _p_cmf__water__WaterStorageTo_p_cmf__math__StateVariable, 0, 0},  {&_swigt__p_cmf__river__OpenWaterStorage, _p_cmf__river__OpenWaterStorageTo_p_cmf__math__StateVariable, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cmf__math__StateVariableOwner[] = {  {&_swigt__p_cmf__math__StateVariableOwner, 0, 0, 0},  {&_swigt__p_cmf__river__Reach, _p_cmf__river__ReachTo_p_cmf__math__StateVariableOwner, 0, 0},  {&_swigt__p_cmf__upslope__SoilLayer, _p_cmf__upslope__SoilLayerTo_p_cmf__math__StateVariableOwner, 0, 0},  {&_swigt__p_cmf__water__WaterStorage, _p_cmf__water__WaterStorageTo_p_cmf__math__StateVariableOwner, 0, 0},  {&_swigt__p_cmf__river__OpenWaterStorage, _p_cmf__river__OpenWaterStorageTo_p_cmf__math__StateVariableOwner, 0, 0},  {&_swigt__p_cmf__upslope__Cell, _p_cmf__upslope__CellTo_p_cmf__math__StateVariableOwner, 0, 0},  {&_swigt__p_cmf__water__node_list, _p_cmf__water__node_listTo_p_cmf__math__StateVariableOwner, 0, 0},  {&_swigt__std__vectorT_cmf__upslope__Cell_p_std__allocatorT_cmf__upslope__Cell_p_t_t__value_type, _p_cmf__upslope__CellTo_p_cmf__math__StateVariableOwner, 0, 0},  {&_swigt__p_cmf__project, _p_cmf__projectTo_p_cmf__math__StateVariableOwner, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cmf__math__StateVariableVector[] = {  {&_swigt__p_cmf__math__StateVariableVector, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cmf__math__Time[] = {  {&_swigt__p_cmf__math__Time, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cmf__math__num_array[] = {  {&_swigt__p_cmf__math__num_array, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cmf__math__timeseries[] = {  {&_swigt__p_cmf__math__timeseries, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cmf__project[] = {  {&_swigt__p_cmf__project, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cmf__river__Channel[] = {  {&_swigt__p_cmf__river__Channel, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cmf__river__IChannel[] = {  {&_swigt__p_cmf__river__IChannel, 0, 0, 0},  {&_swigt__p_cmf__river__PipeReach, _p_cmf__river__PipeReachTo_p_cmf__river__IChannel, 0, 0},  {&_swigt__p_cmf__river__Channel, _p_cmf__river__ChannelTo_p_cmf__river__IChannel, 0, 0},  {&_swigt__p_cmf__river__MeanChannel, _p_cmf__river__MeanChannelTo_p_cmf__river__IChannel, 0, 0},  {&_swigt__p_cmf__river__SWATReachType, _p_cmf__river__SWATReachTypeTo_p_cmf__river__IChannel, 0, 0},  {&_swigt__p_cmf__river__TriangularReach, _p_cmf__river__TriangularReachTo_p_cmf__river__IChannel, 0, 0},  {&_swigt__p_cmf__river__RectangularReach, _p_cmf__river__RectangularReachTo_p_cmf__river__IChannel, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cmf__river__IVolumeHeightFunction[] = {  {&_swigt__p_cmf__river__IChannel, _p_cmf__river__IChannelTo_p_cmf__river__IVolumeHeightFunction, 0, 0},  {&_swigt__p_cmf__river__PipeReach, _p_cmf__river__PipeReachTo_p_cmf__river__IVolumeHeightFunction, 0, 0},  {&_swigt__p_cmf__river__Channel, _p_cmf__river__ChannelTo_p_cmf__river__IVolumeHeightFunction, 0, 0},  {&_swigt__p_cmf__river__MeanChannel, _p_cmf__river__MeanChannelTo_p_cmf__river__IVolumeHeightFunction, 0, 0},  {&_swigt__p_cmf__river__Prism, _p_cmf__river__PrismTo_p_cmf__river__IVolumeHeightFunction, 0, 0},  {&_swigt__p_cmf__river__IVolumeHeightFunction, 0, 0, 0},  {&_swigt__p_cmf__river__SWATReachType, _p_cmf__river__SWATReachTypeTo_p_cmf__river__IVolumeHeightFunction, 0, 0},  {&_swigt__p_cmf__river__volume_height_function, _p_cmf__river__volume_height_functionTo_p_cmf__river__IVolumeHeightFunction, 0, 0},  {&_swigt__p_cmf__river__TriangularReach, _p_cmf__river__TriangularReachTo_p_cmf__river__IVolumeHeightFunction, 0, 0},  {&_swigt__p_cmf__river__RectangularReach, _p_cmf__river__RectangularReachTo_p_cmf__river__IVolumeHeightFunction, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cmf__river__Manning[] = {  {&_swigt__p_cmf__river__Manning_Diffusive, _p_cmf__river__Manning_DiffusiveTo_p_cmf__river__Manning, 0, 0},  {&_swigt__p_cmf__river__Manning_Kinematic, _p_cmf__river__Manning_KinematicTo_p_cmf__river__Manning, 0, 0},  {&_swigt__p_cmf__river__Manning, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cmf__river__Manning_Diffusive[] = {  {&_swigt__p_cmf__river__Manning_Diffusive, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cmf__river__Manning_Kinematic[] = {  {&_swigt__p_cmf__river__Manning_Kinematic, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cmf__river__MeanChannel[] = {  {&_swigt__p_cmf__river__MeanChannel, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cmf__river__OpenWaterStorage[] = {  {&_swigt__p_cmf__river__Reach, _p_cmf__river__ReachTo_p_cmf__river__OpenWaterStorage, 0, 0},  {&_swigt__p_cmf__river__OpenWaterStorage, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cmf__river__PipeReach[] = {  {&_swigt__p_cmf__river__PipeReach, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cmf__river__Prism[] = {  {&_swigt__p_cmf__river__Prism, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cmf__river__Reach[] = {  {&_swigt__p_cmf__river__Reach, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cmf__river__ReachIterator[] = {  {&_swigt__p_cmf__river__ReachIterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cmf__river__RectangularReach[] = {  {&_swigt__p_cmf__river__RectangularReach, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cmf__river__SWATReachType[] = {  {&_swigt__p_cmf__river__SWATReachType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cmf__river__TriangularReach[] = {  {&_swigt__p_cmf__river__TriangularReach, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cmf__river__volume_height_function[] = {  {&_swigt__p_cmf__river__volume_height_function, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cmf__upslope__BrooksCoreyRetentionCurve[] = {  {&_swigt__p_cmf__upslope__BrooksCoreyRetentionCurve, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cmf__upslope__Cell[] = {  {&_swigt__p_cmf__upslope__Cell, 0, 0, 0},  {&_swigt__std__vectorT_cmf__upslope__Cell_p_std__allocatorT_cmf__upslope__Cell_p_t_t__value_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cmf__upslope__CellConnector[] = {  {&_swigt__p_cmf__upslope__CellConnector, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cmf__upslope__ET__CanopyStorageEvaporation[] = {  {&_swigt__p_cmf__upslope__ET__CanopyStorageEvaporation, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cmf__upslope__ET__HargreaveET[] = {  {&_swigt__p_cmf__upslope__ET__HargreaveET, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cmf__upslope__ET__PenmanEvaporation[] = {  {&_swigt__p_cmf__upslope__ET__PenmanEvaporation, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cmf__upslope__ET__PenmanMonteithET[] = {  {&_swigt__p_cmf__upslope__ET__PenmanMonteithET, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cmf__upslope__ET__ShuttleworthWallaceET[] = {  {&_swigt__p_cmf__upslope__ET__ShuttleworthWallaceET, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cmf__upslope__ET__constantETpot[] = {  {&_swigt__p_cmf__upslope__ET__constantETpot, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cmf__upslope__LinearRetention[] = {  {&_swigt__p_cmf__upslope__LinearRetention, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cmf__upslope__NeighborIterator[] = {  {&_swigt__p_cmf__upslope__NeighborIterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cmf__upslope__RetentionCurve[] = {  {&_swigt__p_cmf__upslope__LinearRetention, _p_cmf__upslope__LinearRetentionTo_p_cmf__upslope__RetentionCurve, 0, 0},  {&_swigt__p_cmf__upslope__RetentionCurve, 0, 0, 0},  {&_swigt__p_cmf__upslope__BrooksCoreyRetentionCurve, _p_cmf__upslope__BrooksCoreyRetentionCurveTo_p_cmf__upslope__RetentionCurve, 0, 0},  {&_swigt__p_cmf__upslope__connections__HBVparameters, _p_cmf__upslope__connections__HBVparametersTo_p_cmf__upslope__RetentionCurve, 0, 0},  {&_swigt__p_cmf__upslope__VanGenuchtenMualem, _p_cmf__upslope__VanGenuchtenMualemTo_p_cmf__upslope__RetentionCurve, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cmf__upslope__SoilLayer[] = {  {&_swigt__p_cmf__upslope__SoilLayer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cmf__upslope__Topology[] = {  {&_swigt__p_cmf__upslope__Topology, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cmf__upslope__VanGenuchtenMualem[] = {  {&_swigt__p_cmf__upslope__VanGenuchtenMualem, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cmf__upslope__connections__CanopyOverflow[] = {  {&_swigt__p_cmf__upslope__connections__CanopyOverflow, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cmf__upslope__connections__CompleteInfiltration[] = {  {&_swigt__p_cmf__upslope__connections__CompleteInfiltration, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cmf__upslope__connections__Darcy[] = {  {&_swigt__p_cmf__upslope__connections__Darcy, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cmf__upslope__connections__HBVlateral[] = {  {&_swigt__p_cmf__upslope__connections__HBVlateral, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cmf__upslope__connections__HBVparameters[] = {  {&_swigt__p_cmf__upslope__connections__HBVparameters, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cmf__upslope__connections__HBVpercolation[] = {  {&_swigt__p_cmf__upslope__connections__HBVpercolation, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cmf__upslope__connections__MatrixInfiltration[] = {  {&_swigt__p_cmf__upslope__connections__MatrixInfiltration, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cmf__upslope__connections__OHDISflow[] = {  {&_swigt__p_cmf__upslope__connections__OHDISflow, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cmf__upslope__connections__Rainfall[] = {  {&_swigt__p_cmf__upslope__connections__Rainfall, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cmf__upslope__connections__Richards[] = {  {&_swigt__p_cmf__upslope__connections__Richards, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cmf__upslope__connections__Richards_lateral[] = {  {&_swigt__p_cmf__upslope__connections__Richards_lateral, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cmf__upslope__connections__SWATPercolation[] = {  {&_swigt__p_cmf__upslope__connections__SWATPercolation, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cmf__upslope__connections__SimpleTindexSnowMelt[] = {  {&_swigt__p_cmf__upslope__connections__SimpleTindexSnowMelt, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cmf__upslope__connections__Snowfall[] = {  {&_swigt__p_cmf__upslope__connections__Snowfall, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cmf__upslope__connections__TopographicGradientDarcy[] = {  {&_swigt__p_cmf__upslope__connections__TopographicGradientDarcy, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cmf__upslope__connections__lateral_sub_surface_flux[] = {  {&_swigt__p_cmf__upslope__connections__TopographicGradientDarcy, _p_cmf__upslope__connections__TopographicGradientDarcyTo_p_cmf__upslope__connections__lateral_sub_surface_flux, 0, 0},  {&_swigt__p_cmf__upslope__connections__Richards_lateral, _p_cmf__upslope__connections__Richards_lateralTo_p_cmf__upslope__connections__lateral_sub_surface_flux, 0, 0},  {&_swigt__p_cmf__upslope__connections__HBVlateral, _p_cmf__upslope__connections__HBVlateralTo_p_cmf__upslope__connections__lateral_sub_surface_flux, 0, 0},  {&_swigt__p_cmf__upslope__connections__lateral_sub_surface_flux, 0, 0, 0},  {&_swigt__p_cmf__upslope__connections__Darcy, _p_cmf__upslope__connections__DarcyTo_p_cmf__upslope__connections__lateral_sub_surface_flux, 0, 0},  {&_swigt__p_cmf__upslope__connections__OHDISflow, _p_cmf__upslope__connections__OHDISflowTo_p_cmf__upslope__connections__lateral_sub_surface_flux, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cmf__upslope__vegetation__Vegetation[] = {  {&_swigt__p_cmf__upslope__vegetation__Vegetation, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cmf__water__DricheletBoundary[] = {  {&_swigt__p_cmf__water__DricheletBoundary, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cmf__water__NeumannBoundary[] = {  {&_swigt__p_cmf__water__NeumannBoundary, 0, 0, 0},  {&_swigt__p_cmf__atmosphere__RainCloud, _p_cmf__atmosphere__RainCloudTo_p_cmf__water__NeumannBoundary, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cmf__water__NeumannBoundary_list[] = {  {&_swigt__p_cmf__water__NeumannBoundary_list, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cmf__water__NeumannFlux[] = {  {&_swigt__p_cmf__water__NeumannFlux, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cmf__water__SoluteStorage[] = {  {&_swigt__p_cmf__water__SoluteStorage, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cmf__water__SoluteTimeseries[] = {  {&_swigt__p_cmf__water__SoluteTimeseries, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cmf__water__TechnicalFlux[] = {  {&_swigt__p_cmf__water__TechnicalFlux, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cmf__water__WaterStorage[] = {  {&_swigt__p_cmf__river__Reach, _p_cmf__river__ReachTo_p_cmf__water__WaterStorage, 0, 0},  {&_swigt__p_cmf__upslope__SoilLayer, _p_cmf__upslope__SoilLayerTo_p_cmf__water__WaterStorage, 0, 0},  {&_swigt__p_cmf__water__WaterStorage, 0, 0, 0},  {&_swigt__p_cmf__river__OpenWaterStorage, _p_cmf__river__OpenWaterStorageTo_p_cmf__water__WaterStorage, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cmf__water__flux_connection[] = {  {&_swigt__p_cmf__upslope__connections__Snowfall, _p_cmf__upslope__connections__SnowfallTo_p_cmf__water__flux_connection, 0, 0},  {&_swigt__p_cmf__upslope__connections__CanopyOverflow, _p_cmf__upslope__connections__CanopyOverflowTo_p_cmf__water__flux_connection, 0, 0},  {&_swigt__p_cmf__upslope__connections__TopographicGradientDarcy, _p_cmf__upslope__connections__TopographicGradientDarcyTo_p_cmf__water__flux_connection, 0, 0},  {&_swigt__p_cmf__upslope__connections__Rainfall, _p_cmf__upslope__connections__RainfallTo_p_cmf__water__flux_connection, 0, 0},  {&_swigt__p_cmf__water__waterbalance_connection, _p_cmf__water__waterbalance_connectionTo_p_cmf__water__flux_connection, 0, 0},  {&_swigt__p_cmf__water__flux_connection, 0, 0, 0},  {&_swigt__p_cmf__river__Manning_Kinematic, _p_cmf__river__Manning_KinematicTo_p_cmf__water__flux_connection, 0, 0},  {&_swigt__p_cmf__upslope__connections__SimpleTindexSnowMelt, _p_cmf__upslope__connections__SimpleTindexSnowMeltTo_p_cmf__water__flux_connection, 0, 0},  {&_swigt__std__setT_cmf__water__flux_connection_p_std__lessT_cmf__water__flux_connection_p_t_std__allocatorT_cmf__water__flux_connection_p_t_t__value_type, 0, 0, 0},  {&_swigt__std__setT_cmf__water__flux_connection_p_std__lessT_cmf__water__flux_connection_p_t_std__allocatorT_cmf__water__flux_connection_p_t_t__key_type, 0, 0, 0},  {&_swigt__p_cmf__upslope__connections__SWATPercolation, _p_cmf__upslope__connections__SWATPercolationTo_p_cmf__water__flux_connection, 0, 0},  {&_swigt__p_cmf__upslope__connections__HBVpercolation, _p_cmf__upslope__connections__HBVpercolationTo_p_cmf__water__flux_connection, 0, 0},  {&_swigt__std__vectorT_cmf__water__flux_connection_p_std__allocatorT_cmf__water__flux_connection_p_t_t__value_type, 0, 0, 0},  {&_swigt__p_cmf__river__Manning_Diffusive, _p_cmf__river__Manning_DiffusiveTo_p_cmf__water__flux_connection, 0, 0},  {&_swigt__p_cmf__upslope__connections__Richards_lateral, _p_cmf__upslope__connections__Richards_lateralTo_p_cmf__water__flux_connection, 0, 0},  {&_swigt__p_cmf__upslope__connections__HBVlateral, _p_cmf__upslope__connections__HBVlateralTo_p_cmf__water__flux_connection, 0, 0},  {&_swigt__p_cmf__upslope__connections__Richards, _p_cmf__upslope__connections__RichardsTo_p_cmf__water__flux_connection, 0, 0},  {&_swigt__p_cmf__upslope__ET__ShuttleworthWallaceET, _p_cmf__upslope__ET__ShuttleworthWallaceETTo_p_cmf__water__flux_connection, 0, 0},  {&_swigt__p_cmf__upslope__connections__lateral_sub_surface_flux, _p_cmf__upslope__connections__lateral_sub_surface_fluxTo_p_cmf__water__flux_connection, 0, 0},  {&_swigt__p_cmf__upslope__connections__Darcy, _p_cmf__upslope__connections__DarcyTo_p_cmf__water__flux_connection, 0, 0},  {&_swigt__p_cmf__upslope__connections__OHDISflow, _p_cmf__upslope__connections__OHDISflowTo_p_cmf__water__flux_connection, 0, 0},  {&_swigt__p_cmf__water__TechnicalFlux, _p_cmf__water__TechnicalFluxTo_p_cmf__water__flux_connection, 0, 0},  {&_swigt__p_cmf__upslope__ET__constantETpot, _p_cmf__upslope__ET__constantETpotTo_p_cmf__water__flux_connection, 0, 0},  {&_swigt__p_cmf__river__Manning, _p_cmf__river__ManningTo_p_cmf__water__flux_connection, 0, 0},  {&_swigt__p_cmf__upslope__connections__MatrixInfiltration, _p_cmf__upslope__connections__MatrixInfiltrationTo_p_cmf__water__flux_connection, 0, 0},  {&_swigt__p_cmf__upslope__connections__CompleteInfiltration, _p_cmf__upslope__connections__CompleteInfiltrationTo_p_cmf__water__flux_connection, 0, 0},  {&_swigt__p_cmf__upslope__ET__HargreaveET, _p_cmf__upslope__ET__HargreaveETTo_p_cmf__water__flux_connection, 0, 0},  {&_swigt__p_cmf__upslope__ET__PenmanMonteithET, _p_cmf__upslope__ET__PenmanMonteithETTo_p_cmf__water__flux_connection, 0, 0},  {&_swigt__p_cmf__water__NeumannFlux, _p_cmf__water__NeumannFluxTo_p_cmf__water__flux_connection, 0, 0},  {&_swigt__p_cmf__upslope__ET__CanopyStorageEvaporation, _p_cmf__upslope__ET__CanopyStorageEvaporationTo_p_cmf__water__flux_connection, 0, 0},  {&_swigt__p_cmf__upslope__ET__PenmanEvaporation, _p_cmf__upslope__ET__PenmanEvaporationTo_p_cmf__water__flux_connection, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cmf__water__flux_node[] = {  {&_swigt__p_cmf__water__flux_node, 0, 0, 0},  {&_swigt__p_cmf__river__Reach, _p_cmf__river__ReachTo_p_cmf__water__flux_node, 0, 0},  {&_swigt__p_cmf__water__DricheletBoundary, _p_cmf__water__DricheletBoundaryTo_p_cmf__water__flux_node, 0, 0},  {&_swigt__p_cmf__water__NeumannBoundary, _p_cmf__water__NeumannBoundaryTo_p_cmf__water__flux_node, 0, 0},  {&_swigt__p_cmf__upslope__SoilLayer, _p_cmf__upslope__SoilLayerTo_p_cmf__water__flux_node, 0, 0},  {&_swigt__p_cmf__water__WaterStorage, _p_cmf__water__WaterStorageTo_p_cmf__water__flux_node, 0, 0},  {&_swigt__p_cmf__river__OpenWaterStorage, _p_cmf__river__OpenWaterStorageTo_p_cmf__water__flux_node, 0, 0},  {&_swigt__p_cmf__atmosphere__RainCloud, _p_cmf__atmosphere__RainCloudTo_p_cmf__water__flux_node, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cmf__water__linear_scale[] = {  {&_swigt__p_cmf__water__linear_scale, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cmf__water__node_list[] = {  {&_swigt__p_cmf__water__node_list, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cmf__water__solute[] = {  {&_swigt__p_cmf__water__solute, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cmf__water__solute_vector[] = {  {&_swigt__p_cmf__water__solute_vector, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cmf__water__waterbalance_connection[] = {  {&_swigt__p_cmf__water__waterbalance_connection, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_const_reference[] = {  {&_swigt__p_const_reference, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_difference_type[] = {  {&_swigt__p_difference_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_double[] = {  {&_swigt__p_double, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_double__double[] = {  {&_swigt__p_f_double__double, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_key_type[] = {  {&_swigt__p_key_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_PyObject[] = {  {&_swigt__p_p_PyObject, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ptr[] = {  {&_swigt__p_ptr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_reference[] = {  {&_swigt__p_reference, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_size_type[] = {  {&_swigt__p_size_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__invalid_argument[] = {  {&_swigt__p_std__invalid_argument, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__lessT_cmf__water__flux_connection_p_t[] = {  {&_swigt__p_std__lessT_cmf__water__flux_connection_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__setT_cmf__upslope__Cell_p_std__lessT_cmf__upslope__Cell_p_t_std__allocatorT_cmf__upslope__Cell_p_t_t[] = {  {&_swigt__p_std__setT_cmf__upslope__Cell_p_std__lessT_cmf__upslope__Cell_p_t_std__allocatorT_cmf__upslope__Cell_p_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__setT_cmf__water__flux_connection_p_std__lessT_cmf__water__flux_connection_p_t_std__allocatorT_cmf__water__flux_connection_p_t_t[] = {  {&_swigt__p_std__setT_cmf__water__flux_connection_p_std__lessT_cmf__water__flux_connection_p_t_std__allocatorT_cmf__water__flux_connection_p_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_cmf__upslope__connections__Snowfall[] = {{&_swigt__p_p_cmf__upslope__connections__Snowfall, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_cmf__upslope__connections__CanopyOverflow[] = {{&_swigt__p_p_cmf__upslope__connections__CanopyOverflow, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_cmf__upslope__connections__Rainfall[] = {{&_swigt__p_p_cmf__upslope__connections__Rainfall, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_cmf__water__waterbalance_connection[] = {{&_swigt__p_p_cmf__water__waterbalance_connection, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_cmf__river__Manning_Kinematic[] = {{&_swigt__p_p_cmf__river__Manning_Kinematic, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_cmf__upslope__connections__lateral_sub_surface_flux[] = {{&_swigt__p_p_cmf__upslope__connections__lateral_sub_surface_flux, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_cmf__upslope__connections__SWATPercolation[] = {{&_swigt__p_p_cmf__upslope__connections__SWATPercolation, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_cmf__upslope__connections__HBVpercolation[] = {{&_swigt__p_p_cmf__upslope__connections__HBVpercolation, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_cmf__river__Manning_Diffusive[] = {{&_swigt__p_p_cmf__river__Manning_Diffusive, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_cmf__upslope__connections__Richards_lateral[] = {{&_swigt__p_p_cmf__upslope__connections__Richards_lateral, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_cmf__upslope__connections__HBVlateral[] = {{&_swigt__p_p_cmf__upslope__connections__HBVlateral, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_cmf__upslope__connections__CompleteInfiltration[] = {{&_swigt__p_p_cmf__upslope__connections__CompleteInfiltration, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_cmf__upslope__connections__SimpleTindexSnowMelt[] = {{&_swigt__p_p_cmf__upslope__connections__SimpleTindexSnowMelt, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_cmf__upslope__connections__Richards[] = {{&_swigt__p_p_cmf__upslope__connections__Richards, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_cmf__upslope__ET__ShuttleworthWallaceET[] = {{&_swigt__p_p_cmf__upslope__ET__ShuttleworthWallaceET, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_cmf__upslope__connections__Darcy[] = {{&_swigt__p_p_cmf__upslope__connections__Darcy, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_cmf__upslope__connections__OHDISflow[] = {{&_swigt__p_p_cmf__upslope__connections__OHDISflow, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_cmf__water__TechnicalFlux[] = {{&_swigt__p_p_cmf__water__TechnicalFlux, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_cmf__upslope__connections__TopographicGradientDarcy[] = {{&_swigt__p_p_cmf__upslope__connections__TopographicGradientDarcy, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_cmf__upslope__ET__constantETpot[] = {{&_swigt__p_p_cmf__upslope__ET__constantETpot, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_cmf__river__Manning[] = {{&_swigt__p_p_cmf__river__Manning, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_cmf__upslope__connections__MatrixInfiltration[] = {{&_swigt__p_p_cmf__upslope__connections__MatrixInfiltration, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_cmf__upslope__ET__HargreaveET[] = {{&_swigt__p_p_cmf__upslope__ET__HargreaveET, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_cmf__upslope__ET__PenmanMonteithET[] = {{&_swigt__p_p_cmf__upslope__ET__PenmanMonteithET, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_cmf__water__NeumannFlux[] = {{&_swigt__p_p_cmf__water__NeumannFlux, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_cmf__upslope__ET__CanopyStorageEvaporation[] = {{&_swigt__p_p_cmf__upslope__ET__CanopyStorageEvaporation, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_cmf__upslope__ET__PenmanEvaporation[] = {{&_swigt__p_p_cmf__upslope__ET__PenmanEvaporation, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__setT_cmf__water__flux_connection_p_std__lessT_cmf__water__flux_connection_p_t_std__allocatorT_cmf__water__flux_connection_p_t_t__key_type[] = {  {&_swigt__p_p_cmf__upslope__connections__Snowfall, 0, 0, 0},  {&_swigt__p_p_cmf__upslope__connections__CanopyOverflow, 0, 0, 0},  {&_swigt__p_p_cmf__upslope__connections__Rainfall, 0, 0, 0},  {&_swigt__p_p_cmf__water__waterbalance_connection, 0, 0, 0},  {&_swigt__p_p_cmf__river__Manning_Kinematic, 0, 0, 0},  {&_swigt__p_p_cmf__upslope__connections__lateral_sub_surface_flux, 0, 0, 0},  {&_swigt__p_p_cmf__upslope__connections__SWATPercolation, 0, 0, 0},  {&_swigt__p_p_cmf__upslope__connections__HBVpercolation, 0, 0, 0},  {&_swigt__p_p_cmf__river__Manning_Diffusive, 0, 0, 0},  {&_swigt__p_p_cmf__upslope__connections__Richards_lateral, 0, 0, 0},  {&_swigt__p_p_cmf__upslope__connections__HBVlateral, 0, 0, 0},  {&_swigt__p_p_cmf__upslope__connections__CompleteInfiltration, 0, 0, 0},  {&_swigt__p_std__setT_cmf__water__flux_connection_p_std__lessT_cmf__water__flux_connection_p_t_std__allocatorT_cmf__water__flux_connection_p_t_t__value_type, 0, 0, 0},  {&_swigt__p_std__setT_cmf__water__flux_connection_p_std__lessT_cmf__water__flux_connection_p_t_std__allocatorT_cmf__water__flux_connection_p_t_t__key_type, 0, 0, 0},  {&_swigt__p_p_cmf__upslope__connections__SimpleTindexSnowMelt, 0, 0, 0},  {&_swigt__p_p_cmf__upslope__connections__Richards, 0, 0, 0},  {&_swigt__p_p_cmf__upslope__ET__ShuttleworthWallaceET, 0, 0, 0},  {&_swigt__p_p_cmf__upslope__connections__Darcy, 0, 0, 0},  {&_swigt__p_p_cmf__upslope__connections__OHDISflow, 0, 0, 0},  {&_swigt__p_p_cmf__water__TechnicalFlux, 0, 0, 0},  {&_swigt__p_p_cmf__upslope__connections__TopographicGradientDarcy, 0, 0, 0},  {&_swigt__p_p_cmf__upslope__ET__constantETpot, 0, 0, 0},  {&_swigt__p_p_cmf__river__Manning, 0, 0, 0},  {&_swigt__p_p_cmf__upslope__connections__MatrixInfiltration, 0, 0, 0},  {&_swigt__p_p_cmf__upslope__ET__HargreaveET, 0, 0, 0},  {&_swigt__p_p_cmf__upslope__ET__PenmanMonteithET, 0, 0, 0},  {&_swigt__p_p_cmf__water__NeumannFlux, 0, 0, 0},  {&_swigt__p_p_cmf__upslope__ET__CanopyStorageEvaporation, 0, 0, 0},  {&_swigt__p_p_cmf__upslope__ET__PenmanEvaporation, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__setT_cmf__water__flux_connection_p_std__lessT_cmf__water__flux_connection_p_t_std__allocatorT_cmf__water__flux_connection_p_t_t__value_type[] = {  {&_swigt__p_p_cmf__upslope__connections__Snowfall, 0, 0, 0},  {&_swigt__p_p_cmf__upslope__connections__CanopyOverflow, 0, 0, 0},  {&_swigt__p_p_cmf__upslope__connections__Rainfall, 0, 0, 0},  {&_swigt__p_p_cmf__water__waterbalance_connection, 0, 0, 0},  {&_swigt__p_p_cmf__river__Manning_Kinematic, 0, 0, 0},  {&_swigt__p_p_cmf__upslope__connections__lateral_sub_surface_flux, 0, 0, 0},  {&_swigt__p_p_cmf__upslope__connections__SWATPercolation, 0, 0, 0},  {&_swigt__p_p_cmf__upslope__connections__HBVpercolation, 0, 0, 0},  {&_swigt__p_p_cmf__river__Manning_Diffusive, 0, 0, 0},  {&_swigt__p_p_cmf__upslope__connections__Richards_lateral, 0, 0, 0},  {&_swigt__p_p_cmf__upslope__connections__HBVlateral, 0, 0, 0},  {&_swigt__p_p_cmf__upslope__connections__CompleteInfiltration, 0, 0, 0},  {&_swigt__p_std__setT_cmf__water__flux_connection_p_std__lessT_cmf__water__flux_connection_p_t_std__allocatorT_cmf__water__flux_connection_p_t_t__key_type, 0, 0, 0},  {&_swigt__p_std__setT_cmf__water__flux_connection_p_std__lessT_cmf__water__flux_connection_p_t_std__allocatorT_cmf__water__flux_connection_p_t_t__value_type, 0, 0, 0},  {&_swigt__p_p_cmf__upslope__connections__SimpleTindexSnowMelt, 0, 0, 0},  {&_swigt__p_p_cmf__upslope__connections__Richards, 0, 0, 0},  {&_swigt__p_p_cmf__upslope__ET__ShuttleworthWallaceET, 0, 0, 0},  {&_swigt__p_p_cmf__upslope__connections__Darcy, 0, 0, 0},  {&_swigt__p_p_cmf__upslope__connections__OHDISflow, 0, 0, 0},  {&_swigt__p_p_cmf__water__TechnicalFlux, 0, 0, 0},  {&_swigt__p_p_cmf__upslope__connections__TopographicGradientDarcy, 0, 0, 0},  {&_swigt__p_p_cmf__upslope__ET__constantETpot, 0, 0, 0},  {&_swigt__p_p_cmf__river__Manning, 0, 0, 0},  {&_swigt__p_p_cmf__upslope__connections__MatrixInfiltration, 0, 0, 0},  {&_swigt__p_p_cmf__upslope__ET__HargreaveET, 0, 0, 0},  {&_swigt__p_p_cmf__upslope__ET__PenmanMonteithET, 0, 0, 0},  {&_swigt__p_p_cmf__water__NeumannFlux, 0, 0, 0},  {&_swigt__p_p_cmf__upslope__ET__CanopyStorageEvaporation, 0, 0, 0},  {&_swigt__p_p_cmf__upslope__ET__PenmanEvaporation, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__tr1__shared_ptrT_cmf__atmosphere__MeteoStation_t[] = {  {&_swigt__p_std__tr1__shared_ptrT_cmf__atmosphere__MeteoStation_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__tr1__shared_ptrT_cmf__atmosphere__RainCloud_t[] = {  {&_swigt__p_std__tr1__shared_ptrT_cmf__atmosphere__RainCloud_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__tr1__shared_ptrT_cmf__geometry__Locatable_t[] = {  {&_swigt__p_std__tr1__shared_ptrT_cmf__atmosphere__RainCloud_t, 0, 0, 0},  {&_swigt__p_std__tr1__shared_ptrT_cmf__water__WaterStorage_t, 0, 0, 0},  {&_swigt__p_std__tr1__shared_ptrT_cmf__water__NeumannBoundary_t, 0, 0, 0},  {&_swigt__p_std__tr1__shared_ptrT_cmf__geometry__Locatable_t, 0, 0, 0},  {&_swigt__p_std__tr1__shared_ptrT_cmf__water__flux_node_t, _p_std__tr1__shared_ptrT_cmf__water__flux_node_tTo_p_std__tr1__shared_ptrT_cmf__geometry__Locatable_t, 0, 0},  {&_swigt__p_std__tr1__shared_ptrT_cmf__river__OpenWaterStorage_t, 0, 0, 0},  {&_swigt__p_std__tr1__shared_ptrT_cmf__upslope__SoilLayer_t, 0, 0, 0},  {&_swigt__p_std__tr1__shared_ptrT_cmf__water__DricheletBoundary_t, 0, 0, 0},  {&_swigt__p_std__tr1__shared_ptrT_cmf__river__Reach_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__tr1__shared_ptrT_cmf__math__StateVariable_t[] = {  {&_swigt__p_std__tr1__shared_ptrT_cmf__water__WaterStorage_t, _p_std__tr1__shared_ptrT_cmf__water__WaterStorage_tTo_p_std__tr1__shared_ptrT_cmf__math__StateVariable_t, 0, 0},  {&_swigt__p_std__tr1__shared_ptrT_cmf__math__StateVariable_t, 0, 0, 0},  {&_swigt__p_std__tr1__shared_ptrT_cmf__river__OpenWaterStorage_t, _p_std__tr1__shared_ptrT_cmf__river__OpenWaterStorage_tTo_p_std__tr1__shared_ptrT_cmf__math__StateVariable_t, 0, 0},  {&_swigt__p_std__tr1__shared_ptrT_cmf__upslope__SoilLayer_t, _p_std__tr1__shared_ptrT_cmf__upslope__SoilLayer_tTo_p_std__tr1__shared_ptrT_cmf__math__StateVariable_t, 0, 0},  {&_swigt__p_std__tr1__shared_ptrT_cmf__water__SoluteStorage_t, _p_std__tr1__shared_ptrT_cmf__water__SoluteStorage_tTo_p_std__tr1__shared_ptrT_cmf__math__StateVariable_t, 0, 0},  {&_swigt__p_std__tr1__shared_ptrT_cmf__river__Reach_t, _p_std__tr1__shared_ptrT_cmf__river__Reach_tTo_p_std__tr1__shared_ptrT_cmf__math__StateVariable_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__tr1__shared_ptrT_cmf__river__OpenWaterStorage_t[] = {  {&_swigt__p_std__tr1__shared_ptrT_cmf__river__OpenWaterStorage_t, 0, 0, 0},  {&_swigt__p_std__tr1__shared_ptrT_cmf__river__Reach_t, _p_std__tr1__shared_ptrT_cmf__river__Reach_tTo_p_std__tr1__shared_ptrT_cmf__river__OpenWaterStorage_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__tr1__shared_ptrT_cmf__river__Reach_t[] = {  {&_swigt__p_std__tr1__shared_ptrT_cmf__river__Reach_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__tr1__shared_ptrT_cmf__upslope__SoilLayer_t[] = {  {&_swigt__p_std__tr1__shared_ptrT_cmf__upslope__SoilLayer_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__tr1__shared_ptrT_cmf__water__DricheletBoundary_t[] = {  {&_swigt__p_std__tr1__shared_ptrT_cmf__water__DricheletBoundary_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__tr1__shared_ptrT_cmf__water__NeumannBoundary_t[] = {  {&_swigt__p_std__tr1__shared_ptrT_cmf__atmosphere__RainCloud_t, _p_std__tr1__shared_ptrT_cmf__atmosphere__RainCloud_tTo_p_std__tr1__shared_ptrT_cmf__water__NeumannBoundary_t, 0, 0},  {&_swigt__p_std__tr1__shared_ptrT_cmf__water__NeumannBoundary_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__tr1__shared_ptrT_cmf__water__SoluteStorage_t[] = {  {&_swigt__p_std__tr1__shared_ptrT_cmf__water__SoluteStorage_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__tr1__shared_ptrT_cmf__water__WaterStorage_t[] = {  {&_swigt__p_std__tr1__shared_ptrT_cmf__water__WaterStorage_t, 0, 0, 0},  {&_swigt__p_std__tr1__shared_ptrT_cmf__river__OpenWaterStorage_t, _p_std__tr1__shared_ptrT_cmf__river__OpenWaterStorage_tTo_p_std__tr1__shared_ptrT_cmf__water__WaterStorage_t, 0, 0},  {&_swigt__p_std__tr1__shared_ptrT_cmf__upslope__SoilLayer_t, _p_std__tr1__shared_ptrT_cmf__upslope__SoilLayer_tTo_p_std__tr1__shared_ptrT_cmf__water__WaterStorage_t, 0, 0},  {&_swigt__p_std__tr1__shared_ptrT_cmf__river__Reach_t, _p_std__tr1__shared_ptrT_cmf__river__Reach_tTo_p_std__tr1__shared_ptrT_cmf__water__WaterStorage_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__tr1__shared_ptrT_cmf__water__flux_node_t[] = {  {&_swigt__p_std__tr1__shared_ptrT_cmf__atmosphere__RainCloud_t, _p_std__tr1__shared_ptrT_cmf__atmosphere__RainCloud_tTo_p_std__tr1__shared_ptrT_cmf__water__flux_node_t, 0, 0},  {&_swigt__p_std__tr1__shared_ptrT_cmf__water__WaterStorage_t, _p_std__tr1__shared_ptrT_cmf__water__WaterStorage_tTo_p_std__tr1__shared_ptrT_cmf__water__flux_node_t, 0, 0},  {&_swigt__p_std__tr1__shared_ptrT_cmf__water__NeumannBoundary_t, _p_std__tr1__shared_ptrT_cmf__water__NeumannBoundary_tTo_p_std__tr1__shared_ptrT_cmf__water__flux_node_t, 0, 0},  {&_swigt__p_std__tr1__shared_ptrT_cmf__water__flux_node_t, 0, 0, 0},  {&_swigt__p_std__tr1__shared_ptrT_cmf__river__OpenWaterStorage_t, _p_std__tr1__shared_ptrT_cmf__river__OpenWaterStorage_tTo_p_std__tr1__shared_ptrT_cmf__water__flux_node_t, 0, 0},  {&_swigt__p_std__tr1__shared_ptrT_cmf__upslope__SoilLayer_t, _p_std__tr1__shared_ptrT_cmf__upslope__SoilLayer_tTo_p_std__tr1__shared_ptrT_cmf__water__flux_node_t, 0, 0},  {&_swigt__p_std__tr1__shared_ptrT_cmf__water__DricheletBoundary_t, _p_std__tr1__shared_ptrT_cmf__water__DricheletBoundary_tTo_p_std__tr1__shared_ptrT_cmf__water__flux_node_t, 0, 0},  {&_swigt__p_std__tr1__shared_ptrT_cmf__river__Reach_t, _p_std__tr1__shared_ptrT_cmf__river__Reach_tTo_p_std__tr1__shared_ptrT_cmf__water__flux_node_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_cmf__geometry__point_std__allocatorT_cmf__geometry__point_t_t[] = {  {&_swigt__p_std__vectorT_cmf__geometry__point_std__allocatorT_cmf__geometry__point_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_cmf__math__StateVariable_p_std__allocatorT_cmf__math__StateVariable_p_t_t[] = {  {&_swigt__p_cmf__math__StateVariableVector, _p_cmf__math__StateVariableVectorTo_p_std__vectorT_cmf__math__StateVariable_p_std__allocatorT_cmf__math__StateVariable_p_t_t, 0, 0},  {&_swigt__p_std__vectorT_cmf__math__StateVariable_p_std__allocatorT_cmf__math__StateVariable_p_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_cmf__math__StateVariable_p_std__allocatorT_cmf__math__StateVariable_p_t_t__allocator_type[] = {  {&_swigt__p_std__vectorT_cmf__math__StateVariable_p_std__allocatorT_cmf__math__StateVariable_p_t_t__allocator_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_cmf__upslope__Cell_p_std__allocatorT_cmf__upslope__Cell_p_t_t[] = {  {&_swigt__p_std__vectorT_cmf__upslope__Cell_p_std__allocatorT_cmf__upslope__Cell_p_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_cmf__upslope__Cell_p_std__allocatorT_cmf__upslope__Cell_p_t_t__allocator_type[] = {  {&_swigt__p_std__vectorT_cmf__upslope__Cell_p_std__allocatorT_cmf__upslope__Cell_p_t_t__allocator_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_cmf__water__flux_connection_p_std__allocatorT_cmf__water__flux_connection_p_t_t[] = {  {&_swigt__p_std__vectorT_cmf__water__flux_connection_p_std__allocatorT_cmf__water__flux_connection_p_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_cmf__water__flux_connection_p_std__allocatorT_cmf__water__flux_connection_p_t_t__allocator_type[] = {  {&_swigt__p_std__vectorT_cmf__water__flux_connection_p_std__allocatorT_cmf__water__flux_connection_p_t_t__allocator_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__tr1__shared_ptrT_cmf__water__WaterStorage_t_std__allocatorT_std__tr1__shared_ptrT_cmf__water__WaterStorage_t_t_t[] = {  {&_swigt__p_std__vectorT_std__tr1__shared_ptrT_cmf__water__WaterStorage_t_std__allocatorT_std__tr1__shared_ptrT_cmf__water__WaterStorage_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__tr1__shared_ptrT_cmf__water__WaterStorage_t_std__allocatorT_std__tr1__shared_ptrT_cmf__water__WaterStorage_t_t_t__allocator_type[] = {  {&_swigt__p_std__vectorT_std__tr1__shared_ptrT_cmf__water__WaterStorage_t_std__allocatorT_std__tr1__shared_ptrT_cmf__water__WaterStorage_t_t_t__allocator_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_swig__SwigPyIterator[] = {  {&_swigt__p_swig__SwigPyIterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_value_type[] = {  {&_swigt__p_value_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__std__setT_cmf__water__flux_connection_p_std__lessT_cmf__water__flux_connection_p_t_std__allocatorT_cmf__water__flux_connection_p_t_t__key_type[] = {  {&_swigt__p_cmf__upslope__connections__Snowfall, 0, 0, 0},  {&_swigt__p_cmf__upslope__connections__CanopyOverflow, 0, 0, 0},  {&_swigt__p_cmf__upslope__connections__TopographicGradientDarcy, 0, 0, 0},  {&_swigt__p_cmf__water__flux_connection, 0, 0, 0},  {&_swigt__p_cmf__upslope__connections__Rainfall, 0, 0, 0},  {&_swigt__p_cmf__water__waterbalance_connection, 0, 0, 0},  {&_swigt__p_cmf__river__Manning_Kinematic, 0, 0, 0},  {&_swigt__p_cmf__upslope__connections__SimpleTindexSnowMelt, 0, 0, 0},  {&_swigt__p_cmf__upslope__connections__SWATPercolation, 0, 0, 0},  {&_swigt__p_cmf__upslope__connections__HBVpercolation, 0, 0, 0},  {&_swigt__std__setT_cmf__water__flux_connection_p_std__lessT_cmf__water__flux_connection_p_t_std__allocatorT_cmf__water__flux_connection_p_t_t__key_type, 0, 0, 0},  {&_swigt__p_cmf__river__Manning_Diffusive, 0, 0, 0},  {&_swigt__std__setT_cmf__water__flux_connection_p_std__lessT_cmf__water__flux_connection_p_t_std__allocatorT_cmf__water__flux_connection_p_t_t__value_type, 0, 0, 0},  {&_swigt__std__vectorT_cmf__water__flux_connection_p_std__allocatorT_cmf__water__flux_connection_p_t_t__value_type, 0, 0, 0},  {&_swigt__p_cmf__upslope__connections__Richards_lateral, 0, 0, 0},  {&_swigt__p_cmf__upslope__connections__HBVlateral, 0, 0, 0},  {&_swigt__p_cmf__upslope__connections__Richards, 0, 0, 0},  {&_swigt__p_cmf__upslope__ET__ShuttleworthWallaceET, 0, 0, 0},  {&_swigt__p_cmf__upslope__connections__lateral_sub_surface_flux, 0, 0, 0},  {&_swigt__p_cmf__upslope__connections__Darcy, 0, 0, 0},  {&_swigt__p_cmf__upslope__connections__OHDISflow, 0, 0, 0},  {&_swigt__p_cmf__water__TechnicalFlux, 0, 0, 0},  {&_swigt__p_cmf__upslope__ET__constantETpot, 0, 0, 0},  {&_swigt__p_cmf__river__Manning, 0, 0, 0},  {&_swigt__p_cmf__upslope__connections__MatrixInfiltration, 0, 0, 0},  {&_swigt__p_cmf__upslope__connections__CompleteInfiltration, 0, 0, 0},  {&_swigt__p_cmf__upslope__ET__HargreaveET, 0, 0, 0},  {&_swigt__p_cmf__upslope__ET__PenmanMonteithET, 0, 0, 0},  {&_swigt__p_cmf__water__NeumannFlux, 0, 0, 0},  {&_swigt__p_cmf__upslope__ET__CanopyStorageEvaporation, 0, 0, 0},  {&_swigt__p_cmf__upslope__ET__PenmanEvaporation, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__std__setT_cmf__water__flux_connection_p_std__lessT_cmf__water__flux_connection_p_t_std__allocatorT_cmf__water__flux_connection_p_t_t__value_type[] = {  {&_swigt__p_cmf__upslope__connections__Snowfall, 0, 0, 0},  {&_swigt__p_cmf__upslope__connections__CanopyOverflow, 0, 0, 0},  {&_swigt__p_cmf__upslope__connections__TopographicGradientDarcy, 0, 0, 0},  {&_swigt__p_cmf__water__flux_connection, 0, 0, 0},  {&_swigt__p_cmf__upslope__connections__Rainfall, 0, 0, 0},  {&_swigt__p_cmf__water__waterbalance_connection, 0, 0, 0},  {&_swigt__p_cmf__river__Manning_Kinematic, 0, 0, 0},  {&_swigt__p_cmf__upslope__connections__SimpleTindexSnowMelt, 0, 0, 0},  {&_swigt__p_cmf__upslope__connections__SWATPercolation, 0, 0, 0},  {&_swigt__p_cmf__upslope__connections__HBVpercolation, 0, 0, 0},  {&_swigt__std__setT_cmf__water__flux_connection_p_std__lessT_cmf__water__flux_connection_p_t_std__allocatorT_cmf__water__flux_connection_p_t_t__value_type, 0, 0, 0},  {&_swigt__p_cmf__river__Manning_Diffusive, 0, 0, 0},  {&_swigt__std__setT_cmf__water__flux_connection_p_std__lessT_cmf__water__flux_connection_p_t_std__allocatorT_cmf__water__flux_connection_p_t_t__key_type, 0, 0, 0},  {&_swigt__std__vectorT_cmf__water__flux_connection_p_std__allocatorT_cmf__water__flux_connection_p_t_t__value_type, 0, 0, 0},  {&_swigt__p_cmf__upslope__connections__Richards_lateral, 0, 0, 0},  {&_swigt__p_cmf__upslope__connections__HBVlateral, 0, 0, 0},  {&_swigt__p_cmf__upslope__connections__Richards, 0, 0, 0},  {&_swigt__p_cmf__upslope__ET__ShuttleworthWallaceET, 0, 0, 0},  {&_swigt__p_cmf__upslope__connections__lateral_sub_surface_flux, 0, 0, 0},  {&_swigt__p_cmf__upslope__connections__Darcy, 0, 0, 0},  {&_swigt__p_cmf__upslope__connections__OHDISflow, 0, 0, 0},  {&_swigt__p_cmf__water__TechnicalFlux, 0, 0, 0},  {&_swigt__p_cmf__upslope__ET__constantETpot, 0, 0, 0},  {&_swigt__p_cmf__river__Manning, 0, 0, 0},  {&_swigt__p_cmf__upslope__connections__MatrixInfiltration, 0, 0, 0},  {&_swigt__p_cmf__upslope__connections__CompleteInfiltration, 0, 0, 0},  {&_swigt__p_cmf__upslope__ET__HargreaveET, 0, 0, 0},  {&_swigt__p_cmf__upslope__ET__PenmanMonteithET, 0, 0, 0},  {&_swigt__p_cmf__water__NeumannFlux, 0, 0, 0},  {&_swigt__p_cmf__upslope__ET__CanopyStorageEvaporation, 0, 0, 0},  {&_swigt__p_cmf__upslope__ET__PenmanEvaporation, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__std__vectorT_cmf__upslope__Cell_p_std__allocatorT_cmf__upslope__Cell_p_t_t__value_type[] = {  {&_swigt__p_cmf__upslope__Cell, 0, 0, 0},  {&_swigt__std__vectorT_cmf__upslope__Cell_p_std__allocatorT_cmf__upslope__Cell_p_t_t__value_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__std__vectorT_cmf__water__flux_connection_p_std__allocatorT_cmf__water__flux_connection_p_t_t__value_type[] = {  {&_swigt__p_cmf__upslope__connections__Snowfall, 0, 0, 0},  {&_swigt__p_cmf__upslope__connections__CanopyOverflow, 0, 0, 0},  {&_swigt__p_cmf__upslope__connections__TopographicGradientDarcy, 0, 0, 0},  {&_swigt__p_cmf__water__flux_connection, 0, 0, 0},  {&_swigt__p_cmf__upslope__connections__Rainfall, 0, 0, 0},  {&_swigt__p_cmf__water__waterbalance_connection, 0, 0, 0},  {&_swigt__p_cmf__river__Manning_Kinematic, 0, 0, 0},  {&_swigt__p_cmf__upslope__connections__SimpleTindexSnowMelt, 0, 0, 0},  {&_swigt__p_cmf__upslope__connections__SWATPercolation, 0, 0, 0},  {&_swigt__p_cmf__upslope__connections__HBVpercolation, 0, 0, 0},  {&_swigt__std__vectorT_cmf__water__flux_connection_p_std__allocatorT_cmf__water__flux_connection_p_t_t__value_type, 0, 0, 0},  {&_swigt__p_cmf__river__Manning_Diffusive, 0, 0, 0},  {&_swigt__std__setT_cmf__water__flux_connection_p_std__lessT_cmf__water__flux_connection_p_t_std__allocatorT_cmf__water__flux_connection_p_t_t__key_type, 0, 0, 0},  {&_swigt__std__setT_cmf__water__flux_connection_p_std__lessT_cmf__water__flux_connection_p_t_std__allocatorT_cmf__water__flux_connection_p_t_t__value_type, 0, 0, 0},  {&_swigt__p_cmf__upslope__connections__Richards_lateral, 0, 0, 0},  {&_swigt__p_cmf__upslope__connections__HBVlateral, 0, 0, 0},  {&_swigt__p_cmf__upslope__connections__Richards, 0, 0, 0},  {&_swigt__p_cmf__upslope__ET__ShuttleworthWallaceET, 0, 0, 0},  {&_swigt__p_cmf__upslope__connections__lateral_sub_surface_flux, 0, 0, 0},  {&_swigt__p_cmf__upslope__connections__Darcy, 0, 0, 0},  {&_swigt__p_cmf__upslope__connections__OHDISflow, 0, 0, 0},  {&_swigt__p_cmf__water__TechnicalFlux, 0, 0, 0},  {&_swigt__p_cmf__upslope__ET__constantETpot, 0, 0, 0},  {&_swigt__p_cmf__river__Manning, 0, 0, 0},  {&_swigt__p_cmf__upslope__connections__MatrixInfiltration, 0, 0, 0},  {&_swigt__p_cmf__upslope__connections__CompleteInfiltration, 0, 0, 0},  {&_swigt__p_cmf__upslope__ET__HargreaveET, 0, 0, 0},  {&_swigt__p_cmf__upslope__ET__PenmanMonteithET, 0, 0, 0},  {&_swigt__p_cmf__water__NeumannFlux, 0, 0, 0},  {&_swigt__p_cmf__upslope__ET__CanopyStorageEvaporation, 0, 0, 0},  {&_swigt__p_cmf__upslope__ET__PenmanEvaporation, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_allocator_type,
  _swigc__p_char,
  _swigc__p_cmf__atmosphere__ConstantMeteorology,
  _swigc__p_cmf__atmosphere__MeteoStation,
  _swigc__p_cmf__atmosphere__MeteoStationList,
  _swigc__p_cmf__atmosphere__MeteoStationReference,
  _swigc__p_cmf__atmosphere__Meteorology,
  _swigc__p_cmf__atmosphere__RainCloud,
  _swigc__p_cmf__atmosphere__Weather,
  _swigc__p_cmf__geometry__Locatable,
  _swigc__p_cmf__geometry__Location,
  _swigc__p_cmf__geometry__point,
  _swigc__p_cmf__geometry__point_vector,
  _swigc__p_cmf__math__BDF2,
  _swigc__p_cmf__math__CVodeIntegrator,
  _swigc__p_cmf__math__Date,
  _swigc__p_cmf__math__ExplicitEuler_fixed,
  _swigc__p_cmf__math__ImplicitEuler,
  _swigc__p_cmf__math__Integrator,
  _swigc__p_cmf__math__MultiIntegrator,
  _swigc__p_cmf__math__PredictCorrectSimple,
  _swigc__p_cmf__math__RKFIntegrator,
  _swigc__p_cmf__math__SoluteWaterIntegrator,
  _swigc__p_cmf__math__StateVariable,
  _swigc__p_cmf__math__StateVariableOwner,
  _swigc__p_cmf__math__StateVariableVector,
  _swigc__p_cmf__math__Time,
  _swigc__p_cmf__math__num_array,
  _swigc__p_cmf__math__timeseries,
  _swigc__p_cmf__project,
  _swigc__p_cmf__river__Channel,
  _swigc__p_cmf__river__IChannel,
  _swigc__p_cmf__river__IVolumeHeightFunction,
  _swigc__p_cmf__river__Manning,
  _swigc__p_cmf__river__Manning_Diffusive,
  _swigc__p_cmf__river__Manning_Kinematic,
  _swigc__p_cmf__river__MeanChannel,
  _swigc__p_cmf__river__OpenWaterStorage,
  _swigc__p_cmf__river__PipeReach,
  _swigc__p_cmf__river__Prism,
  _swigc__p_cmf__river__Reach,
  _swigc__p_cmf__river__ReachIterator,
  _swigc__p_cmf__river__RectangularReach,
  _swigc__p_cmf__river__SWATReachType,
  _swigc__p_cmf__river__TriangularReach,
  _swigc__p_cmf__river__volume_height_function,
  _swigc__p_cmf__upslope__BrooksCoreyRetentionCurve,
  _swigc__p_cmf__upslope__Cell,
  _swigc__p_cmf__upslope__CellConnector,
  _swigc__p_cmf__upslope__ET__CanopyStorageEvaporation,
  _swigc__p_cmf__upslope__ET__HargreaveET,
  _swigc__p_cmf__upslope__ET__PenmanEvaporation,
  _swigc__p_cmf__upslope__ET__PenmanMonteithET,
  _swigc__p_cmf__upslope__ET__ShuttleworthWallaceET,
  _swigc__p_cmf__upslope__ET__constantETpot,
  _swigc__p_cmf__upslope__LinearRetention,
  _swigc__p_cmf__upslope__NeighborIterator,
  _swigc__p_cmf__upslope__RetentionCurve,
  _swigc__p_cmf__upslope__SoilLayer,
  _swigc__p_cmf__upslope__Topology,
  _swigc__p_cmf__upslope__VanGenuchtenMualem,
  _swigc__p_cmf__upslope__connections__CanopyOverflow,
  _swigc__p_cmf__upslope__connections__CompleteInfiltration,
  _swigc__p_cmf__upslope__connections__Darcy,
  _swigc__p_cmf__upslope__connections__HBVlateral,
  _swigc__p_cmf__upslope__connections__HBVparameters,
  _swigc__p_cmf__upslope__connections__HBVpercolation,
  _swigc__p_cmf__upslope__connections__MatrixInfiltration,
  _swigc__p_cmf__upslope__connections__OHDISflow,
  _swigc__p_cmf__upslope__connections__Rainfall,
  _swigc__p_cmf__upslope__connections__Richards,
  _swigc__p_cmf__upslope__connections__Richards_lateral,
  _swigc__p_cmf__upslope__connections__SWATPercolation,
  _swigc__p_cmf__upslope__connections__SimpleTindexSnowMelt,
  _swigc__p_cmf__upslope__connections__Snowfall,
  _swigc__p_cmf__upslope__connections__TopographicGradientDarcy,
  _swigc__p_cmf__upslope__connections__lateral_sub_surface_flux,
  _swigc__p_cmf__upslope__vegetation__Vegetation,
  _swigc__p_cmf__water__DricheletBoundary,
  _swigc__p_cmf__water__NeumannBoundary,
  _swigc__p_cmf__water__NeumannBoundary_list,
  _swigc__p_cmf__water__NeumannFlux,
  _swigc__p_cmf__water__SoluteStorage,
  _swigc__p_cmf__water__SoluteTimeseries,
  _swigc__p_cmf__water__TechnicalFlux,
  _swigc__p_cmf__water__WaterStorage,
  _swigc__p_cmf__water__flux_connection,
  _swigc__p_cmf__water__flux_node,
  _swigc__p_cmf__water__linear_scale,
  _swigc__p_cmf__water__node_list,
  _swigc__p_cmf__water__solute,
  _swigc__p_cmf__water__solute_vector,
  _swigc__p_cmf__water__waterbalance_connection,
  _swigc__p_const_reference,
  _swigc__p_difference_type,
  _swigc__p_double,
  _swigc__p_f_double__double,
  _swigc__p_key_type,
  _swigc__p_p_PyObject,
  _swigc__p_p_cmf__river__Manning,
  _swigc__p_p_cmf__river__Manning_Diffusive,
  _swigc__p_p_cmf__river__Manning_Kinematic,
  _swigc__p_p_cmf__upslope__ET__CanopyStorageEvaporation,
  _swigc__p_p_cmf__upslope__ET__HargreaveET,
  _swigc__p_p_cmf__upslope__ET__PenmanEvaporation,
  _swigc__p_p_cmf__upslope__ET__PenmanMonteithET,
  _swigc__p_p_cmf__upslope__ET__ShuttleworthWallaceET,
  _swigc__p_p_cmf__upslope__ET__constantETpot,
  _swigc__p_p_cmf__upslope__connections__CanopyOverflow,
  _swigc__p_p_cmf__upslope__connections__CompleteInfiltration,
  _swigc__p_p_cmf__upslope__connections__Darcy,
  _swigc__p_p_cmf__upslope__connections__HBVlateral,
  _swigc__p_p_cmf__upslope__connections__HBVpercolation,
  _swigc__p_p_cmf__upslope__connections__MatrixInfiltration,
  _swigc__p_p_cmf__upslope__connections__OHDISflow,
  _swigc__p_p_cmf__upslope__connections__Rainfall,
  _swigc__p_p_cmf__upslope__connections__Richards,
  _swigc__p_p_cmf__upslope__connections__Richards_lateral,
  _swigc__p_p_cmf__upslope__connections__SWATPercolation,
  _swigc__p_p_cmf__upslope__connections__SimpleTindexSnowMelt,
  _swigc__p_p_cmf__upslope__connections__Snowfall,
  _swigc__p_p_cmf__upslope__connections__TopographicGradientDarcy,
  _swigc__p_p_cmf__upslope__connections__lateral_sub_surface_flux,
  _swigc__p_p_cmf__water__NeumannFlux,
  _swigc__p_p_cmf__water__TechnicalFlux,
  _swigc__p_p_cmf__water__waterbalance_connection,
  _swigc__p_ptr,
  _swigc__p_reference,
  _swigc__p_size_type,
  _swigc__p_std__invalid_argument,
  _swigc__p_std__lessT_cmf__water__flux_connection_p_t,
  _swigc__p_std__setT_cmf__upslope__Cell_p_std__lessT_cmf__upslope__Cell_p_t_std__allocatorT_cmf__upslope__Cell_p_t_t,
  _swigc__p_std__setT_cmf__water__flux_connection_p_std__lessT_cmf__water__flux_connection_p_t_std__allocatorT_cmf__water__flux_connection_p_t_t,
  _swigc__p_std__setT_cmf__water__flux_connection_p_std__lessT_cmf__water__flux_connection_p_t_std__allocatorT_cmf__water__flux_connection_p_t_t__key_type,
  _swigc__p_std__setT_cmf__water__flux_connection_p_std__lessT_cmf__water__flux_connection_p_t_std__allocatorT_cmf__water__flux_connection_p_t_t__value_type,
  _swigc__p_std__tr1__shared_ptrT_cmf__atmosphere__MeteoStation_t,
  _swigc__p_std__tr1__shared_ptrT_cmf__atmosphere__RainCloud_t,
  _swigc__p_std__tr1__shared_ptrT_cmf__geometry__Locatable_t,
  _swigc__p_std__tr1__shared_ptrT_cmf__math__StateVariable_t,
  _swigc__p_std__tr1__shared_ptrT_cmf__river__OpenWaterStorage_t,
  _swigc__p_std__tr1__shared_ptrT_cmf__river__Reach_t,
  _swigc__p_std__tr1__shared_ptrT_cmf__upslope__SoilLayer_t,
  _swigc__p_std__tr1__shared_ptrT_cmf__water__DricheletBoundary_t,
  _swigc__p_std__tr1__shared_ptrT_cmf__water__NeumannBoundary_t,
  _swigc__p_std__tr1__shared_ptrT_cmf__water__SoluteStorage_t,
  _swigc__p_std__tr1__shared_ptrT_cmf__water__WaterStorage_t,
  _swigc__p_std__tr1__shared_ptrT_cmf__water__flux_node_t,
  _swigc__p_std__vectorT_cmf__geometry__point_std__allocatorT_cmf__geometry__point_t_t,
  _swigc__p_std__vectorT_cmf__math__StateVariable_p_std__allocatorT_cmf__math__StateVariable_p_t_t,
  _swigc__p_std__vectorT_cmf__math__StateVariable_p_std__allocatorT_cmf__math__StateVariable_p_t_t__allocator_type,
  _swigc__p_std__vectorT_cmf__upslope__Cell_p_std__allocatorT_cmf__upslope__Cell_p_t_t,
  _swigc__p_std__vectorT_cmf__upslope__Cell_p_std__allocatorT_cmf__upslope__Cell_p_t_t__allocator_type,
  _swigc__p_std__vectorT_cmf__water__flux_connection_p_std__allocatorT_cmf__water__flux_connection_p_t_t,
  _swigc__p_std__vectorT_cmf__water__flux_connection_p_std__allocatorT_cmf__water__flux_connection_p_t_t__allocator_type,
  _swigc__p_std__vectorT_std__tr1__shared_ptrT_cmf__water__WaterStorage_t_std__allocatorT_std__tr1__shared_ptrT_cmf__water__WaterStorage_t_t_t,
  _swigc__p_std__vectorT_std__tr1__shared_ptrT_cmf__water__WaterStorage_t_std__allocatorT_std__tr1__shared_ptrT_cmf__water__WaterStorage_t_t_t__allocator_type,
  _swigc__p_swig__SwigPyIterator,
  _swigc__p_value_type,
  _swigc__std__setT_cmf__water__flux_connection_p_std__lessT_cmf__water__flux_connection_p_t_std__allocatorT_cmf__water__flux_connection_p_t_t__key_type,
  _swigc__std__setT_cmf__water__flux_connection_p_std__lessT_cmf__water__flux_connection_p_t_std__allocatorT_cmf__water__flux_connection_p_t_t__value_type,
  _swigc__std__vectorT_cmf__upslope__Cell_p_std__allocatorT_cmf__upslope__Cell_p_t_t__value_type,
  _swigc__std__vectorT_cmf__water__flux_connection_p_std__allocatorT_cmf__water__flux_connection_p_t_t__value_type,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

static swig_const_info swig_const_table[] = {
{0, 0, 0, 0.0, 0, 0}};

#ifdef __cplusplus
}
#endif
/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic 
 * memory is used. Also, since swig_type_info structures store pointers to 
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization. 
 * The idea is that swig generates all the structures that are needed. 
 * The runtime then collects these partially filled structures. 
 * The SWIG_InitializeModule function takes these initial arrays out of 
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned staticly to an initial 
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it 
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded. 
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the 
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif


SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int found, init;
  
  clientdata = clientdata;
  
  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }
  
  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
    module_head = &swig_module;
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    found=0;
    iter=module_head;
    do {
      if (iter==&swig_module) {
        found=1;
        break;
      }
      iter=iter->next;
    } while (iter!= module_head);
    
    /* if the is found in the list, then all is done and we may leave */
    if (found) return;
    /* otherwise we must add out module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }
  
  /* When multiple interpeters are used, a module could have already been initialized in
       a different interpreter, but not yet have a pointer in this interpreter.
       In this case, we do not want to continue adding types... everything should be
       set up already */
  if (init == 0) return;
  
  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %d\n", swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;
    
#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
#endif
    
    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
        type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }
    
    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {
      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
        if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
        if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
          printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
          cast->type = ret;
          ret = 0;
        } else {
          /* Check for casting already in the list */
          swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
          if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
          if (!ocast) ret = 0;
        }
      }
      
      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;
  
#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
    printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;
  
  if (init_run) return;
  init_run = 1;
  
  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
          SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{
  /* c-mode */
#endif
}
#endif



#ifdef __cplusplus
extern "C" {
#endif
  
  /* Python-specific SWIG API */
#define SWIG_newvarlink()                             SWIG_Python_newvarlink()
#define SWIG_addvarlink(p, name, get_attr, set_attr)  SWIG_Python_addvarlink(p, name, get_attr, set_attr)
#define SWIG_InstallConstants(d, constants)           SWIG_Python_InstallConstants(d, constants)
  
  /* -----------------------------------------------------------------------------
   * global variable support code.
   * ----------------------------------------------------------------------------- */
  
  typedef struct swig_globalvar {
    char       *name;                  /* Name of global variable */
    PyObject *(*get_attr)(void);       /* Return the current value */
    int       (*set_attr)(PyObject *); /* Set the value */
    struct swig_globalvar *next;
  } swig_globalvar;
  
  typedef struct swig_varlinkobject {
    PyObject_HEAD
    swig_globalvar *vars;
  } swig_varlinkobject;
  
  SWIGINTERN PyObject *
  swig_varlink_repr(swig_varlinkobject *SWIGUNUSEDPARM(v)) {
#if PY_VERSION_HEX >= 0x03000000
    return PyUnicode_InternFromString("<Swig global variables>");
#else
    return PyString_FromString("<Swig global variables>");
#endif
  }
  
  SWIGINTERN PyObject *
  swig_varlink_str(swig_varlinkobject *v) {
#if PY_VERSION_HEX >= 0x03000000
    PyObject *str = PyUnicode_InternFromString("(");
    PyObject *tail;
    PyObject *joined;
    swig_globalvar *var;
    for (var = v->vars; var; var=var->next) {
      tail = PyUnicode_FromString(var->name);
      joined = PyUnicode_Concat(str, tail);
      Py_DecRef(str);
      Py_DecRef(tail);
      str = joined;
      if (var->next) {
        tail = PyUnicode_InternFromString(", ");
        joined = PyUnicode_Concat(str, tail);
        Py_DecRef(str);
        Py_DecRef(tail);
        str = joined;
      }
    }
    tail = PyUnicode_InternFromString(")");
    joined = PyUnicode_Concat(str, tail);
    Py_DecRef(str);
    Py_DecRef(tail);
    str = joined;
#else
    PyObject *str = PyString_FromString("(");
    swig_globalvar *var;
    for (var = v->vars; var; var=var->next) {
      PyString_ConcatAndDel(&str,PyString_FromString(var->name));
      if (var->next) PyString_ConcatAndDel(&str,PyString_FromString(", "));
    }
    PyString_ConcatAndDel(&str,PyString_FromString(")"));
#endif
    return str;
  }
  
  SWIGINTERN int
  swig_varlink_print(swig_varlinkobject *v, FILE *fp, int SWIGUNUSEDPARM(flags)) {
    char *tmp;
    PyObject *str = swig_varlink_str(v);
    fprintf(fp,"Swig global variables ");
    fprintf(fp,"%s\n", tmp = SWIG_Python_str_AsChar(str));
    SWIG_Python_str_DelForPy3(tmp);
    Py_DECREF(str);
    return 0;
  }
  
  SWIGINTERN void
  swig_varlink_dealloc(swig_varlinkobject *v) {
    swig_globalvar *var = v->vars;
    while (var) {
      swig_globalvar *n = var->next;
      free(var->name);
      free(var);
      var = n;
    }
  }
  
  SWIGINTERN PyObject *
  swig_varlink_getattr(swig_varlinkobject *v, char *n) {
    PyObject *res = NULL;
    swig_globalvar *var = v->vars;
    while (var) {
      if (strcmp(var->name,n) == 0) {
        res = (*var->get_attr)();
        break;
      }
      var = var->next;
    }
    if (res == NULL && !PyErr_Occurred()) {
      PyErr_SetString(PyExc_NameError,"Unknown C global variable");
    }
    return res;
  }
  
  SWIGINTERN int
  swig_varlink_setattr(swig_varlinkobject *v, char *n, PyObject *p) {
    int res = 1;
    swig_globalvar *var = v->vars;
    while (var) {
      if (strcmp(var->name,n) == 0) {
        res = (*var->set_attr)(p);
        break;
      }
      var = var->next;
    }
    if (res == 1 && !PyErr_Occurred()) {
      PyErr_SetString(PyExc_NameError,"Unknown C global variable");
    }
    return res;
  }
  
  SWIGINTERN PyTypeObject*
  swig_varlink_type(void) {
    static char varlink__doc__[] = "Swig var link object";
    static PyTypeObject varlink_type;
    static int type_init = 0;  
    if (!type_init) {
      const PyTypeObject tmp
      = {
        /* PyObject header changed in Python 3 */
#if PY_VERSION_HEX >= 0x03000000
        PyVarObject_HEAD_INIT(&PyType_Type, 0)
#else
        PyObject_HEAD_INIT(NULL)
        0,                                  /* Number of items in variable part (ob_size) */
#endif
        (char *)"swigvarlink",              /* Type name (tp_name) */
        sizeof(swig_varlinkobject),         /* Basic size (tp_basicsize) */
        0,                                  /* Itemsize (tp_itemsize) */
        (destructor) swig_varlink_dealloc,  /* Deallocator (tp_dealloc) */ 
        (printfunc) swig_varlink_print,     /* Print (tp_print) */
        (getattrfunc) swig_varlink_getattr, /* get attr (tp_getattr) */
        (setattrfunc) swig_varlink_setattr, /* Set attr (tp_setattr) */
        0,                                  /* tp_compare */
        (reprfunc) swig_varlink_repr,       /* tp_repr */
        0,                                  /* tp_as_number */
        0,                                  /* tp_as_sequence */
        0,                                  /* tp_as_mapping */
        0,                                  /* tp_hash */
        0,                                  /* tp_call */
        (reprfunc) swig_varlink_str,        /* tp_str */
        0,                                  /* tp_getattro */
        0,                                  /* tp_setattro */
        0,                                  /* tp_as_buffer */
        0,                                  /* tp_flags */
        varlink__doc__,                     /* tp_doc */
        0,                                  /* tp_traverse */
        0,                                  /* tp_clear */
        0,                                  /* tp_richcompare */
        0,                                  /* tp_weaklistoffset */
#if PY_VERSION_HEX >= 0x02020000
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, /* tp_iter -> tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
        0,                                  /* tp_del */
#endif
#ifdef COUNT_ALLOCS
        0,0,0,0                             /* tp_alloc -> tp_next */
#endif
      };
      varlink_type = tmp;
      /* for Python 3 we already assigned ob_type in PyVarObject_HEAD_INIT() */
#if PY_VERSION_HEX < 0x03000000
      varlink_type.ob_type = &PyType_Type;
#endif
      type_init = 1;
    }
    return &varlink_type;
  }
  
  /* Create a variable linking object for use later */
  SWIGINTERN PyObject *
  SWIG_Python_newvarlink(void) {
    swig_varlinkobject *result = PyObject_NEW(swig_varlinkobject, swig_varlink_type());
    if (result) {
      result->vars = 0;
    }
    return ((PyObject*) result);
  }
  
  SWIGINTERN void 
  SWIG_Python_addvarlink(PyObject *p, char *name, PyObject *(*get_attr)(void), int (*set_attr)(PyObject *p)) {
    swig_varlinkobject *v = (swig_varlinkobject *) p;
    swig_globalvar *gv = (swig_globalvar *) malloc(sizeof(swig_globalvar));
    if (gv) {
      size_t size = strlen(name)+1;
      gv->name = (char *)malloc(size);
      if (gv->name) {
        strncpy(gv->name,name,size);
        gv->get_attr = get_attr;
        gv->set_attr = set_attr;
        gv->next = v->vars;
      }
    }
    v->vars = gv;
  }
  
  SWIGINTERN PyObject *
  SWIG_globals(void) {
    static PyObject *_SWIG_globals = 0; 
    if (!_SWIG_globals) _SWIG_globals = SWIG_newvarlink();  
    return _SWIG_globals;
  }
  
  /* -----------------------------------------------------------------------------
   * constants/methods manipulation
   * ----------------------------------------------------------------------------- */
  
  /* Install Constants */
  SWIGINTERN void
  SWIG_Python_InstallConstants(PyObject *d, swig_const_info constants[]) {
    PyObject *obj = 0;
    size_t i;
    for (i = 0; constants[i].type; ++i) {
      switch(constants[i].type) {
      case SWIG_PY_POINTER:
        obj = SWIG_NewPointerObj(constants[i].pvalue, *(constants[i]).ptype,0);
        break;
      case SWIG_PY_BINARY:
        obj = SWIG_NewPackedObj(constants[i].pvalue, constants[i].lvalue, *(constants[i].ptype));
        break;
      default:
        obj = 0;
        break;
      }
      if (obj) {
        PyDict_SetItemString(d, constants[i].name, obj);
        Py_DECREF(obj);
      }
    }
  }
  
  /* -----------------------------------------------------------------------------*/
  /* Fix SwigMethods to carry the callback ptrs when needed */
  /* -----------------------------------------------------------------------------*/
  
  SWIGINTERN void
  SWIG_Python_FixMethods(PyMethodDef *methods,
    swig_const_info *const_table,
    swig_type_info **types,
    swig_type_info **types_initial) {
    size_t i;
    for (i = 0; methods[i].ml_name; ++i) {
      const char *c = methods[i].ml_doc;
      if (c && (c = strstr(c, "swig_ptr: "))) {
        int j;
        swig_const_info *ci = 0;
        const char *name = c + 10;
        for (j = 0; const_table[j].type; ++j) {
          if (strncmp(const_table[j].name, name, 
              strlen(const_table[j].name)) == 0) {
            ci = &(const_table[j]);
            break;
          }
        }
        if (ci) {
          size_t shift = (ci->ptype) - types;
          swig_type_info *ty = types_initial[shift];
          size_t ldoc = (c - methods[i].ml_doc);
          size_t lptr = strlen(ty->name)+2*sizeof(void*)+2;
          char *ndoc = (char*)malloc(ldoc + lptr + 10);
          if (ndoc) {
            char *buff = ndoc;
            void *ptr = (ci->type == SWIG_PY_POINTER) ? ci->pvalue : 0;
            if (ptr) {
              strncpy(buff, methods[i].ml_doc, ldoc);
              buff += ldoc;
              strncpy(buff, "swig_ptr: ", 10);
              buff += 10;
              SWIG_PackVoidPtr(buff, ptr, ty->name, lptr);
              methods[i].ml_doc = ndoc;
            }
          }
        }
      }
    }
  } 
  
#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------*
 *  Partial Init method
 * -----------------------------------------------------------------------------*/

#ifdef __cplusplus
extern "C"
#endif

SWIGEXPORT 
#if PY_VERSION_HEX >= 0x03000000
PyObject*
#else
void
#endif
SWIG_init(void) {
  PyObject *m, *d;  
#if PY_VERSION_HEX >= 0x03000000
  static struct PyModuleDef SWIG_module = {
    PyModuleDef_HEAD_INIT,
    (char *) SWIG_name,
    NULL,
    -1,
    SwigMethods,
    NULL,
    NULL,
    NULL,
    NULL
  };
#endif
  
  /* Fix SwigMethods to carry the callback ptrs when needed */
  SWIG_Python_FixMethods(SwigMethods, swig_const_table, swig_types, swig_type_initial);
  
#if PY_VERSION_HEX >= 0x03000000
  m = PyModule_Create(&SWIG_module);
#else
  m = Py_InitModule((char *) SWIG_name, SwigMethods);
#endif
  d = PyModule_GetDict(m);
  
  SWIG_InitializeModule(0);
  SWIG_InstallConstants(d,swig_const_table);
  
  
  SWIG_Python_SetConstant(d, "SHARED_PTR_DISOWN",SWIG_From_int(static_cast< int >(0)));
  PyDict_SetItemString(d,(char*)"cvar", SWIG_globals());
  SWIG_addvarlink(SWIG_globals(),(char*)"PI",Swig_var_PI_get, Swig_var_PI_set);
  
  PyDateTime_IMPORT;
  
  SWIG_addvarlink(SWIG_globals(),(char*)"Debug",Swig_var_Debug_get, Swig_var_Debug_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"VERSION",Swig_var_VERSION_get, Swig_var_VERSION_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Pi",Swig_var_Pi_get, Swig_var_Pi_set);
  SWIG_Python_SetConstant(d, "JULIANDAY_0_1_1900",SWIG_From_int(static_cast< int >(2415019)));
  SWIG_Python_SetConstant(d, "Time_ms_per_day",SWIG_From_long_SS_long(static_cast< long long >(cmf::math::Time::ms_per_day)));
  SWIG_addvarlink(SWIG_globals(),(char*)"ms",Swig_var_ms_get, Swig_var_ms_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"sec",Swig_var_sec_get, Swig_var_sec_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"min",Swig_var_min_get, Swig_var_min_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"h",Swig_var_h_get, Swig_var_h_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"day",Swig_var_day_get, Swig_var_day_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"week",Swig_var_week_get, Swig_var_week_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"month",Swig_var_month_get, Swig_var_month_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"year",Swig_var_year_get, Swig_var_year_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Weather_snow_threshold",Swig_var_Weather_snow_threshold_get, Swig_var_Weather_snow_threshold_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"rho_wg",Swig_var_rho_wg_get, Swig_var_rho_wg_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Darcy_cell_connector",Swig_var_Darcy_cell_connector_get, Swig_var_Darcy_cell_connector_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"TopographicGradientDarcy_cell_connector",Swig_var_TopographicGradientDarcy_cell_connector_get, Swig_var_TopographicGradientDarcy_cell_connector_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"OHDISflow_cell_connector",Swig_var_OHDISflow_cell_connector_get, Swig_var_OHDISflow_cell_connector_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Richards_lateral_cell_connector",Swig_var_Richards_lateral_cell_connector_get, Swig_var_Richards_lateral_cell_connector_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Manning_Diffusive_cell_connector",Swig_var_Manning_Diffusive_cell_connector_get, Swig_var_Manning_Diffusive_cell_connector_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Manning_Kinematic_cell_connector",Swig_var_Manning_Kinematic_cell_connector_get, Swig_var_Manning_Kinematic_cell_connector_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"HBVlateral_cell_connector",Swig_var_HBVlateral_cell_connector_get, Swig_var_HBVlateral_cell_connector_set);
#if PY_VERSION_HEX >= 0x03000000
  return m;
#else
  return;
#endif
}

#endif /* !_CONSOLE */ 
#pragma warning(pop) 
