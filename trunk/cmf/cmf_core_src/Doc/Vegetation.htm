<html>
<head>
	<title>Creating a vegetation</title>
	<link href="doxygen.css" rel="stylesheet" type="text/css">
</head>
<body>
	<h1>
		Creating a Vegetation</h1>
	<table>
		<tr>
			<td>
				<img src="Vegetation.png" alt="Vegetation scheme" /></td>
			<td>
				<p>
					Before you are able to deal with vegetation objects, you have to now how to handle
					Time in cmf
				</p>
				<p>
					Vegetation objects (objects with a GetThroughfall and a GetETpot function) provide
					the access to atmospheric in and output. At the moment, there are four different
					realisations of vegetation models available</p>
				<ul>
					<li><a href="#constantFluxVegetation">constantFluxVegetation</a> - Provides a constant,
						manually changeable, single value for throughfall (with the concentration of solutes)
						and ETpot. This could be used as an interface to an independent coupled vegetation
						model</li>
					<li><a href="#DatadrivenVegetation">DatadrivenVegetation</a> - Provides <a href="#timeseries">
						timeseries</a> to take measured or ex ante modeled throughfall (with the concentration
						of solutes) and ETpot</li>
					<li><a href="#HargreaveVegetation">HargreaveVegetation</a> - Calculates ETpot from
						the <a href="#meteorology">meteorological</a> station data, using Hargreave method</li>
					<li><a href="#PenmanMonteithVegetation">PenmanMonteithVegetation</a> - Calculates
						ETpot from the meteorological station data, using Penman Monteith method</li>
				</ul>
			</td>
		</tr>
	</table>
	<h2>
		<a name="constantFluxVegetation"></a>Creating a constantFluxVegetation</h2>
	<div class="fragment">
		<pre class="fragment">
import CMFLib as cmf
Throughfall=5 # mm/day
ETpot=3       # mm/day
vegetation=cmf.constantFluxVegetation(Throughfall,ETpot)</pre>
	</div>
	<p>
		The built vegetation can be used for the creation of single upslope cells, or with
		a spatial distribution spread to a set of UpslopeCells. The upslopecell owns a copy
		of the created vegetation set.</p>
	<h2>
		<a name="timeseries"></a>Using time series
	</h2>
	<p>
		for atmospheric in and output timeseries, a class to store time variable data are
		frequently used. Timeseries are used in any vegetation type except the constantFluxVegetation</p>
	<p>
		A timeseries is a list of values, equally distributed over time. To create one,
		one have to provide as start date and a step size. The end time is calculated from
		the number of values. Values queried for times before the start time are returned
		as the first item, values after the end time equal the last item. A timeseries with
		only one item reacts like a scalar value.
	</p>
	<h3>
		Creating a time series</h3>
	<div class="fragment">
		<pre class="fragment">
import CMFLib as cmf
# Start date is the January 5th 2001 at 2:30 pm
start=cmf.Time(5,1,2001,14,30)                      
# time step of the timeseries is 20 minutes
step=cmf.min*20
# Type of interpolation between values
# 0 - Nearest neighbor,
# 1 - Linear,
# 2 - Squared,
# 3 - Cubic, etc.
interpolation=1                                     
# Create timeseries
timeseries=cmf.timeseries(start,step,interpolation) 
# Add data
timeseries.Add(0.1) # Value at 2001/5/1 2:30pm is 0.1
timeseries.Add(0.2) # Value at 2001/5/1 2:50pm is 0.2
timeseries.Add(0.1) # Value at 2001/5/1 3:10pm is 0.1	</pre>
	</div>
	<p>
		With this technic it is simple to read files or databases to fill timeseries.</p>
	<h3>
		Using a timeseries</h3>
	<div class="fragment">
		<pre class="fragment">
# Query every minute between 2:15 and 3:14 pm
for t in cmf.timerange(start,start+cmf.h,cmf.min):
    print "Time:",t.AsDate(),"Value:",timeseries[t]
# Query a specific position of the timeseries
print timeseries[2]</pre>
	</div>
	<h2>
		<a name="DatadrivenVegetation"></a>Creating a DatadrivenVegetation</h2>
	<div class="fragment">
		<pre class="fragment">
import CMFLib as cmf
vegetation=cmf.DatadrivenVegetation(cmf.Time(1,5,2001,14,30),cmf.min*20)
# AtmosphereExchange.txt is tab seperated file containing Throughfall and ETpot values in mm/day for every 20 minutes
f=file('AtmosphereExchange.txt')
for line in file:
    throughfall=float(line.split('\t')[0]) # Gets the throughfall from the file (just Python)
    vegetation.Throughfall.Add(throughfall)
    ETpot=float(line.split('\t')[1])       # Gets ETpot from the file (just Python)
    vegetation.ETpot.Add(ETpot)</pre>
	</div>
	<h2>
		<a name="meteorology"></a>Using meteorological stations (the Meteorology object)</h2>
	<p>
		In order to calculate ETpot with cmf a big amount of meteorological data is needed,
		more data than usually available. The Meteorology class can estimate missing data
		from a minimal set. As more data, as one provides, the better the calculation of
		ETpot becomes. The minimal data needed is Tmin and Tmax (daily) and precipitation.
		To calculate the global radiation (although measured global radiation could be inserted),
		the position of meteorological station in geographic coordinates has to be set.
	</p>
	<p>
		There are two modes for the meteorology: daily=true and daily=false. If daily=true,
		Radiation is given as a daily mean value. If daily=false, Radiation is given as
		an hourly mean value, which shows the dial ETpot variation but results in erronous
		results if the timestep is daily.
	</p>
	<p>
		In the following, we will assume a meteorological station with given Tmin, Tmax,
		precipitation and daily mean relative humidity. To use other meteorological data,
		please consult the description of the Meteorology class in the API documentation</p>
	<h3>
		Creating a meteorological station</h3>
	<div class="fragment">
		<pre class="fragment">
import CMFlib as cmf
latitude=51.2 # Latitude of station in decimal degrees
longitude=8.1 # Longitude of station in decimal degrees (only needed for daily=false)
timezone=1    # Timezone, pos. values mean east of GMT, negative west (Germany=1, Pacific time=-8, only needed for daily=false)
start=cmf.Time(1,1,2001) # Creates all timeseries with this start time, one can change them later
step=cmf.day             # s. start
name="Giessen"           # A name for the station (optional)
meteo=cmf.Meteorology(latitude,longitude,timezone,start,step,name)</pre>
	</div>
	<p>
		The daily flag is automatically set to true, since the step width is &ge cmf.day</p>
	<h3>
		Loading data into the meteorological station</h3>
	<div class="fragment">
		<pre class="fragment">
# MeteoData.txt is tab seperated file containing Tmin [°C],Tmax [°C],rHmean [%] and precipitation [mm/day] values for every day
f=file('MeteoData.txt')
for line in file:
    meteo.Tmin.Add(float(line.split('\t')[0]))
    meteo.Tmax.Add(float(line.split('\t')[1]))
    meteo.rHmean.Add(float(line.split('\t')[2]))
    meteo.Prec.Add(float(line.split('\t')[3]))</pre>
	</div>
	<h3>
		Using a meteorological station</h3>
	<div class="fragment">
		<pre class="fragment">
weather=meteo.GetData(cmf.Time(3,2,2001,14)) # Weather at Feb. 3rd, 2001, 2pm
print 'Global Radiation: ',weather.Rs	       # Daily mean Rs, since daily=true
print 'Temperature:',weather.T               # Daily mean T, since nothing else in known
</pre>
	</div>
	<h2>
		<a name="HargreaveVegetation"></a>Creating a HargreaveVegetation</h2>
	<div class="fragment">
		<pre class="fragment">
vegetation=cmf.HargreaveVegetation(meteo)		# Creating of meteo, see above
print 'ETpot mm/day (Hargreave)',vegetation.GetETpot(cmf.Time(3,2,2001,14))
</pre>
	</div>
	<h2>
		<a name="PenmanMonteithVegetation"></a>Creating a PenmanMonteithVegetation</h2>
	<div class="fragment">
		<pre class="fragment">
LAI=2.88 #Leaf area index of reference crop
vegheight=0.12 # Vegetation height of reference crop [m]
albedo=0.23    # Albedo of reference crop
rootdepth=0.3  # Rooting depth [m]
elevation=150  # Elevation of vegetation above sea level (very insensitive, used for Rs)
vegetation=cmf.PenmanMonteithVegetation(meteo,rootdepth,vegetationheight,LAI,albedo,elevation)
print 'ETpot mm/day (Penman Monteith)',vegetation.GetETpot(cmf.Time(3,2,2001,14))
</pre>
	</div>
	<ul>
		<li><a href="Cookbook_Index.htm">Index</a></li>
		<li><a href="SpatialDistributors.htm">Distributing parameter classes in space</a></li>
		<li><a href="CreateSingleCell.htm">Create a single cell or a hill slope</a></li>
	</ul>
</body>
</html>
