<html>
<head>
	<title>A cmf cookbook for study areas</title>
	<link href="doxygen.css" rel="stylesheet" type="text/css">
</head>
<body>
	<h1>
		Creating single cells and hillslopes</h1>
	<h2>
		<a name="layered_hillslope">Setting up a layered hillslope</a></h2>
	<p>
		In this example we will set up a single layered cell with a constant rainfall (no
		tracer) and constant ETpot. Of course, this is not the kind of vegetation, to produce
		realistic data. But feeded with yearly averages it can be used to produce a steady
		state for faster spin up of the hydrologic system.
	</p>
	<h3>
		Single cell</h3>
	<table>
		<tr>
			<td>
				<p>
					The following code shows the creation of a single layered cell, with a single soil
					type repeated in the profile.</p>
				<div class="fragment">
					<pre class="fragment">
import CMFLib as cmf
# A vegetation with a constant throughfall (5 mm/day) 
# and a constant ETpot (3 mm/day)
vegetation=cmf.constantFluxVegetation(5,3) 
# Position of cell center (m)
x,y,z=(0,0,0)
# Area of the cell (m2)
area=100
# A soil type with 15m/day KSat, 40% porosity, 
# 0.5 lambda, 20% field cap. and 10% wilt. point 
# and a power law coefficient of 4.5
soil=cmf.SoilType(15,0.4,0.5,0.2,0.1,4.5)      
# Creates the cell w/o layers
cell=cmf.LayeredCell(x,y,z,area,vegetation)
# Adds a layer, with 10cm depth and the soil type above
cell.AddLayer(0.1,soil)
# Adds another layer, ranging from 10 to 30 cm.
cell.AddLayer(0.2,soil)
  </pre>
				</div>
			</td>
			<td>
				<img src="layered.png" alt="Fluxes in a layered cell" />
			</td>
		</tr>
	</table>
	<h3>
		Setting up two connected cells</h3>
	<p>
		The following code extends the previous code fragment</p>
	<div class="fragment">
		<pre class="fragment">cell2=cmf.LayeredCell(x+10,y,z+1,area,vegetation) # Creates a cell 10m east and 1m above the previous one
cell2.AddLayer(0.1,soil)                          # see above
cell2.AddLayer(0.2,soil)                          # see above
cell2.AddNeighbor(cell,10)                        # makes cell a neighbor of cell2 with a flow width of 10 m
cell.AddNeighbor(cell2,10)                        # makes cell2 a neighbor of cell with a flow width of 10 m</pre>
	</div>
	<h2>
		<a name="vh_hillslope">Vertical homogenous cell</a></h2>
	<h3>
		Single cell</h3>
	<table>
		<tr>
			<td>
				<p>
					If you prefer the faster (yet simpler to calibrate) variant with only two layers
					per cell (unsaturated volume, and saturated volume) you can set up a vertical homogenous
					cell (no changes in soil properties possible). This approach delivers good estimates
					for the water balance, but it fails on solute transport in deep soils (soildepth
					&gt; 1.5m) since the saturated volume is assumed to be completely mixed.</p>
				<div class="fragment">
					<pre class="fragment">
import CMFLib as cmf
# A vegetation with a constant throughfall (5 mm/day) 
# and a constant ETpot (3 mm/day)
vegetation=cmf.constantFluxVegetation(5,3) 
# Position of cell center (m)
x,y,z=(0,0,0)
# Area of the cell (m)
area=100
# A soil type with 15m/day KSat, 40% porosity,
# 0.5 lambda, 20% field cap. and 10% wilt. point
# and a power law coefficient of 4.5
soil=cmf.SoilType(15,0.4,0.5,0.2,0.1,4.5)      
soildepth=1.5 # Depth in m
# Creates the cell with both layers
cell=cmf.VerticalHomogenousCell(x,y,z,area,soil,vegetation)
  </pre>
				</div>
			</td>
			<td>
				<img src="VerticalHom.png" alt="Fluxes in a vertical homogeneous cell" />
			</td>
		</tr>
	</table>
	<h3>
		Setting up two connected cells</h3>
	<p>
		The following code extends the previous code fragment</p>
	<div class="fragment">
		<pre class="fragment">cell2=cmf.VerticalHomogenousCell(x,y,z,area,soil,vegetation) # Creates the cell with both layers
cell2.AddNeighbor(cell,10)                        # makes cell a neighbor of cell2 with a flow width of 10 m
cell.AddNeighbor(cell2,10)                        # makes cell2 a neighbor of cell with a flow width of 10 m</pre>
	</div>
	<h2>
		What to do with it?</h2>
	<p>
		It is possible to write python code, that reads data files to create complete connected
		systems. For complex irregular meshes, it is the best way for setup. To see results
		fast you might want to read directly raster based DEM's and create cell meshes automatically.
		This is simply done via so called UpslopeFactories.
	</p>
	<ul>
		<li><a href="Cookbook_Index.htm">Index</a></li>
	</ul>
</body>
</html>
