# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.38
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info
if version_info >= (3,0,0):
    new_instancemethod = lambda func, inst, cls: _raster.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        try:
            fp, pathname, description = imp.find_module('_raster', [dirname(__file__)])
            _mod = imp.load_module('_raster', fp, pathname, description)
        finally:
            if fp is not None: fp.close()
        return _mod
    _raster = swig_import_helper()
    del swig_import_helper
else:
    import _raster
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


def _swig_setattr_nondynamic_method(set):
    def set_attr(self,name,value):
        if (name == "thisown"): return self.this.own(value)
        if hasattr(self,name) or (name == "this"):
            set(self,name,value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _raster.delete_SwigPyIterator
    def __iter__(self): return self
SwigPyIterator.value = new_instancemethod(_raster.SwigPyIterator_value,None,SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_raster.SwigPyIterator_incr,None,SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_raster.SwigPyIterator_decr,None,SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_raster.SwigPyIterator_distance,None,SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_raster.SwigPyIterator_equal,None,SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_raster.SwigPyIterator_copy,None,SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_raster.SwigPyIterator_next,None,SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_raster.SwigPyIterator___next__,None,SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_raster.SwigPyIterator_previous,None,SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_raster.SwigPyIterator_advance,None,SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_raster.SwigPyIterator___eq__,None,SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_raster.SwigPyIterator___ne__,None,SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_raster.SwigPyIterator___iadd__,None,SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_raster.SwigPyIterator___isub__,None,SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_raster.SwigPyIterator___add__,None,SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_raster.SwigPyIterator___sub__,None,SwigPyIterator)
SwigPyIterator_swigregister = _raster.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

from math import *

class double_vector(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __iter__(self): return self.iterator()
    def __init__(self, *args): 
        _raster.double_vector_swiginit(self,_raster.new_double_vector(*args))
    __swig_destroy__ = _raster.delete_double_vector
double_vector.iterator = new_instancemethod(_raster.double_vector_iterator,None,double_vector)
double_vector.__nonzero__ = new_instancemethod(_raster.double_vector___nonzero__,None,double_vector)
double_vector.__bool__ = new_instancemethod(_raster.double_vector___bool__,None,double_vector)
double_vector.__len__ = new_instancemethod(_raster.double_vector___len__,None,double_vector)
double_vector.pop = new_instancemethod(_raster.double_vector_pop,None,double_vector)
double_vector.__getslice__ = new_instancemethod(_raster.double_vector___getslice__,None,double_vector)
double_vector.__setslice__ = new_instancemethod(_raster.double_vector___setslice__,None,double_vector)
double_vector.__delslice__ = new_instancemethod(_raster.double_vector___delslice__,None,double_vector)
double_vector.__delitem__ = new_instancemethod(_raster.double_vector___delitem__,None,double_vector)
double_vector.__getitem__ = new_instancemethod(_raster.double_vector___getitem__,None,double_vector)
double_vector.__setitem__ = new_instancemethod(_raster.double_vector___setitem__,None,double_vector)
double_vector.append = new_instancemethod(_raster.double_vector_append,None,double_vector)
double_vector.empty = new_instancemethod(_raster.double_vector_empty,None,double_vector)
double_vector.size = new_instancemethod(_raster.double_vector_size,None,double_vector)
double_vector.clear = new_instancemethod(_raster.double_vector_clear,None,double_vector)
double_vector.swap = new_instancemethod(_raster.double_vector_swap,None,double_vector)
double_vector.get_allocator = new_instancemethod(_raster.double_vector_get_allocator,None,double_vector)
double_vector.begin = new_instancemethod(_raster.double_vector_begin,None,double_vector)
double_vector.end = new_instancemethod(_raster.double_vector_end,None,double_vector)
double_vector.rbegin = new_instancemethod(_raster.double_vector_rbegin,None,double_vector)
double_vector.rend = new_instancemethod(_raster.double_vector_rend,None,double_vector)
double_vector.pop_back = new_instancemethod(_raster.double_vector_pop_back,None,double_vector)
double_vector.erase = new_instancemethod(_raster.double_vector_erase,None,double_vector)
double_vector.push_back = new_instancemethod(_raster.double_vector_push_back,None,double_vector)
double_vector.front = new_instancemethod(_raster.double_vector_front,None,double_vector)
double_vector.back = new_instancemethod(_raster.double_vector_back,None,double_vector)
double_vector.assign = new_instancemethod(_raster.double_vector_assign,None,double_vector)
double_vector.resize = new_instancemethod(_raster.double_vector_resize,None,double_vector)
double_vector.insert = new_instancemethod(_raster.double_vector_insert,None,double_vector)
double_vector.reserve = new_instancemethod(_raster.double_vector_reserve,None,double_vector)
double_vector.capacity = new_instancemethod(_raster.double_vector_capacity,None,double_vector)
double_vector_swigregister = _raster.double_vector_swigregister
double_vector_swigregister(double_vector)

class float_vector(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __iter__(self): return self.iterator()
    def __init__(self, *args): 
        _raster.float_vector_swiginit(self,_raster.new_float_vector(*args))
    __swig_destroy__ = _raster.delete_float_vector
float_vector.iterator = new_instancemethod(_raster.float_vector_iterator,None,float_vector)
float_vector.__nonzero__ = new_instancemethod(_raster.float_vector___nonzero__,None,float_vector)
float_vector.__bool__ = new_instancemethod(_raster.float_vector___bool__,None,float_vector)
float_vector.__len__ = new_instancemethod(_raster.float_vector___len__,None,float_vector)
float_vector.pop = new_instancemethod(_raster.float_vector_pop,None,float_vector)
float_vector.__getslice__ = new_instancemethod(_raster.float_vector___getslice__,None,float_vector)
float_vector.__setslice__ = new_instancemethod(_raster.float_vector___setslice__,None,float_vector)
float_vector.__delslice__ = new_instancemethod(_raster.float_vector___delslice__,None,float_vector)
float_vector.__delitem__ = new_instancemethod(_raster.float_vector___delitem__,None,float_vector)
float_vector.__getitem__ = new_instancemethod(_raster.float_vector___getitem__,None,float_vector)
float_vector.__setitem__ = new_instancemethod(_raster.float_vector___setitem__,None,float_vector)
float_vector.append = new_instancemethod(_raster.float_vector_append,None,float_vector)
float_vector.empty = new_instancemethod(_raster.float_vector_empty,None,float_vector)
float_vector.size = new_instancemethod(_raster.float_vector_size,None,float_vector)
float_vector.clear = new_instancemethod(_raster.float_vector_clear,None,float_vector)
float_vector.swap = new_instancemethod(_raster.float_vector_swap,None,float_vector)
float_vector.get_allocator = new_instancemethod(_raster.float_vector_get_allocator,None,float_vector)
float_vector.begin = new_instancemethod(_raster.float_vector_begin,None,float_vector)
float_vector.end = new_instancemethod(_raster.float_vector_end,None,float_vector)
float_vector.rbegin = new_instancemethod(_raster.float_vector_rbegin,None,float_vector)
float_vector.rend = new_instancemethod(_raster.float_vector_rend,None,float_vector)
float_vector.pop_back = new_instancemethod(_raster.float_vector_pop_back,None,float_vector)
float_vector.erase = new_instancemethod(_raster.float_vector_erase,None,float_vector)
float_vector.push_back = new_instancemethod(_raster.float_vector_push_back,None,float_vector)
float_vector.front = new_instancemethod(_raster.float_vector_front,None,float_vector)
float_vector.back = new_instancemethod(_raster.float_vector_back,None,float_vector)
float_vector.assign = new_instancemethod(_raster.float_vector_assign,None,float_vector)
float_vector.resize = new_instancemethod(_raster.float_vector_resize,None,float_vector)
float_vector.insert = new_instancemethod(_raster.float_vector_insert,None,float_vector)
float_vector.reserve = new_instancemethod(_raster.float_vector_reserve,None,float_vector)
float_vector.capacity = new_instancemethod(_raster.float_vector_capacity,None,float_vector)
float_vector_swigregister = _raster.float_vector_swigregister
float_vector_swigregister(float_vector)

class int_vector(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __iter__(self): return self.iterator()
    def __init__(self, *args): 
        _raster.int_vector_swiginit(self,_raster.new_int_vector(*args))
    __swig_destroy__ = _raster.delete_int_vector
int_vector.iterator = new_instancemethod(_raster.int_vector_iterator,None,int_vector)
int_vector.__nonzero__ = new_instancemethod(_raster.int_vector___nonzero__,None,int_vector)
int_vector.__bool__ = new_instancemethod(_raster.int_vector___bool__,None,int_vector)
int_vector.__len__ = new_instancemethod(_raster.int_vector___len__,None,int_vector)
int_vector.pop = new_instancemethod(_raster.int_vector_pop,None,int_vector)
int_vector.__getslice__ = new_instancemethod(_raster.int_vector___getslice__,None,int_vector)
int_vector.__setslice__ = new_instancemethod(_raster.int_vector___setslice__,None,int_vector)
int_vector.__delslice__ = new_instancemethod(_raster.int_vector___delslice__,None,int_vector)
int_vector.__delitem__ = new_instancemethod(_raster.int_vector___delitem__,None,int_vector)
int_vector.__getitem__ = new_instancemethod(_raster.int_vector___getitem__,None,int_vector)
int_vector.__setitem__ = new_instancemethod(_raster.int_vector___setitem__,None,int_vector)
int_vector.append = new_instancemethod(_raster.int_vector_append,None,int_vector)
int_vector.empty = new_instancemethod(_raster.int_vector_empty,None,int_vector)
int_vector.size = new_instancemethod(_raster.int_vector_size,None,int_vector)
int_vector.clear = new_instancemethod(_raster.int_vector_clear,None,int_vector)
int_vector.swap = new_instancemethod(_raster.int_vector_swap,None,int_vector)
int_vector.get_allocator = new_instancemethod(_raster.int_vector_get_allocator,None,int_vector)
int_vector.begin = new_instancemethod(_raster.int_vector_begin,None,int_vector)
int_vector.end = new_instancemethod(_raster.int_vector_end,None,int_vector)
int_vector.rbegin = new_instancemethod(_raster.int_vector_rbegin,None,int_vector)
int_vector.rend = new_instancemethod(_raster.int_vector_rend,None,int_vector)
int_vector.pop_back = new_instancemethod(_raster.int_vector_pop_back,None,int_vector)
int_vector.erase = new_instancemethod(_raster.int_vector_erase,None,int_vector)
int_vector.push_back = new_instancemethod(_raster.int_vector_push_back,None,int_vector)
int_vector.front = new_instancemethod(_raster.int_vector_front,None,int_vector)
int_vector.back = new_instancemethod(_raster.int_vector_back,None,int_vector)
int_vector.assign = new_instancemethod(_raster.int_vector_assign,None,int_vector)
int_vector.resize = new_instancemethod(_raster.int_vector_resize,None,int_vector)
int_vector.insert = new_instancemethod(_raster.int_vector_insert,None,int_vector)
int_vector.reserve = new_instancemethod(_raster.int_vector_reserve,None,int_vector)
int_vector.capacity = new_instancemethod(_raster.int_vector_capacity,None,int_vector)
int_vector_swigregister = _raster.int_vector_swigregister
int_vector_swigregister(int_vector)

class RasterStatistics(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    min = _swig_property(_raster.RasterStatistics_min_get, _raster.RasterStatistics_min_set)
    max = _swig_property(_raster.RasterStatistics_max_get, _raster.RasterStatistics_max_set)
    mean = _swig_property(_raster.RasterStatistics_mean_get, _raster.RasterStatistics_mean_set)
    stdev = _swig_property(_raster.RasterStatistics_stdev_get, _raster.RasterStatistics_stdev_set)
    count = _swig_property(_raster.RasterStatistics_count_get, _raster.RasterStatistics_count_set)
    def __init__(self): 
        _raster.RasterStatistics_swiginit(self,_raster.new_RasterStatistics())
    __swig_destroy__ = _raster.delete_RasterStatistics
RasterStatistics_swigregister = _raster.RasterStatistics_swigregister
RasterStatistics_swigregister(RasterStatistics)

class Histogram(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _raster.Histogram_swiginit(self,_raster.new_Histogram(*args))
    def __getitem__(self,index):
        if index<0 : index=self.size()+index
        if index<0 or index>=self.size() : raise IndexError("Bar of histogram not available")
        return (self.barcenter(index),self.frequency(index))
    def __len__(self):
        return self.size()

    __swig_destroy__ = _raster.delete_Histogram
Histogram.min = new_instancemethod(_raster.Histogram_min,None,Histogram)
Histogram.max = new_instancemethod(_raster.Histogram_max,None,Histogram)
Histogram.barwidth = new_instancemethod(_raster.Histogram_barwidth,None,Histogram)
Histogram.size = new_instancemethod(_raster.Histogram_size,None,Histogram)
Histogram.sum = new_instancemethod(_raster.Histogram_sum,None,Histogram)
Histogram.frequency = new_instancemethod(_raster.Histogram_frequency,None,Histogram)
Histogram.relfrequency = new_instancemethod(_raster.Histogram_relfrequency,None,Histogram)
Histogram.pos = new_instancemethod(_raster.Histogram_pos,None,Histogram)
Histogram.barcenter = new_instancemethod(_raster.Histogram_barcenter,None,Histogram)
Histogram.quantile = new_instancemethod(_raster.Histogram_quantile,None,Histogram)
Histogram.CountValue = new_instancemethod(_raster.Histogram_CountValue,None,Histogram)
Histogram_swigregister = _raster.Histogram_swigregister
Histogram_swigregister(Histogram)

class double_raster(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _raster.double_raster_swiginit(self,_raster.new_double_raster(*args))
    __swig_destroy__ = _raster.delete_double_raster
double_raster.Xllcorner = new_instancemethod(_raster.double_raster_Xllcorner,None,double_raster)
double_raster.Yllcorner = new_instancemethod(_raster.double_raster_Yllcorner,None,double_raster)
double_raster.XCellsize = new_instancemethod(_raster.double_raster_XCellsize,None,double_raster)
double_raster.YCellsize = new_instancemethod(_raster.double_raster_YCellsize,None,double_raster)
double_raster.ColumnCount = new_instancemethod(_raster.double_raster_ColumnCount,None,double_raster)
double_raster.RowCount = new_instancemethod(_raster.double_raster_RowCount,None,double_raster)
double_raster.Width = new_instancemethod(_raster.double_raster_Width,None,double_raster)
double_raster.Height = new_instancemethod(_raster.double_raster_Height,None,double_raster)
double_raster.NoData = new_instancemethod(_raster.double_raster_NoData,None,double_raster)
double_raster.HasData = new_instancemethod(_raster.double_raster_HasData,None,double_raster)
double_raster.SetData = new_instancemethod(_raster.double_raster_SetData,None,double_raster)
double_raster.GetXPosition = new_instancemethod(_raster.double_raster_GetXPosition,None,double_raster)
double_raster.GetYPosition = new_instancemethod(_raster.double_raster_GetYPosition,None,double_raster)
double_raster.statistics = new_instancemethod(_raster.double_raster_statistics,None,double_raster)
double_raster.histogram = new_instancemethod(_raster.double_raster_histogram,None,double_raster)
double_raster.__imul__ = new_instancemethod(_raster.double_raster___imul__,None,double_raster)
double_raster.__iadd__ = new_instancemethod(_raster.double_raster___iadd__,None,double_raster)
double_raster.__isub__ = new_instancemethod(_raster.double_raster___isub__,None,double_raster)
double_raster.__idiv__ = new_instancemethod(_raster.double_raster___idiv__,None,double_raster)
double_raster.__mul__ = new_instancemethod(_raster.double_raster___mul__,None,double_raster)
double_raster.__add__ = new_instancemethod(_raster.double_raster___add__,None,double_raster)
double_raster.__sub__ = new_instancemethod(_raster.double_raster___sub__,None,double_raster)
double_raster.__div__ = new_instancemethod(_raster.double_raster___div__,None,double_raster)
double_raster.WriteToASCFile = new_instancemethod(_raster.double_raster_WriteToASCFile,None,double_raster)
double_raster.WriteToBinary = new_instancemethod(_raster.double_raster_WriteToBinary,None,double_raster)
double_raster.ToInt = new_instancemethod(_raster.double_raster_ToInt,None,double_raster)
double_raster.ToFloat = new_instancemethod(_raster.double_raster_ToFloat,None,double_raster)
double_raster.ToDouble = new_instancemethod(_raster.double_raster_ToDouble,None,double_raster)
double_raster.adress = new_instancemethod(_raster.double_raster_adress,None,double_raster)
double_raster.focal_min = new_instancemethod(_raster.double_raster_focal_min,None,double_raster)
double_raster.focal_max = new_instancemethod(_raster.double_raster_focal_max,None,double_raster)
double_raster.focal_mean = new_instancemethod(_raster.double_raster_focal_mean,None,double_raster)
double_raster.focal_stdev = new_instancemethod(_raster.double_raster_focal_stdev,None,double_raster)
double_raster.focal_majority = new_instancemethod(_raster.double_raster_focal_majority,None,double_raster)
double_raster.focal_mean_difference = new_instancemethod(_raster.double_raster_focal_mean_difference,None,double_raster)
double_raster.clone = new_instancemethod(_raster.double_raster_clone,None,double_raster)
double_raster.GetData = new_instancemethod(_raster.double_raster_GetData,None,double_raster)
double_raster.ToBuffer = new_instancemethod(_raster.double_raster_ToBuffer,None,double_raster)
double_raster_swigregister = _raster.double_raster_swigregister
double_raster_swigregister(double_raster)

class int_raster(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _raster.int_raster_swiginit(self,_raster.new_int_raster(*args))
    __swig_destroy__ = _raster.delete_int_raster
int_raster.Xllcorner = new_instancemethod(_raster.int_raster_Xllcorner,None,int_raster)
int_raster.Yllcorner = new_instancemethod(_raster.int_raster_Yllcorner,None,int_raster)
int_raster.XCellsize = new_instancemethod(_raster.int_raster_XCellsize,None,int_raster)
int_raster.YCellsize = new_instancemethod(_raster.int_raster_YCellsize,None,int_raster)
int_raster.ColumnCount = new_instancemethod(_raster.int_raster_ColumnCount,None,int_raster)
int_raster.RowCount = new_instancemethod(_raster.int_raster_RowCount,None,int_raster)
int_raster.Width = new_instancemethod(_raster.int_raster_Width,None,int_raster)
int_raster.Height = new_instancemethod(_raster.int_raster_Height,None,int_raster)
int_raster.NoData = new_instancemethod(_raster.int_raster_NoData,None,int_raster)
int_raster.HasData = new_instancemethod(_raster.int_raster_HasData,None,int_raster)
int_raster.SetData = new_instancemethod(_raster.int_raster_SetData,None,int_raster)
int_raster.GetXPosition = new_instancemethod(_raster.int_raster_GetXPosition,None,int_raster)
int_raster.GetYPosition = new_instancemethod(_raster.int_raster_GetYPosition,None,int_raster)
int_raster.statistics = new_instancemethod(_raster.int_raster_statistics,None,int_raster)
int_raster.histogram = new_instancemethod(_raster.int_raster_histogram,None,int_raster)
int_raster.__imul__ = new_instancemethod(_raster.int_raster___imul__,None,int_raster)
int_raster.__iadd__ = new_instancemethod(_raster.int_raster___iadd__,None,int_raster)
int_raster.__isub__ = new_instancemethod(_raster.int_raster___isub__,None,int_raster)
int_raster.__idiv__ = new_instancemethod(_raster.int_raster___idiv__,None,int_raster)
int_raster.__mul__ = new_instancemethod(_raster.int_raster___mul__,None,int_raster)
int_raster.__add__ = new_instancemethod(_raster.int_raster___add__,None,int_raster)
int_raster.__sub__ = new_instancemethod(_raster.int_raster___sub__,None,int_raster)
int_raster.__div__ = new_instancemethod(_raster.int_raster___div__,None,int_raster)
int_raster.WriteToASCFile = new_instancemethod(_raster.int_raster_WriteToASCFile,None,int_raster)
int_raster.WriteToBinary = new_instancemethod(_raster.int_raster_WriteToBinary,None,int_raster)
int_raster.ToInt = new_instancemethod(_raster.int_raster_ToInt,None,int_raster)
int_raster.ToFloat = new_instancemethod(_raster.int_raster_ToFloat,None,int_raster)
int_raster.ToDouble = new_instancemethod(_raster.int_raster_ToDouble,None,int_raster)
int_raster.adress = new_instancemethod(_raster.int_raster_adress,None,int_raster)
int_raster.focal_min = new_instancemethod(_raster.int_raster_focal_min,None,int_raster)
int_raster.focal_max = new_instancemethod(_raster.int_raster_focal_max,None,int_raster)
int_raster.focal_mean = new_instancemethod(_raster.int_raster_focal_mean,None,int_raster)
int_raster.focal_stdev = new_instancemethod(_raster.int_raster_focal_stdev,None,int_raster)
int_raster.focal_majority = new_instancemethod(_raster.int_raster_focal_majority,None,int_raster)
int_raster.focal_mean_difference = new_instancemethod(_raster.int_raster_focal_mean_difference,None,int_raster)
int_raster.clone = new_instancemethod(_raster.int_raster_clone,None,int_raster)
int_raster.GetData = new_instancemethod(_raster.int_raster_GetData,None,int_raster)
int_raster.ToBuffer = new_instancemethod(_raster.int_raster_ToBuffer,None,int_raster)
int_raster_swigregister = _raster.int_raster_swigregister
int_raster_swigregister(int_raster)

class single_raster(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _raster.single_raster_swiginit(self,_raster.new_single_raster(*args))
    __swig_destroy__ = _raster.delete_single_raster
single_raster.Xllcorner = new_instancemethod(_raster.single_raster_Xllcorner,None,single_raster)
single_raster.Yllcorner = new_instancemethod(_raster.single_raster_Yllcorner,None,single_raster)
single_raster.XCellsize = new_instancemethod(_raster.single_raster_XCellsize,None,single_raster)
single_raster.YCellsize = new_instancemethod(_raster.single_raster_YCellsize,None,single_raster)
single_raster.ColumnCount = new_instancemethod(_raster.single_raster_ColumnCount,None,single_raster)
single_raster.RowCount = new_instancemethod(_raster.single_raster_RowCount,None,single_raster)
single_raster.Width = new_instancemethod(_raster.single_raster_Width,None,single_raster)
single_raster.Height = new_instancemethod(_raster.single_raster_Height,None,single_raster)
single_raster.NoData = new_instancemethod(_raster.single_raster_NoData,None,single_raster)
single_raster.HasData = new_instancemethod(_raster.single_raster_HasData,None,single_raster)
single_raster.SetData = new_instancemethod(_raster.single_raster_SetData,None,single_raster)
single_raster.GetXPosition = new_instancemethod(_raster.single_raster_GetXPosition,None,single_raster)
single_raster.GetYPosition = new_instancemethod(_raster.single_raster_GetYPosition,None,single_raster)
single_raster.statistics = new_instancemethod(_raster.single_raster_statistics,None,single_raster)
single_raster.histogram = new_instancemethod(_raster.single_raster_histogram,None,single_raster)
single_raster.__imul__ = new_instancemethod(_raster.single_raster___imul__,None,single_raster)
single_raster.__iadd__ = new_instancemethod(_raster.single_raster___iadd__,None,single_raster)
single_raster.__isub__ = new_instancemethod(_raster.single_raster___isub__,None,single_raster)
single_raster.__idiv__ = new_instancemethod(_raster.single_raster___idiv__,None,single_raster)
single_raster.__mul__ = new_instancemethod(_raster.single_raster___mul__,None,single_raster)
single_raster.__add__ = new_instancemethod(_raster.single_raster___add__,None,single_raster)
single_raster.__sub__ = new_instancemethod(_raster.single_raster___sub__,None,single_raster)
single_raster.__div__ = new_instancemethod(_raster.single_raster___div__,None,single_raster)
single_raster.WriteToASCFile = new_instancemethod(_raster.single_raster_WriteToASCFile,None,single_raster)
single_raster.WriteToBinary = new_instancemethod(_raster.single_raster_WriteToBinary,None,single_raster)
single_raster.ToInt = new_instancemethod(_raster.single_raster_ToInt,None,single_raster)
single_raster.ToFloat = new_instancemethod(_raster.single_raster_ToFloat,None,single_raster)
single_raster.ToDouble = new_instancemethod(_raster.single_raster_ToDouble,None,single_raster)
single_raster.adress = new_instancemethod(_raster.single_raster_adress,None,single_raster)
single_raster.focal_min = new_instancemethod(_raster.single_raster_focal_min,None,single_raster)
single_raster.focal_max = new_instancemethod(_raster.single_raster_focal_max,None,single_raster)
single_raster.focal_mean = new_instancemethod(_raster.single_raster_focal_mean,None,single_raster)
single_raster.focal_stdev = new_instancemethod(_raster.single_raster_focal_stdev,None,single_raster)
single_raster.focal_majority = new_instancemethod(_raster.single_raster_focal_majority,None,single_raster)
single_raster.focal_mean_difference = new_instancemethod(_raster.single_raster_focal_mean_difference,None,single_raster)
single_raster.clone = new_instancemethod(_raster.single_raster_clone,None,single_raster)
single_raster.GetData = new_instancemethod(_raster.single_raster_GetData,None,single_raster)
single_raster.ToBuffer = new_instancemethod(_raster.single_raster_ToBuffer,None,single_raster)
single_raster_swigregister = _raster.single_raster_swigregister
single_raster_swigregister(single_raster)

try:
    import numpy
except ImportError:
    numpy=None
try:
    import matplotlib.pyplot as pyplot
except ImportError:
    pyplot=None
class Raster:
    def __init__(self,filename=None,dtype="f",shape=None,corner=(0,0),cellsize=(1,1),NoData=-9999,raster=None):
        """ Creates a raster
           filename = The filename of an raster file in the ESRI ASCII format
           dtype = shortcut for the data type, either 'f' for float, 's' for float32 or 'i' for integer (32 bit)
        The next parameters have no meaning, if a filename was given
           shape = the dimensins of the raster, a tuple of integers (rows,columns)
           corner = (x,y) the position of the lower left corner in world coordinates
           cellsize = the cellsize in map units, can be a tuple with one vlaue for x direction and another for the y direction
           NoData = Value to indicate no data
        The raster keyword is only for internal usage
        """
        self.dtype=dtype
        if (raster):
            self.raster=raster
            return
        if (dtype in ["f","f8"]):
            rtype=double_raster
        elif (dtype in ["s","f4"]):
            rtype=single_raster
        elif (dtype in ["i","i4"]):
            rtype=int_raster
        else:
            raise ValueError("Data type most be f,s or i")
        if (filename):
            self.raster=rtype(filename)
        else:
            try:
                row,col=shape
            except:
                raise ValueError("If no filename is given the dimensions of the raster has to be specified as a tuple, e.g. (10,10)")
            try:
                x_size,y_size=cellsize
            except:
                x_size=y_size=cellsize
            self.raster=rtype(col,row,corner[0],corner[1],x_size,y_size,NoData,NoData)
    @property
    def llcorner(self):
        "The lower left corner (x,y)"
        return (self.raster.Xllcorner(),self.raster.Yllcorner())
    @property
    def cellsize(self):
        "The cell size (x,y) in map coordinates"
        return (self.raster.XCellsize(),self.raster.YCellsize())
    @property
    def shape(self):
        "The tuple (rows,cols)"
        return (self.raster.RowCount(),self.raster.ColumnCount())
    @property
    def extent(self):
        "The extent of the raster (width,height) in map coordinates"
        return (self.cellsize[0]*self.shape[1],
                self.cellsize[1]*self.shape[0])
    def neighbors(self,x,y):
        """ Returns a list of the neighbors to the given position
        x,y are intepreted as real coordinates, if they are floating point numbers,
            otherwise they are interpreted as column and row of the raster
        Result: A tuple for each adjacent neighbor of type (column,row,value,distance,x_direction,y_direction)
        """
        if type(x) is float or type(y) is float:
            col,row=colrow(x,y)
        else:
            col,row=int(x),int(y)
        x_pos=y_pos=[-1,0,1]
        res=[]
        for y in y_pos:
            for x in x_pos:
                v=self[col+x,row+y]
                if (x or y) and v!=self.nodata:   # Exclude the cell itself and nodata cells
                    distance=sqrt((x*self.cellsize[0])**2+(y*self.cellsize[1])**2)
                    res.append((col+x,row+y,v,distance,x,y))
        return res
    def xy(self,col,row):
        "Gets a position in world coordinates from a position in the dataset (col,row)->(x,y)"
        return (col*self.cellsize[0]+self.corner[0],(self.shape[0]-row)*self.cellsize[1]+self.corner[1])
    def colrow(self,x,y):
        "Gets a position in the dataset from world coordinates (x,y)->(colr,row)"
        return (int((x-self.corner[0])/self.cellsize[0]),int(self.shape[0]-(y-self.corner[1])/self.cellsize[1]))
    @property
    def nodata(self):
        "Gets the no data value of the raster"
        return self.raster.NoData()
    @property
    def rows(self):
        "Gets the number of rows in the data set"
        for r in range(self.shape[0]):
            yield [self.raster.GetData(r,c) for c in range(self.shape[1])]
    @property
    def cells(self):
        """ Returns an iterator over all cells of the raster, that returns the tuple (x,y,value,area,column,row) """
        for r in range(self.shape[0]):
            for c in range(self.shape[1]):
                if self[c,r]!=self.nodata:
                    x=self.llcorner[0]+self.cellsize[0]*(c+0.5)
                    y=self.llcorner[1]+self.cellsize[1]*(self.shape[0]-(r+0.5))
                    v=self[c,r]
                    area=self.cellsize[0]*self.cellsize[1]
                    yield((x,y,v,area,c,r))
    def __iter__(self):
        for r in range(self.shape[0]):
            for c in range(self.shape[1]):
                yield c,r
    @property 
    def values(self):
        """Returns a dictionary containing all distinct values and the number of their appearances """
        res={}
        for c,r in self:
            v=self[c,r]
            if v==self.nodata: continue
            if v in res:
                res[v]+=1
            else:
                res[v]=1
        return res
    def __getitem__(self,pos):
        if hasattr(pos,"__len__"):
            if (len(pos)==2):
                return self.raster.GetData(*pos)
        raise ValueError("Only two coordinates, x and y can be used for __getitem__")
    def __setitem__(self,pos,value):
        if hasattr(pos,"__len__"):
            if (len(pos)==2):
                return self.raster.SetData(pos[0],pos[1],value)
        raise ValueError("Only two coordinates, x and y can be used for __getitem__")
    def __call__(self,x,y,z=0):
        x=float(x) if type(x) is int else x
        y=float(y) if type(y) is int else y
        v=self.raster.GetData(x,y)
        return v if not v==self.nodata else None
    def histogram(self,bins=100):
        return self.raster.histogram(bins)
    @property
    def statistics(self):
        return self.raster.statistics()
    def save(self,filename,binary=False):
        if binary:
            self.raster.WriteToBinary(filename)
        else:
            self.raster.WriteToASCFile(filename)
    def focal_min(self,n=3):
        """ Focal minimum function: each cell of the new raster gets the minimum value of the surrounding n x n matrix"""
        res=self.raster.focal_min(n)
        return Raster(dtype=self.dtype,raster=res)
    def focal_max(self,n=3):
        """ Focal maximum function: each cell of the new raster gets the maximum value of the surrounding n x n matrix"""
        res=self.raster.focal_max(n)
        return Raster(self,raster=res)
    def focal_mean(self,n=3):
        """ Focal mean function: each cell of the new raster gets the mean value of the surrounding n x n matrix"""
        res=self.raster.focal_mean(n)
        return Raster(dtype=self.dtype,raster=res)
    def focal_stdev(self,n=3):
        """ Focal standard deviation function: each cell of the new raster gets the standard deviation value of the surrounding n x n matrix"""
        res=self.raster.focal_stdev(n)
        return Raster(dtype=self.dtype,raster=res)
    def focal_majority(self,n=3):
        """ Focal majority function: each cell of the new raster gets the most frequent value of the surrounding n x n matrix. 
            If each value is unique in the matrix, the result is the old value"""
        res=self.raster.focal_majority(n)
        return Raster(dtype=self.dtype,raster=res)
    def focal_mean_difference(self,n=3):
        """ Optimised shortcut for =r-r.focal_mean(n) """
        res=self.raster.focal_mean_difference(n)
        return Raster(dtype=self.dtype,raster=res)
    def to_int(self):
        """ Creates a new raster of type integer from self (int 32)"""
        res=self.raster.ToInt()
        return Raster(dtype=self.dtype,raster=res)
    def to_double(self):
        """ Creates a new raster of type double (floating point 64) from self """
        res=self.raster.ToDouble()
        return Raster(dtype=self.dtype,raster=res)
    def to_single(self):
        """ Creates a new raster of type single (floating point 32) from self """
        res=self.raster.ToSingle()
        return Raster(dtype=self.dtype,raster=res)
    def clone(self):
        """ Creates a copy of this raster """
        res=self.raster.clone()
        return Raster(dtype=self.dtype,raster=res)
    def __iadd__(self,other):
        if type(other) is type(self):
            self.raster+=other.raster
        else:
            try:
               self.raster+=other
            except TypeError:
               raise TypeError("Can't add a %s to this raster %s" % (typename(other),typename(self.raster)))
    def __imul__(self,other):
        if type(other) is type(self):
            self.raster*=other.raster
        else:
            try:
               self.raster*=other
            except TypeError:
               raise TypeError("Can't add a %s to this raster %s" % (typename(other),typename(self.raster)))
    def __isub__(self,other):
        if type(other) is type(self):
            self.raster-=other.raster
        else:
            try:
               self.raster-=other
            except TypeError:
               raise TypeError("Can't add a %s to this raster %s" % (typename(other),typename(self.raster)))
    def __idiv__(self,other):
        if type(other) is type(self):
            self.raster/=other.raster
        else:
            try:
               self.raster/=other
            except TypeError:
               raise TypeError("Can't add a %s to this raster %s" % (typename(other),typename(self.raster)))
    def __add__(self,other):
        if type(other) is type(self):
            return Raster(dtype=self.dtype,raster=self.raster+other.raster)
        else:
            try:
               return Raster(dtype=self.dtype,raster=self.raster+other)
            except TypeError:
               raise TypeError("Can't add a %s to this raster %s" % (typename(other),typename(self.raster)))
    def __mul__(self,other):
        if type(other) is type(self):
            return Raster(dtype=self.dtype,raster=self.raster*other.raster)
        else:
            try:
               return Raster(dtype=self.dtype,raster=self.raster*other)
            except TypeError:
               raise TypeError("Can't add a %s to this raster %s" % (typename(other),typename(self.raster)))
    def __sub__(self,other):
        if type(other) is type(self):
            return Raster(dtype=self.dtype,raster=self.raster-other.raster)
        else:
            try:
               return Raster(dtype=self.dtype,raster=self.raster-other)
            except TypeError:
               raise TypeError("Can't add a %s to this raster %s" % (typename(other),typename(self.raster)))
    def __div__(self,other):
        if type(other) is type(self):
            return Raster(dtype=self.dtype,raster=self.raster/other.raster)
        else:
            try:
               return Raster(dtype=self.dtype,raster=self.raster/other)
            except TypeError:
               raise TypeError("Can't add a %s to this raster %s" % (typename(other),typename(self.raster)))
    def __radd__(self,other):
        if type(other) is type(self):
            return Raster(dtype=self.dtype,raster=self.raster+other.raster)
        else:
            try:
               return Raster(dtype=self.dtype,raster=self.raster+other)
            except TypeError:
               raise TypeError("Can't add a %s to this raster %s" % (typename(other),typename(self.raster)))
    def __rmul__(self,other):
        if type(other) is type(self):
            return Raster(dtype=self.dtype,raster=self.raster*other.raster)
        else:
            try:
               return Raster(dtype=self.dtype,raster=self.raster*other)
            except TypeError:
               raise TypeError("Can't add a %s to this raster %s" % (typename(other),typename(self.raster)))
    def __rsub__(self,other):
        if type(other) is type(self):
            return Raster(dtype=self.dtype,raster=self.raster-other.raster)
        else:
            try:
               return Raster(dtype=self.dtype,raster=self.raster-other)
            except TypeError:
               raise TypeError("Can't add a %s to this raster %s" % (typename(other),typename(self.raster)))
    def __rdiv__(self,other):
        if type(other) is type(self):
            return Raster(dtype=self.dtype,raster=self.raster/other.raster)
        else:
            try:
               return Raster(dtype=self.dtype,raster=self.raster/other)
            except TypeError:
               raise TypeError("Can't add a %s to this raster %s" % (typename(other),typename(self.raster)))
    
    @property
    def __array_interface__(self):
        "Returns the array interface for the raster."
        types={'i':'|i4','f':'|f8','s':'|f4'}
        return dict(shape=self.shape,data=(self.raster.adress(),0),typestr=types[self.dtype])
    def as_array(self):
        if numpy:                
            res=numpy.asarray(self)
            if self.dtype=='i':
                mres=numpy.ma.masked_equal(res,self.nodata)
            else:
                mres=numpy.ma.masked_values(res,self.nodata)
            return mres
        else:
            raise NotImplementedError("as_array needs an installation of numpy to work!")
    def draw(self,cmap=None,vmin=None,vmax=None,hold=1,interpolation='nearest',**kwargs):
        if pyplot:
            if cmap is None:
                cmap=pyplot.cm.jet
            if vmin is None:
                vmin=self.statistics.min
            if vmax is None:
                vmax=self.statistics.max
            pyplot.imshow(self.as_array(),cmap,interpolation=interpolation,
                          aspect='equal',vmin=vmin,vmax=vmax,hold=hold,
                          extent=(self.llcorner[0],self.llcorner[0]+self.extent[0],self.llcorner[1],self.llcorner[1]+self.extent[1]),
                          **kwargs)
        else:
            raise NotImplementedError("draw needs an installation of matplotlib to work")
    def __repr__(self):
        stat=self.statistics
        fmt="Raster<%s>: n=%i,min=%g,mean=%g,max=%g,stdev=%g,row,col=%s,cellsize=(%g,%g)"
        return fmt % (self.dtype,stat.count,stat.min,stat.mean,stat.max,stat.stdev,
                      self.shape,self.cellsize[0],self.cellsize[1])




